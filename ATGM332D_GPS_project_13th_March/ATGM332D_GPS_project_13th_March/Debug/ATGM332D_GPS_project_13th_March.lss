
ATGM332D_GPS_project_13th_March.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d11c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000d11c  0000d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a60  20000000  0000d124  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cb4  20000a60  0000db84  00020a60  2**2
                  ALLOC
  4 .stack        00002004  20001714  0000e838  00020a60  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020a88  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004799e  00000000  00000000  00020ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006e7d  00000000  00000000  0006847f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001bc87  00000000  00000000  0006f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001418  00000000  00000000  0008af83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001e28  00000000  00000000  0008c39b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023d21  00000000  00000000  0008e1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002286a  00000000  00000000  000b1ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093b5f  00000000  00000000  000d474e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000045e8  00000000  00000000  001682b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 37 00 20 3d 01 00 00 39 01 00 00 39 01 00 00     .7. =...9...9...
	...
      2c:	39 01 00 00 00 00 00 00 00 00 00 00 39 01 00 00     9...........9...
      3c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      4c:	39 01 00 00 49 29 00 00 39 01 00 00 39 01 00 00     9...I)..9...9...
      5c:	a1 43 00 00 39 01 00 00 39 01 00 00 99 2d 00 00     .C..9...9....-..
      6c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      7c:	39 01 00 00 39 01 00 00 39 01 00 00 a1 32 00 00     9...9...9....2..
      8c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      9c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      ac:	39 01 00 00 00 00 00 00                             9.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a60 	.word	0x20000a60
      d4:	00000000 	.word	0x00000000
      d8:	0000d124 	.word	0x0000d124

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a64 	.word	0x20000a64
     108:	0000d124 	.word	0x0000d124
     10c:	0000d124 	.word	0x0000d124
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b04      	ldr	r3, [pc, #16]	; (128 <atmel_start_init+0x14>)
     118:	4798      	blx	r3
	gfx_mono_init();
     11a:	4b04      	ldr	r3, [pc, #16]	; (12c <atmel_start_init+0x18>)
     11c:	4798      	blx	r3
	usb_init();
     11e:	4b04      	ldr	r3, [pc, #16]	; (130 <atmel_start_init+0x1c>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b04      	ldr	r3, [pc, #16]	; (134 <atmel_start_init+0x20>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000005a9 	.word	0x000005a9
     12c:	0000100d 	.word	0x0000100d
     130:	00005879 	.word	0x00005879
     134:	00004d19 	.word	0x00004d19

00000138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     138:	e7fe      	b.n	138 <Dummy_Handler>
	...

0000013c <Reset_Handler>:
{
     13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     13e:	4a2a      	ldr	r2, [pc, #168]	; (1e8 <Reset_Handler+0xac>)
     140:	4b2a      	ldr	r3, [pc, #168]	; (1ec <Reset_Handler+0xb0>)
     142:	429a      	cmp	r2, r3
     144:	d011      	beq.n	16a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     146:	001a      	movs	r2, r3
     148:	4b29      	ldr	r3, [pc, #164]	; (1f0 <Reset_Handler+0xb4>)
     14a:	429a      	cmp	r2, r3
     14c:	d20d      	bcs.n	16a <Reset_Handler+0x2e>
     14e:	4a29      	ldr	r2, [pc, #164]	; (1f4 <Reset_Handler+0xb8>)
     150:	3303      	adds	r3, #3
     152:	1a9b      	subs	r3, r3, r2
     154:	089b      	lsrs	r3, r3, #2
     156:	3301      	adds	r3, #1
     158:	009b      	lsls	r3, r3, #2
     15a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     15c:	4823      	ldr	r0, [pc, #140]	; (1ec <Reset_Handler+0xb0>)
     15e:	4922      	ldr	r1, [pc, #136]	; (1e8 <Reset_Handler+0xac>)
     160:	588c      	ldr	r4, [r1, r2]
     162:	5084      	str	r4, [r0, r2]
     164:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     166:	429a      	cmp	r2, r3
     168:	d1fa      	bne.n	160 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     16a:	4a23      	ldr	r2, [pc, #140]	; (1f8 <Reset_Handler+0xbc>)
     16c:	4b23      	ldr	r3, [pc, #140]	; (1fc <Reset_Handler+0xc0>)
     16e:	429a      	cmp	r2, r3
     170:	d20a      	bcs.n	188 <Reset_Handler+0x4c>
     172:	43d3      	mvns	r3, r2
     174:	4921      	ldr	r1, [pc, #132]	; (1fc <Reset_Handler+0xc0>)
     176:	185b      	adds	r3, r3, r1
     178:	2103      	movs	r1, #3
     17a:	438b      	bics	r3, r1
     17c:	3304      	adds	r3, #4
     17e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     180:	2100      	movs	r1, #0
     182:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     184:	4293      	cmp	r3, r2
     186:	d1fc      	bne.n	182 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     188:	4a1d      	ldr	r2, [pc, #116]	; (200 <Reset_Handler+0xc4>)
     18a:	21ff      	movs	r1, #255	; 0xff
     18c:	4b1d      	ldr	r3, [pc, #116]	; (204 <Reset_Handler+0xc8>)
     18e:	438b      	bics	r3, r1
     190:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     192:	39fd      	subs	r1, #253	; 0xfd
     194:	2390      	movs	r3, #144	; 0x90
     196:	005b      	lsls	r3, r3, #1
     198:	4a1b      	ldr	r2, [pc, #108]	; (208 <Reset_Handler+0xcc>)
     19a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     19c:	4a1b      	ldr	r2, [pc, #108]	; (20c <Reset_Handler+0xd0>)
     19e:	78d3      	ldrb	r3, [r2, #3]
     1a0:	2503      	movs	r5, #3
     1a2:	43ab      	bics	r3, r5
     1a4:	2402      	movs	r4, #2
     1a6:	4323      	orrs	r3, r4
     1a8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     1aa:	78d3      	ldrb	r3, [r2, #3]
     1ac:	270c      	movs	r7, #12
     1ae:	43bb      	bics	r3, r7
     1b0:	2608      	movs	r6, #8
     1b2:	4333      	orrs	r3, r6
     1b4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <Reset_Handler+0xd4>)
     1b8:	7b98      	ldrb	r0, [r3, #14]
     1ba:	2230      	movs	r2, #48	; 0x30
     1bc:	4390      	bics	r0, r2
     1be:	2220      	movs	r2, #32
     1c0:	4310      	orrs	r0, r2
     1c2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1c4:	7b99      	ldrb	r1, [r3, #14]
     1c6:	43b9      	bics	r1, r7
     1c8:	4331      	orrs	r1, r6
     1ca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1cc:	7b9a      	ldrb	r2, [r3, #14]
     1ce:	43aa      	bics	r2, r5
     1d0:	4322      	orrs	r2, r4
     1d2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1d4:	4a0f      	ldr	r2, [pc, #60]	; (214 <Reset_Handler+0xd8>)
     1d6:	6853      	ldr	r3, [r2, #4]
     1d8:	2180      	movs	r1, #128	; 0x80
     1da:	430b      	orrs	r3, r1
     1dc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1de:	4b0e      	ldr	r3, [pc, #56]	; (218 <Reset_Handler+0xdc>)
     1e0:	4798      	blx	r3
        main();
     1e2:	4b0e      	ldr	r3, [pc, #56]	; (21c <Reset_Handler+0xe0>)
     1e4:	4798      	blx	r3
     1e6:	e7fe      	b.n	1e6 <Reset_Handler+0xaa>
     1e8:	0000d124 	.word	0x0000d124
     1ec:	20000000 	.word	0x20000000
     1f0:	20000a60 	.word	0x20000a60
     1f4:	20000004 	.word	0x20000004
     1f8:	20000a60 	.word	0x20000a60
     1fc:	20001714 	.word	0x20001714
     200:	e000ed00 	.word	0xe000ed00
     204:	00000000 	.word	0x00000000
     208:	41007000 	.word	0x41007000
     20c:	41005000 	.word	0x41005000
     210:	41004800 	.word	0x41004800
     214:	41004000 	.word	0x41004000
     218:	00007869 	.word	0x00007869
     21c:	00004b05 	.word	0x00004b05

00000220 <EXTERNAL_IRQ_0_init>:
static uint8_t GPS_UART_buffer[GPS_UART_BUFFER_SIZE];

struct usart_sync_descriptor TARGET_IO;

void EXTERNAL_IRQ_0_init(void)
{
     220:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     222:	4a10      	ldr	r2, [pc, #64]	; (264 <EXTERNAL_IRQ_0_init+0x44>)
     224:	4b10      	ldr	r3, [pc, #64]	; (268 <EXTERNAL_IRQ_0_init+0x48>)
     226:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     228:	22c0      	movs	r2, #192	; 0xc0
     22a:	05d2      	lsls	r2, r2, #23
     22c:	2020      	movs	r0, #32
     22e:	6050      	str	r0, [r2, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     230:	4b0e      	ldr	r3, [pc, #56]	; (26c <EXTERNAL_IRQ_0_init+0x4c>)
     232:	490f      	ldr	r1, [pc, #60]	; (270 <EXTERNAL_IRQ_0_init+0x50>)
     234:	6299      	str	r1, [r3, #40]	; 0x28
     236:	490f      	ldr	r1, [pc, #60]	; (274 <EXTERNAL_IRQ_0_init+0x54>)
     238:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     23a:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     23c:	2145      	movs	r1, #69	; 0x45
     23e:	5c5c      	ldrb	r4, [r3, r1]
     240:	2504      	movs	r5, #4
     242:	432c      	orrs	r4, r5
     244:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     246:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     248:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     24a:	381f      	subs	r0, #31
     24c:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     24e:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     250:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     252:	3913      	subs	r1, #19
     254:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     256:	300e      	adds	r0, #14
     258:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     25a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Button, PINMUX_PA05A_EIC_EXTINT5);

	ext_irq_init();
     25c:	4b06      	ldr	r3, [pc, #24]	; (278 <EXTERNAL_IRQ_0_init+0x58>)
     25e:	4798      	blx	r3
}
     260:	bd70      	pop	{r4, r5, r6, pc}
     262:	46c0      	nop			; (mov r8, r8)
     264:	00004105 	.word	0x00004105
     268:	40000c00 	.word	0x40000c00
     26c:	41004400 	.word	0x41004400
     270:	40020020 	.word	0x40020020
     274:	c0020000 	.word	0xc0020000
     278:	00001899 	.word	0x00001899

0000027c <GPS_UART_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     27c:	4a04      	ldr	r2, [pc, #16]	; (290 <GPS_UART_CLOCK_init+0x14>)
     27e:	6a13      	ldr	r3, [r2, #32]
     280:	2108      	movs	r1, #8
     282:	430b      	orrs	r3, r1
     284:	6213      	str	r3, [r2, #32]
     286:	4a03      	ldr	r2, [pc, #12]	; (294 <GPS_UART_CLOCK_init+0x18>)
     288:	4b03      	ldr	r3, [pc, #12]	; (298 <GPS_UART_CLOCK_init+0x1c>)
     28a:	805a      	strh	r2, [r3, #2]
void GPS_UART_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     28c:	4770      	bx	lr
     28e:	46c0      	nop			; (mov r8, r8)
     290:	40000400 	.word	0x40000400
     294:	00004115 	.word	0x00004115
     298:	40000c00 	.word	0x40000c00

0000029c <GPS_UART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void GPS_UART_PORT_init()
{
     29c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <GPS_UART_PORT_init+0x3c>)
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a4:	2501      	movs	r5, #1
     2a6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a8:	2401      	movs	r4, #1
     2aa:	4321      	orrs	r1, r4
     2ac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ae:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2b0:	2038      	movs	r0, #56	; 0x38
     2b2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2b4:	3a41      	subs	r2, #65	; 0x41
     2b6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2b8:	3a0d      	subs	r2, #13
     2ba:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2bc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2be:	2151      	movs	r1, #81	; 0x51
     2c0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2c2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2c4:	4322      	orrs	r2, r4
     2c6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ca:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2cc:	3942      	subs	r1, #66	; 0x42
     2ce:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2d0:	3111      	adds	r1, #17
     2d2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2d4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     2d6:	bd30      	pop	{r4, r5, pc}
     2d8:	41004400 	.word	0x41004400

000002dc <GPS_UART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void GPS_UART_init(void)
{
     2dc:	b510      	push	{r4, lr}
     2de:	b082      	sub	sp, #8
	GPS_UART_CLOCK_init();
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <GPS_UART_init+0x20>)
     2e2:	4798      	blx	r3
	usart_async_init(&GPS_UART, SERCOM1, GPS_UART_buffer, GPS_UART_BUFFER_SIZE, (void *)NULL);
     2e4:	2300      	movs	r3, #0
     2e6:	9300      	str	r3, [sp, #0]
     2e8:	3310      	adds	r3, #16
     2ea:	4a05      	ldr	r2, [pc, #20]	; (300 <GPS_UART_init+0x24>)
     2ec:	4905      	ldr	r1, [pc, #20]	; (304 <GPS_UART_init+0x28>)
     2ee:	4806      	ldr	r0, [pc, #24]	; (308 <GPS_UART_init+0x2c>)
     2f0:	4c06      	ldr	r4, [pc, #24]	; (30c <GPS_UART_init+0x30>)
     2f2:	47a0      	blx	r4
	GPS_UART_PORT_init();
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <GPS_UART_init+0x34>)
     2f6:	4798      	blx	r3
}
     2f8:	b002      	add	sp, #8
     2fa:	bd10      	pop	{r4, pc}
     2fc:	0000027d 	.word	0x0000027d
     300:	20000a7c 	.word	0x20000a7c
     304:	42000c00 	.word	0x42000c00
     308:	200014cc 	.word	0x200014cc
     30c:	00001d65 	.word	0x00001d65
     310:	0000029d 	.word	0x0000029d

00000314 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     314:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     316:	4b0e      	ldr	r3, [pc, #56]	; (350 <TARGET_IO_PORT_init+0x3c>)
     318:	2256      	movs	r2, #86	; 0x56
     31a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	2501      	movs	r5, #1
     31e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     320:	2401      	movs	r4, #1
     322:	4321      	orrs	r1, r4
     324:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     326:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	203b      	movs	r0, #59	; 0x3b
     32a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     32c:	3a47      	subs	r2, #71	; 0x47
     32e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     330:	3a0d      	subs	r2, #13
     332:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     334:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     336:	2157      	movs	r1, #87	; 0x57
     338:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     33a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33c:	4322      	orrs	r2, r4
     33e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     340:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     342:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     344:	3948      	subs	r1, #72	; 0x48
     346:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     348:	3111      	adds	r1, #17
     34a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     34e:	bd30      	pop	{r4, r5, pc}
     350:	41004400 	.word	0x41004400

00000354 <TARGET_IO_CLOCK_init>:
     354:	4a04      	ldr	r2, [pc, #16]	; (368 <TARGET_IO_CLOCK_init+0x14>)
     356:	6a13      	ldr	r3, [r2, #32]
     358:	2120      	movs	r1, #32
     35a:	430b      	orrs	r3, r1
     35c:	6213      	str	r3, [r2, #32]
     35e:	4a03      	ldr	r2, [pc, #12]	; (36c <TARGET_IO_CLOCK_init+0x18>)
     360:	4b03      	ldr	r3, [pc, #12]	; (370 <TARGET_IO_CLOCK_init+0x1c>)
     362:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400
     36c:	00004017 	.word	0x00004017
     370:	40000c00 	.word	0x40000c00

00000374 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     374:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <TARGET_IO_init+0x18>)
     378:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM3, (void *)NULL);
     37a:	2200      	movs	r2, #0
     37c:	4904      	ldr	r1, [pc, #16]	; (390 <TARGET_IO_init+0x1c>)
     37e:	4805      	ldr	r0, [pc, #20]	; (394 <TARGET_IO_init+0x20>)
     380:	4b05      	ldr	r3, [pc, #20]	; (398 <TARGET_IO_init+0x24>)
     382:	4798      	blx	r3
	TARGET_IO_PORT_init();
     384:	4b05      	ldr	r3, [pc, #20]	; (39c <TARGET_IO_init+0x28>)
     386:	4798      	blx	r3
}
     388:	bd10      	pop	{r4, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	00000355 	.word	0x00000355
     390:	42001400 	.word	0x42001400
     394:	200014c0 	.word	0x200014c0
     398:	0000202d 	.word	0x0000202d
     39c:	00000315 	.word	0x00000315

000003a0 <SPI_OLED_PORT_init>:

void SPI_OLED_PORT_init(void)
{
     3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a2:	46de      	mov	lr, fp
     3a4:	4657      	mov	r7, sl
     3a6:	464e      	mov	r6, r9
     3a8:	4645      	mov	r5, r8
     3aa:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ac:	24c0      	movs	r4, #192	; 0xc0
     3ae:	05e4      	lsls	r4, r4, #23
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	0252      	lsls	r2, r2, #9
     3b4:	2384      	movs	r3, #132	; 0x84
     3b6:	50e2      	str	r2, [r4, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b8:	4b2c      	ldr	r3, [pc, #176]	; (46c <SPI_OLED_PORT_init+0xcc>)
     3ba:	20a8      	movs	r0, #168	; 0xa8
     3bc:	4a2c      	ldr	r2, [pc, #176]	; (470 <SPI_OLED_PORT_init+0xd0>)
     3be:	501a      	str	r2, [r3, r0]
     3c0:	4a2c      	ldr	r2, [pc, #176]	; (474 <SPI_OLED_PORT_init+0xd4>)
     3c2:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c4:	21d0      	movs	r1, #208	; 0xd0
     3c6:	5c5a      	ldrb	r2, [r3, r1]
     3c8:	2504      	movs	r5, #4
     3ca:	43aa      	bics	r2, r5
     3cc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ce:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d0:	2601      	movs	r6, #1
     3d2:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d4:	2501      	movs	r5, #1
     3d6:	432a      	orrs	r2, r5
     3d8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3da:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3dc:	3918      	subs	r1, #24
     3de:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3e0:	270f      	movs	r7, #15
     3e2:	46b8      	mov	r8, r7
     3e4:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     3e6:	3f0d      	subs	r7, #13
     3e8:	433a      	orrs	r2, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ea:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3ec:	2294      	movs	r2, #148	; 0x94
     3ee:	4694      	mov	ip, r2
     3f0:	2280      	movs	r2, #128	; 0x80
     3f2:	03d2      	lsls	r2, r2, #15
     3f4:	4661      	mov	r1, ip
     3f6:	5062      	str	r2, [r4, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3f8:	390c      	subs	r1, #12
     3fa:	468a      	mov	sl, r1
     3fc:	5062      	str	r2, [r4, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fe:	2280      	movs	r2, #128	; 0x80
     400:	05d2      	lsls	r2, r2, #23
     402:	4693      	mov	fp, r2
     404:	501a      	str	r2, [r3, r0]
     406:	491c      	ldr	r1, [pc, #112]	; (478 <SPI_OLED_PORT_init+0xd8>)
     408:	5019      	str	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40a:	22d6      	movs	r2, #214	; 0xd6
     40c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     40e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     410:	4329      	orrs	r1, r5
     412:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     414:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     416:	21bb      	movs	r1, #187	; 0xbb
     418:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     41a:	4647      	mov	r7, r8
     41c:	43ba      	bics	r2, r7
     41e:	4690      	mov	r8, r2
	tmp |= PORT_PMUX_PMUXE(data);
     420:	2203      	movs	r2, #3
     422:	4691      	mov	r9, r2
     424:	4642      	mov	r2, r8
     426:	464f      	mov	r7, r9
     428:	433a      	orrs	r2, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     42a:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     42c:	2280      	movs	r2, #128	; 0x80
     42e:	0412      	lsls	r2, r2, #16
     430:	4690      	mov	r8, r2
     432:	4662      	mov	r2, ip
     434:	4647      	mov	r7, r8
     436:	50a7      	str	r7, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     438:	4642      	mov	r2, r8
     43a:	4657      	mov	r7, sl
     43c:	51e2      	str	r2, [r4, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	465a      	mov	r2, fp
     440:	501a      	str	r2, [r3, r0]
     442:	4a0e      	ldr	r2, [pc, #56]	; (47c <SPI_OLED_PORT_init+0xdc>)
     444:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     446:	302f      	adds	r0, #47	; 0x2f
     448:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     44a:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44c:	432a      	orrs	r2, r5
     44e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     450:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     454:	38c8      	subs	r0, #200	; 0xc8
     456:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     458:	3021      	adds	r0, #33	; 0x21
     45a:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45c:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(PB23, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
}
     45e:	bc3c      	pop	{r2, r3, r4, r5}
     460:	4690      	mov	r8, r2
     462:	4699      	mov	r9, r3
     464:	46a2      	mov	sl, r4
     466:	46ab      	mov	fp, r5
     468:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	41004400 	.word	0x41004400
     470:	40020000 	.word	0x40020000
     474:	c0020001 	.word	0xc0020001
     478:	c0000040 	.word	0xc0000040
     47c:	c0000080 	.word	0xc0000080

00000480 <SPI_OLED_CLOCK_init>:
     480:	4a04      	ldr	r2, [pc, #16]	; (494 <SPI_OLED_CLOCK_init+0x14>)
     482:	6a13      	ldr	r3, [r2, #32]
     484:	2180      	movs	r1, #128	; 0x80
     486:	430b      	orrs	r3, r1
     488:	6213      	str	r3, [r2, #32]
     48a:	4a03      	ldr	r2, [pc, #12]	; (498 <SPI_OLED_CLOCK_init+0x18>)
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <SPI_OLED_CLOCK_init+0x1c>)
     48e:	805a      	strh	r2, [r3, #2]

void SPI_OLED_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     490:	4770      	bx	lr
     492:	46c0      	nop			; (mov r8, r8)
     494:	40000400 	.word	0x40000400
     498:	00004019 	.word	0x00004019
     49c:	40000c00 	.word	0x40000c00

000004a0 <SPI_OLED_init>:

void SPI_OLED_init(void)
{
     4a0:	b510      	push	{r4, lr}
	SPI_OLED_CLOCK_init();
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <SPI_OLED_init+0x14>)
     4a4:	4798      	blx	r3
	spi_m_sync_init(&SPI_OLED, SERCOM5);
     4a6:	4904      	ldr	r1, [pc, #16]	; (4b8 <SPI_OLED_init+0x18>)
     4a8:	4804      	ldr	r0, [pc, #16]	; (4bc <SPI_OLED_init+0x1c>)
     4aa:	4b05      	ldr	r3, [pc, #20]	; (4c0 <SPI_OLED_init+0x20>)
     4ac:	4798      	blx	r3
	SPI_OLED_PORT_init();
     4ae:	4b05      	ldr	r3, [pc, #20]	; (4c4 <SPI_OLED_init+0x24>)
     4b0:	4798      	blx	r3
}
     4b2:	bd10      	pop	{r4, pc}
     4b4:	00000481 	.word	0x00000481
     4b8:	42001c00 	.word	0x42001c00
     4bc:	2000151c 	.word	0x2000151c
     4c0:	00001925 	.word	0x00001925
     4c4:	000003a1 	.word	0x000003a1

000004c8 <delay_driver_init>:

void delay_driver_init(void)
{
     4c8:	b510      	push	{r4, lr}
	delay_init(SysTick);
     4ca:	4802      	ldr	r0, [pc, #8]	; (4d4 <delay_driver_init+0xc>)
     4cc:	4b02      	ldr	r3, [pc, #8]	; (4d8 <delay_driver_init+0x10>)
     4ce:	4798      	blx	r3
}
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	e000e010 	.word	0xe000e010
     4d8:	0000180d 	.word	0x0000180d

000004dc <TARGET_USB_PORT_init>:

	timer_init(&TIMER_0, TC3, _tc_get_timer());
}

void TARGET_USB_PORT_init(void)
{
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	46c6      	mov	lr, r8
     4e0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4e2:	24c0      	movs	r4, #192	; 0xc0
     4e4:	05e4      	lsls	r4, r4, #23
     4e6:	2280      	movs	r2, #128	; 0x80
     4e8:	0452      	lsls	r2, r2, #17
     4ea:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ec:	4b1a      	ldr	r3, [pc, #104]	; (558 <TARGET_USB_PORT_init+0x7c>)
     4ee:	2780      	movs	r7, #128	; 0x80
     4f0:	05ff      	lsls	r7, r7, #23
     4f2:	629f      	str	r7, [r3, #40]	; 0x28
     4f4:	4919      	ldr	r1, [pc, #100]	; (55c <TARGET_USB_PORT_init+0x80>)
     4f6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f8:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4fa:	2058      	movs	r0, #88	; 0x58
     4fc:	5c19      	ldrb	r1, [r3, r0]
     4fe:	2204      	movs	r2, #4
     500:	4690      	mov	r8, r2
     502:	4391      	bics	r1, r2
     504:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     506:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     508:	2601      	movs	r6, #1
     50a:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     50c:	2501      	movs	r5, #1
     50e:	4329      	orrs	r1, r5
     510:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     512:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     514:	381c      	subs	r0, #28
     516:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     518:	320b      	adds	r2, #11
     51a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     51c:	3a09      	subs	r2, #9
     51e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     520:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     522:	2180      	movs	r1, #128	; 0x80
     524:	0489      	lsls	r1, r1, #18
     526:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     528:	629f      	str	r7, [r3, #40]	; 0x28
     52a:	4f0d      	ldr	r7, [pc, #52]	; (560 <TARGET_USB_PORT_init+0x84>)
     52c:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52e:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     530:	2159      	movs	r1, #89	; 0x59
     532:	5c5c      	ldrb	r4, [r3, r1]
     534:	4642      	mov	r2, r8
     536:	4394      	bics	r4, r2
     538:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     53c:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53e:	432a      	orrs	r2, r5
     540:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     542:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     544:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     546:	394a      	subs	r1, #74	; 0x4a
     548:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     54a:	3151      	adds	r1, #81	; 0x51
     54c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54e:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     550:	bc04      	pop	{r2}
     552:	4690      	mov	r8, r2
     554:	bdf0      	pop	{r4, r5, r6, r7, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	41004400 	.word	0x41004400
     55c:	c0000100 	.word	0xc0000100
     560:	c0000200 	.word	0xc0000200

00000564 <TARGET_USB_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <TARGET_USB_CLOCK_init+0x1c>)
     566:	69da      	ldr	r2, [r3, #28]
     568:	2120      	movs	r1, #32
     56a:	430a      	orrs	r2, r1
     56c:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     56e:	695a      	ldr	r2, [r3, #20]
     570:	3120      	adds	r1, #32
     572:	430a      	orrs	r2, r1
     574:	615a      	str	r2, [r3, #20]
     576:	4a03      	ldr	r2, [pc, #12]	; (584 <TARGET_USB_CLOCK_init+0x20>)
     578:	4b03      	ldr	r3, [pc, #12]	; (588 <TARGET_USB_CLOCK_init+0x24>)
     57a:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     57c:	4770      	bx	lr
     57e:	46c0      	nop			; (mov r8, r8)
     580:	40000400 	.word	0x40000400
     584:	00004706 	.word	0x00004706
     588:	40000c00 	.word	0x40000c00

0000058c <TARGET_USB_init>:

void TARGET_USB_init(void)
{
     58c:	b510      	push	{r4, lr}
	TARGET_USB_CLOCK_init();
     58e:	4b03      	ldr	r3, [pc, #12]	; (59c <TARGET_USB_init+0x10>)
     590:	4798      	blx	r3
	usb_d_init();
     592:	4b03      	ldr	r3, [pc, #12]	; (5a0 <TARGET_USB_init+0x14>)
     594:	4798      	blx	r3
	TARGET_USB_PORT_init();
     596:	4b03      	ldr	r3, [pc, #12]	; (5a4 <TARGET_USB_init+0x18>)
     598:	4798      	blx	r3
}
     59a:	bd10      	pop	{r4, pc}
     59c:	00000565 	.word	0x00000565
     5a0:	00002315 	.word	0x00002315
     5a4:	000004dd 	.word	0x000004dd

000005a8 <system_init>:

void system_init(void)
{
     5a8:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5aa:	4b2f      	ldr	r3, [pc, #188]	; (668 <system_init+0xc0>)
     5ac:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ae:	22c0      	movs	r2, #192	; 0xc0
     5b0:	05d2      	lsls	r2, r2, #23
     5b2:	2340      	movs	r3, #64	; 0x40
     5b4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b8:	4b2c      	ldr	r3, [pc, #176]	; (66c <system_init+0xc4>)
     5ba:	492d      	ldr	r1, [pc, #180]	; (670 <system_init+0xc8>)
     5bc:	6299      	str	r1, [r3, #40]	; 0x28
     5be:	24c0      	movs	r4, #192	; 0xc0
     5c0:	0624      	lsls	r4, r4, #24
     5c2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c4:	2546      	movs	r5, #70	; 0x46
     5c6:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c8:	2101      	movs	r1, #1
     5ca:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5cc:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ce:	2080      	movs	r0, #128	; 0x80
     5d0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d4:	4827      	ldr	r0, [pc, #156]	; (674 <system_init+0xcc>)
     5d6:	6298      	str	r0, [r3, #40]	; 0x28
     5d8:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5da:	2447      	movs	r4, #71	; 0x47
     5dc:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5de:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e0:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e2:	2080      	movs	r0, #128	; 0x80
     5e4:	0340      	lsls	r0, r0, #13
     5e6:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5e8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ea:	2080      	movs	r0, #128	; 0x80
     5ec:	05c0      	lsls	r0, r0, #23
     5ee:	6298      	str	r0, [r3, #40]	; 0x28
     5f0:	4c21      	ldr	r4, [pc, #132]	; (678 <system_init+0xd0>)
     5f2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f4:	350e      	adds	r5, #14
     5f6:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f8:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fc:	2480      	movs	r4, #128	; 0x80
     5fe:	03a4      	lsls	r4, r4, #14
     600:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     602:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     604:	6298      	str	r0, [r3, #40]	; 0x28
     606:	4c1d      	ldr	r4, [pc, #116]	; (67c <system_init+0xd4>)
     608:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60a:	3501      	adds	r5, #1
     60c:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     60e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     610:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     612:	2480      	movs	r4, #128	; 0x80
     614:	02a4      	lsls	r4, r4, #10
     616:	353f      	adds	r5, #63	; 0x3f
     618:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     61a:	3d0c      	subs	r5, #12
     61c:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     61e:	22a8      	movs	r2, #168	; 0xa8
     620:	5098      	str	r0, [r3, r2]
     622:	4817      	ldr	r0, [pc, #92]	; (680 <system_init+0xd8>)
     624:	5098      	str	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     626:	20d1      	movs	r0, #209	; 0xd1
     628:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62a:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62c:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CS_PIN, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_PIN, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     62e:	4b15      	ldr	r3, [pc, #84]	; (684 <system_init+0xdc>)
     630:	4798      	blx	r3

	GPS_UART_init();
     632:	4b15      	ldr	r3, [pc, #84]	; (688 <system_init+0xe0>)
     634:	4798      	blx	r3

	TARGET_IO_init();
     636:	4b15      	ldr	r3, [pc, #84]	; (68c <system_init+0xe4>)
     638:	4798      	blx	r3

	SPI_OLED_init();
     63a:	4b15      	ldr	r3, [pc, #84]	; (690 <system_init+0xe8>)
     63c:	4798      	blx	r3

	delay_driver_init();
     63e:	4b15      	ldr	r3, [pc, #84]	; (694 <system_init+0xec>)
     640:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
     642:	4a15      	ldr	r2, [pc, #84]	; (698 <system_init+0xf0>)
     644:	6a11      	ldr	r1, [r2, #32]
     646:	2380      	movs	r3, #128	; 0x80
     648:	011b      	lsls	r3, r3, #4
     64a:	430b      	orrs	r3, r1
     64c:	6213      	str	r3, [r2, #32]
     64e:	4a13      	ldr	r2, [pc, #76]	; (69c <system_init+0xf4>)
     650:	4b13      	ldr	r3, [pc, #76]	; (6a0 <system_init+0xf8>)
     652:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     654:	4b13      	ldr	r3, [pc, #76]	; (6a4 <system_init+0xfc>)
     656:	4798      	blx	r3
     658:	0002      	movs	r2, r0
     65a:	4913      	ldr	r1, [pc, #76]	; (6a8 <system_init+0x100>)
     65c:	4813      	ldr	r0, [pc, #76]	; (6ac <system_init+0x104>)
     65e:	4b14      	ldr	r3, [pc, #80]	; (6b0 <system_init+0x108>)
     660:	4798      	blx	r3

	TIMER_0_init();

	TARGET_USB_init();
     662:	4b14      	ldr	r3, [pc, #80]	; (6b4 <system_init+0x10c>)
     664:	4798      	blx	r3
}
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	00002885 	.word	0x00002885
     66c:	41004400 	.word	0x41004400
     670:	40000040 	.word	0x40000040
     674:	40000080 	.word	0x40000080
     678:	c0000010 	.word	0xc0000010
     67c:	c0000020 	.word	0xc0000020
     680:	c0000002 	.word	0xc0000002
     684:	00000221 	.word	0x00000221
     688:	000002dd 	.word	0x000002dd
     68c:	00000375 	.word	0x00000375
     690:	000004a1 	.word	0x000004a1
     694:	000004c9 	.word	0x000004c9
     698:	40000400 	.word	0x40000400
     69c:	0000401b 	.word	0x0000401b
     6a0:	40000c00 	.word	0x40000c00
     6a4:	0000329d 	.word	0x0000329d
     6a8:	42002c00 	.word	0x42002c00
     6ac:	20001534 	.word	0x20001534
     6b0:	00001b5d 	.word	0x00001b5d
     6b4:	0000058d 	.word	0x0000058d

000006b8 <display_mono_construct>:
 */
struct display_mono *display_mono_construct(struct display_mono *const me, struct display_ctrl_mono *const dc,
                                            const gfx_coord_t width, const gfx_coord_t height,
                                            struct display_mono_interface *const interface)
{
	me->dc        = dc;
     6b8:	6001      	str	r1, [r0, #0]
	me->width     = width;
     6ba:	7102      	strb	r2, [r0, #4]
	me->height    = height;
     6bc:	7143      	strb	r3, [r0, #5]
	me->interface = interface;
     6be:	9b00      	ldr	r3, [sp, #0]
     6c0:	6083      	str	r3, [r0, #8]

	return me;
}
     6c2:	4770      	bx	lr

000006c4 <display_mono_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void display_mono_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const uint8_t data)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	0004      	movs	r4, r0
     6c8:	0016      	movs	r6, r2
     6ca:	001d      	movs	r5, r3
	me->dc->interface->set_page_address(me->dc, page);
     6cc:	6800      	ldr	r0, [r0, #0]
     6ce:	6843      	ldr	r3, [r0, #4]
     6d0:	689b      	ldr	r3, [r3, #8]
     6d2:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, column);
     6d4:	6820      	ldr	r0, [r4, #0]
     6d6:	6843      	ldr	r3, [r0, #4]
     6d8:	68db      	ldr	r3, [r3, #12]
     6da:	0031      	movs	r1, r6
     6dc:	4798      	blx	r3
	me->dc->interface->write_data(me->dc, data);
     6de:	6820      	ldr	r0, [r4, #0]
     6e0:	6843      	ldr	r3, [r0, #4]
     6e2:	681b      	ldr	r3, [r3, #0]
     6e4:	0029      	movs	r1, r5
     6e6:	4798      	blx	r3
}
     6e8:	bd70      	pop	{r4, r5, r6, pc}

000006ea <display_mono_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void display_mono_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ec:	b083      	sub	sp, #12
     6ee:	0004      	movs	r4, r0
     6f0:	9101      	str	r1, [sp, #4]
     6f2:	0016      	movs	r6, r2
     6f4:	001d      	movs	r5, r3
     6f6:	ab08      	add	r3, sp, #32
     6f8:	781f      	ldrb	r7, [r3, #0]
	uint8_t temp = me->interface->get_byte(me, page, column);
     6fa:	6883      	ldr	r3, [r0, #8]
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	4798      	blx	r3
     700:	0003      	movs	r3, r0

	switch (color) {
     702:	2f01      	cmp	r7, #1
     704:	d00b      	beq.n	71e <display_mono_mask_byte+0x34>
     706:	2f00      	cmp	r7, #0
     708:	d00c      	beq.n	724 <display_mono_mask_byte+0x3a>
     70a:	2f02      	cmp	r7, #2
     70c:	d00d      	beq.n	72a <display_mono_mask_byte+0x40>

	default:
		break;
	}

	me->interface->put_byte(me, page, column, temp);
     70e:	68a2      	ldr	r2, [r4, #8]
     710:	6857      	ldr	r7, [r2, #4]
     712:	0032      	movs	r2, r6
     714:	9901      	ldr	r1, [sp, #4]
     716:	0020      	movs	r0, r4
     718:	47b8      	blx	r7
}
     71a:	b003      	add	sp, #12
     71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (uint8_t)pixel_mask;
     71e:	4328      	orrs	r0, r5
     720:	b2c3      	uxtb	r3, r0
		break;
     722:	e7f4      	b.n	70e <display_mono_mask_byte+0x24>
		temp &= ~(uint8_t)pixel_mask;
     724:	43a8      	bics	r0, r5
     726:	b2c3      	uxtb	r3, r0
		break;
     728:	e7f1      	b.n	70e <display_mono_mask_byte+0x24>
		temp ^= (uint8_t)pixel_mask;
     72a:	4068      	eors	r0, r5
     72c:	b2c3      	uxtb	r3, r0
		break;
     72e:	e7ee      	b.n	70e <display_mono_mask_byte+0x24>

00000730 <display_mono_draw_pixel>:
 * \brief Draw pixel to screen
 */
void display_mono_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                             const enum gfx_mono_color color, const gfx_coord_t width, const gfx_coord_t height,
                             const uint8_t pixels)
{
     730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     732:	46ce      	mov	lr, r9
     734:	4647      	mov	r7, r8
     736:	b580      	push	{r7, lr}
     738:	0007      	movs	r7, r0
     73a:	000d      	movs	r5, r1
     73c:	0014      	movs	r4, r2
     73e:	001e      	movs	r6, r3
     740:	ab08      	add	r3, sp, #32
     742:	781b      	ldrb	r3, [r3, #0]
     744:	aa09      	add	r2, sp, #36	; 0x24
     746:	7812      	ldrb	r2, [r2, #0]
     748:	a90a      	add	r1, sp, #40	; 0x28
     74a:	7809      	ldrb	r1, [r1, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > width - 1) || (y > height - 1)) {
     74c:	3b01      	subs	r3, #1
     74e:	429d      	cmp	r5, r3
     750:	dc02      	bgt.n	758 <display_mono_draw_pixel+0x28>
     752:	3a01      	subs	r2, #1
     754:	4294      	cmp	r4, r2
     756:	dd03      	ble.n	760 <display_mono_draw_pixel+0x30>
	default:
		break;
	}

	me->interface->put_byte(me, page, x, pixel_value);
}
     758:	bc0c      	pop	{r2, r3}
     75a:	4690      	mov	r8, r2
     75c:	4699      	mov	r9, r3
     75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	page       = y / pixels;
     760:	0020      	movs	r0, r4
     762:	4b15      	ldr	r3, [pc, #84]	; (7b8 <display_mono_draw_pixel+0x88>)
     764:	4798      	blx	r3
     766:	b2c3      	uxtb	r3, r0
     768:	4698      	mov	r8, r3
	pixel_mask = (1 << (y - (page * 8)));
     76a:	00db      	lsls	r3, r3, #3
     76c:	1ae4      	subs	r4, r4, r3
     76e:	2301      	movs	r3, #1
     770:	40a3      	lsls	r3, r4
     772:	001c      	movs	r4, r3
     774:	b2db      	uxtb	r3, r3
     776:	4699      	mov	r9, r3
	pixel_value = me->interface->get_byte(me, page, x);
     778:	68bb      	ldr	r3, [r7, #8]
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	002a      	movs	r2, r5
     77e:	4641      	mov	r1, r8
     780:	0038      	movs	r0, r7
     782:	4798      	blx	r3
     784:	0003      	movs	r3, r0
	switch (color) {
     786:	2e01      	cmp	r6, #1
     788:	d00a      	beq.n	7a0 <display_mono_draw_pixel+0x70>
     78a:	2e00      	cmp	r6, #0
     78c:	d00c      	beq.n	7a8 <display_mono_draw_pixel+0x78>
     78e:	2e02      	cmp	r6, #2
     790:	d00d      	beq.n	7ae <display_mono_draw_pixel+0x7e>
	me->interface->put_byte(me, page, x, pixel_value);
     792:	68ba      	ldr	r2, [r7, #8]
     794:	6854      	ldr	r4, [r2, #4]
     796:	002a      	movs	r2, r5
     798:	4641      	mov	r1, r8
     79a:	0038      	movs	r0, r7
     79c:	47a0      	blx	r4
     79e:	e7db      	b.n	758 <display_mono_draw_pixel+0x28>
		pixel_value |= pixel_mask;
     7a0:	464b      	mov	r3, r9
     7a2:	4303      	orrs	r3, r0
     7a4:	b2db      	uxtb	r3, r3
		break;
     7a6:	e7f4      	b.n	792 <display_mono_draw_pixel+0x62>
		pixel_value &= ~pixel_mask;
     7a8:	43a0      	bics	r0, r4
     7aa:	b2c3      	uxtb	r3, r0
		break;
     7ac:	e7f1      	b.n	792 <display_mono_draw_pixel+0x62>
		pixel_value ^= pixel_mask;
     7ae:	464b      	mov	r3, r9
     7b0:	4043      	eors	r3, r0
     7b2:	b2db      	uxtb	r3, r3
		break;
     7b4:	e7ed      	b.n	792 <display_mono_draw_pixel+0x62>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	00005885 	.word	0x00005885

000007bc <display_mono_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void display_mono_put_page(const struct display_mono *const me, const enum gfx_mono_color *data, const gfx_coord_t page,
                           const gfx_coord_t page_offset, gfx_coord_t width)
{
     7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7be:	0007      	movs	r7, r0
     7c0:	000e      	movs	r6, r1
     7c2:	001c      	movs	r4, r3
     7c4:	ab06      	add	r3, sp, #24
     7c6:	781d      	ldrb	r5, [r3, #0]
	me->dc->interface->set_page_address(me->dc, page);
     7c8:	6800      	ldr	r0, [r0, #0]
     7ca:	6843      	ldr	r3, [r0, #4]
     7cc:	689b      	ldr	r3, [r3, #8]
     7ce:	0011      	movs	r1, r2
     7d0:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, page_offset);
     7d2:	6838      	ldr	r0, [r7, #0]
     7d4:	6843      	ldr	r3, [r0, #4]
     7d6:	68db      	ldr	r3, [r3, #12]
     7d8:	0021      	movs	r1, r4
     7da:	4798      	blx	r3
     7dc:	0034      	movs	r4, r6
     7de:	3d01      	subs	r5, #1
     7e0:	b2ed      	uxtb	r5, r5
     7e2:	3501      	adds	r5, #1
     7e4:	1975      	adds	r5, r6, r5

	do {
		me->dc->interface->write_data(me->dc, *data++);
     7e6:	6838      	ldr	r0, [r7, #0]
     7e8:	7821      	ldrb	r1, [r4, #0]
     7ea:	6843      	ldr	r3, [r0, #4]
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	4798      	blx	r3
     7f0:	3401      	adds	r4, #1
	} while (--width);
     7f2:	42ac      	cmp	r4, r5
     7f4:	d1f7      	bne.n	7e6 <display_mono_put_page+0x2a>
}
     7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000007f8 <display_mono_init>:

/**
 * \brief Initialize abstract display controller and abstract display.
 */
void display_mono_init(const struct display_mono *const me, const gfx_coord_t width, const uint8_t pages)
{
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	46d6      	mov	lr, sl
     7fc:	b500      	push	{lr}
     7fe:	b082      	sub	sp, #8
     800:	0007      	movs	r7, r0
     802:	000e      	movs	r6, r1
     804:	4692      	mov	sl, r2
	uint8_t page = 0;

	if (me->dc) {
     806:	6800      	ldr	r0, [r0, #0]
     808:	2800      	cmp	r0, #0
     80a:	d003      	beq.n	814 <display_mono_init+0x1c>
		me->dc->interface->set_start_line_address(me->dc, 0);
     80c:	6843      	ldr	r3, [r0, #4]
     80e:	691b      	ldr	r3, [r3, #16]
     810:	2100      	movs	r1, #0
     812:	4798      	blx	r3
	}
	for (; page < pages; page++) {
     814:	2300      	movs	r3, #0
     816:	9301      	str	r3, [sp, #4]
     818:	4653      	mov	r3, sl
     81a:	2b00      	cmp	r3, #0
     81c:	d114      	bne.n	848 <display_mono_init+0x50>

		for (; column < width; column++) {
			me->interface->put_byte(me, page, column, 0x00);
		}
	}
}
     81e:	b002      	add	sp, #8
     820:	bc04      	pop	{r2}
     822:	4692      	mov	sl, r2
     824:	bdf0      	pop	{r4, r5, r6, r7, pc}
			me->interface->put_byte(me, page, column, 0x00);
     826:	68bb      	ldr	r3, [r7, #8]
     828:	685d      	ldr	r5, [r3, #4]
     82a:	2300      	movs	r3, #0
     82c:	0022      	movs	r2, r4
     82e:	9901      	ldr	r1, [sp, #4]
     830:	0038      	movs	r0, r7
     832:	47a8      	blx	r5
		for (; column < width; column++) {
     834:	3401      	adds	r4, #1
     836:	b2e4      	uxtb	r4, r4
     838:	42a6      	cmp	r6, r4
     83a:	d1f4      	bne.n	826 <display_mono_init+0x2e>
	for (; page < pages; page++) {
     83c:	9d01      	ldr	r5, [sp, #4]
     83e:	3501      	adds	r5, #1
     840:	b2eb      	uxtb	r3, r5
     842:	9301      	str	r3, [sp, #4]
     844:	459a      	cmp	sl, r3
     846:	d0ea      	beq.n	81e <display_mono_init+0x26>
		for (; column < width; column++) {
     848:	2400      	movs	r4, #0
     84a:	2e00      	cmp	r6, #0
     84c:	d1eb      	bne.n	826 <display_mono_init+0x2e>
     84e:	e7f5      	b.n	83c <display_mono_init+0x44>

00000850 <framebuffer_put_page>:
/**
 * \brief Put a page from RAM to the buffer in RAM.
 */
void framebuffer_put_page(const struct display_mono *const me, const enum gfx_mono_color *const data,
                          const gfx_coord_t page, const gfx_coord_t page_offset, gfx_coord_t width)
{
     850:	b530      	push	{r4, r5, lr}
     852:	ac03      	add	r4, sp, #12
     854:	7825      	ldrb	r5, [r4, #0]
	const struct framebuffer * disp           = (const struct framebuffer *)me;
	const enum gfx_mono_color *data_pt        = data;
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
     856:	7904      	ldrb	r4, [r0, #4]
     858:	4362      	muls	r2, r4
     85a:	18d2      	adds	r2, r2, r3
     85c:	68c3      	ldr	r3, [r0, #12]
     85e:	189b      	adds	r3, r3, r2
     860:	3d01      	subs	r5, #1
     862:	b2ed      	uxtb	r5, r5
     864:	3501      	adds	r5, #1
     866:	2000      	movs	r0, #0

	do {
		*framebuffer_pt++ = *data_pt++;
     868:	5c0c      	ldrb	r4, [r1, r0]
     86a:	541c      	strb	r4, [r3, r0]
     86c:	3001      	adds	r0, #1
	} while (--width > 0);
     86e:	42a8      	cmp	r0, r5
     870:	d1fa      	bne.n	868 <framebuffer_put_page+0x18>
}
     872:	bd30      	pop	{r4, r5, pc}

00000874 <framebuffer_put_byte>:
/**
 * \brief Put a byte to the buffer in RAM
 */
void framebuffer_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                          const uint8_t data)
{
     874:	b510      	push	{r4, lr}
	const struct framebuffer *disp = (const struct framebuffer *)me;

	*(disp->fbpointer + (page * disp->parent.width) + column) = data;
     876:	7904      	ldrb	r4, [r0, #4]
     878:	4361      	muls	r1, r4
     87a:	68c0      	ldr	r0, [r0, #12]
     87c:	1882      	adds	r2, r0, r2
     87e:	5453      	strb	r3, [r2, r1]
}
     880:	bd10      	pop	{r4, pc}

00000882 <framebuffer_get_byte>:
 */
uint8_t framebuffer_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
	const struct framebuffer *disp = (const struct framebuffer *)me;

	return *(disp->fbpointer + (page * disp->parent.width) + column);
     882:	7903      	ldrb	r3, [r0, #4]
     884:	4359      	muls	r1, r3
     886:	68c3      	ldr	r3, [r0, #12]
     888:	189a      	adds	r2, r3, r2
     88a:	5c50      	ldrb	r0, [r2, r1]
}
     88c:	4770      	bx	lr
	...

00000890 <framebuffer_draw_pixel>:
{
     890:	b510      	push	{r4, lr}
     892:	b084      	sub	sp, #16
	display_mono_draw_pixel(&disp->parent, x, y, color, disp->parent.width, disp->parent.height, 8);
     894:	2408      	movs	r4, #8
     896:	9402      	str	r4, [sp, #8]
     898:	7944      	ldrb	r4, [r0, #5]
     89a:	9401      	str	r4, [sp, #4]
     89c:	7904      	ldrb	r4, [r0, #4]
     89e:	9400      	str	r4, [sp, #0]
     8a0:	4c01      	ldr	r4, [pc, #4]	; (8a8 <framebuffer_draw_pixel+0x18>)
     8a2:	47a0      	blx	r4
}
     8a4:	b004      	add	sp, #16
     8a6:	bd10      	pop	{r4, pc}
     8a8:	00000731 	.word	0x00000731

000008ac <framebuffer_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the buffer in RAM
 */
void framebuffer_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     8ac:	b510      	push	{r4, lr}
     8ae:	b082      	sub	sp, #8
     8b0:	ac04      	add	r4, sp, #16
     8b2:	7824      	ldrb	r4, [r4, #0]
	const struct framebuffer *disp = (const struct framebuffer *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
     8b4:	9400      	str	r4, [sp, #0]
     8b6:	4c02      	ldr	r4, [pc, #8]	; (8c0 <framebuffer_mask_byte+0x14>)
     8b8:	47a0      	blx	r4
}
     8ba:	b002      	add	sp, #8
     8bc:	bd10      	pop	{r4, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	000006eb 	.word	0x000006eb

000008c4 <framebuffer_construct>:
{
     8c4:	b570      	push	{r4, r5, r6, lr}
     8c6:	b082      	sub	sp, #8
     8c8:	0004      	movs	r4, r0
     8ca:	000d      	movs	r5, r1
	display_mono_construct(&display->parent, NULL, width, height, &framebuffer_interface);
     8cc:	4904      	ldr	r1, [pc, #16]	; (8e0 <framebuffer_construct+0x1c>)
     8ce:	9100      	str	r1, [sp, #0]
     8d0:	2100      	movs	r1, #0
     8d2:	4e04      	ldr	r6, [pc, #16]	; (8e4 <framebuffer_construct+0x20>)
     8d4:	47b0      	blx	r6
	display->fbpointer = framebuffer;
     8d6:	60e5      	str	r5, [r4, #12]
}
     8d8:	0020      	movs	r0, r4
     8da:	b002      	add	sp, #8
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	20000000 	.word	0x20000000
     8e4:	000006b9 	.word	0x000006b9

000008e8 <ug2832hsweg04_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void ug2832hsweg04_put_page(const struct display_mono *const me, const enum gfx_mono_color *data,
                            const gfx_coord_t page, const gfx_coord_t page_offset, const gfx_coord_t width)
{
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	b085      	sub	sp, #20
     8ec:	0004      	movs	r4, r0
     8ee:	001f      	movs	r7, r3
     8f0:	ab0a      	add	r3, sp, #40	; 0x28
     8f2:	781d      	ldrb	r5, [r3, #0]
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_page(&disp->framebuffer.parent, data, page, page_offset, width);
     8f4:	3018      	adds	r0, #24
     8f6:	9500      	str	r5, [sp, #0]
     8f8:	003b      	movs	r3, r7
     8fa:	9203      	str	r2, [sp, #12]
     8fc:	9102      	str	r1, [sp, #8]
     8fe:	4e05      	ldr	r6, [pc, #20]	; (914 <ug2832hsweg04_put_page+0x2c>)
     900:	47b0      	blx	r6
#endif
	display_mono_put_page(&disp->parent, data, page, page_offset, width);
     902:	9500      	str	r5, [sp, #0]
     904:	003b      	movs	r3, r7
     906:	9a03      	ldr	r2, [sp, #12]
     908:	9902      	ldr	r1, [sp, #8]
     90a:	0020      	movs	r0, r4
     90c:	4c02      	ldr	r4, [pc, #8]	; (918 <ug2832hsweg04_put_page+0x30>)
     90e:	47a0      	blx	r4
}
     910:	b005      	add	sp, #20
     912:	bdf0      	pop	{r4, r5, r6, r7, pc}
     914:	00000851 	.word	0x00000851
     918:	000007bd 	.word	0x000007bd

0000091c <ug2832hsweg04_draw_pixel>:
/**
 * \brief Draw pixel to screen
 */
void ug2832hsweg04_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                              const enum gfx_mono_color color)
{
     91c:	b510      	push	{r4, lr}
     91e:	b084      	sub	sp, #16
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_draw_pixel(&disp->parent, x, y, color, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT, 8);
     920:	2408      	movs	r4, #8
     922:	9402      	str	r4, [sp, #8]
     924:	3438      	adds	r4, #56	; 0x38
     926:	9401      	str	r4, [sp, #4]
     928:	3440      	adds	r4, #64	; 0x40
     92a:	9400      	str	r4, [sp, #0]
     92c:	4c01      	ldr	r4, [pc, #4]	; (934 <ug2832hsweg04_draw_pixel+0x18>)
     92e:	47a0      	blx	r4
}
     930:	b004      	add	sp, #16
     932:	bd10      	pop	{r4, pc}
     934:	00000731 	.word	0x00000731

00000938 <ug2832hsweg04_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void ug2832hsweg04_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const uint8_t data)
{
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	b083      	sub	sp, #12
     93c:	0004      	movs	r4, r0
     93e:	0016      	movs	r6, r2
     940:	001f      	movs	r7, r3
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_byte(&disp->framebuffer.parent, page, column, data);
     942:	3018      	adds	r0, #24
     944:	9101      	str	r1, [sp, #4]
     946:	4d05      	ldr	r5, [pc, #20]	; (95c <ug2832hsweg04_put_byte+0x24>)
     948:	47a8      	blx	r5
#endif
	display_mono_put_byte(&disp->parent, page, column, data);
     94a:	003b      	movs	r3, r7
     94c:	0032      	movs	r2, r6
     94e:	9901      	ldr	r1, [sp, #4]
     950:	0020      	movs	r0, r4
     952:	4c03      	ldr	r4, [pc, #12]	; (960 <ug2832hsweg04_put_byte+0x28>)
     954:	47a0      	blx	r4
}
     956:	b003      	add	sp, #12
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00000875 	.word	0x00000875
     960:	000006c5 	.word	0x000006c5

00000964 <ug2832hsweg04_get_byte>:

/**
 * \brief Get a byte from the display controller RAM
 */
uint8_t ug2832hsweg04_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
     964:	b510      	push	{r4, lr}
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	return framebuffer_get_byte(&disp->framebuffer.parent, page, column);
     966:	3018      	adds	r0, #24
     968:	4b01      	ldr	r3, [pc, #4]	; (970 <ug2832hsweg04_get_byte+0xc>)
     96a:	4798      	blx	r3
#else
	return display_mono_get_byte(&disp->parent, page, column);
#endif
}
     96c:	bd10      	pop	{r4, pc}
     96e:	46c0      	nop			; (mov r8, r8)
     970:	00000883 	.word	0x00000883

00000974 <ug2832hsweg04_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void ug2832hsweg04_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                             const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     974:	b510      	push	{r4, lr}
     976:	b082      	sub	sp, #8
     978:	ac04      	add	r4, sp, #16
     97a:	7824      	ldrb	r4, [r4, #0]
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
     97c:	9400      	str	r4, [sp, #0]
     97e:	4c02      	ldr	r4, [pc, #8]	; (988 <ug2832hsweg04_mask_byte+0x14>)
     980:	47a0      	blx	r4
}
     982:	b002      	add	sp, #8
     984:	bd10      	pop	{r4, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	000006eb 	.word	0x000006eb

0000098c <ug2832hsweg04_construct>:
{
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
     98e:	46d6      	mov	lr, sl
     990:	4647      	mov	r7, r8
     992:	b580      	push	{r7, lr}
     994:	b087      	sub	sp, #28
     996:	0004      	movs	r4, r0
     998:	9103      	str	r1, [sp, #12]
     99a:	9204      	str	r2, [sp, #16]
     99c:	9305      	str	r3, [sp, #20]
     99e:	ab0e      	add	r3, sp, #56	; 0x38
     9a0:	7818      	ldrb	r0, [r3, #0]
     9a2:	4680      	mov	r8, r0
     9a4:	ab0f      	add	r3, sp, #60	; 0x3c
     9a6:	781f      	ldrb	r7, [r3, #0]
	display_mono_construct(&display->parent,
     9a8:	0025      	movs	r5, r4
     9aa:	350c      	adds	r5, #12
     9ac:	4b10      	ldr	r3, [pc, #64]	; (9f0 <ug2832hsweg04_construct+0x64>)
     9ae:	9300      	str	r3, [sp, #0]
     9b0:	2340      	movs	r3, #64	; 0x40
     9b2:	2280      	movs	r2, #128	; 0x80
     9b4:	0029      	movs	r1, r5
     9b6:	0020      	movs	r0, r4
     9b8:	4e0e      	ldr	r6, [pc, #56]	; (9f4 <ug2832hsweg04_construct+0x68>)
     9ba:	47b0      	blx	r6
	ssd1306_construct(&display->dc.parent, io, cs, res, dc);
     9bc:	9700      	str	r7, [sp, #0]
     9be:	4643      	mov	r3, r8
     9c0:	9a05      	ldr	r2, [sp, #20]
     9c2:	9904      	ldr	r1, [sp, #16]
     9c4:	0028      	movs	r0, r5
     9c6:	4d0c      	ldr	r5, [pc, #48]	; (9f8 <ug2832hsweg04_construct+0x6c>)
     9c8:	47a8      	blx	r5
	framebuffer_construct(&display->framebuffer.parent, framebuffer, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT);
     9ca:	0020      	movs	r0, r4
     9cc:	3018      	adds	r0, #24
     9ce:	2340      	movs	r3, #64	; 0x40
     9d0:	2280      	movs	r2, #128	; 0x80
     9d2:	9903      	ldr	r1, [sp, #12]
     9d4:	4d09      	ldr	r5, [pc, #36]	; (9fc <ug2832hsweg04_construct+0x70>)
     9d6:	47a8      	blx	r5
	display_mono_init(me, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_PAGES);
     9d8:	2208      	movs	r2, #8
     9da:	2180      	movs	r1, #128	; 0x80
     9dc:	0020      	movs	r0, r4
     9de:	4b08      	ldr	r3, [pc, #32]	; (a00 <ug2832hsweg04_construct+0x74>)
     9e0:	4798      	blx	r3
}
     9e2:	0020      	movs	r0, r4
     9e4:	b007      	add	sp, #28
     9e6:	bc0c      	pop	{r2, r3}
     9e8:	4690      	mov	r8, r2
     9ea:	469a      	mov	sl, r3
     9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	20000014 	.word	0x20000014
     9f4:	000006b9 	.word	0x000006b9
     9f8:	00000b85 	.word	0x00000b85
     9fc:	000008c5 	.word	0x000008c5
     a00:	000007f9 	.word	0x000007f9

00000a04 <display_ctrl_mono_construct>:
 */
struct display_ctrl_mono *display_ctrl_mono_construct(struct display_ctrl_mono *const           me,
                                                      struct io_descriptor *const               io,
                                                      struct display_ctrl_mono_interface *const interface)
{
	me->io        = io;
     a04:	6001      	str	r1, [r0, #0]
	me->interface = interface;
     a06:	6042      	str	r2, [r0, #4]

	return me;
}
     a08:	4770      	bx	lr
	...

00000a0c <display_ctrl_mono_hard_reset>:

/**
 * \brief Perform the hard reset of display controller
 */
void display_ctrl_mono_hard_reset(const uint8_t pin, const uint32_t delay)
{
     a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     a0e:	231f      	movs	r3, #31
     a10:	4003      	ands	r3, r0
     a12:	2601      	movs	r6, #1
     a14:	409e      	lsls	r6, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a16:	0944      	lsrs	r4, r0, #5
     a18:	01e4      	lsls	r4, r4, #7
     a1a:	23c0      	movs	r3, #192	; 0xc0
     a1c:	05db      	lsls	r3, r3, #23
     a1e:	469c      	mov	ip, r3
     a20:	4464      	add	r4, ip
     a22:	6166      	str	r6, [r4, #20]
	gpio_set_pin_level(pin, false);
	delay_us(delay);
     a24:	b28d      	uxth	r5, r1
     a26:	0028      	movs	r0, r5
     a28:	4f02      	ldr	r7, [pc, #8]	; (a34 <display_ctrl_mono_hard_reset+0x28>)
     a2a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a2c:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(pin, true);
	delay_us(delay);
     a2e:	0028      	movs	r0, r5
     a30:	47b8      	blx	r7
}
     a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a34:	00001821 	.word	0x00001821

00000a38 <ssd1306_write_data>:

/**
 * \brief Write data to the display controller
 */
void ssd1306_write_data(const struct display_ctrl_mono *const me, const uint8_t data)
{
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}
     a3a:	b083      	sub	sp, #12
     a3c:	0006      	movs	r6, r0
     a3e:	000b      	movs	r3, r1
     a40:	466a      	mov	r2, sp
     a42:	1dd1      	adds	r1, r2, #7
     a44:	700b      	strb	r3, [r1, #0]
	struct io_descriptor *      io   = me->io;
     a46:	6800      	ldr	r0, [r0, #0]
	const struct ssd1306 *const ctrl = (const struct ssd1306 *const)me;

	gpio_set_pin_level(ctrl->pin_dc, true);
     a48:	7ab3      	ldrb	r3, [r6, #10]
     a4a:	251f      	movs	r5, #31
     a4c:	002a      	movs	r2, r5
     a4e:	401a      	ands	r2, r3
     a50:	2401      	movs	r4, #1
     a52:	0027      	movs	r7, r4
     a54:	4097      	lsls	r7, r2
     a56:	003a      	movs	r2, r7
     a58:	095b      	lsrs	r3, r3, #5
     a5a:	01db      	lsls	r3, r3, #7
     a5c:	27c0      	movs	r7, #192	; 0xc0
     a5e:	05ff      	lsls	r7, r7, #23
     a60:	46bc      	mov	ip, r7
     a62:	4463      	add	r3, ip
     a64:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(ctrl->pin_cs, false);
     a66:	7a33      	ldrb	r3, [r6, #8]
     a68:	002a      	movs	r2, r5
     a6a:	401a      	ands	r2, r3
     a6c:	0027      	movs	r7, r4
     a6e:	4097      	lsls	r7, r2
     a70:	003a      	movs	r2, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a72:	095b      	lsrs	r3, r3, #5
     a74:	01db      	lsls	r3, r3, #7
     a76:	4667      	mov	r7, ip
     a78:	4463      	add	r3, ip
     a7a:	615a      	str	r2, [r3, #20]
	io->write(io, &data, 1);
     a7c:	6803      	ldr	r3, [r0, #0]
     a7e:	2201      	movs	r2, #1
     a80:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
     a82:	7a33      	ldrb	r3, [r6, #8]
     a84:	401d      	ands	r5, r3
     a86:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a88:	095b      	lsrs	r3, r3, #5
     a8a:	01db      	lsls	r3, r3, #7
     a8c:	46bc      	mov	ip, r7
     a8e:	4463      	add	r3, ip
     a90:	619c      	str	r4, [r3, #24]
}
     a92:	b003      	add	sp, #12
     a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a96 <ssd1306_read_data>:
 */
uint8_t ssd1306_read_data(const struct display_ctrl_mono *const me)
{
	(void)me;
	return 0;
}
     a96:	2000      	movs	r0, #0
     a98:	4770      	bx	lr

00000a9a <ssd1306_write_command>:
{
     a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9c:	b083      	sub	sp, #12
     a9e:	0006      	movs	r6, r0
     aa0:	000b      	movs	r3, r1
     aa2:	466a      	mov	r2, sp
     aa4:	1dd1      	adds	r1, r2, #7
     aa6:	700b      	strb	r3, [r1, #0]
	struct io_descriptor *      io   = me->io;
     aa8:	6800      	ldr	r0, [r0, #0]
	gpio_set_pin_level(ctrl->pin_dc, false);
     aaa:	7ab3      	ldrb	r3, [r6, #10]
     aac:	251f      	movs	r5, #31
     aae:	002a      	movs	r2, r5
     ab0:	401a      	ands	r2, r3
     ab2:	2401      	movs	r4, #1
     ab4:	0027      	movs	r7, r4
     ab6:	4097      	lsls	r7, r2
     ab8:	003a      	movs	r2, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aba:	095b      	lsrs	r3, r3, #5
     abc:	01db      	lsls	r3, r3, #7
     abe:	27c0      	movs	r7, #192	; 0xc0
     ac0:	05ff      	lsls	r7, r7, #23
     ac2:	46bc      	mov	ip, r7
     ac4:	4463      	add	r3, ip
     ac6:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(ctrl->pin_cs, false);
     ac8:	7a33      	ldrb	r3, [r6, #8]
     aca:	002a      	movs	r2, r5
     acc:	401a      	ands	r2, r3
     ace:	0027      	movs	r7, r4
     ad0:	4097      	lsls	r7, r2
     ad2:	003a      	movs	r2, r7
     ad4:	095b      	lsrs	r3, r3, #5
     ad6:	01db      	lsls	r3, r3, #7
     ad8:	4667      	mov	r7, ip
     ada:	4463      	add	r3, ip
     adc:	615a      	str	r2, [r3, #20]
	io->write(io, &command, 1);
     ade:	6803      	ldr	r3, [r0, #0]
     ae0:	2201      	movs	r2, #1
     ae2:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
     ae4:	7a33      	ldrb	r3, [r6, #8]
     ae6:	401d      	ands	r5, r3
     ae8:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aea:	095b      	lsrs	r3, r3, #5
     aec:	01db      	lsls	r3, r3, #7
     aee:	46bc      	mov	ip, r7
     af0:	4463      	add	r3, ip
     af2:	619c      	str	r4, [r3, #24]
}
     af4:	b003      	add	sp, #12
     af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000af8 <ssd1306_set_page_address>:

/**
 * \brief Set current page in display RAM
 */
void ssd1306_set_page_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
     af8:	b510      	push	{r4, lr}
     afa:	000b      	movs	r3, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_PAGE_START_ADDRESS(address & 0xF));
     afc:	2107      	movs	r1, #7
     afe:	4019      	ands	r1, r3
     b00:	23b0      	movs	r3, #176	; 0xb0
     b02:	4319      	orrs	r1, r3
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <ssd1306_set_page_address+0x14>)
     b06:	4798      	blx	r3
}
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000a9b 	.word	0x00000a9b

00000b10 <ssd1306_set_column_address>:

/**
 * \brief Set current column in display RAM
 */
void ssd1306_set_column_address(const struct display_ctrl_mono *const me, uint8_t address)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	0004      	movs	r4, r0
     b14:	000e      	movs	r6, r1
	address &= 0x7F;
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
     b16:	0649      	lsls	r1, r1, #25
     b18:	0f49      	lsrs	r1, r1, #29
     b1a:	2310      	movs	r3, #16
     b1c:	4319      	orrs	r1, r3
     b1e:	4d03      	ldr	r5, [pc, #12]	; (b2c <ssd1306_set_column_address+0x1c>)
     b20:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     b22:	210f      	movs	r1, #15
     b24:	4031      	ands	r1, r6
     b26:	0020      	movs	r0, r4
     b28:	47a8      	blx	r5
}
     b2a:	bd70      	pop	{r4, r5, r6, pc}
     b2c:	00000a9b 	.word	0x00000a9b

00000b30 <ssd1306_set_start_line_address>:

/**
 * \brief Set the display start draw line address
 */
void ssd1306_set_start_line_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
     b30:	b510      	push	{r4, lr}
     b32:	000b      	movs	r3, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(address & 0x3F));
     b34:	213f      	movs	r1, #63	; 0x3f
     b36:	4019      	ands	r1, r3
     b38:	2340      	movs	r3, #64	; 0x40
     b3a:	4319      	orrs	r1, r3
     b3c:	4b01      	ldr	r3, [pc, #4]	; (b44 <ssd1306_set_start_line_address+0x14>)
     b3e:	4798      	blx	r3
}
     b40:	bd10      	pop	{r4, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a9b 	.word	0x00000a9b

00000b48 <ssd1306_hard_reset>:
{
     b48:	b510      	push	{r4, lr}
	display_ctrl_mono_hard_reset(((const struct ssd1306 *)me)->pin_res, 10);
     b4a:	7a40      	ldrb	r0, [r0, #9]
     b4c:	210a      	movs	r1, #10
     b4e:	4b01      	ldr	r3, [pc, #4]	; (b54 <ssd1306_hard_reset+0xc>)
     b50:	4798      	blx	r3
}
     b52:	bd10      	pop	{r4, pc}
     b54:	00000a0d 	.word	0x00000a0d

00000b58 <ssd1306_on>:

/**
 * \brief Turn the display display on
 */
void ssd1306_on(const struct display_ctrl_mono *const me)
{
     b58:	b510      	push	{r4, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_ON);
     b5a:	21af      	movs	r1, #175	; 0xaf
     b5c:	4b01      	ldr	r3, [pc, #4]	; (b64 <ssd1306_on+0xc>)
     b5e:	4798      	blx	r3
}
     b60:	bd10      	pop	{r4, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00000a9b 	.word	0x00000a9b

00000b68 <ssd1306_set_contrast>:

/**
 * \brief Set the display contrast level
 */
uint8_t ssd1306_set_contrast(const struct display_ctrl_mono *const me, const uint8_t contrast)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	0006      	movs	r6, r0
     b6c:	000c      	movs	r4, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     b6e:	2181      	movs	r1, #129	; 0x81
     b70:	4d03      	ldr	r5, [pc, #12]	; (b80 <ssd1306_set_contrast+0x18>)
     b72:	47a8      	blx	r5
	ssd1306_write_command(me, contrast);
     b74:	0021      	movs	r1, r4
     b76:	0030      	movs	r0, r6
     b78:	47a8      	blx	r5

	return contrast;
}
     b7a:	0020      	movs	r0, r4
     b7c:	bd70      	pop	{r4, r5, r6, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00000a9b 	.word	0x00000a9b

00000b84 <ssd1306_construct>:
{
     b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b86:	0004      	movs	r4, r0
     b88:	0017      	movs	r7, r2
     b8a:	001e      	movs	r6, r3
     b8c:	ab06      	add	r3, sp, #24
     b8e:	781d      	ldrb	r5, [r3, #0]
	display_ctrl_mono_construct(me, io, &ssd1306_interface);
     b90:	4a25      	ldr	r2, [pc, #148]	; (c28 <ssd1306_construct+0xa4>)
     b92:	4b26      	ldr	r3, [pc, #152]	; (c2c <ssd1306_construct+0xa8>)
     b94:	4798      	blx	r3
	ssd->pin_cs  = cs;
     b96:	7227      	strb	r7, [r4, #8]
	ssd->pin_res = res;
     b98:	7266      	strb	r6, [r4, #9]
	ssd->pin_dc  = dc;
     b9a:	72a5      	strb	r5, [r4, #10]
	ssd1306_hard_reset(me);
     b9c:	0020      	movs	r0, r4
     b9e:	4b24      	ldr	r3, [pc, #144]	; (c30 <ssd1306_construct+0xac>)
     ba0:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_SET_MULTIPLEX_RATIO);
     ba2:	21a8      	movs	r1, #168	; 0xa8
     ba4:	0020      	movs	r0, r4
     ba6:	4d23      	ldr	r5, [pc, #140]	; (c34 <ssd1306_construct+0xb0>)
     ba8:	47a8      	blx	r5
	ssd1306_write_command(me, 0x3F);/*for 64 panel*/
     baa:	213f      	movs	r1, #63	; 0x3f
     bac:	0020      	movs	r0, r4
     bae:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_OFFSET);
     bb0:	21d3      	movs	r1, #211	; 0xd3
     bb2:	0020      	movs	r0, r4
     bb4:	47a8      	blx	r5
	ssd1306_write_command(me, 0x00);
     bb6:	2100      	movs	r1, #0
     bb8:	0020      	movs	r0, r4
     bba:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(0x00));
     bbc:	2140      	movs	r1, #64	; 0x40
     bbe:	0020      	movs	r0, r4
     bc0:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     bc2:	21a1      	movs	r1, #161	; 0xa1
     bc4:	0020      	movs	r0, r4
     bc6:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     bc8:	21c8      	movs	r1, #200	; 0xc8
     bca:	0020      	movs	r0, r4
     bcc:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_PINS);
     bce:	21da      	movs	r1, #218	; 0xda
     bd0:	0020      	movs	r0, r4
     bd2:	47a8      	blx	r5
	ssd1306_write_command(me, 0x012);/*disable remap and scan direction C8h*/
     bd4:	2112      	movs	r1, #18
     bd6:	0020      	movs	r0, r4
     bd8:	47a8      	blx	r5
	ssd1306_set_contrast(me, 0x8F);
     bda:	218f      	movs	r1, #143	; 0x8f
     bdc:	0020      	movs	r0, r4
     bde:	4b16      	ldr	r3, [pc, #88]	; (c38 <ssd1306_construct+0xb4>)
     be0:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     be2:	21a4      	movs	r1, #164	; 0xa4
     be4:	0020      	movs	r0, r4
     be6:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_NORMAL_DISPLAY);
     be8:	21a6      	movs	r1, #166	; 0xa6
     bea:	0020      	movs	r0, r4
     bec:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     bee:	21d5      	movs	r1, #213	; 0xd5
     bf0:	0020      	movs	r0, r4
     bf2:	47a8      	blx	r5
	ssd1306_write_command(me, 0x80);
     bf4:	2180      	movs	r1, #128	; 0x80
     bf6:	0020      	movs	r0, r4
     bf8:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     bfa:	218d      	movs	r1, #141	; 0x8d
     bfc:	0020      	movs	r0, r4
     bfe:	47a8      	blx	r5
	ssd1306_write_command(me, 0x14);
     c00:	2114      	movs	r1, #20
     c02:	0020      	movs	r0, r4
     c04:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     c06:	21db      	movs	r1, #219	; 0xdb
     c08:	0020      	movs	r0, r4
     c0a:	47a8      	blx	r5
	ssd1306_write_command(me, 0x40);
     c0c:	2140      	movs	r1, #64	; 0x40
     c0e:	0020      	movs	r0, r4
     c10:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     c12:	21d9      	movs	r1, #217	; 0xd9
     c14:	0020      	movs	r0, r4
     c16:	47a8      	blx	r5
	ssd1306_write_command(me, 0xF1);
     c18:	21f1      	movs	r1, #241	; 0xf1
     c1a:	0020      	movs	r0, r4
     c1c:	47a8      	blx	r5
	ssd1306_on(me);
     c1e:	0020      	movs	r0, r4
     c20:	4b06      	ldr	r3, [pc, #24]	; (c3c <ssd1306_construct+0xb8>)
     c22:	4798      	blx	r3
}
     c24:	0020      	movs	r0, r4
     c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c28:	20000028 	.word	0x20000028
     c2c:	00000a05 	.word	0x00000a05
     c30:	00000b49 	.word	0x00000b49
     c34:	00000a9b 	.word	0x00000a9b
     c38:	00000b69 	.word	0x00000b69
     c3c:	00000b59 	.word	0x00000b59

00000c40 <gfx_mono_construct>:
/**
 * \brief Construct GFX mono
 */
struct gfx_mono *gfx_mono_construct(struct gfx_mono *const me, struct display_mono *const d)
{
	me->display = d;
     c40:	6001      	str	r1, [r0, #0]

	return me;
}
     c42:	4770      	bx	lr

00000c44 <gfx_mono_draw_horizontal_line>:
/**
 * \brief Draw a horizontal line, one pixel wide (generic implementation)
 */
void gfx_mono_draw_horizontal_line(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
                                   enum gfx_mono_color color)
{
     c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c46:	46ce      	mov	lr, r9
     c48:	4647      	mov	r7, r8
     c4a:	b580      	push	{r7, lr}
     c4c:	0006      	movs	r6, r0
     c4e:	a808      	add	r0, sp, #32
     c50:	7800      	ldrb	r0, [r0, #0]
     c52:	4684      	mov	ip, r0
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > me->display->width) {
     c54:	6830      	ldr	r0, [r6, #0]
     c56:	7904      	ldrb	r4, [r0, #4]
     c58:	18c8      	adds	r0, r1, r3
     c5a:	42a0      	cmp	r0, r4
     c5c:	dd01      	ble.n	c62 <gfx_mono_draw_horizontal_line+0x1e>
		length = me->display->width - x;
     c5e:	1a64      	subs	r4, r4, r1
     c60:	b2e3      	uxtb	r3, r4
	}

	page      = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     c62:	2b00      	cmp	r3, #0
     c64:	d03f      	beq.n	ce6 <gfx_mono_draw_horizontal_line+0xa2>
	page      = y / 8;
     c66:	08d5      	lsrs	r5, r2, #3
	pixelmask = (1 << (y - (page * 8)));
     c68:	00e8      	lsls	r0, r5, #3
     c6a:	1a12      	subs	r2, r2, r0
     c6c:	2001      	movs	r0, #1
     c6e:	4090      	lsls	r0, r2
     c70:	b2c7      	uxtb	r7, r0
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     c72:	4662      	mov	r2, ip
     c74:	2a01      	cmp	r2, #1
     c76:	d01d      	beq.n	cb4 <gfx_mono_draw_horizontal_line+0x70>
     c78:	2a00      	cmp	r2, #0
     c7a:	d038      	beq.n	cee <gfx_mono_draw_horizontal_line+0xaa>
     c7c:	2a02      	cmp	r2, #2
     c7e:	d132      	bne.n	ce6 <gfx_mono_draw_horizontal_line+0xa2>
     c80:	3901      	subs	r1, #1
     c82:	b2ca      	uxtb	r2, r1
     c84:	4690      	mov	r8, r2
     c86:	4443      	add	r3, r8
     c88:	b2dc      	uxtb	r4, r3
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = me->display->interface->get_byte(me->display, page, x + length);
     c8a:	6830      	ldr	r0, [r6, #0]
     c8c:	6883      	ldr	r3, [r0, #8]
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	0022      	movs	r2, r4
     c92:	0029      	movs	r1, r5
     c94:	4798      	blx	r3
     c96:	0003      	movs	r3, r0
			temp ^= pixelmask;
			me->display->interface->put_byte(me->display, page, x + length, temp);
     c98:	6830      	ldr	r0, [r6, #0]
			temp ^= pixelmask;
     c9a:	407b      	eors	r3, r7
			me->display->interface->put_byte(me->display, page, x + length, temp);
     c9c:	b2db      	uxtb	r3, r3
     c9e:	6882      	ldr	r2, [r0, #8]
     ca0:	6852      	ldr	r2, [r2, #4]
     ca2:	4691      	mov	r9, r2
     ca4:	0022      	movs	r2, r4
     ca6:	0029      	movs	r1, r5
     ca8:	47c8      	blx	r9
     caa:	3c01      	subs	r4, #1
     cac:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     cae:	4544      	cmp	r4, r8
     cb0:	d1eb      	bne.n	c8a <gfx_mono_draw_horizontal_line+0x46>
     cb2:	e018      	b.n	ce6 <gfx_mono_draw_horizontal_line+0xa2>
     cb4:	3901      	subs	r1, #1
     cb6:	b2ca      	uxtb	r2, r1
     cb8:	4690      	mov	r8, r2
     cba:	4443      	add	r3, r8
     cbc:	b2dc      	uxtb	r4, r3
			temp = me->display->interface->get_byte(me->display, page, x + length);
     cbe:	6830      	ldr	r0, [r6, #0]
     cc0:	6883      	ldr	r3, [r0, #8]
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	0022      	movs	r2, r4
     cc6:	0029      	movs	r1, r5
     cc8:	4798      	blx	r3
     cca:	0003      	movs	r3, r0
			me->display->interface->put_byte(me->display, page, x + length, temp);
     ccc:	6830      	ldr	r0, [r6, #0]
			temp |= pixelmask;
     cce:	433b      	orrs	r3, r7
			me->display->interface->put_byte(me->display, page, x + length, temp);
     cd0:	b2db      	uxtb	r3, r3
     cd2:	6882      	ldr	r2, [r0, #8]
     cd4:	6852      	ldr	r2, [r2, #4]
     cd6:	4691      	mov	r9, r2
     cd8:	0022      	movs	r2, r4
     cda:	0029      	movs	r1, r5
     cdc:	47c8      	blx	r9
     cde:	3c01      	subs	r4, #1
     ce0:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     ce2:	4544      	cmp	r4, r8
     ce4:	d1eb      	bne.n	cbe <gfx_mono_draw_horizontal_line+0x7a>
		break;

	default:
		break;
	}
}
     ce6:	bc0c      	pop	{r2, r3}
     ce8:	4690      	mov	r8, r2
     cea:	4699      	mov	r9, r3
     cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cee:	3901      	subs	r1, #1
     cf0:	b2cf      	uxtb	r7, r1
     cf2:	19db      	adds	r3, r3, r7
     cf4:	b2dc      	uxtb	r4, r3
			temp &= ~pixelmask;
     cf6:	43c3      	mvns	r3, r0
     cf8:	4698      	mov	r8, r3
			temp = me->display->interface->get_byte(me->display, page, x + length);
     cfa:	6830      	ldr	r0, [r6, #0]
     cfc:	6883      	ldr	r3, [r0, #8]
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	0022      	movs	r2, r4
     d02:	0029      	movs	r1, r5
     d04:	4798      	blx	r3
			temp &= ~pixelmask;
     d06:	4643      	mov	r3, r8
     d08:	4003      	ands	r3, r0
			me->display->interface->put_byte(me->display, page, x + length, temp);
     d0a:	6830      	ldr	r0, [r6, #0]
     d0c:	b2db      	uxtb	r3, r3
     d0e:	6882      	ldr	r2, [r0, #8]
     d10:	6852      	ldr	r2, [r2, #4]
     d12:	4691      	mov	r9, r2
     d14:	0022      	movs	r2, r4
     d16:	0029      	movs	r1, r5
     d18:	47c8      	blx	r9
     d1a:	3c01      	subs	r4, #1
     d1c:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
     d1e:	42bc      	cmp	r4, r7
     d20:	d1eb      	bne.n	cfa <gfx_mono_draw_horizontal_line+0xb6>
     d22:	e7e0      	b.n	ce6 <gfx_mono_draw_horizontal_line+0xa2>

00000d24 <gfx_mono_draw_vertical_line>:
/**
 * \brief Draw a vertical line, one pixel wide (generic implementation)
 */
void gfx_mono_draw_vertical_line(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
                                 enum gfx_mono_color color)
{
     d24:	b5f0      	push	{r4, r5, r6, r7, lr}
     d26:	46de      	mov	lr, fp
     d28:	4657      	mov	r7, sl
     d2a:	464e      	mov	r6, r9
     d2c:	4645      	mov	r5, r8
     d2e:	b5e0      	push	{r5, r6, r7, lr}
     d30:	b085      	sub	sp, #20
     d32:	0007      	movs	r7, r0
     d34:	9103      	str	r1, [sp, #12]
     d36:	a90e      	add	r1, sp, #56	; 0x38
     d38:	780e      	ldrb	r6, [r1, #0]
	uint8_t y2bitpos;

	uint8_t y1pixelmask;
	uint8_t y2pixelmask;

	if (length == 0) {
     d3a:	2b00      	cmp	r3, #0
     d3c:	d03e      	beq.n	dbc <gfx_mono_draw_vertical_line+0x98>
		return;
	}

	y2 = y + length - 1;
     d3e:	1e51      	subs	r1, r2, #1
     d40:	1859      	adds	r1, r3, r1
     d42:	b2c9      	uxtb	r1, r1

	if (y == y2) {
     d44:	428a      	cmp	r2, r1
     d46:	d040      	beq.n	dca <gfx_mono_draw_vertical_line+0xa6>
		me->display->interface->draw_pixel(me->display, x, y, color);
		return;
	}

	if (y2 >= me->display->height - 1) {
     d48:	6800      	ldr	r0, [r0, #0]
     d4a:	7943      	ldrb	r3, [r0, #5]
     d4c:	1e5c      	subs	r4, r3, #1
     d4e:	42a1      	cmp	r1, r4
     d50:	db00      	blt.n	d54 <gfx_mono_draw_vertical_line+0x30>
		y2 = me->display->height - 1;
     d52:	b2e1      	uxtb	r1, r4
	}

	y1page = y / 8;
     d54:	08d3      	lsrs	r3, r2, #3
     d56:	4698      	mov	r8, r3
	y2page = y2 / 8;
     d58:	08cd      	lsrs	r5, r1, #3

	y1bitpos = y & 0x07;
     d5a:	2307      	movs	r3, #7
     d5c:	469c      	mov	ip, r3
	y2bitpos = y2 & 0x07;

	y1pixelmask = 0xFF << y1bitpos;
     d5e:	401a      	ands	r2, r3
     d60:	33f8      	adds	r3, #248	; 0xf8
     d62:	001c      	movs	r4, r3
     d64:	4094      	lsls	r4, r2
     d66:	b2e2      	uxtb	r2, r4
     d68:	4693      	mov	fp, r2
	y2pixelmask = 0xFF >> (7 - y2bitpos);
     d6a:	4662      	mov	r2, ip
     d6c:	4011      	ands	r1, r2
     d6e:	1a51      	subs	r1, r2, r1
     d70:	410b      	asrs	r3, r1
     d72:	b2db      	uxtb	r3, r3
     d74:	4699      	mov	r9, r3

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     d76:	45a8      	cmp	r8, r5
     d78:	d02e      	beq.n	dd8 <gfx_mono_draw_vertical_line+0xb4>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)pixelmask, color);
	} else {
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)y1pixelmask, color);
     d7a:	6883      	ldr	r3, [r0, #8]
     d7c:	9600      	str	r6, [sp, #0]
     d7e:	691b      	ldr	r3, [r3, #16]
     d80:	469a      	mov	sl, r3
     d82:	465b      	mov	r3, fp
     d84:	9a03      	ldr	r2, [sp, #12]
     d86:	4641      	mov	r1, r8
     d88:	47d0      	blx	sl

		while (++y1page < y2page) {
     d8a:	4644      	mov	r4, r8
     d8c:	3401      	adds	r4, #1
     d8e:	42a5      	cmp	r5, r4
     d90:	d90c      	bls.n	dac <gfx_mono_draw_vertical_line+0x88>
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
     d92:	6838      	ldr	r0, [r7, #0]
     d94:	6883      	ldr	r3, [r0, #8]
     d96:	9600      	str	r6, [sp, #0]
     d98:	691b      	ldr	r3, [r3, #16]
     d9a:	469a      	mov	sl, r3
     d9c:	23ff      	movs	r3, #255	; 0xff
     d9e:	9a03      	ldr	r2, [sp, #12]
     da0:	0021      	movs	r1, r4
     da2:	47d0      	blx	sl
		while (++y1page < y2page) {
     da4:	3401      	adds	r4, #1
     da6:	b2e4      	uxtb	r4, r4
     da8:	42a5      	cmp	r5, r4
     daa:	d8f2      	bhi.n	d92 <gfx_mono_draw_vertical_line+0x6e>
		}

		me->display->interface->mask_byte(me->display, y2page, x, (enum gfx_mono_color)y2pixelmask, color);
     dac:	6838      	ldr	r0, [r7, #0]
     dae:	6883      	ldr	r3, [r0, #8]
     db0:	9600      	str	r6, [sp, #0]
     db2:	691c      	ldr	r4, [r3, #16]
     db4:	464b      	mov	r3, r9
     db6:	9a03      	ldr	r2, [sp, #12]
     db8:	0029      	movs	r1, r5
     dba:	47a0      	blx	r4
	}
}
     dbc:	b005      	add	sp, #20
     dbe:	bc3c      	pop	{r2, r3, r4, r5}
     dc0:	4690      	mov	r8, r2
     dc2:	4699      	mov	r9, r3
     dc4:	46a2      	mov	sl, r4
     dc6:	46ab      	mov	fp, r5
     dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		me->display->interface->draw_pixel(me->display, x, y, color);
     dca:	6800      	ldr	r0, [r0, #0]
     dcc:	6883      	ldr	r3, [r0, #8]
     dce:	68dc      	ldr	r4, [r3, #12]
     dd0:	0033      	movs	r3, r6
     dd2:	9903      	ldr	r1, [sp, #12]
     dd4:	47a0      	blx	r4
		return;
     dd6:	e7f1      	b.n	dbc <gfx_mono_draw_vertical_line+0x98>
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)pixelmask, color);
     dd8:	465a      	mov	r2, fp
     dda:	4013      	ands	r3, r2
     ddc:	6882      	ldr	r2, [r0, #8]
     dde:	9600      	str	r6, [sp, #0]
     de0:	6916      	ldr	r6, [r2, #16]
     de2:	9a03      	ldr	r2, [sp, #12]
     de4:	4641      	mov	r1, r8
     de6:	47b0      	blx	r6
     de8:	e7e8      	b.n	dbc <gfx_mono_draw_vertical_line+0x98>
	...

00000dec <gfx_mono_draw_rect>:
/**
 * \brief Draw an outline of a rectangle (generic implementation).
 */
void gfx_mono_draw_rect(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t width,
                        gfx_coord_t height, enum gfx_mono_color color)
{
     dec:	b5f0      	push	{r4, r5, r6, r7, lr}
     dee:	b087      	sub	sp, #28
     df0:	000c      	movs	r4, r1
     df2:	0019      	movs	r1, r3
     df4:	ab0c      	add	r3, sp, #48	; 0x30
     df6:	781f      	ldrb	r7, [r3, #0]
     df8:	ab0d      	add	r3, sp, #52	; 0x34
     dfa:	781e      	ldrb	r6, [r3, #0]
	gfx_mono_draw_horizontal_line(me, x, y, width, color);
     dfc:	9600      	str	r6, [sp, #0]
     dfe:	9105      	str	r1, [sp, #20]
     e00:	000b      	movs	r3, r1
     e02:	9204      	str	r2, [sp, #16]
     e04:	0021      	movs	r1, r4
     e06:	9003      	str	r0, [sp, #12]
     e08:	4d0e      	ldr	r5, [pc, #56]	; (e44 <gfx_mono_draw_rect+0x58>)
     e0a:	47a8      	blx	r5
	gfx_mono_draw_horizontal_line(me, x, y + height - 1, width, color);
     e0c:	1e7a      	subs	r2, r7, #1
     e0e:	9b04      	ldr	r3, [sp, #16]
     e10:	469c      	mov	ip, r3
     e12:	4462      	add	r2, ip
     e14:	b2d2      	uxtb	r2, r2
     e16:	9600      	str	r6, [sp, #0]
     e18:	9b05      	ldr	r3, [sp, #20]
     e1a:	0021      	movs	r1, r4
     e1c:	9803      	ldr	r0, [sp, #12]
     e1e:	47a8      	blx	r5

	gfx_mono_draw_vertical_line(me, x, y, height, color);
     e20:	9600      	str	r6, [sp, #0]
     e22:	003b      	movs	r3, r7
     e24:	9a04      	ldr	r2, [sp, #16]
     e26:	0021      	movs	r1, r4
     e28:	9803      	ldr	r0, [sp, #12]
     e2a:	4d07      	ldr	r5, [pc, #28]	; (e48 <gfx_mono_draw_rect+0x5c>)
     e2c:	47a8      	blx	r5
	gfx_mono_draw_vertical_line(me, x + width - 1, y, height, color);
     e2e:	9905      	ldr	r1, [sp, #20]
     e30:	3901      	subs	r1, #1
     e32:	1861      	adds	r1, r4, r1
     e34:	b2c9      	uxtb	r1, r1
     e36:	9600      	str	r6, [sp, #0]
     e38:	003b      	movs	r3, r7
     e3a:	9a04      	ldr	r2, [sp, #16]
     e3c:	9803      	ldr	r0, [sp, #12]
     e3e:	47a8      	blx	r5
}
     e40:	b007      	add	sp, #28
     e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e44:	00000c45 	.word	0x00000c45
     e48:	00000d25 	.word	0x00000d25

00000e4c <gfx_mono_draw_filled_rect>:
/**
 * \brief Draw a filled rectangle (generic implementation).
 */
void gfx_mono_draw_filled_rect(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t width,
                               gfx_coord_t height, enum gfx_mono_color color)
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	b087      	sub	sp, #28
     e50:	9003      	str	r0, [sp, #12]
     e52:	9104      	str	r1, [sp, #16]
     e54:	9305      	str	r3, [sp, #20]
     e56:	ab0c      	add	r3, sp, #48	; 0x30
     e58:	781c      	ldrb	r4, [r3, #0]
     e5a:	ab0d      	add	r3, sp, #52	; 0x34
     e5c:	781f      	ldrb	r7, [r3, #0]
	if (height == 0) {
     e5e:	2c00      	cmp	r4, #0
     e60:	d00e      	beq.n	e80 <gfx_mono_draw_filled_rect+0x34>
     e62:	3a01      	subs	r2, #1
     e64:	b2d6      	uxtb	r6, r2
     e66:	19a4      	adds	r4, r4, r6
     e68:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(me, x, y + height, width, color);
     e6a:	4d06      	ldr	r5, [pc, #24]	; (e84 <gfx_mono_draw_filled_rect+0x38>)
     e6c:	9700      	str	r7, [sp, #0]
     e6e:	9b05      	ldr	r3, [sp, #20]
     e70:	0022      	movs	r2, r4
     e72:	9904      	ldr	r1, [sp, #16]
     e74:	9803      	ldr	r0, [sp, #12]
     e76:	47a8      	blx	r5
     e78:	3c01      	subs	r4, #1
     e7a:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
     e7c:	42b4      	cmp	r4, r6
     e7e:	d1f5      	bne.n	e6c <gfx_mono_draw_filled_rect+0x20>
	}
}
     e80:	b007      	add	sp, #28
     e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e84:	00000c45 	.word	0x00000c45

00000e88 <gfx_mono_text_construct>:
/**
 * \brief Construct GFX mono text
 */
struct gfx_mono_text *gfx_mono_text_construct(struct gfx_mono_text *const me, struct gfx_mono *const gfx)
{
	me->gfx = gfx;
     e88:	6001      	str	r1, [r0, #0]

	return me;
}
     e8a:	4770      	bx	lr

00000e8c <gfx_mono_text_draw_char>:
/**
 * \brief Draws a character to the display
 */
void gfx_mono_text_draw_char(const struct gfx_mono_text *const me, const uint8_t c, const gfx_coord_t x,
                             const gfx_coord_t y, const struct font *font)
{
     e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e8e:	46de      	mov	lr, fp
     e90:	4657      	mov	r7, sl
     e92:	464e      	mov	r6, r9
     e94:	4645      	mov	r5, r8
     e96:	b5e0      	push	{r5, r6, r7, lr}
     e98:	b087      	sub	sp, #28
     e9a:	4683      	mov	fp, r0
     e9c:	000c      	movs	r4, r1
     e9e:	4690      	mov	r8, r2
     ea0:	001d      	movs	r5, r3
	gfx_mono_draw_filled_rect(me->gfx, x, y, font->width, font->height, GFX_PIXEL_CLR);
     ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
     ea4:	7a1b      	ldrb	r3, [r3, #8]
     ea6:	2200      	movs	r2, #0
     ea8:	9201      	str	r2, [sp, #4]
     eaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
     eac:	7a52      	ldrb	r2, [r2, #9]
     eae:	9200      	str	r2, [sp, #0]
     eb0:	002a      	movs	r2, r5
     eb2:	4641      	mov	r1, r8
     eb4:	6800      	ldr	r0, [r0, #0]
     eb6:	4e33      	ldr	r6, [pc, #204]	; (f84 <gfx_mono_text_draw_char+0xf8>)
     eb8:	47b0      	blx	r6

	switch (font->type) {
     eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00b      	beq.n	eda <gfx_mono_text_draw_char+0x4e>
		gfx_mono_text_draw_char_progmem(me, c, x, y, font);
		break;

	default:
		/* Unsupported mode, call assert */
		ASSERT(false);
     ec2:	2244      	movs	r2, #68	; 0x44
     ec4:	4930      	ldr	r1, [pc, #192]	; (f88 <gfx_mono_text_draw_char+0xfc>)
     ec6:	2000      	movs	r0, #0
     ec8:	4b30      	ldr	r3, [pc, #192]	; (f8c <gfx_mono_text_draw_char+0x100>)
     eca:	4798      	blx	r3
		break;
	}
}
     ecc:	b007      	add	sp, #28
     ece:	bc3c      	pop	{r2, r3, r4, r5}
     ed0:	4690      	mov	r8, r2
     ed2:	4699      	mov	r9, r3
     ed4:	46a2      	mov	sl, r4
     ed6:	46ab      	mov	fp, r5
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t               i;
	gfx_coord_t           inc_x = x;
	gfx_coord_t           inc_y = y;

	/* Sanity check on parameters, assert if font is NULL. */
	ASSERT(font != NULL);
     eda:	9810      	ldr	r0, [sp, #64]	; 0x40
     edc:	1e43      	subs	r3, r0, #1
     ede:	4198      	sbcs	r0, r3
     ee0:	b2c0      	uxtb	r0, r0
     ee2:	22f5      	movs	r2, #245	; 0xf5
     ee4:	4928      	ldr	r1, [pc, #160]	; (f88 <gfx_mono_text_draw_char+0xfc>)
     ee6:	4b29      	ldr	r3, [pc, #164]	; (f8c <gfx_mono_text_draw_char+0x100>)
     ee8:	4798      	blx	r3

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
     eec:	7a1a      	ldrb	r2, [r3, #8]
     eee:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     ef0:	0752      	lsls	r2, r2, #29
     ef2:	d000      	beq.n	ef6 <gfx_mono_text_draw_char+0x6a>
		char_row_size++;
     ef4:	3301      	adds	r3, #1
	}

	glyph_data_offset = char_row_size * font->height * ((uint8_t)ch - font->first_char);
     ef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
     ef8:	7a52      	ldrb	r2, [r2, #9]
     efa:	4692      	mov	sl, r2
     efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
     efe:	7a97      	ldrb	r7, [r2, #10]
     f00:	1be7      	subs	r7, r4, r7
     f02:	4652      	mov	r2, sl
     f04:	4357      	muls	r7, r2
     f06:	435f      	muls	r7, r3
	glyph_data        = font->data.progmem + glyph_data_offset;
     f08:	b2bf      	uxth	r7, r7
     f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
     f0c:	685b      	ldr	r3, [r3, #4]
     f0e:	9303      	str	r3, [sp, #12]
     f10:	469c      	mov	ip, r3
     f12:	4467      	add	r7, ip
	gfx_coord_t           inc_y = y;
     f14:	9504      	str	r5, [sp, #16]

	do {
		uint8_t glyph_byte   = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f16:	4643      	mov	r3, r8
     f18:	9305      	str	r3, [sp, #20]
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f1a:	2307      	movs	r3, #7
     f1c:	4699      	mov	r9, r3
     f1e:	e026      	b.n	f6e <gfx_mono_text_draw_char+0xe2>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
				glyph_data++;
			}

			if ((glyph_byte & 0x80)) {
     f20:	b26b      	sxtb	r3, r5
     f22:	2b00      	cmp	r3, #0
     f24:	db0e      	blt.n	f44 <gfx_mono_text_draw_char+0xb8>
				me->gfx->display->interface->draw_pixel(me->gfx->display, inc_x, inc_y, GFX_PIXEL_SET);
			}

			inc_x += 1;
     f26:	3401      	adds	r4, #1
     f28:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
     f2a:	006d      	lsls	r5, r5, #1
     f2c:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
     f2e:	9b03      	ldr	r3, [sp, #12]
     f30:	42a3      	cmp	r3, r4
     f32:	d012      	beq.n	f5a <gfx_mono_text_draw_char+0xce>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f34:	4643      	mov	r3, r8
     f36:	1ae3      	subs	r3, r4, r3
     f38:	464a      	mov	r2, r9
     f3a:	421a      	tst	r2, r3
     f3c:	d1f0      	bne.n	f20 <gfx_mono_text_draw_char+0x94>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f3e:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
     f40:	3701      	adds	r7, #1
     f42:	e7ed      	b.n	f20 <gfx_mono_text_draw_char+0x94>
				me->gfx->display->interface->draw_pixel(me->gfx->display, inc_x, inc_y, GFX_PIXEL_SET);
     f44:	465b      	mov	r3, fp
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	6818      	ldr	r0, [r3, #0]
     f4a:	6883      	ldr	r3, [r0, #8]
     f4c:	68db      	ldr	r3, [r3, #12]
     f4e:	001e      	movs	r6, r3
     f50:	2301      	movs	r3, #1
     f52:	9a04      	ldr	r2, [sp, #16]
     f54:	0021      	movs	r1, r4
     f56:	47b0      	blx	r6
     f58:	e7e5      	b.n	f26 <gfx_mono_text_draw_char+0x9a>
		}

		inc_y += 1;
     f5a:	9b04      	ldr	r3, [sp, #16]
     f5c:	3301      	adds	r3, #1
     f5e:	b2db      	uxtb	r3, r3
     f60:	9304      	str	r3, [sp, #16]
		inc_x = x;
		rows_left--;
     f62:	4653      	mov	r3, sl
     f64:	3b01      	subs	r3, #1
     f66:	b2db      	uxtb	r3, r3
     f68:	469a      	mov	sl, r3
	} while (rows_left > 0);
     f6a:	2b00      	cmp	r3, #0
     f6c:	d0ae      	beq.n	ecc <gfx_mono_text_draw_char+0x40>
		uint8_t pixelsToDraw = font->width;
     f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     f70:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
     f72:	2e00      	cmp	r6, #0
     f74:	d0f1      	beq.n	f5a <gfx_mono_text_draw_char+0xce>
     f76:	4446      	add	r6, r8
     f78:	b2f6      	uxtb	r6, r6
     f7a:	9c05      	ldr	r4, [sp, #20]
     f7c:	2500      	movs	r5, #0
     f7e:	9603      	str	r6, [sp, #12]
     f80:	e7d8      	b.n	f34 <gfx_mono_text_draw_char+0xa8>
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00000e4d 	.word	0x00000e4d
     f88:	0000c9b0 	.word	0x0000c9b0
     f8c:	00002679 	.word	0x00002679

00000f90 <gfx_mono_text_draw_string>:
{
     f90:	b5f0      	push	{r4, r5, r6, r7, lr}
     f92:	46c6      	mov	lr, r8
     f94:	b500      	push	{lr}
     f96:	b084      	sub	sp, #16
     f98:	9002      	str	r0, [sp, #8]
     f9a:	000c      	movs	r4, r1
     f9c:	0016      	movs	r6, r2
     f9e:	4698      	mov	r8, r3
     fa0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	ASSERT(str != NULL);
     fa2:	0008      	movs	r0, r1
     fa4:	1e43      	subs	r3, r0, #1
     fa6:	4198      	sbcs	r0, r3
     fa8:	b2c0      	uxtb	r0, r0
     faa:	2253      	movs	r2, #83	; 0x53
     fac:	4914      	ldr	r1, [pc, #80]	; (1000 <gfx_mono_text_draw_string+0x70>)
     fae:	4f15      	ldr	r7, [pc, #84]	; (1004 <gfx_mono_text_draw_string+0x74>)
     fb0:	47b8      	blx	r7
	ASSERT(font != NULL);
     fb2:	0028      	movs	r0, r5
     fb4:	1e43      	subs	r3, r0, #1
     fb6:	4198      	sbcs	r0, r3
     fb8:	b2c0      	uxtb	r0, r0
     fba:	2254      	movs	r2, #84	; 0x54
     fbc:	4910      	ldr	r1, [pc, #64]	; (1000 <gfx_mono_text_draw_string+0x70>)
     fbe:	47b8      	blx	r7
     fc0:	0037      	movs	r7, r6
			x = start_of_string_position_x;
     fc2:	9603      	str	r6, [sp, #12]
     fc4:	e009      	b.n	fda <gfx_mono_text_draw_string+0x4a>
			y += font->height + 1;
     fc6:	7a6b      	ldrb	r3, [r5, #9]
     fc8:	3301      	adds	r3, #1
     fca:	4443      	add	r3, r8
     fcc:	b2db      	uxtb	r3, r3
     fce:	4698      	mov	r8, r3
			x = start_of_string_position_x;
     fd0:	9f03      	ldr	r7, [sp, #12]
	} while (*(++str));
     fd2:	3401      	adds	r4, #1
     fd4:	7823      	ldrb	r3, [r4, #0]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d00e      	beq.n	ff8 <gfx_mono_text_draw_string+0x68>
		if (*str == '\n') {
     fda:	7821      	ldrb	r1, [r4, #0]
     fdc:	290a      	cmp	r1, #10
     fde:	d0f2      	beq.n	fc6 <gfx_mono_text_draw_string+0x36>
		} else if (*str == '\r') {
     fe0:	290d      	cmp	r1, #13
     fe2:	d0f6      	beq.n	fd2 <gfx_mono_text_draw_string+0x42>
			gfx_mono_text_draw_char(me, *str, x, y, font);
     fe4:	9500      	str	r5, [sp, #0]
     fe6:	4643      	mov	r3, r8
     fe8:	003a      	movs	r2, r7
     fea:	9802      	ldr	r0, [sp, #8]
     fec:	4e06      	ldr	r6, [pc, #24]	; (1008 <gfx_mono_text_draw_string+0x78>)
     fee:	47b0      	blx	r6
			x += font->width;
     ff0:	7a2b      	ldrb	r3, [r5, #8]
     ff2:	18ff      	adds	r7, r7, r3
     ff4:	b2ff      	uxtb	r7, r7
     ff6:	e7ec      	b.n	fd2 <gfx_mono_text_draw_string+0x42>
}
     ff8:	b004      	add	sp, #16
     ffa:	bc04      	pop	{r2}
     ffc:	4690      	mov	r8, r2
     ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1000:	0000c9b0 	.word	0x0000c9b0
    1004:	00002679 	.word	0x00002679
    1008:	00000e8d 	.word	0x00000e8d

0000100c <gfx_mono_init>:

/**
 * \brief Initialize GFX Mono library
 */
void gfx_mono_init(void)
{
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	b082      	sub	sp, #8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1010:	23c0      	movs	r3, #192	; 0xc0
    1012:	05db      	lsls	r3, r3, #23
    1014:	2580      	movs	r5, #128	; 0x80
    1016:	02ad      	lsls	r5, r5, #10
    1018:	2288      	movs	r2, #136	; 0x88
    101a:	509d      	str	r5, [r3, r2]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    101c:	4a1b      	ldr	r2, [pc, #108]	; (108c <gfx_mono_init+0x80>)
    101e:	20a8      	movs	r0, #168	; 0xa8
    1020:	2180      	movs	r1, #128	; 0x80
    1022:	05c9      	lsls	r1, r1, #23
    1024:	5011      	str	r1, [r2, r0]
    1026:	4c1a      	ldr	r4, [pc, #104]	; (1090 <gfx_mono_init+0x84>)
    1028:	5014      	str	r4, [r2, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    102a:	2480      	movs	r4, #128	; 0x80
    102c:	03a4      	lsls	r4, r4, #14
    102e:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1030:	6291      	str	r1, [r2, #40]	; 0x28
    1032:	4818      	ldr	r0, [pc, #96]	; (1094 <gfx_mono_init+0x88>)
    1034:	6290      	str	r0, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1036:	2080      	movs	r0, #128	; 0x80
    1038:	0340      	lsls	r0, r0, #13
    103a:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    103c:	6291      	str	r1, [r2, #40]	; 0x28
    103e:	4916      	ldr	r1, [pc, #88]	; (1098 <gfx_mono_init+0x8c>)
    1040:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1042:	2298      	movs	r2, #152	; 0x98
    1044:	509d      	str	r5, [r3, r2]
    1046:	619c      	str	r4, [r3, #24]
    1048:	6198      	str	r0, [r3, #24]
	gpio_set_pin_direction(MONOCHROME_DISPLAY_CONTROLLER_0_RES_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(MONOCHROME_DISPLAY_CONTROLLER_0_DC_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(MONOCHROME_DISPLAY_CONTROLLER_0_CS_PIN, true);
	gpio_set_pin_level(MONOCHROME_DISPLAY_CONTROLLER_0_RES_PIN, true);
	gpio_set_pin_level(MONOCHROME_DISPLAY_CONTROLLER_0_DC_PIN, true);
	MONOCHROME_TEXT_0_desc.gfx->display->height=UG2832HSWEG04_LCD_HEIGHT;
    104a:	4d14      	ldr	r5, [pc, #80]	; (109c <gfx_mono_init+0x90>)
    104c:	682b      	ldr	r3, [r5, #0]
    104e:	3a58      	subs	r2, #88	; 0x58
    1050:	6819      	ldr	r1, [r3, #0]
    1052:	714a      	strb	r2, [r1, #5]
	MONOCHROME_TEXT_0_desc.gfx->display->height=UG2832HSWEG04_LCD_WIDTH;
    1054:	6819      	ldr	r1, [r3, #0]
    1056:	2380      	movs	r3, #128	; 0x80
    1058:	714b      	strb	r3, [r1, #5]
	MONOCHROME_DISPLAY_0_c12832a1z_desc.parent.height=UG2832HSWEG04_LCD_HEIGHT;
    105a:	4c11      	ldr	r4, [pc, #68]	; (10a0 <gfx_mono_init+0x94>)
    105c:	7162      	strb	r2, [r4, #5]
	MONOCHROME_DISPLAY_0_c12832a1z_desc.parent.width=UG2832HSWEG04_LCD_WIDTH;
    105e:	7123      	strb	r3, [r4, #4]
	ug2832hsweg04_construct(&MONOCHROME_DISPLAY_0_c12832a1z_desc.parent,
    1060:	0021      	movs	r1, r4
    1062:	3128      	adds	r1, #40	; 0x28
    1064:	3b6c      	subs	r3, #108	; 0x6c
    1066:	9301      	str	r3, [sp, #4]
    1068:	3301      	adds	r3, #1
    106a:	9300      	str	r3, [sp, #0]
    106c:	331c      	adds	r3, #28
    106e:	4a0d      	ldr	r2, [pc, #52]	; (10a4 <gfx_mono_init+0x98>)
    1070:	0020      	movs	r0, r4
    1072:	4e0d      	ldr	r6, [pc, #52]	; (10a8 <gfx_mono_init+0x9c>)
    1074:	47b0      	blx	r6
	                        MONOCHROME_DISPLAY_0_buffer,
	                        &SPI_OLED.io,
	                        MONOCHROME_DISPLAY_CONTROLLER_0_CS_PIN,
	                        MONOCHROME_DISPLAY_CONTROLLER_0_RES_PIN,
	                        MONOCHROME_DISPLAY_CONTROLLER_0_DC_PIN);					
	gfx_mono_construct(&MONOCHROME_GRAPHICS_0_desc, &MONOCHROME_DISPLAY_0_c12832a1z_desc.parent);
    1076:	4e0d      	ldr	r6, [pc, #52]	; (10ac <gfx_mono_init+0xa0>)
    1078:	0021      	movs	r1, r4
    107a:	0030      	movs	r0, r6
    107c:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <gfx_mono_init+0xa4>)
    107e:	4798      	blx	r3
	gfx_mono_text_construct(&MONOCHROME_TEXT_0_desc, &MONOCHROME_GRAPHICS_0_desc);
    1080:	0031      	movs	r1, r6
    1082:	0028      	movs	r0, r5
    1084:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <gfx_mono_init+0xa8>)
    1086:	4798      	blx	r3
}
    1088:	b002      	add	sp, #8
    108a:	bd70      	pop	{r4, r5, r6, pc}
    108c:	41004400 	.word	0x41004400
    1090:	c0000002 	.word	0xc0000002
    1094:	c0000020 	.word	0xc0000020
    1098:	c0000010 	.word	0xc0000010
    109c:	20001550 	.word	0x20001550
    10a0:	20000a8c 	.word	0x20000a8c
    10a4:	20001528 	.word	0x20001528
    10a8:	0000098d 	.word	0x0000098d
    10ac:	20001554 	.word	0x20001554
    10b0:	00000c41 	.word	0x00000c41
    10b4:	00000e89 	.word	0x00000e89

000010b8 <GPS_RXD_cb>:

/*
  uart async  RX callback 
*/
 void GPS_RXD_cb(const struct usart_async_descriptor *const io_descr)
{	
    10b8:	b510      	push	{r4, lr}
	usart_async_get_status(&GPS_UART,&async_uart);
    10ba:	4902      	ldr	r1, [pc, #8]	; (10c4 <GPS_RXD_cb+0xc>)
    10bc:	4802      	ldr	r0, [pc, #8]	; (10c8 <GPS_RXD_cb+0x10>)
    10be:	4b03      	ldr	r3, [pc, #12]	; (10cc <GPS_RXD_cb+0x14>)
    10c0:	4798      	blx	r3
	//usart_async_get_status(&io_descr,&async_uart);	
	//ringbuffer_get(&GPS_UART.rx,rxdata);
	//printf("%c",rxdata[0]);
}
    10c2:	bd10      	pop	{r4, pc}
    10c4:	20001640 	.word	0x20001640
    10c8:	200014cc 	.word	0x200014cc
    10cc:	00001efd 	.word	0x00001efd

000010d0 <get_gps_msg_type>:
	reset_gps_msg_info(GPGLL.ID);
	reset_gps_msg_info(GPRMC.ID);
}

uint8_t get_gps_msg_type(uint8_t *uart_msg,char *target_msg)
{
    10d0:	b510      	push	{r4, lr}
		/*any target message must be 6 bytes long including $ sign*/
		const int8_t msg_length=6;
		for (uint8_t tcount=3;tcount<=msg_length;tcount++)
		{
			if (uart_msg[tcount]==target_msg[tcount])
    10d2:	78c2      	ldrb	r2, [r0, #3]
    10d4:	78cb      	ldrb	r3, [r1, #3]
    10d6:	429a      	cmp	r2, r3
    10d8:	d10a      	bne.n	10f0 <get_gps_msg_type+0x20>
    10da:	2304      	movs	r3, #4
    10dc:	5cc4      	ldrb	r4, [r0, r3]
    10de:	5cca      	ldrb	r2, [r1, r3]
    10e0:	4294      	cmp	r4, r2
    10e2:	d107      	bne.n	10f4 <get_gps_msg_type+0x24>
		for (uint8_t tcount=3;tcount<=msg_length;tcount++)
    10e4:	3301      	adds	r3, #1
    10e6:	b2db      	uxtb	r3, r3
    10e8:	2b06      	cmp	r3, #6
    10ea:	ddf7      	ble.n	10dc <get_gps_msg_type+0xc>
				// the message are equal -> continue
			}
			else{ return 0;}//exit the function and return error
		}
		/*if the code reach this point the comparison was a success*/
		return 1;
    10ec:	2001      	movs	r0, #1
}
    10ee:	bd10      	pop	{r4, pc}
			else{ return 0;}//exit the function and return error
    10f0:	2000      	movs	r0, #0
    10f2:	e7fc      	b.n	10ee <get_gps_msg_type+0x1e>
    10f4:	2000      	movs	r0, #0
    10f6:	e7fa      	b.n	10ee <get_gps_msg_type+0x1e>

000010f8 <get_gps_sentence_type>:

uint8_t get_gps_sentence_type(uint8_t uart_rx_byte)
{
    10f8:	b510      	push	{r4, lr}
	if (uart_rx_byte == '$')//dollarchar)
    10fa:	2824      	cmp	r0, #36	; 0x24
    10fc:	d005      	beq.n	110a <get_gps_sentence_type+0x12>
	{
		pstmode=0x01;
		pstptr=0;
	}
	if (pstmode == 0x01)
    10fe:	4b24      	ldr	r3, [pc, #144]	; (1190 <get_gps_sentence_type+0x98>)
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	2b01      	cmp	r3, #1
    1104:	d009      	beq.n	111a <get_gps_sentence_type+0x22>
				//printf("\n<GPGLL.ID>\n");
			}
		}
	 }
	return 1;
}
    1106:	2001      	movs	r0, #1
    1108:	bd10      	pop	{r4, pc}
		pstmode=0x01;
    110a:	2301      	movs	r3, #1
    110c:	4a20      	ldr	r2, [pc, #128]	; (1190 <get_gps_sentence_type+0x98>)
    110e:	7013      	strb	r3, [r2, #0]
		Position_system_type[pstptr]=uart_rx_byte;
    1110:	4a20      	ldr	r2, [pc, #128]	; (1194 <get_gps_sentence_type+0x9c>)
    1112:	7010      	strb	r0, [r2, #0]
		pstptr++;
    1114:	4a20      	ldr	r2, [pc, #128]	; (1198 <get_gps_sentence_type+0xa0>)
    1116:	7013      	strb	r3, [r2, #0]
    1118:	e7f5      	b.n	1106 <get_gps_sentence_type+0xe>
		Position_system_type[pstptr]=uart_rx_byte;
    111a:	4a1f      	ldr	r2, [pc, #124]	; (1198 <get_gps_sentence_type+0xa0>)
    111c:	7813      	ldrb	r3, [r2, #0]
    111e:	491d      	ldr	r1, [pc, #116]	; (1194 <get_gps_sentence_type+0x9c>)
    1120:	54c8      	strb	r0, [r1, r3]
		pstptr++;
    1122:	3301      	adds	r3, #1
    1124:	b2db      	uxtb	r3, r3
    1126:	7013      	strb	r3, [r2, #0]
		if (pstptr >= 6)
    1128:	2b05      	cmp	r3, #5
    112a:	d9ec      	bls.n	1106 <get_gps_sentence_type+0xe>
			pstmode=0;
    112c:	2200      	movs	r2, #0
    112e:	4b18      	ldr	r3, [pc, #96]	; (1190 <get_gps_sentence_type+0x98>)
    1130:	701a      	strb	r2, [r3, #0]
			if(get_gps_msg_type(Position_system_type,GPGGA.message_type) && GPGGA.Enable>0)
    1132:	4b1a      	ldr	r3, [pc, #104]	; (119c <get_gps_sentence_type+0xa4>)
    1134:	6859      	ldr	r1, [r3, #4]
    1136:	4817      	ldr	r0, [pc, #92]	; (1194 <get_gps_sentence_type+0x9c>)
    1138:	4b19      	ldr	r3, [pc, #100]	; (11a0 <get_gps_sentence_type+0xa8>)
    113a:	4798      	blx	r3
    113c:	2800      	cmp	r0, #0
    113e:	d007      	beq.n	1150 <get_gps_sentence_type+0x58>
    1140:	2353      	movs	r3, #83	; 0x53
    1142:	4a16      	ldr	r2, [pc, #88]	; (119c <get_gps_sentence_type+0xa4>)
    1144:	56d3      	ldrsb	r3, [r2, r3]
    1146:	2b00      	cmp	r3, #0
    1148:	dd02      	ble.n	1150 <get_gps_sentence_type+0x58>
				message_detected=GPGGA.ID;
    114a:	7812      	ldrb	r2, [r2, #0]
    114c:	4b15      	ldr	r3, [pc, #84]	; (11a4 <get_gps_sentence_type+0xac>)
    114e:	701a      	strb	r2, [r3, #0]
			if(get_gps_msg_type(Position_system_type,GPRMC.message_type) && GPRMC.Enable>0)
    1150:	4b15      	ldr	r3, [pc, #84]	; (11a8 <get_gps_sentence_type+0xb0>)
    1152:	6859      	ldr	r1, [r3, #4]
    1154:	480f      	ldr	r0, [pc, #60]	; (1194 <get_gps_sentence_type+0x9c>)
    1156:	4b12      	ldr	r3, [pc, #72]	; (11a0 <get_gps_sentence_type+0xa8>)
    1158:	4798      	blx	r3
    115a:	2800      	cmp	r0, #0
    115c:	d007      	beq.n	116e <get_gps_sentence_type+0x76>
    115e:	2361      	movs	r3, #97	; 0x61
    1160:	4a11      	ldr	r2, [pc, #68]	; (11a8 <get_gps_sentence_type+0xb0>)
    1162:	56d3      	ldrsb	r3, [r2, r3]
    1164:	2b00      	cmp	r3, #0
    1166:	dd02      	ble.n	116e <get_gps_sentence_type+0x76>
				message_detected=GPRMC.ID;
    1168:	7812      	ldrb	r2, [r2, #0]
    116a:	4b0e      	ldr	r3, [pc, #56]	; (11a4 <get_gps_sentence_type+0xac>)
    116c:	701a      	strb	r2, [r3, #0]
			if(get_gps_msg_type(Position_system_type,GPGLL.message_type) && GPGLL.Enable>0)
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <get_gps_sentence_type+0xb4>)
    1170:	6859      	ldr	r1, [r3, #4]
    1172:	4808      	ldr	r0, [pc, #32]	; (1194 <get_gps_sentence_type+0x9c>)
    1174:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <get_gps_sentence_type+0xa8>)
    1176:	4798      	blx	r3
    1178:	2800      	cmp	r0, #0
    117a:	d0c4      	beq.n	1106 <get_gps_sentence_type+0xe>
    117c:	2340      	movs	r3, #64	; 0x40
    117e:	4a0b      	ldr	r2, [pc, #44]	; (11ac <get_gps_sentence_type+0xb4>)
    1180:	56d3      	ldrsb	r3, [r2, r3]
    1182:	2b00      	cmp	r3, #0
    1184:	ddbf      	ble.n	1106 <get_gps_sentence_type+0xe>
				message_detected=GPGLL.ID;
    1186:	7812      	ldrb	r2, [r2, #0]
    1188:	4b06      	ldr	r3, [pc, #24]	; (11a4 <get_gps_sentence_type+0xac>)
    118a:	701a      	strb	r2, [r3, #0]
    118c:	e7bb      	b.n	1106 <get_gps_sentence_type+0xe>
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	200015c4 	.word	0x200015c4
    1194:	200016a0 	.word	0x200016a0
    1198:	20001558 	.word	0x20001558
    119c:	20001648 	.word	0x20001648
    11a0:	000010d1 	.word	0x000010d1
    11a4:	2000169c 	.word	0x2000169c
    11a8:	2000155c 	.word	0x2000155c
    11ac:	200015c8 	.word	0x200015c8

000011b0 <get_gps_msg_info>:

int8_t get_gps_msg_info(uint8_t gps_msg_ID,uint8_t msg_to_read,uint8_t uart_rx_byte)
{
    11b0:	b510      	push	{r4, lr}
	if (uart_rx_byte == ',')
    11b2:	2a2c      	cmp	r2, #44	; 0x2c
    11b4:	d022      	beq.n	11fc <get_gps_msg_info+0x4c>
		GPRMC.Gcounter=0;
		GPGLL.Gcounter=0;
		//printf("r-2 ");
		return -2;
	}
	else if (uart_rx_byte == '\n')// entire new message to read
    11b6:	2a0a      	cmp	r2, #10
    11b8:	d02a      	beq.n	1210 <get_gps_msg_info+0x60>
		GPRMC.Gcounter=0;
		GPGLL.Gcounter=0;
		//printf("r-3");
		return -3;
	}
	else if (uart_rx_byte == '*')//chksumsign)// checksum
    11ba:	2a2a      	cmp	r2, #42	; 0x2a
    11bc:	d032      	beq.n	1224 <get_gps_msg_info+0x74>
		GPRMC.Gcounter=0;
		GPGLL.Gcounter=0;
		info_msg_ID++;
		return 1;
	}
	if (gps_msg_ID == GPGGA.ID)
    11be:	4bb5      	ldr	r3, [pc, #724]	; (1494 <get_gps_msg_info+0x2e4>)
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	4283      	cmp	r3, r0
    11c4:	d03b      	beq.n	123e <get_gps_msg_info+0x8e>
			GPGGA.Gcounter++;
		}
		return 1;
	}
	
	if (gps_msg_ID == GPRMC.ID)
    11c6:	4bb4      	ldr	r3, [pc, #720]	; (1498 <get_gps_msg_info+0x2e8>)
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	4283      	cmp	r3, r0
    11cc:	d100      	bne.n	11d0 <get_gps_msg_info+0x20>
    11ce:	e0b6      	b.n	133e <get_gps_msg_info+0x18e>
			GPRMC.Checksum[GPRMC.Gcounter]=uart_rx_byte;
			GPRMC.Gcounter++;
		}
		return 1;
	}
	if (gps_msg_ID == GPGLL.ID)
    11d0:	4bb2      	ldr	r3, [pc, #712]	; (149c <get_gps_msg_info+0x2ec>)
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	4283      	cmp	r3, r0
    11d6:	d000      	beq.n	11da <get_gps_msg_info+0x2a>
    11d8:	e16e      	b.n	14b8 <get_gps_msg_info+0x308>
	{
		if (msg_to_read == 1)//Latitude
    11da:	2901      	cmp	r1, #1
    11dc:	d100      	bne.n	11e0 <get_gps_msg_info+0x30>
    11de:	e12d      	b.n	143c <get_gps_msg_info+0x28c>
		{
			GPGLL.Latitude[GPGLL.Gcounter]=uart_rx_byte;
			GPGLL.Gcounter++;
		}
		if (msg_to_read == 2)//Latitude
    11e0:	2902      	cmp	r1, #2
    11e2:	d100      	bne.n	11e6 <get_gps_msg_info+0x36>
    11e4:	e13d      	b.n	1462 <get_gps_msg_info+0x2b2>
		{
			GPGLL.Latitude_deg=uart_rx_byte;
			GPGLL.Gcounter++;
		}
		if (msg_to_read == 3)//Longitude
    11e6:	2903      	cmp	r1, #3
    11e8:	d000      	beq.n	11ec <get_gps_msg_info+0x3c>
    11ea:	e12d      	b.n	1448 <get_gps_msg_info+0x298>
		{
			GPGLL.Longitude[GPGLL.Gcounter]=uart_rx_byte;
    11ec:	49ab      	ldr	r1, [pc, #684]	; (149c <get_gps_msg_info+0x2ec>)
    11ee:	884b      	ldrh	r3, [r1, #2]
    11f0:	18c8      	adds	r0, r1, r3
    11f2:	7642      	strb	r2, [r0, #25]
			GPGLL.Gcounter++;
    11f4:	3301      	adds	r3, #1
    11f6:	804b      	strh	r3, [r1, #2]
		{
			
			GPGLL.Checksum[GPGLL.Gcounter]=uart_rx_byte;
			GPGLL.Gcounter++;
		}
		return 1;
    11f8:	2001      	movs	r0, #1
    11fa:	e01f      	b.n	123c <get_gps_msg_info+0x8c>
		GPGGA.Gcounter=0;
    11fc:	2300      	movs	r3, #0
    11fe:	4aa5      	ldr	r2, [pc, #660]	; (1494 <get_gps_msg_info+0x2e4>)
    1200:	8053      	strh	r3, [r2, #2]
		GPRMC.Gcounter=0;
    1202:	4aa5      	ldr	r2, [pc, #660]	; (1498 <get_gps_msg_info+0x2e8>)
    1204:	8053      	strh	r3, [r2, #2]
		GPGLL.Gcounter=0;
    1206:	4aa5      	ldr	r2, [pc, #660]	; (149c <get_gps_msg_info+0x2ec>)
    1208:	8053      	strh	r3, [r2, #2]
		return -2;
    120a:	2002      	movs	r0, #2
    120c:	4240      	negs	r0, r0
    120e:	e015      	b.n	123c <get_gps_msg_info+0x8c>
		GPGGA.Gcounter=0;
    1210:	2300      	movs	r3, #0
    1212:	4aa0      	ldr	r2, [pc, #640]	; (1494 <get_gps_msg_info+0x2e4>)
    1214:	8053      	strh	r3, [r2, #2]
		GPRMC.Gcounter=0;
    1216:	4aa0      	ldr	r2, [pc, #640]	; (1498 <get_gps_msg_info+0x2e8>)
    1218:	8053      	strh	r3, [r2, #2]
		GPGLL.Gcounter=0;
    121a:	4aa0      	ldr	r2, [pc, #640]	; (149c <get_gps_msg_info+0x2ec>)
    121c:	8053      	strh	r3, [r2, #2]
		return -3;
    121e:	2003      	movs	r0, #3
    1220:	4240      	negs	r0, r0
    1222:	e00b      	b.n	123c <get_gps_msg_info+0x8c>
		GPGGA.Gcounter=0;
    1224:	2300      	movs	r3, #0
    1226:	4a9b      	ldr	r2, [pc, #620]	; (1494 <get_gps_msg_info+0x2e4>)
    1228:	8053      	strh	r3, [r2, #2]
		GPRMC.Gcounter=0;
    122a:	4a9b      	ldr	r2, [pc, #620]	; (1498 <get_gps_msg_info+0x2e8>)
    122c:	8053      	strh	r3, [r2, #2]
		GPGLL.Gcounter=0;
    122e:	4a9b      	ldr	r2, [pc, #620]	; (149c <get_gps_msg_info+0x2ec>)
    1230:	8053      	strh	r3, [r2, #2]
		info_msg_ID++;
    1232:	4a9b      	ldr	r2, [pc, #620]	; (14a0 <get_gps_msg_info+0x2f0>)
    1234:	7813      	ldrb	r3, [r2, #0]
    1236:	3301      	adds	r3, #1
    1238:	7013      	strb	r3, [r2, #0]
		return 1;
    123a:	2001      	movs	r0, #1
	}
	return -1;
}
    123c:	bd10      	pop	{r4, pc}
		if (msg_to_read == 1)//Time message to
    123e:	2901      	cmp	r1, #1
    1240:	d021      	beq.n	1286 <get_gps_msg_info+0xd6>
		else if (msg_to_read == 2)//latitude info
    1242:	2902      	cmp	r1, #2
    1244:	d027      	beq.n	1296 <get_gps_msg_info+0xe6>
		else if (msg_to_read == 3)//latitude deg
    1246:	2903      	cmp	r1, #3
    1248:	d02d      	beq.n	12a6 <get_gps_msg_info+0xf6>
		else if (msg_to_read == 4)//Longitude
    124a:	2904      	cmp	r1, #4
    124c:	d030      	beq.n	12b0 <get_gps_msg_info+0x100>
		else if (msg_to_read == 5)//Longitude deg
    124e:	2905      	cmp	r1, #5
    1250:	d037      	beq.n	12c2 <get_gps_msg_info+0x112>
		else if (msg_to_read == 6)//fix
    1252:	2906      	cmp	r1, #6
    1254:	d03a      	beq.n	12cc <get_gps_msg_info+0x11c>
		else if (msg_to_read == 7)//number_of_satallite
    1256:	2907      	cmp	r1, #7
    1258:	d03d      	beq.n	12d6 <get_gps_msg_info+0x126>
		else if (msg_to_read == 8)//HDOP
    125a:	2908      	cmp	r1, #8
    125c:	d044      	beq.n	12e8 <get_gps_msg_info+0x138>
		else if (msg_to_read == 9)//Altitude
    125e:	2909      	cmp	r1, #9
    1260:	d04b      	beq.n	12fa <get_gps_msg_info+0x14a>
		else if (msg_to_read == 10)//Altitude_unit
    1262:	290a      	cmp	r1, #10
    1264:	d052      	beq.n	130c <get_gps_msg_info+0x15c>
		else if (msg_to_read == 11)//HOG
    1266:	290b      	cmp	r1, #11
    1268:	d058      	beq.n	131c <get_gps_msg_info+0x16c>
		else if (msg_to_read == 12)//HOG_unit
    126a:	290c      	cmp	r1, #12
    126c:	d05f      	beq.n	132e <get_gps_msg_info+0x17e>
		return 1;
    126e:	2001      	movs	r0, #1
		else if (msg_to_read == 15)//Checksum
    1270:	290f      	cmp	r1, #15
    1272:	d1e3      	bne.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Checksum[GPGGA.Gcounter]=uart_rx_byte;
    1274:	4987      	ldr	r1, [pc, #540]	; (1494 <get_gps_msg_info+0x2e4>)
    1276:	884b      	ldrh	r3, [r1, #2]
    1278:	18c8      	adds	r0, r1, r3
    127a:	304d      	adds	r0, #77	; 0x4d
    127c:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    127e:	3301      	adds	r3, #1
    1280:	804b      	strh	r3, [r1, #2]
		return 1;
    1282:	2001      	movs	r0, #1
    1284:	e7da      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Time[GPGGA.Gcounter]=uart_rx_byte;
    1286:	4983      	ldr	r1, [pc, #524]	; (1494 <get_gps_msg_info+0x2e4>)
    1288:	884b      	ldrh	r3, [r1, #2]
    128a:	18c8      	adds	r0, r1, r3
    128c:	7202      	strb	r2, [r0, #8]
			GPGGA.Gcounter++;
    128e:	3301      	adds	r3, #1
    1290:	804b      	strh	r3, [r1, #2]
		return 1;
    1292:	2001      	movs	r0, #1
    1294:	e7d2      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Latitude[GPGGA.Gcounter]=uart_rx_byte;
    1296:	497f      	ldr	r1, [pc, #508]	; (1494 <get_gps_msg_info+0x2e4>)
    1298:	884b      	ldrh	r3, [r1, #2]
    129a:	18c8      	adds	r0, r1, r3
    129c:	7502      	strb	r2, [r0, #20]
			GPGGA.Gcounter++;
    129e:	3301      	adds	r3, #1
    12a0:	804b      	strh	r3, [r1, #2]
		return 1;
    12a2:	2001      	movs	r0, #1
    12a4:	e7ca      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Latitude_deg=uart_rx_byte;
    12a6:	2324      	movs	r3, #36	; 0x24
    12a8:	497a      	ldr	r1, [pc, #488]	; (1494 <get_gps_msg_info+0x2e4>)
    12aa:	54ca      	strb	r2, [r1, r3]
		return 1;
    12ac:	2001      	movs	r0, #1
    12ae:	e7c5      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Longitude[GPGGA.Gcounter]=uart_rx_byte;
    12b0:	4978      	ldr	r1, [pc, #480]	; (1494 <get_gps_msg_info+0x2e4>)
    12b2:	884b      	ldrh	r3, [r1, #2]
    12b4:	18c8      	adds	r0, r1, r3
    12b6:	3025      	adds	r0, #37	; 0x25
    12b8:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    12ba:	3301      	adds	r3, #1
    12bc:	804b      	strh	r3, [r1, #2]
		return 1;
    12be:	2001      	movs	r0, #1
    12c0:	e7bc      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Longitude_deg=uart_rx_byte;
    12c2:	2335      	movs	r3, #53	; 0x35
    12c4:	4973      	ldr	r1, [pc, #460]	; (1494 <get_gps_msg_info+0x2e4>)
    12c6:	54ca      	strb	r2, [r1, r3]
		return 1;
    12c8:	2001      	movs	r0, #1
    12ca:	e7b7      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.fix=uart_rx_byte;
    12cc:	2336      	movs	r3, #54	; 0x36
    12ce:	4971      	ldr	r1, [pc, #452]	; (1494 <get_gps_msg_info+0x2e4>)
    12d0:	54ca      	strb	r2, [r1, r3]
		return 1;
    12d2:	2001      	movs	r0, #1
    12d4:	e7b2      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.number_of_satallite[GPGGA.Gcounter]=uart_rx_byte;
    12d6:	496f      	ldr	r1, [pc, #444]	; (1494 <get_gps_msg_info+0x2e4>)
    12d8:	884b      	ldrh	r3, [r1, #2]
    12da:	18c8      	adds	r0, r1, r3
    12dc:	3037      	adds	r0, #55	; 0x37
    12de:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    12e0:	3301      	adds	r3, #1
    12e2:	804b      	strh	r3, [r1, #2]
		return 1;
    12e4:	2001      	movs	r0, #1
    12e6:	e7a9      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.HDOP[GPGGA.Gcounter]=uart_rx_byte;
    12e8:	496a      	ldr	r1, [pc, #424]	; (1494 <get_gps_msg_info+0x2e4>)
    12ea:	884b      	ldrh	r3, [r1, #2]
    12ec:	18c8      	adds	r0, r1, r3
    12ee:	303a      	adds	r0, #58	; 0x3a
    12f0:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    12f2:	3301      	adds	r3, #1
    12f4:	804b      	strh	r3, [r1, #2]
		return 1;
    12f6:	2001      	movs	r0, #1
    12f8:	e7a0      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Altitude[GPGGA.Gcounter]=uart_rx_byte;
    12fa:	4966      	ldr	r1, [pc, #408]	; (1494 <get_gps_msg_info+0x2e4>)
    12fc:	884b      	ldrh	r3, [r1, #2]
    12fe:	18c8      	adds	r0, r1, r3
    1300:	303e      	adds	r0, #62	; 0x3e
    1302:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    1304:	3301      	adds	r3, #1
    1306:	804b      	strh	r3, [r1, #2]
		return 1;
    1308:	2001      	movs	r0, #1
    130a:	e797      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.Altitude_unit=uart_rx_byte;
    130c:	4b61      	ldr	r3, [pc, #388]	; (1494 <get_gps_msg_info+0x2e4>)
    130e:	313c      	adds	r1, #60	; 0x3c
    1310:	545a      	strb	r2, [r3, r1]
			GPGGA.Gcounter++;
    1312:	885a      	ldrh	r2, [r3, #2]
    1314:	3201      	adds	r2, #1
    1316:	805a      	strh	r2, [r3, #2]
		return 1;
    1318:	2001      	movs	r0, #1
    131a:	e78f      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.HOG[GPGGA.Gcounter]=uart_rx_byte;
    131c:	495d      	ldr	r1, [pc, #372]	; (1494 <get_gps_msg_info+0x2e4>)
    131e:	884b      	ldrh	r3, [r1, #2]
    1320:	18c8      	adds	r0, r1, r3
    1322:	3047      	adds	r0, #71	; 0x47
    1324:	7002      	strb	r2, [r0, #0]
			GPGGA.Gcounter++;
    1326:	3301      	adds	r3, #1
    1328:	804b      	strh	r3, [r1, #2]
		return 1;
    132a:	2001      	movs	r0, #1
    132c:	e786      	b.n	123c <get_gps_msg_info+0x8c>
			GPGGA.HOG_unit=uart_rx_byte;
    132e:	4b59      	ldr	r3, [pc, #356]	; (1494 <get_gps_msg_info+0x2e4>)
    1330:	3140      	adds	r1, #64	; 0x40
    1332:	545a      	strb	r2, [r3, r1]
			GPGGA.Gcounter++;
    1334:	885a      	ldrh	r2, [r3, #2]
    1336:	3201      	adds	r2, #1
    1338:	805a      	strh	r2, [r3, #2]
		return 1;
    133a:	2001      	movs	r0, #1
    133c:	e77e      	b.n	123c <get_gps_msg_info+0x8c>
		if (msg_to_read == 1)//fix taken message to
    133e:	2901      	cmp	r1, #1
    1340:	d020      	beq.n	1384 <get_gps_msg_info+0x1d4>
		else if (msg_to_read == 2)//status
    1342:	2902      	cmp	r1, #2
    1344:	d026      	beq.n	1394 <get_gps_msg_info+0x1e4>
		else if (msg_to_read == 3)//Latitude
    1346:	2903      	cmp	r1, #3
    1348:	d02b      	beq.n	13a2 <get_gps_msg_info+0x1f2>
		else if (msg_to_read == 4)//Latitude deg
    134a:	2904      	cmp	r1, #4
    134c:	d031      	beq.n	13b2 <get_gps_msg_info+0x202>
		else if (msg_to_read == 5)//Longitude
    134e:	2905      	cmp	r1, #5
    1350:	d037      	beq.n	13c2 <get_gps_msg_info+0x212>
		else if (msg_to_read == 6)//Longitude deg
    1352:	2906      	cmp	r1, #6
    1354:	d03e      	beq.n	13d4 <get_gps_msg_info+0x224>
		else if (msg_to_read == 7)//speed o gnd
    1356:	2907      	cmp	r1, #7
    1358:	d044      	beq.n	13e4 <get_gps_msg_info+0x234>
		else if (msg_to_read == 8)//track angle deg
    135a:	2908      	cmp	r1, #8
    135c:	d04b      	beq.n	13f6 <get_gps_msg_info+0x246>
		else if (msg_to_read == 9)//Date
    135e:	2909      	cmp	r1, #9
    1360:	d052      	beq.n	1408 <get_gps_msg_info+0x258>
		else if (msg_to_read == 10)//Magnatic_Variation
    1362:	290a      	cmp	r1, #10
    1364:	d059      	beq.n	141a <get_gps_msg_info+0x26a>
		else if (msg_to_read == 11)//Mag_Var_pole
    1366:	290b      	cmp	r1, #11
    1368:	d060      	beq.n	142c <get_gps_msg_info+0x27c>
		return 1;
    136a:	2001      	movs	r0, #1
		else if (msg_to_read == 13)//Checksum
    136c:	290d      	cmp	r1, #13
    136e:	d000      	beq.n	1372 <get_gps_msg_info+0x1c2>
    1370:	e764      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Checksum[GPRMC.Gcounter]=uart_rx_byte;
    1372:	4949      	ldr	r1, [pc, #292]	; (1498 <get_gps_msg_info+0x2e8>)
    1374:	884b      	ldrh	r3, [r1, #2]
    1376:	18c8      	adds	r0, r1, r3
    1378:	305c      	adds	r0, #92	; 0x5c
    137a:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    137c:	3301      	adds	r3, #1
    137e:	804b      	strh	r3, [r1, #2]
		return 1;
    1380:	2001      	movs	r0, #1
    1382:	e75b      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Fix_taken[GPRMC.Gcounter]=uart_rx_byte;
    1384:	4944      	ldr	r1, [pc, #272]	; (1498 <get_gps_msg_info+0x2e8>)
    1386:	884b      	ldrh	r3, [r1, #2]
    1388:	18c8      	adds	r0, r1, r3
    138a:	7202      	strb	r2, [r0, #8]
			GPRMC.Gcounter++;
    138c:	3301      	adds	r3, #1
    138e:	804b      	strh	r3, [r1, #2]
		return 1;
    1390:	2001      	movs	r0, #1
    1392:	e753      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.status=uart_rx_byte;
    1394:	4b40      	ldr	r3, [pc, #256]	; (1498 <get_gps_msg_info+0x2e8>)
    1396:	761a      	strb	r2, [r3, #24]
			GPRMC.Gcounter++;
    1398:	885a      	ldrh	r2, [r3, #2]
    139a:	3201      	adds	r2, #1
    139c:	805a      	strh	r2, [r3, #2]
		return 1;
    139e:	2001      	movs	r0, #1
    13a0:	e74c      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Latitude[GPRMC.Gcounter]=uart_rx_byte;
    13a2:	493d      	ldr	r1, [pc, #244]	; (1498 <get_gps_msg_info+0x2e8>)
    13a4:	884b      	ldrh	r3, [r1, #2]
    13a6:	18c8      	adds	r0, r1, r3
    13a8:	7642      	strb	r2, [r0, #25]
			GPRMC.Gcounter++;
    13aa:	3301      	adds	r3, #1
    13ac:	804b      	strh	r3, [r1, #2]
		return 1;
    13ae:	2001      	movs	r0, #1
    13b0:	e744      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Latitude_deg=uart_rx_byte;
    13b2:	4b39      	ldr	r3, [pc, #228]	; (1498 <get_gps_msg_info+0x2e8>)
    13b4:	3125      	adds	r1, #37	; 0x25
    13b6:	545a      	strb	r2, [r3, r1]
			GPRMC.Gcounter++;
    13b8:	885a      	ldrh	r2, [r3, #2]
    13ba:	3201      	adds	r2, #1
    13bc:	805a      	strh	r2, [r3, #2]
		return 1;
    13be:	2001      	movs	r0, #1
    13c0:	e73c      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Longitude[GPRMC.Gcounter]=uart_rx_byte;
    13c2:	4935      	ldr	r1, [pc, #212]	; (1498 <get_gps_msg_info+0x2e8>)
    13c4:	884b      	ldrh	r3, [r1, #2]
    13c6:	18c8      	adds	r0, r1, r3
    13c8:	302a      	adds	r0, #42	; 0x2a
    13ca:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    13cc:	3301      	adds	r3, #1
    13ce:	804b      	strh	r3, [r1, #2]
		return 1;
    13d0:	2001      	movs	r0, #1
    13d2:	e733      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Longitude_deg=uart_rx_byte;
    13d4:	4b30      	ldr	r3, [pc, #192]	; (1498 <get_gps_msg_info+0x2e8>)
    13d6:	3134      	adds	r1, #52	; 0x34
    13d8:	545a      	strb	r2, [r3, r1]
			GPRMC.Gcounter++;
    13da:	885a      	ldrh	r2, [r3, #2]
    13dc:	3201      	adds	r2, #1
    13de:	805a      	strh	r2, [r3, #2]
		return 1;
    13e0:	2001      	movs	r0, #1
    13e2:	e72b      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.speed_o_ground[GPRMC.Gcounter]=uart_rx_byte;
    13e4:	492c      	ldr	r1, [pc, #176]	; (1498 <get_gps_msg_info+0x2e8>)
    13e6:	884b      	ldrh	r3, [r1, #2]
    13e8:	18c8      	adds	r0, r1, r3
    13ea:	303b      	adds	r0, #59	; 0x3b
    13ec:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    13ee:	3301      	adds	r3, #1
    13f0:	804b      	strh	r3, [r1, #2]
		return 1;
    13f2:	2001      	movs	r0, #1
    13f4:	e722      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.track_angle_deg[GPRMC.Gcounter]=uart_rx_byte;
    13f6:	4928      	ldr	r1, [pc, #160]	; (1498 <get_gps_msg_info+0x2e8>)
    13f8:	884b      	ldrh	r3, [r1, #2]
    13fa:	18c8      	adds	r0, r1, r3
    13fc:	3043      	adds	r0, #67	; 0x43
    13fe:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    1400:	3301      	adds	r3, #1
    1402:	804b      	strh	r3, [r1, #2]
		return 1;
    1404:	2001      	movs	r0, #1
    1406:	e719      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Date[GPRMC.Gcounter]=uart_rx_byte;
    1408:	4923      	ldr	r1, [pc, #140]	; (1498 <get_gps_msg_info+0x2e8>)
    140a:	884b      	ldrh	r3, [r1, #2]
    140c:	18c8      	adds	r0, r1, r3
    140e:	304b      	adds	r0, #75	; 0x4b
    1410:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    1412:	3301      	adds	r3, #1
    1414:	804b      	strh	r3, [r1, #2]
		return 1;
    1416:	2001      	movs	r0, #1
    1418:	e710      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Magnatic_Variation[GPRMC.Gcounter]=uart_rx_byte;
    141a:	491f      	ldr	r1, [pc, #124]	; (1498 <get_gps_msg_info+0x2e8>)
    141c:	884b      	ldrh	r3, [r1, #2]
    141e:	18c8      	adds	r0, r1, r3
    1420:	3053      	adds	r0, #83	; 0x53
    1422:	7002      	strb	r2, [r0, #0]
			GPRMC.Gcounter++;
    1424:	3301      	adds	r3, #1
    1426:	804b      	strh	r3, [r1, #2]
		return 1;
    1428:	2001      	movs	r0, #1
    142a:	e707      	b.n	123c <get_gps_msg_info+0x8c>
			GPRMC.Mag_Var_pole=uart_rx_byte;
    142c:	4b1a      	ldr	r3, [pc, #104]	; (1498 <get_gps_msg_info+0x2e8>)
    142e:	3150      	adds	r1, #80	; 0x50
    1430:	545a      	strb	r2, [r3, r1]
			GPRMC.Gcounter++;
    1432:	885a      	ldrh	r2, [r3, #2]
    1434:	3201      	adds	r2, #1
    1436:	805a      	strh	r2, [r3, #2]
		return 1;
    1438:	2001      	movs	r0, #1
    143a:	e6ff      	b.n	123c <get_gps_msg_info+0x8c>
			GPGLL.Latitude[GPGLL.Gcounter]=uart_rx_byte;
    143c:	4817      	ldr	r0, [pc, #92]	; (149c <get_gps_msg_info+0x2ec>)
    143e:	8843      	ldrh	r3, [r0, #2]
    1440:	18c4      	adds	r4, r0, r3
    1442:	7222      	strb	r2, [r4, #8]
			GPGLL.Gcounter++;
    1444:	3301      	adds	r3, #1
    1446:	8043      	strh	r3, [r0, #2]
		if (msg_to_read == 4)//Longitude_deg
    1448:	2904      	cmp	r1, #4
    144a:	d01b      	beq.n	1484 <get_gps_msg_info+0x2d4>
		else if (msg_to_read == 5)//Fix_taken
    144c:	2905      	cmp	r1, #5
    144e:	d129      	bne.n	14a4 <get_gps_msg_info+0x2f4>
			GPGLL.Fix_taken[GPGLL.Gcounter]=uart_rx_byte;
    1450:	4912      	ldr	r1, [pc, #72]	; (149c <get_gps_msg_info+0x2ec>)
    1452:	884b      	ldrh	r3, [r1, #2]
    1454:	18c8      	adds	r0, r1, r3
    1456:	302a      	adds	r0, #42	; 0x2a
    1458:	7002      	strb	r2, [r0, #0]
			GPGLL.Gcounter++;
    145a:	3301      	adds	r3, #1
    145c:	804b      	strh	r3, [r1, #2]
		return 1;
    145e:	2001      	movs	r0, #1
    1460:	e6ec      	b.n	123c <get_gps_msg_info+0x8c>
			GPGLL.Latitude_deg=uart_rx_byte;
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <get_gps_msg_info+0x2ec>)
    1464:	761a      	strb	r2, [r3, #24]
			GPGLL.Gcounter++;
    1466:	8858      	ldrh	r0, [r3, #2]
    1468:	3001      	adds	r0, #1
    146a:	8058      	strh	r0, [r3, #2]
		else if (msg_to_read == 8 || msg_to_read == 7)//Checksum need to check
    146c:	3907      	subs	r1, #7
    146e:	2901      	cmp	r1, #1
    1470:	d825      	bhi.n	14be <get_gps_msg_info+0x30e>
			GPGLL.Checksum[GPGLL.Gcounter]=uart_rx_byte;
    1472:	490a      	ldr	r1, [pc, #40]	; (149c <get_gps_msg_info+0x2ec>)
    1474:	884b      	ldrh	r3, [r1, #2]
    1476:	18c8      	adds	r0, r1, r3
    1478:	303b      	adds	r0, #59	; 0x3b
    147a:	7002      	strb	r2, [r0, #0]
			GPGLL.Gcounter++;
    147c:	3301      	adds	r3, #1
    147e:	804b      	strh	r3, [r1, #2]
		return 1;
    1480:	2001      	movs	r0, #1
    1482:	e6db      	b.n	123c <get_gps_msg_info+0x8c>
			GPGLL.Longitude_deg=uart_rx_byte;
    1484:	4b05      	ldr	r3, [pc, #20]	; (149c <get_gps_msg_info+0x2ec>)
    1486:	3125      	adds	r1, #37	; 0x25
    1488:	545a      	strb	r2, [r3, r1]
			GPGLL.Gcounter++;
    148a:	885a      	ldrh	r2, [r3, #2]
    148c:	3201      	adds	r2, #1
    148e:	805a      	strh	r2, [r3, #2]
		return 1;
    1490:	2001      	movs	r0, #1
    1492:	e6d3      	b.n	123c <get_gps_msg_info+0x8c>
    1494:	20001648 	.word	0x20001648
    1498:	2000155c 	.word	0x2000155c
    149c:	200015c8 	.word	0x200015c8
    14a0:	2000169d 	.word	0x2000169d
		else if (msg_to_read == 6)//Data_active
    14a4:	2906      	cmp	r1, #6
    14a6:	d1e1      	bne.n	146c <get_gps_msg_info+0x2bc>
			GPGLL.Data_active=uart_rx_byte;
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <get_gps_msg_info+0x314>)
    14aa:	3134      	adds	r1, #52	; 0x34
    14ac:	545a      	strb	r2, [r3, r1]
			GPGLL.Gcounter++;
    14ae:	885a      	ldrh	r2, [r3, #2]
    14b0:	3201      	adds	r2, #1
    14b2:	805a      	strh	r2, [r3, #2]
		return 1;
    14b4:	2001      	movs	r0, #1
    14b6:	e6c1      	b.n	123c <get_gps_msg_info+0x8c>
	return -1;
    14b8:	2001      	movs	r0, #1
    14ba:	4240      	negs	r0, r0
    14bc:	e6be      	b.n	123c <get_gps_msg_info+0x8c>
		return 1;
    14be:	2001      	movs	r0, #1
    14c0:	e6bc      	b.n	123c <get_gps_msg_info+0x8c>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	200015c8 	.word	0x200015c8

000014c8 <reset_gps_msg_info>:

void reset_gps_msg_info(int8_t message_ID)
{
    14c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (message_ID == GPGGA.ID)
    14ca:	4b3e      	ldr	r3, [pc, #248]	; (15c4 <reset_gps_msg_info+0xfc>)
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	4298      	cmp	r0, r3
    14d0:	d008      	beq.n	14e4 <reset_gps_msg_info+0x1c>
		memset(GPGGA.Longitude,'0',strlen(GPGGA.Longitude));
		GPGGA.fix='0';
		GPGGA.Latitude_deg =' ';
		GPGGA.Longitude_deg=' ';
	}
	else if (message_ID == GPGLL.ID)
    14d2:	4b3d      	ldr	r3, [pc, #244]	; (15c8 <reset_gps_msg_info+0x100>)
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	4298      	cmp	r0, r3
    14d8:	d027      	beq.n	152a <reset_gps_msg_info+0x62>
		memset(GPGLL.Fix_taken,'0',strlen(GPGLL.Fix_taken));
		GPGLL.Data_active='V';
		GPGLL.Latitude_deg =' ';
		GPGLL.Longitude_deg=' ';
	}
	else if (message_ID == GPRMC.ID)
    14da:	4b3c      	ldr	r3, [pc, #240]	; (15cc <reset_gps_msg_info+0x104>)
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	4298      	cmp	r0, r3
    14e0:	d045      	beq.n	156e <reset_gps_msg_info+0xa6>
		memset(GPRMC.Date,'0',strlen(GPRMC.Date));
		GPRMC.status='V';
		GPRMC.Latitude_deg =' ';
		GPRMC.Longitude_deg=' ';
	}
}
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(GPGGA.Time,'0',strlen(GPGGA.Time));
    14e4:	4c3a      	ldr	r4, [pc, #232]	; (15d0 <reset_gps_msg_info+0x108>)
    14e6:	0020      	movs	r0, r4
    14e8:	4e3a      	ldr	r6, [pc, #232]	; (15d4 <reset_gps_msg_info+0x10c>)
    14ea:	47b0      	blx	r6
    14ec:	0002      	movs	r2, r0
    14ee:	2130      	movs	r1, #48	; 0x30
    14f0:	0020      	movs	r0, r4
    14f2:	4d39      	ldr	r5, [pc, #228]	; (15d8 <reset_gps_msg_info+0x110>)
    14f4:	47a8      	blx	r5
		memset(GPGGA.Latitude,'0',strlen(GPGGA.Latitude));
    14f6:	0027      	movs	r7, r4
    14f8:	370c      	adds	r7, #12
    14fa:	0038      	movs	r0, r7
    14fc:	47b0      	blx	r6
    14fe:	0002      	movs	r2, r0
    1500:	2130      	movs	r1, #48	; 0x30
    1502:	0038      	movs	r0, r7
    1504:	47a8      	blx	r5
		memset(GPGGA.Longitude,'0',strlen(GPGGA.Longitude));
    1506:	0027      	movs	r7, r4
    1508:	371d      	adds	r7, #29
    150a:	0038      	movs	r0, r7
    150c:	47b0      	blx	r6
    150e:	0002      	movs	r2, r0
    1510:	2130      	movs	r1, #48	; 0x30
    1512:	0038      	movs	r0, r7
    1514:	47a8      	blx	r5
		GPGGA.fix='0';
    1516:	3c08      	subs	r4, #8
    1518:	2230      	movs	r2, #48	; 0x30
    151a:	2336      	movs	r3, #54	; 0x36
    151c:	54e2      	strb	r2, [r4, r3]
		GPGGA.Latitude_deg =' ';
    151e:	3b16      	subs	r3, #22
    1520:	3a0c      	subs	r2, #12
    1522:	54a3      	strb	r3, [r4, r2]
		GPGGA.Longitude_deg=' ';
    1524:	3211      	adds	r2, #17
    1526:	54a3      	strb	r3, [r4, r2]
    1528:	e7db      	b.n	14e2 <reset_gps_msg_info+0x1a>
		memset(GPGLL.Latitude,'0',strlen(GPGLL.Latitude));
    152a:	4c2c      	ldr	r4, [pc, #176]	; (15dc <reset_gps_msg_info+0x114>)
    152c:	0020      	movs	r0, r4
    152e:	4e29      	ldr	r6, [pc, #164]	; (15d4 <reset_gps_msg_info+0x10c>)
    1530:	47b0      	blx	r6
    1532:	0002      	movs	r2, r0
    1534:	2130      	movs	r1, #48	; 0x30
    1536:	0020      	movs	r0, r4
    1538:	4d27      	ldr	r5, [pc, #156]	; (15d8 <reset_gps_msg_info+0x110>)
    153a:	47a8      	blx	r5
		memset(GPGLL.Longitude,'0',strlen(GPGLL.Longitude));
    153c:	0027      	movs	r7, r4
    153e:	3711      	adds	r7, #17
    1540:	0038      	movs	r0, r7
    1542:	47b0      	blx	r6
    1544:	0002      	movs	r2, r0
    1546:	2130      	movs	r1, #48	; 0x30
    1548:	0038      	movs	r0, r7
    154a:	47a8      	blx	r5
		memset(GPGLL.Fix_taken,'0',strlen(GPGLL.Fix_taken));
    154c:	0027      	movs	r7, r4
    154e:	3722      	adds	r7, #34	; 0x22
    1550:	0038      	movs	r0, r7
    1552:	47b0      	blx	r6
    1554:	0002      	movs	r2, r0
    1556:	2130      	movs	r1, #48	; 0x30
    1558:	0038      	movs	r0, r7
    155a:	47a8      	blx	r5
		GPGLL.Data_active='V';
    155c:	3c08      	subs	r4, #8
    155e:	2256      	movs	r2, #86	; 0x56
    1560:	233a      	movs	r3, #58	; 0x3a
    1562:	54e2      	strb	r2, [r4, r3]
		GPGLL.Latitude_deg =' ';
    1564:	3b1a      	subs	r3, #26
    1566:	7623      	strb	r3, [r4, #24]
		GPGLL.Longitude_deg=' ';
    1568:	3a2d      	subs	r2, #45	; 0x2d
    156a:	54a3      	strb	r3, [r4, r2]
    156c:	e7b9      	b.n	14e2 <reset_gps_msg_info+0x1a>
		memset(GPRMC.Latitude,'0',strlen(GPRMC.Latitude));
    156e:	4c1c      	ldr	r4, [pc, #112]	; (15e0 <reset_gps_msg_info+0x118>)
    1570:	0020      	movs	r0, r4
    1572:	4e18      	ldr	r6, [pc, #96]	; (15d4 <reset_gps_msg_info+0x10c>)
    1574:	47b0      	blx	r6
    1576:	0002      	movs	r2, r0
    1578:	2130      	movs	r1, #48	; 0x30
    157a:	0020      	movs	r0, r4
    157c:	4d16      	ldr	r5, [pc, #88]	; (15d8 <reset_gps_msg_info+0x110>)
    157e:	47a8      	blx	r5
		memset(GPRMC.Longitude,'0',strlen(GPRMC.Longitude));
    1580:	0027      	movs	r7, r4
    1582:	3711      	adds	r7, #17
    1584:	0038      	movs	r0, r7
    1586:	47b0      	blx	r6
    1588:	0002      	movs	r2, r0
    158a:	2130      	movs	r1, #48	; 0x30
    158c:	0038      	movs	r0, r7
    158e:	47a8      	blx	r5
		memset(GPRMC.Fix_taken,'0',strlen(GPRMC.Fix_taken));
    1590:	0027      	movs	r7, r4
    1592:	3f11      	subs	r7, #17
    1594:	0038      	movs	r0, r7
    1596:	47b0      	blx	r6
    1598:	0002      	movs	r2, r0
    159a:	2130      	movs	r1, #48	; 0x30
    159c:	0038      	movs	r0, r7
    159e:	47a8      	blx	r5
		memset(GPRMC.Date,'0',strlen(GPRMC.Date));
    15a0:	0027      	movs	r7, r4
    15a2:	3732      	adds	r7, #50	; 0x32
    15a4:	0038      	movs	r0, r7
    15a6:	47b0      	blx	r6
    15a8:	0002      	movs	r2, r0
    15aa:	2130      	movs	r1, #48	; 0x30
    15ac:	0038      	movs	r0, r7
    15ae:	47a8      	blx	r5
		GPRMC.status='V';
    15b0:	3c19      	subs	r4, #25
    15b2:	2356      	movs	r3, #86	; 0x56
    15b4:	7623      	strb	r3, [r4, #24]
		GPRMC.Latitude_deg =' ';
    15b6:	3b36      	subs	r3, #54	; 0x36
    15b8:	2229      	movs	r2, #41	; 0x29
    15ba:	54a3      	strb	r3, [r4, r2]
		GPRMC.Longitude_deg=' ';
    15bc:	3211      	adds	r2, #17
    15be:	54a3      	strb	r3, [r4, r2]
}
    15c0:	e78f      	b.n	14e2 <reset_gps_msg_info+0x1a>
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	20001648 	.word	0x20001648
    15c8:	200015c8 	.word	0x200015c8
    15cc:	2000155c 	.word	0x2000155c
    15d0:	20001650 	.word	0x20001650
    15d4:	00007bc1 	.word	0x00007bc1
    15d8:	00007935 	.word	0x00007935
    15dc:	200015d0 	.word	0x200015d0
    15e0:	20001575 	.word	0x20001575

000015e4 <gps_uart_async_init>:
{
    15e4:	b570      	push	{r4, r5, r6, lr}
	GPGGA.message_type="$GPGGA";
    15e6:	4a17      	ldr	r2, [pc, #92]	; (1644 <gps_uart_async_init+0x60>)
    15e8:	4b17      	ldr	r3, [pc, #92]	; (1648 <gps_uart_async_init+0x64>)
    15ea:	6053      	str	r3, [r2, #4]
	GPRMC.message_type="$GPRMC";
    15ec:	4c17      	ldr	r4, [pc, #92]	; (164c <gps_uart_async_init+0x68>)
    15ee:	4b18      	ldr	r3, [pc, #96]	; (1650 <gps_uart_async_init+0x6c>)
    15f0:	6063      	str	r3, [r4, #4]
	GPGLL.message_type="$GPGLL";
    15f2:	4d18      	ldr	r5, [pc, #96]	; (1654 <gps_uart_async_init+0x70>)
    15f4:	4b18      	ldr	r3, [pc, #96]	; (1658 <gps_uart_async_init+0x74>)
    15f6:	606b      	str	r3, [r5, #4]
	GPGGA.ID=1;
    15f8:	2001      	movs	r0, #1
    15fa:	7010      	strb	r0, [r2, #0]
	GPRMC.ID=2;
    15fc:	2302      	movs	r3, #2
    15fe:	7023      	strb	r3, [r4, #0]
	GPGLL.ID=3;
    1600:	3301      	adds	r3, #1
    1602:	702b      	strb	r3, [r5, #0]
	GPGGA.Gcounter=0;
    1604:	2100      	movs	r1, #0
    1606:	2300      	movs	r3, #0
    1608:	8051      	strh	r1, [r2, #2]
	GPRMC.Gcounter=0;
    160a:	8061      	strh	r1, [r4, #2]
	GPGLL.Gcounter=0;
    160c:	8069      	strh	r1, [r5, #2]
	byte_rx_buf=0;
    160e:	4e13      	ldr	r6, [pc, #76]	; (165c <gps_uart_async_init+0x78>)
    1610:	8031      	strh	r1, [r6, #0]
	pstptr=0;             /*must be initialized as 0 in the cpp file*/
    1612:	4913      	ldr	r1, [pc, #76]	; (1660 <gps_uart_async_init+0x7c>)
    1614:	700b      	strb	r3, [r1, #0]
	pstmode=0;            /*must be initialized as 0 in the cpp file*/
    1616:	4913      	ldr	r1, [pc, #76]	; (1664 <gps_uart_async_init+0x80>)
    1618:	700b      	strb	r3, [r1, #0]
	message_detected=0;   /*must be initialized as 0 in the cpp file*/
    161a:	4913      	ldr	r1, [pc, #76]	; (1668 <gps_uart_async_init+0x84>)
    161c:	700b      	strb	r3, [r1, #0]
	info_msg_ID=0;        /*must be initialized as 0 in the cpp file*/
    161e:	4913      	ldr	r1, [pc, #76]	; (166c <gps_uart_async_init+0x88>)
    1620:	700b      	strb	r3, [r1, #0]
	rtn=0;                 /*must be initialized as 0 in the cpp file*/
    1622:	4913      	ldr	r1, [pc, #76]	; (1670 <gps_uart_async_init+0x8c>)
    1624:	700b      	strb	r3, [r1, #0]
	GPGGA.Enable=0;
    1626:	2153      	movs	r1, #83	; 0x53
    1628:	5453      	strb	r3, [r2, r1]
	GPGLL.Enable=0;
    162a:	2240      	movs	r2, #64	; 0x40
    162c:	54ab      	strb	r3, [r5, r2]
	GPRMC.Enable=1;
    162e:	2361      	movs	r3, #97	; 0x61
    1630:	54e0      	strb	r0, [r4, r3]
	reset_gps_msg_info(GPGGA.ID);
    1632:	4e10      	ldr	r6, [pc, #64]	; (1674 <gps_uart_async_init+0x90>)
    1634:	47b0      	blx	r6
	reset_gps_msg_info(GPGLL.ID);
    1636:	2000      	movs	r0, #0
    1638:	5628      	ldrsb	r0, [r5, r0]
    163a:	47b0      	blx	r6
	reset_gps_msg_info(GPRMC.ID);
    163c:	2000      	movs	r0, #0
    163e:	5620      	ldrsb	r0, [r4, r0]
    1640:	47b0      	blx	r6
}
    1642:	bd70      	pop	{r4, r5, r6, pc}
    1644:	20001648 	.word	0x20001648
    1648:	0000c9cc 	.word	0x0000c9cc
    164c:	2000155c 	.word	0x2000155c
    1650:	0000c9d4 	.word	0x0000c9d4
    1654:	200015c8 	.word	0x200015c8
    1658:	0000c9dc 	.word	0x0000c9dc
    165c:	2000169e 	.word	0x2000169e
    1660:	20001558 	.word	0x20001558
    1664:	200015c4 	.word	0x200015c4
    1668:	2000169c 	.word	0x2000169c
    166c:	2000169d 	.word	0x2000169d
    1670:	2000162c 	.word	0x2000162c
    1674:	000014c9 	.word	0x000014c9

00001678 <get_gps_ringbuffer_byte>:

uint8_t get_gps_ringbuffer_byte()
{
    1678:	b510      	push	{r4, lr}
	if (usart_async_is_rx_not_empty(&GPS_UART)>0)
    167a:	4806      	ldr	r0, [pc, #24]	; (1694 <get_gps_ringbuffer_byte+0x1c>)
    167c:	4b06      	ldr	r3, [pc, #24]	; (1698 <get_gps_ringbuffer_byte+0x20>)
    167e:	4798      	blx	r3
    1680:	2800      	cmp	r0, #0
    1682:	dd05      	ble.n	1690 <get_gps_ringbuffer_byte+0x18>
	{
		ringbuffer_get(&GPS_UART.rx,rxdata);
    1684:	4905      	ldr	r1, [pc, #20]	; (169c <get_gps_ringbuffer_byte+0x24>)
    1686:	4806      	ldr	r0, [pc, #24]	; (16a0 <get_gps_ringbuffer_byte+0x28>)
    1688:	4b06      	ldr	r3, [pc, #24]	; (16a4 <get_gps_ringbuffer_byte+0x2c>)
    168a:	4798      	blx	r3
		return 1;
    168c:	2001      	movs	r0, #1
	}
	return 0;
}
    168e:	bd10      	pop	{r4, pc}
	return 0;
    1690:	2000      	movs	r0, #0
    1692:	e7fc      	b.n	168e <get_gps_ringbuffer_byte+0x16>
    1694:	200014cc 	.word	0x200014cc
    1698:	00001ecd 	.word	0x00001ecd
    169c:	2000160c 	.word	0x2000160c
    16a0:	20001500 	.word	0x20001500
    16a4:	0000277d 	.word	0x0000277d

000016a8 <analyze_gps_data>:

/* if there is any data coming from the gps uart port , analyze it 
   here and get the result if Ready = 1 is available
*/
uint8_t analyze_gps_data()
{
    16a8:	b510      	push	{r4, lr}
	switch (message_detected)
    16aa:	4b46      	ldr	r3, [pc, #280]	; (17c4 <analyze_gps_data+0x11c>)
    16ac:	781b      	ldrb	r3, [r3, #0]
    16ae:	2b01      	cmp	r3, #1
    16b0:	d00f      	beq.n	16d2 <analyze_gps_data+0x2a>
    16b2:	2b00      	cmp	r3, #0
    16b4:	d007      	beq.n	16c6 <analyze_gps_data+0x1e>
    16b6:	2b02      	cmp	r3, #2
    16b8:	d033      	beq.n	1722 <analyze_gps_data+0x7a>
    16ba:	2b03      	cmp	r3, #3
    16bc:	d059      	beq.n	1772 <analyze_gps_data+0xca>
			  get_GLL_info();
		  }
		  /*end of 0x03*/
		  break;
		  default:
		  message_detected = 0;
    16be:	2200      	movs	r2, #0
    16c0:	4b40      	ldr	r3, [pc, #256]	; (17c4 <analyze_gps_data+0x11c>)
    16c2:	701a      	strb	r2, [r3, #0]
		  break;
    16c4:	e003      	b.n	16ce <analyze_gps_data+0x26>
				get_gps_sentence_type(rxdata[0]);
    16c6:	4b40      	ldr	r3, [pc, #256]	; (17c8 <analyze_gps_data+0x120>)
    16c8:	7818      	ldrb	r0, [r3, #0]
    16ca:	4b40      	ldr	r3, [pc, #256]	; (17cc <analyze_gps_data+0x124>)
    16cc:	4798      	blx	r3
         }
		 return 0;
}
    16ce:	2000      	movs	r0, #0
    16d0:	bd10      	pop	{r4, pc}
		    if (GPGGA.Enable == 1)
    16d2:	2353      	movs	r3, #83	; 0x53
    16d4:	4a3e      	ldr	r2, [pc, #248]	; (17d0 <analyze_gps_data+0x128>)
    16d6:	56d3      	ldrsb	r3, [r2, r3]
    16d8:	2b01      	cmp	r3, #1
    16da:	d1f8      	bne.n	16ce <analyze_gps_data+0x26>
			rtn=get_gps_msg_info(GPGGA.ID,info_msg_ID,rxdata[0]);
    16dc:	4b3a      	ldr	r3, [pc, #232]	; (17c8 <analyze_gps_data+0x120>)
    16de:	781a      	ldrb	r2, [r3, #0]
    16e0:	4b3c      	ldr	r3, [pc, #240]	; (17d4 <analyze_gps_data+0x12c>)
    16e2:	7819      	ldrb	r1, [r3, #0]
    16e4:	4b3a      	ldr	r3, [pc, #232]	; (17d0 <analyze_gps_data+0x128>)
    16e6:	7818      	ldrb	r0, [r3, #0]
    16e8:	4b3b      	ldr	r3, [pc, #236]	; (17d8 <analyze_gps_data+0x130>)
    16ea:	4798      	blx	r3
    16ec:	1e03      	subs	r3, r0, #0
    16ee:	4a3b      	ldr	r2, [pc, #236]	; (17dc <analyze_gps_data+0x134>)
    16f0:	7010      	strb	r0, [r2, #0]
			 if (rtn < 0)
    16f2:	daec      	bge.n	16ce <analyze_gps_data+0x26>
				 if (rtn == -3)// new message
    16f4:	1cc2      	adds	r2, r0, #3
    16f6:	d006      	beq.n	1706 <analyze_gps_data+0x5e>
				 else if (rtn == -2 ){info_msg_ID++;}//comma sign or checksum sign
    16f8:	3302      	adds	r3, #2
    16fa:	d1e8      	bne.n	16ce <analyze_gps_data+0x26>
    16fc:	4a35      	ldr	r2, [pc, #212]	; (17d4 <analyze_gps_data+0x12c>)
    16fe:	7813      	ldrb	r3, [r2, #0]
    1700:	3301      	adds	r3, #1
    1702:	7013      	strb	r3, [r2, #0]
    1704:	e7e3      	b.n	16ce <analyze_gps_data+0x26>
					 message_detected = 0;
    1706:	2300      	movs	r3, #0
    1708:	4a2e      	ldr	r2, [pc, #184]	; (17c4 <analyze_gps_data+0x11c>)
    170a:	7013      	strb	r3, [r2, #0]
					 info_msg_ID=0;
    170c:	4a31      	ldr	r2, [pc, #196]	; (17d4 <analyze_gps_data+0x12c>)
    170e:	7013      	strb	r3, [r2, #0]
					 pstmode=0x01;
    1710:	2201      	movs	r2, #1
    1712:	4933      	ldr	r1, [pc, #204]	; (17e0 <analyze_gps_data+0x138>)
    1714:	700a      	strb	r2, [r1, #0]
					 pstptr=0;
    1716:	4933      	ldr	r1, [pc, #204]	; (17e4 <analyze_gps_data+0x13c>)
    1718:	700b      	strb	r3, [r1, #0]
					 GPGGA.Ready = 0x01;
    171a:	3352      	adds	r3, #82	; 0x52
    171c:	492c      	ldr	r1, [pc, #176]	; (17d0 <analyze_gps_data+0x128>)
    171e:	54ca      	strb	r2, [r1, r3]
    1720:	e7d5      	b.n	16ce <analyze_gps_data+0x26>
		  if (GPRMC.Enable == 1)
    1722:	2361      	movs	r3, #97	; 0x61
    1724:	4a30      	ldr	r2, [pc, #192]	; (17e8 <analyze_gps_data+0x140>)
    1726:	56d3      	ldrsb	r3, [r2, r3]
    1728:	2b01      	cmp	r3, #1
    172a:	d1d0      	bne.n	16ce <analyze_gps_data+0x26>
	rtn=get_gps_msg_info(GPRMC.ID,info_msg_ID,rxdata[0]);
    172c:	4b26      	ldr	r3, [pc, #152]	; (17c8 <analyze_gps_data+0x120>)
    172e:	781a      	ldrb	r2, [r3, #0]
    1730:	4b28      	ldr	r3, [pc, #160]	; (17d4 <analyze_gps_data+0x12c>)
    1732:	7819      	ldrb	r1, [r3, #0]
    1734:	4b2c      	ldr	r3, [pc, #176]	; (17e8 <analyze_gps_data+0x140>)
    1736:	7818      	ldrb	r0, [r3, #0]
    1738:	4b27      	ldr	r3, [pc, #156]	; (17d8 <analyze_gps_data+0x130>)
    173a:	4798      	blx	r3
    173c:	1e03      	subs	r3, r0, #0
    173e:	4a27      	ldr	r2, [pc, #156]	; (17dc <analyze_gps_data+0x134>)
    1740:	7010      	strb	r0, [r2, #0]
	 if (rtn < 0)
    1742:	dac4      	bge.n	16ce <analyze_gps_data+0x26>
		 if (rtn == -3)// new message
    1744:	1cc2      	adds	r2, r0, #3
    1746:	d006      	beq.n	1756 <analyze_gps_data+0xae>
				 else if (rtn == -2){info_msg_ID++;}//comma sign
    1748:	3302      	adds	r3, #2
    174a:	d1c0      	bne.n	16ce <analyze_gps_data+0x26>
    174c:	4a21      	ldr	r2, [pc, #132]	; (17d4 <analyze_gps_data+0x12c>)
    174e:	7813      	ldrb	r3, [r2, #0]
    1750:	3301      	adds	r3, #1
    1752:	7013      	strb	r3, [r2, #0]
    1754:	e7bb      	b.n	16ce <analyze_gps_data+0x26>
				message_detected = 0;
    1756:	2300      	movs	r3, #0
    1758:	4a1a      	ldr	r2, [pc, #104]	; (17c4 <analyze_gps_data+0x11c>)
    175a:	7013      	strb	r3, [r2, #0]
				info_msg_ID=0;
    175c:	4a1d      	ldr	r2, [pc, #116]	; (17d4 <analyze_gps_data+0x12c>)
    175e:	7013      	strb	r3, [r2, #0]
			    pstmode=0x01;
    1760:	2201      	movs	r2, #1
    1762:	491f      	ldr	r1, [pc, #124]	; (17e0 <analyze_gps_data+0x138>)
    1764:	700a      	strb	r2, [r1, #0]
				pstptr=0;
    1766:	491f      	ldr	r1, [pc, #124]	; (17e4 <analyze_gps_data+0x13c>)
    1768:	700b      	strb	r3, [r1, #0]
				GPRMC.Ready=0x01;
    176a:	3360      	adds	r3, #96	; 0x60
    176c:	491e      	ldr	r1, [pc, #120]	; (17e8 <analyze_gps_data+0x140>)
    176e:	54ca      	strb	r2, [r1, r3]
    1770:	e7ad      	b.n	16ce <analyze_gps_data+0x26>
		  if (GPGLL.Enable == 1)
    1772:	2340      	movs	r3, #64	; 0x40
    1774:	4a1d      	ldr	r2, [pc, #116]	; (17ec <analyze_gps_data+0x144>)
    1776:	56d3      	ldrsb	r3, [r2, r3]
    1778:	2b01      	cmp	r3, #1
    177a:	d1a8      	bne.n	16ce <analyze_gps_data+0x26>
rtn=get_gps_msg_info(GPGLL.ID,info_msg_ID,rxdata[0]);
    177c:	4b12      	ldr	r3, [pc, #72]	; (17c8 <analyze_gps_data+0x120>)
    177e:	781a      	ldrb	r2, [r3, #0]
    1780:	4b14      	ldr	r3, [pc, #80]	; (17d4 <analyze_gps_data+0x12c>)
    1782:	7819      	ldrb	r1, [r3, #0]
    1784:	4b19      	ldr	r3, [pc, #100]	; (17ec <analyze_gps_data+0x144>)
    1786:	7818      	ldrb	r0, [r3, #0]
    1788:	4b13      	ldr	r3, [pc, #76]	; (17d8 <analyze_gps_data+0x130>)
    178a:	4798      	blx	r3
    178c:	1e03      	subs	r3, r0, #0
    178e:	4a13      	ldr	r2, [pc, #76]	; (17dc <analyze_gps_data+0x134>)
    1790:	7010      	strb	r0, [r2, #0]
if (rtn < 0)
    1792:	da9c      	bge.n	16ce <analyze_gps_data+0x26>
	if (rtn == -3)// new message
    1794:	1cc2      	adds	r2, r0, #3
    1796:	d007      	beq.n	17a8 <analyze_gps_data+0x100>
	else if (rtn == -2){info_msg_ID++;}//comma sign
    1798:	3302      	adds	r3, #2
    179a:	d000      	beq.n	179e <analyze_gps_data+0xf6>
    179c:	e797      	b.n	16ce <analyze_gps_data+0x26>
    179e:	4a0d      	ldr	r2, [pc, #52]	; (17d4 <analyze_gps_data+0x12c>)
    17a0:	7813      	ldrb	r3, [r2, #0]
    17a2:	3301      	adds	r3, #1
    17a4:	7013      	strb	r3, [r2, #0]
    17a6:	e792      	b.n	16ce <analyze_gps_data+0x26>
		message_detected = 0;
    17a8:	2300      	movs	r3, #0
    17aa:	4a06      	ldr	r2, [pc, #24]	; (17c4 <analyze_gps_data+0x11c>)
    17ac:	7013      	strb	r3, [r2, #0]
		info_msg_ID=0;
    17ae:	4a09      	ldr	r2, [pc, #36]	; (17d4 <analyze_gps_data+0x12c>)
    17b0:	7013      	strb	r3, [r2, #0]
		pstmode=0x01;
    17b2:	2201      	movs	r2, #1
    17b4:	490a      	ldr	r1, [pc, #40]	; (17e0 <analyze_gps_data+0x138>)
    17b6:	700a      	strb	r2, [r1, #0]
		pstptr=0;
    17b8:	490a      	ldr	r1, [pc, #40]	; (17e4 <analyze_gps_data+0x13c>)
    17ba:	700b      	strb	r3, [r1, #0]
		GPGLL.Ready=0x01;
    17bc:	333f      	adds	r3, #63	; 0x3f
    17be:	490b      	ldr	r1, [pc, #44]	; (17ec <analyze_gps_data+0x144>)
    17c0:	54ca      	strb	r2, [r1, r3]
    17c2:	e784      	b.n	16ce <analyze_gps_data+0x26>
    17c4:	2000169c 	.word	0x2000169c
    17c8:	2000160c 	.word	0x2000160c
    17cc:	000010f9 	.word	0x000010f9
    17d0:	20001648 	.word	0x20001648
    17d4:	2000169d 	.word	0x2000169d
    17d8:	000011b1 	.word	0x000011b1
    17dc:	2000162c 	.word	0x2000162c
    17e0:	200015c4 	.word	0x200015c4
    17e4:	20001558 	.word	0x20001558
    17e8:	2000155c 	.word	0x2000155c
    17ec:	200015c8 	.word	0x200015c8

000017f0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    17f0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    17f4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    17f6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    17f8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    17fc:	4770      	bx	lr

000017fe <atomic_leave_critical>:
    17fe:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1802:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1804:	f383 8810 	msr	PRIMASK, r3
}
    1808:	4770      	bx	lr
	...

0000180c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    180c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    180e:	4b02      	ldr	r3, [pc, #8]	; (1818 <delay_init+0xc>)
    1810:	6018      	str	r0, [r3, #0]
    1812:	4b02      	ldr	r3, [pc, #8]	; (181c <delay_init+0x10>)
    1814:	4798      	blx	r3
}
    1816:	bd10      	pop	{r4, pc}
    1818:	20000eb4 	.word	0x20000eb4
    181c:	00003121 	.word	0x00003121

00001820 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1820:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1822:	4b04      	ldr	r3, [pc, #16]	; (1834 <delay_us+0x14>)
    1824:	681c      	ldr	r4, [r3, #0]
    1826:	4b04      	ldr	r3, [pc, #16]	; (1838 <delay_us+0x18>)
    1828:	4798      	blx	r3
    182a:	0001      	movs	r1, r0
    182c:	0020      	movs	r0, r4
    182e:	4b03      	ldr	r3, [pc, #12]	; (183c <delay_us+0x1c>)
    1830:	4798      	blx	r3
}
    1832:	bd10      	pop	{r4, pc}
    1834:	20000eb4 	.word	0x20000eb4
    1838:	00002861 	.word	0x00002861
    183c:	00003135 	.word	0x00003135

00001840 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1840:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1842:	4b04      	ldr	r3, [pc, #16]	; (1854 <delay_ms+0x14>)
    1844:	681c      	ldr	r4, [r3, #0]
    1846:	4b04      	ldr	r3, [pc, #16]	; (1858 <delay_ms+0x18>)
    1848:	4798      	blx	r3
    184a:	0001      	movs	r1, r0
    184c:	0020      	movs	r0, r4
    184e:	4b03      	ldr	r3, [pc, #12]	; (185c <delay_ms+0x1c>)
    1850:	4798      	blx	r3
}
    1852:	bd10      	pop	{r4, pc}
    1854:	20000eb4 	.word	0x20000eb4
    1858:	0000287d 	.word	0x0000287d
    185c:	00003135 	.word	0x00003135

00001860 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1860:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1862:	4b0c      	ldr	r3, [pc, #48]	; (1894 <process_ext_irq+0x34>)
    1864:	685c      	ldr	r4, [r3, #4]
    1866:	42a0      	cmp	r0, r4
    1868:	d00e      	beq.n	1888 <process_ext_irq+0x28>
    186a:	2201      	movs	r2, #1
    186c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    186e:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
    1870:	25ff      	movs	r5, #255	; 0xff
    1872:	e003      	b.n	187c <process_ext_irq+0x1c>
    1874:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
    1876:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
    1878:	085b      	lsrs	r3, r3, #1
    187a:	d10a      	bne.n	1892 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
    187c:	42a0      	cmp	r0, r4
    187e:	d9f9      	bls.n	1874 <process_ext_irq+0x14>
	while (upper >= lower) {
    1880:	2a00      	cmp	r2, #0
    1882:	d006      	beq.n	1892 <process_ext_irq+0x32>
			lower = middle + 1;
    1884:	0031      	movs	r1, r6
    1886:	e7f6      	b.n	1876 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
    1888:	4b02      	ldr	r3, [pc, #8]	; (1894 <process_ext_irq+0x34>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	2b00      	cmp	r3, #0
    188e:	d000      	beq.n	1892 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1890:	4798      	blx	r3
		}
	}
}
    1892:	bd70      	pop	{r4, r5, r6, pc}
    1894:	20000eb8 	.word	0x20000eb8

00001898 <ext_irq_init>:
{
    1898:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <ext_irq_init+0x18>)
    189c:	2201      	movs	r2, #1
    189e:	4252      	negs	r2, r2
    18a0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    18a2:	2200      	movs	r2, #0
    18a4:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    18a6:	4803      	ldr	r0, [pc, #12]	; (18b4 <ext_irq_init+0x1c>)
    18a8:	4b03      	ldr	r3, [pc, #12]	; (18b8 <ext_irq_init+0x20>)
    18aa:	4798      	blx	r3
}
    18ac:	bd10      	pop	{r4, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	20000eb8 	.word	0x20000eb8
    18b4:	00001861 	.word	0x00001861
    18b8:	000028b5 	.word	0x000028b5

000018bc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    18bc:	b570      	push	{r4, r5, r6, lr}
    18be:	0006      	movs	r6, r0
    18c0:	000c      	movs	r4, r1
    18c2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    18c4:	2800      	cmp	r0, #0
    18c6:	d00d      	beq.n	18e4 <io_write+0x28>
    18c8:	0008      	movs	r0, r1
    18ca:	1e43      	subs	r3, r0, #1
    18cc:	4198      	sbcs	r0, r3
    18ce:	b2c0      	uxtb	r0, r0
    18d0:	2234      	movs	r2, #52	; 0x34
    18d2:	4905      	ldr	r1, [pc, #20]	; (18e8 <io_write+0x2c>)
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <io_write+0x30>)
    18d6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    18d8:	6833      	ldr	r3, [r6, #0]
    18da:	002a      	movs	r2, r5
    18dc:	0021      	movs	r1, r4
    18de:	0030      	movs	r0, r6
    18e0:	4798      	blx	r3
}
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	2000      	movs	r0, #0
    18e6:	e7f3      	b.n	18d0 <io_write+0x14>
    18e8:	0000c9e4 	.word	0x0000c9e4
    18ec:	00002679 	.word	0x00002679

000018f0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    18f0:	b570      	push	{r4, r5, r6, lr}
    18f2:	0006      	movs	r6, r0
    18f4:	000c      	movs	r4, r1
    18f6:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    18f8:	2800      	cmp	r0, #0
    18fa:	d00d      	beq.n	1918 <io_read+0x28>
    18fc:	0008      	movs	r0, r1
    18fe:	1e43      	subs	r3, r0, #1
    1900:	4198      	sbcs	r0, r3
    1902:	b2c0      	uxtb	r0, r0
    1904:	223d      	movs	r2, #61	; 0x3d
    1906:	4905      	ldr	r1, [pc, #20]	; (191c <io_read+0x2c>)
    1908:	4b05      	ldr	r3, [pc, #20]	; (1920 <io_read+0x30>)
    190a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    190c:	6873      	ldr	r3, [r6, #4]
    190e:	002a      	movs	r2, r5
    1910:	0021      	movs	r1, r4
    1912:	0030      	movs	r0, r6
    1914:	4798      	blx	r3
}
    1916:	bd70      	pop	{r4, r5, r6, pc}
    1918:	2000      	movs	r0, #0
    191a:	e7f3      	b.n	1904 <io_read+0x14>
    191c:	0000c9e4 	.word	0x0000c9e4
    1920:	00002679 	.word	0x00002679

00001924 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	0004      	movs	r4, r0
    1928:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    192a:	2800      	cmp	r0, #0
    192c:	d016      	beq.n	195c <spi_m_sync_init+0x38>
    192e:	0008      	movs	r0, r1
    1930:	1e43      	subs	r3, r0, #1
    1932:	4198      	sbcs	r0, r3
    1934:	b2c0      	uxtb	r0, r0
    1936:	2240      	movs	r2, #64	; 0x40
    1938:	4909      	ldr	r1, [pc, #36]	; (1960 <spi_m_sync_init+0x3c>)
    193a:	4b0a      	ldr	r3, [pc, #40]	; (1964 <spi_m_sync_init+0x40>)
    193c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    193e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1940:	1d20      	adds	r0, r4, #4
    1942:	0029      	movs	r1, r5
    1944:	4b08      	ldr	r3, [pc, #32]	; (1968 <spi_m_sync_init+0x44>)
    1946:	4798      	blx	r3

	if (rc < 0) {
    1948:	2800      	cmp	r0, #0
    194a:	db06      	blt.n	195a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    194c:	4b07      	ldr	r3, [pc, #28]	; (196c <spi_m_sync_init+0x48>)
    194e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1950:	4b07      	ldr	r3, [pc, #28]	; (1970 <spi_m_sync_init+0x4c>)
    1952:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1954:	4b07      	ldr	r3, [pc, #28]	; (1974 <spi_m_sync_init+0x50>)
    1956:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1958:	2000      	movs	r0, #0
}
    195a:	bd70      	pop	{r4, r5, r6, pc}
    195c:	2000      	movs	r0, #0
    195e:	e7ea      	b.n	1936 <spi_m_sync_init+0x12>
    1960:	0000c9f8 	.word	0x0000c9f8
    1964:	00002679 	.word	0x00002679
    1968:	00002e05 	.word	0x00002e05
    196c:	ffff8000 	.word	0xffff8000
    1970:	00001a25 	.word	0x00001a25
    1974:	000019e9 	.word	0x000019e9

00001978 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1978:	b510      	push	{r4, lr}
    197a:	0004      	movs	r4, r0
	ASSERT(spi);
    197c:	1e43      	subs	r3, r0, #1
    197e:	4198      	sbcs	r0, r3
    1980:	b2c0      	uxtb	r0, r0
    1982:	2257      	movs	r2, #87	; 0x57
    1984:	4903      	ldr	r1, [pc, #12]	; (1994 <spi_m_sync_enable+0x1c>)
    1986:	4b04      	ldr	r3, [pc, #16]	; (1998 <spi_m_sync_enable+0x20>)
    1988:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    198a:	1d20      	adds	r0, r4, #4
    198c:	4b03      	ldr	r3, [pc, #12]	; (199c <spi_m_sync_enable+0x24>)
    198e:	4798      	blx	r3
}
    1990:	bd10      	pop	{r4, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	0000c9f8 	.word	0x0000c9f8
    1998:	00002679 	.word	0x00002679
    199c:	00002efd 	.word	0x00002efd

000019a0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    19a0:	b530      	push	{r4, r5, lr}
    19a2:	b087      	sub	sp, #28
    19a4:	0004      	movs	r4, r0
    19a6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    19a8:	2800      	cmp	r0, #0
    19aa:	d014      	beq.n	19d6 <spi_m_sync_transfer+0x36>
    19ac:	0008      	movs	r0, r1
    19ae:	1e43      	subs	r3, r0, #1
    19b0:	4198      	sbcs	r0, r3
    19b2:	b2c0      	uxtb	r0, r0
    19b4:	22b3      	movs	r2, #179	; 0xb3
    19b6:	4909      	ldr	r1, [pc, #36]	; (19dc <spi_m_sync_transfer+0x3c>)
    19b8:	4b09      	ldr	r3, [pc, #36]	; (19e0 <spi_m_sync_transfer+0x40>)
    19ba:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    19bc:	682b      	ldr	r3, [r5, #0]
    19be:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    19c0:	686b      	ldr	r3, [r5, #4]
    19c2:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    19c4:	68ab      	ldr	r3, [r5, #8]
    19c6:	9301      	str	r3, [sp, #4]
    19c8:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    19ca:	1d20      	adds	r0, r4, #4
    19cc:	a903      	add	r1, sp, #12
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <spi_m_sync_transfer+0x44>)
    19d0:	4798      	blx	r3
}
    19d2:	b007      	add	sp, #28
    19d4:	bd30      	pop	{r4, r5, pc}
    19d6:	2000      	movs	r0, #0
    19d8:	e7ec      	b.n	19b4 <spi_m_sync_transfer+0x14>
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	0000c9f8 	.word	0x0000c9f8
    19e0:	00002679 	.word	0x00002679
    19e4:	00002f31 	.word	0x00002f31

000019e8 <_spi_m_sync_io_write>:
{
    19e8:	b570      	push	{r4, r5, r6, lr}
    19ea:	b084      	sub	sp, #16
    19ec:	0004      	movs	r4, r0
    19ee:	000e      	movs	r6, r1
    19f0:	0015      	movs	r5, r2
	ASSERT(io);
    19f2:	1e43      	subs	r3, r0, #1
    19f4:	4198      	sbcs	r0, r3
    19f6:	b2c0      	uxtb	r0, r0
    19f8:	22a3      	movs	r2, #163	; 0xa3
    19fa:	4907      	ldr	r1, [pc, #28]	; (1a18 <_spi_m_sync_io_write+0x30>)
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <_spi_m_sync_io_write+0x34>)
    19fe:	4798      	blx	r3
	xfer.rxbuf = 0;
    1a00:	2300      	movs	r3, #0
    1a02:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1a04:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1a06:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a08:	0020      	movs	r0, r4
    1a0a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1a0c:	a901      	add	r1, sp, #4
    1a0e:	4b04      	ldr	r3, [pc, #16]	; (1a20 <_spi_m_sync_io_write+0x38>)
    1a10:	4798      	blx	r3
}
    1a12:	b004      	add	sp, #16
    1a14:	bd70      	pop	{r4, r5, r6, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	0000c9f8 	.word	0x0000c9f8
    1a1c:	00002679 	.word	0x00002679
    1a20:	000019a1 	.word	0x000019a1

00001a24 <_spi_m_sync_io_read>:
{
    1a24:	b570      	push	{r4, r5, r6, lr}
    1a26:	b084      	sub	sp, #16
    1a28:	0004      	movs	r4, r0
    1a2a:	000e      	movs	r6, r1
    1a2c:	0015      	movs	r5, r2
	ASSERT(io);
    1a2e:	1e43      	subs	r3, r0, #1
    1a30:	4198      	sbcs	r0, r3
    1a32:	b2c0      	uxtb	r0, r0
    1a34:	2287      	movs	r2, #135	; 0x87
    1a36:	4907      	ldr	r1, [pc, #28]	; (1a54 <_spi_m_sync_io_read+0x30>)
    1a38:	4b07      	ldr	r3, [pc, #28]	; (1a58 <_spi_m_sync_io_read+0x34>)
    1a3a:	4798      	blx	r3
	xfer.rxbuf = buf;
    1a3c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1a3e:	2300      	movs	r3, #0
    1a40:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1a42:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a44:	0020      	movs	r0, r4
    1a46:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1a48:	a901      	add	r1, sp, #4
    1a4a:	4b04      	ldr	r3, [pc, #16]	; (1a5c <_spi_m_sync_io_read+0x38>)
    1a4c:	4798      	blx	r3
}
    1a4e:	b004      	add	sp, #16
    1a50:	bd70      	pop	{r4, r5, r6, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	0000c9f8 	.word	0x0000c9f8
    1a58:	00002679 	.word	0x00002679
    1a5c:	000019a1 	.word	0x000019a1

00001a60 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a62:	46ce      	mov	lr, r9
    1a64:	4647      	mov	r7, r8
    1a66:	b580      	push	{r7, lr}
    1a68:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1a6a:	6803      	ldr	r3, [r0, #0]
    1a6c:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d005      	beq.n	1a7e <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1a72:	688e      	ldr	r6, [r1, #8]
    1a74:	001c      	movs	r4, r3
    1a76:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1a78:	2701      	movs	r7, #1
    1a7a:	1abf      	subs	r7, r7, r2
    1a7c:	e00d      	b.n	1a9a <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    1a7e:	4b12      	ldr	r3, [pc, #72]	; (1ac8 <timer_add_timer_task+0x68>)
    1a80:	4798      	blx	r3
		return;
    1a82:	e018      	b.n	1ab6 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	68a0      	ldr	r0, [r4, #8]
    1a88:	4680      	mov	r8, r0
    1a8a:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1a8c:	42b3      	cmp	r3, r6
    1a8e:	d20c      	bcs.n	1aaa <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1a90:	6823      	ldr	r3, [r4, #0]
    1a92:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1a94:	2b00      	cmp	r3, #0
    1a96:	d00b      	beq.n	1ab0 <timer_add_timer_task+0x50>
    1a98:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1a9a:	6863      	ldr	r3, [r4, #4]
    1a9c:	4293      	cmp	r3, r2
    1a9e:	d8f1      	bhi.n	1a84 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1aa0:	68a0      	ldr	r0, [r4, #8]
    1aa2:	4680      	mov	r8, r0
    1aa4:	4443      	add	r3, r8
    1aa6:	1a9b      	subs	r3, r3, r2
    1aa8:	e7f0      	b.n	1a8c <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1aaa:	45a4      	cmp	ip, r4
    1aac:	d007      	beq.n	1abe <timer_add_timer_task+0x5e>
    1aae:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1ab0:	0020      	movs	r0, r4
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <timer_add_timer_task+0x6c>)
    1ab4:	4798      	blx	r3
	}
}
    1ab6:	bc0c      	pop	{r2, r3}
    1ab8:	4690      	mov	r8, r2
    1aba:	4699      	mov	r9, r3
    1abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1abe:	4648      	mov	r0, r9
    1ac0:	4b01      	ldr	r3, [pc, #4]	; (1ac8 <timer_add_timer_task+0x68>)
    1ac2:	4798      	blx	r3
    1ac4:	e7f7      	b.n	1ab6 <timer_add_timer_task+0x56>
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	000026a5 	.word	0x000026a5
    1acc:	000026d1 	.word	0x000026d1

00001ad0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ad2:	46c6      	mov	lr, r8
    1ad4:	b500      	push	{lr}
    1ad6:	b082      	sub	sp, #8
    1ad8:	0007      	movs	r7, r0
	return (void *)list->head;
    1ada:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1adc:	6903      	ldr	r3, [r0, #16]
    1ade:	3301      	adds	r3, #1
    1ae0:	4698      	mov	r8, r3
    1ae2:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1ae4:	7e03      	ldrb	r3, [r0, #24]
    1ae6:	07db      	lsls	r3, r3, #31
    1ae8:	d411      	bmi.n	1b0e <timer_process_counted+0x3e>
    1aea:	7e03      	ldrb	r3, [r0, #24]
    1aec:	079b      	lsls	r3, r3, #30
    1aee:	d40e      	bmi.n	1b0e <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1af0:	2c00      	cmp	r4, #0
    1af2:	d010      	beq.n	1b16 <timer_process_counted+0x46>
    1af4:	4643      	mov	r3, r8
    1af6:	6862      	ldr	r2, [r4, #4]
    1af8:	1a9b      	subs	r3, r3, r2
    1afa:	68a2      	ldr	r2, [r4, #8]
    1afc:	4293      	cmp	r3, r2
    1afe:	d30a      	bcc.n	1b16 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1b00:	2314      	movs	r3, #20
    1b02:	469c      	mov	ip, r3
    1b04:	4484      	add	ip, r0
    1b06:	4663      	mov	r3, ip
    1b08:	9301      	str	r3, [sp, #4]
    1b0a:	4e12      	ldr	r6, [pc, #72]	; (1b54 <timer_process_counted+0x84>)
    1b0c:	e014      	b.n	1b38 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1b0e:	7e3b      	ldrb	r3, [r7, #24]
    1b10:	2202      	movs	r2, #2
    1b12:	4313      	orrs	r3, r2
    1b14:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    1b16:	b002      	add	sp, #8
    1b18:	bc04      	pop	{r2}
    1b1a:	4690      	mov	r8, r2
    1b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1b20:	68e3      	ldr	r3, [r4, #12]
    1b22:	0020      	movs	r0, r4
    1b24:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1b26:	2d00      	cmp	r5, #0
    1b28:	d0f5      	beq.n	1b16 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1b2a:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1b2c:	4643      	mov	r3, r8
    1b2e:	686a      	ldr	r2, [r5, #4]
    1b30:	1a9b      	subs	r3, r3, r2
    1b32:	68aa      	ldr	r2, [r5, #8]
    1b34:	4293      	cmp	r3, r2
    1b36:	d3ee      	bcc.n	1b16 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    1b38:	9801      	ldr	r0, [sp, #4]
    1b3a:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1b3c:	7c23      	ldrb	r3, [r4, #16]
    1b3e:	2b01      	cmp	r3, #1
    1b40:	d1ed      	bne.n	1b1e <timer_process_counted+0x4e>
			tmp->time_label = time;
    1b42:	4643      	mov	r3, r8
    1b44:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1b46:	4642      	mov	r2, r8
    1b48:	0021      	movs	r1, r4
    1b4a:	9801      	ldr	r0, [sp, #4]
    1b4c:	4b02      	ldr	r3, [pc, #8]	; (1b58 <timer_process_counted+0x88>)
    1b4e:	4798      	blx	r3
    1b50:	e7e5      	b.n	1b1e <timer_process_counted+0x4e>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	00002719 	.word	0x00002719
    1b58:	00001a61 	.word	0x00001a61

00001b5c <timer_init>:
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	0005      	movs	r5, r0
    1b60:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1b62:	2800      	cmp	r0, #0
    1b64:	d011      	beq.n	1b8a <timer_init+0x2e>
    1b66:	0008      	movs	r0, r1
    1b68:	1e43      	subs	r3, r0, #1
    1b6a:	4198      	sbcs	r0, r3
    1b6c:	b2c0      	uxtb	r0, r0
    1b6e:	223b      	movs	r2, #59	; 0x3b
    1b70:	4907      	ldr	r1, [pc, #28]	; (1b90 <timer_init+0x34>)
    1b72:	4b08      	ldr	r3, [pc, #32]	; (1b94 <timer_init+0x38>)
    1b74:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1b76:	0021      	movs	r1, r4
    1b78:	0028      	movs	r0, r5
    1b7a:	4b07      	ldr	r3, [pc, #28]	; (1b98 <timer_init+0x3c>)
    1b7c:	4798      	blx	r3
	descr->time                           = 0;
    1b7e:	2300      	movs	r3, #0
    1b80:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1b82:	4b06      	ldr	r3, [pc, #24]	; (1b9c <timer_init+0x40>)
    1b84:	602b      	str	r3, [r5, #0]
}
    1b86:	2000      	movs	r0, #0
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	2000      	movs	r0, #0
    1b8c:	e7ef      	b.n	1b6e <timer_init+0x12>
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	0000ca14 	.word	0x0000ca14
    1b94:	00002679 	.word	0x00002679
    1b98:	00003189 	.word	0x00003189
    1b9c:	00001ad1 	.word	0x00001ad1

00001ba0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1ba0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1ba2:	3808      	subs	r0, #8

	descr->stat = 0;
    1ba4:	2300      	movs	r3, #0
    1ba6:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1ba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1baa:	2b00      	cmp	r3, #0
    1bac:	d000      	beq.n	1bb0 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1bae:	4798      	blx	r3
	}
}
    1bb0:	bd10      	pop	{r4, pc}

00001bb2 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1bb2:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1bb4:	3808      	subs	r0, #8

	descr->stat = 0;
    1bb6:	2300      	movs	r3, #0
    1bb8:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1bba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d000      	beq.n	1bc2 <usart_error+0x10>
		descr->usart_cb.error(descr);
    1bc0:	4798      	blx	r3
	}
}
    1bc2:	bd10      	pop	{r4, pc}

00001bc4 <usart_fill_rx_buffer>:
{
    1bc4:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1bc6:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    1bc8:	302c      	adds	r0, #44	; 0x2c
    1bca:	4b04      	ldr	r3, [pc, #16]	; (1bdc <usart_fill_rx_buffer+0x18>)
    1bcc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1bce:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1bd0:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d001      	beq.n	1bda <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1bd6:	0020      	movs	r0, r4
    1bd8:	4798      	blx	r3
}
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	000027c5 	.word	0x000027c5

00001be0 <usart_async_write>:
{
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	0004      	movs	r4, r0
    1be4:	000e      	movs	r6, r1
    1be6:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1be8:	2800      	cmp	r0, #0
    1bea:	d01d      	beq.n	1c28 <usart_async_write+0x48>
    1bec:	2900      	cmp	r1, #0
    1bee:	d01d      	beq.n	1c2c <usart_async_write+0x4c>
    1bf0:	0010      	movs	r0, r2
    1bf2:	1e43      	subs	r3, r0, #1
    1bf4:	4198      	sbcs	r0, r3
    1bf6:	223c      	movs	r2, #60	; 0x3c
    1bf8:	32ff      	adds	r2, #255	; 0xff
    1bfa:	490f      	ldr	r1, [pc, #60]	; (1c38 <usart_async_write+0x58>)
    1bfc:	4b0f      	ldr	r3, [pc, #60]	; (1c3c <usart_async_write+0x5c>)
    1bfe:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1c00:	2344      	movs	r3, #68	; 0x44
    1c02:	5ae2      	ldrh	r2, [r4, r3]
    1c04:	3308      	adds	r3, #8
    1c06:	5ae3      	ldrh	r3, [r4, r3]
    1c08:	429a      	cmp	r2, r3
    1c0a:	d111      	bne.n	1c30 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
    1c0c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1c0e:	234c      	movs	r3, #76	; 0x4c
    1c10:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    1c12:	2200      	movs	r2, #0
    1c14:	3b08      	subs	r3, #8
    1c16:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1c18:	3b43      	subs	r3, #67	; 0x43
    1c1a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1c1c:	0020      	movs	r0, r4
    1c1e:	3008      	adds	r0, #8
    1c20:	4b07      	ldr	r3, [pc, #28]	; (1c40 <usart_async_write+0x60>)
    1c22:	4798      	blx	r3
	return (int32_t)length;
    1c24:	0028      	movs	r0, r5
}
    1c26:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1c28:	2000      	movs	r0, #0
    1c2a:	e7e4      	b.n	1bf6 <usart_async_write+0x16>
    1c2c:	2000      	movs	r0, #0
    1c2e:	e7e2      	b.n	1bf6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    1c30:	201c      	movs	r0, #28
    1c32:	4240      	negs	r0, r0
    1c34:	e7f7      	b.n	1c26 <usart_async_write+0x46>
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	0000ca2c 	.word	0x0000ca2c
    1c3c:	00002679 	.word	0x00002679
    1c40:	00002d13 	.word	0x00002d13

00001c44 <usart_process_byte_sent>:
{
    1c44:	b570      	push	{r4, r5, r6, lr}
    1c46:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1c48:	0001      	movs	r1, r0
    1c4a:	3908      	subs	r1, #8
    1c4c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1c4e:	224c      	movs	r2, #76	; 0x4c
    1c50:	5a8a      	ldrh	r2, [r1, r2]
    1c52:	429a      	cmp	r2, r3
    1c54:	d00c      	beq.n	1c70 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1c56:	000a      	movs	r2, r1
    1c58:	6c89      	ldr	r1, [r1, #72]	; 0x48
    1c5a:	1c5d      	adds	r5, r3, #1
    1c5c:	2044      	movs	r0, #68	; 0x44
    1c5e:	5215      	strh	r5, [r2, r0]
    1c60:	5cc9      	ldrb	r1, [r1, r3]
    1c62:	0020      	movs	r0, r4
    1c64:	4b04      	ldr	r3, [pc, #16]	; (1c78 <usart_process_byte_sent+0x34>)
    1c66:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1c68:	0020      	movs	r0, r4
    1c6a:	4b04      	ldr	r3, [pc, #16]	; (1c7c <usart_process_byte_sent+0x38>)
    1c6c:	4798      	blx	r3
}
    1c6e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1c70:	4b03      	ldr	r3, [pc, #12]	; (1c80 <usart_process_byte_sent+0x3c>)
    1c72:	4798      	blx	r3
}
    1c74:	e7fb      	b.n	1c6e <usart_process_byte_sent+0x2a>
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	00002ce5 	.word	0x00002ce5
    1c7c:	00002d13 	.word	0x00002d13
    1c80:	00002d1b 	.word	0x00002d1b

00001c84 <usart_async_read>:
{
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	46ce      	mov	lr, r9
    1c88:	4647      	mov	r7, r8
    1c8a:	b580      	push	{r7, lr}
    1c8c:	b085      	sub	sp, #20
    1c8e:	0005      	movs	r5, r0
    1c90:	000e      	movs	r6, r1
    1c92:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
    1c94:	2800      	cmp	r0, #0
    1c96:	d015      	beq.n	1cc4 <usart_async_read+0x40>
    1c98:	2900      	cmp	r1, #0
    1c9a:	d013      	beq.n	1cc4 <usart_async_read+0x40>
    1c9c:	2a00      	cmp	r2, #0
    1c9e:	d12a      	bne.n	1cf6 <usart_async_read+0x72>
    1ca0:	22ac      	movs	r2, #172	; 0xac
    1ca2:	0052      	lsls	r2, r2, #1
    1ca4:	4929      	ldr	r1, [pc, #164]	; (1d4c <usart_async_read+0xc8>)
    1ca6:	2000      	movs	r0, #0
    1ca8:	4b29      	ldr	r3, [pc, #164]	; (1d50 <usart_async_read+0xcc>)
    1caa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1cac:	a803      	add	r0, sp, #12
    1cae:	4b29      	ldr	r3, [pc, #164]	; (1d54 <usart_async_read+0xd0>)
    1cb0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1cb2:	0028      	movs	r0, r5
    1cb4:	3034      	adds	r0, #52	; 0x34
    1cb6:	4b28      	ldr	r3, [pc, #160]	; (1d58 <usart_async_read+0xd4>)
    1cb8:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1cba:	a803      	add	r0, sp, #12
    1cbc:	4b27      	ldr	r3, [pc, #156]	; (1d5c <usart_async_read+0xd8>)
    1cbe:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1cc0:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1cc2:	e03c      	b.n	1d3e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    1cc4:	22ac      	movs	r2, #172	; 0xac
    1cc6:	0052      	lsls	r2, r2, #1
    1cc8:	4920      	ldr	r1, [pc, #128]	; (1d4c <usart_async_read+0xc8>)
    1cca:	2000      	movs	r0, #0
    1ccc:	4b20      	ldr	r3, [pc, #128]	; (1d50 <usart_async_read+0xcc>)
    1cce:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1cd0:	a803      	add	r0, sp, #12
    1cd2:	4b20      	ldr	r3, [pc, #128]	; (1d54 <usart_async_read+0xd0>)
    1cd4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1cd6:	3534      	adds	r5, #52	; 0x34
    1cd8:	0028      	movs	r0, r5
    1cda:	9501      	str	r5, [sp, #4]
    1cdc:	4b1e      	ldr	r3, [pc, #120]	; (1d58 <usart_async_read+0xd4>)
    1cde:	4798      	blx	r3
    1ce0:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1ce2:	a803      	add	r0, sp, #12
    1ce4:	4b1d      	ldr	r3, [pc, #116]	; (1d5c <usart_async_read+0xd8>)
    1ce6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1ce8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1cea:	4643      	mov	r3, r8
    1cec:	2b00      	cmp	r3, #0
    1cee:	d026      	beq.n	1d3e <usart_async_read+0xba>
    1cf0:	2f00      	cmp	r7, #0
    1cf2:	d116      	bne.n	1d22 <usart_async_read+0x9e>
    1cf4:	e023      	b.n	1d3e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    1cf6:	22ac      	movs	r2, #172	; 0xac
    1cf8:	0052      	lsls	r2, r2, #1
    1cfa:	4914      	ldr	r1, [pc, #80]	; (1d4c <usart_async_read+0xc8>)
    1cfc:	2001      	movs	r0, #1
    1cfe:	4b14      	ldr	r3, [pc, #80]	; (1d50 <usart_async_read+0xcc>)
    1d00:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1d02:	a803      	add	r0, sp, #12
    1d04:	4b13      	ldr	r3, [pc, #76]	; (1d54 <usart_async_read+0xd0>)
    1d06:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1d08:	3534      	adds	r5, #52	; 0x34
    1d0a:	0028      	movs	r0, r5
    1d0c:	9501      	str	r5, [sp, #4]
    1d0e:	4b12      	ldr	r3, [pc, #72]	; (1d58 <usart_async_read+0xd4>)
    1d10:	4798      	blx	r3
    1d12:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1d14:	a803      	add	r0, sp, #12
    1d16:	4b11      	ldr	r3, [pc, #68]	; (1d5c <usart_async_read+0xd8>)
    1d18:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1d1a:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
    1d1c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d00d      	beq.n	1d3e <usart_async_read+0xba>
{
    1d22:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1d24:	4b0e      	ldr	r3, [pc, #56]	; (1d60 <usart_async_read+0xdc>)
    1d26:	4699      	mov	r9, r3
    1d28:	1c65      	adds	r5, r4, #1
    1d2a:	b2ad      	uxth	r5, r5
    1d2c:	1931      	adds	r1, r6, r4
    1d2e:	9801      	ldr	r0, [sp, #4]
    1d30:	47c8      	blx	r9
    1d32:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1d34:	4544      	cmp	r4, r8
    1d36:	d202      	bcs.n	1d3e <usart_async_read+0xba>
    1d38:	b2a3      	uxth	r3, r4
    1d3a:	429f      	cmp	r7, r3
    1d3c:	d8f4      	bhi.n	1d28 <usart_async_read+0xa4>
}
    1d3e:	0028      	movs	r0, r5
    1d40:	b005      	add	sp, #20
    1d42:	bc0c      	pop	{r2, r3}
    1d44:	4690      	mov	r8, r2
    1d46:	4699      	mov	r9, r3
    1d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	0000ca2c 	.word	0x0000ca2c
    1d50:	00002679 	.word	0x00002679
    1d54:	000017f1 	.word	0x000017f1
    1d58:	00002805 	.word	0x00002805
    1d5c:	000017ff 	.word	0x000017ff
    1d60:	0000277d 	.word	0x0000277d

00001d64 <usart_async_init>:
{
    1d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d66:	0004      	movs	r4, r0
    1d68:	000d      	movs	r5, r1
    1d6a:	0016      	movs	r6, r2
    1d6c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1d6e:	2800      	cmp	r0, #0
    1d70:	d026      	beq.n	1dc0 <usart_async_init+0x5c>
    1d72:	2900      	cmp	r1, #0
    1d74:	d026      	beq.n	1dc4 <usart_async_init+0x60>
    1d76:	2a00      	cmp	r2, #0
    1d78:	d026      	beq.n	1dc8 <usart_async_init+0x64>
    1d7a:	0018      	movs	r0, r3
    1d7c:	1e43      	subs	r3, r0, #1
    1d7e:	4198      	sbcs	r0, r3
    1d80:	223a      	movs	r2, #58	; 0x3a
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <usart_async_init+0x70>)
    1d84:	4b14      	ldr	r3, [pc, #80]	; (1dd8 <usart_async_init+0x74>)
    1d86:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1d88:	0020      	movs	r0, r4
    1d8a:	3034      	adds	r0, #52	; 0x34
    1d8c:	003a      	movs	r2, r7
    1d8e:	0031      	movs	r1, r6
    1d90:	4b12      	ldr	r3, [pc, #72]	; (1ddc <usart_async_init+0x78>)
    1d92:	4798      	blx	r3
    1d94:	2800      	cmp	r0, #0
    1d96:	d119      	bne.n	1dcc <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
    1d98:	0020      	movs	r0, r4
    1d9a:	3008      	adds	r0, #8
    1d9c:	0029      	movs	r1, r5
    1d9e:	4b10      	ldr	r3, [pc, #64]	; (1de0 <usart_async_init+0x7c>)
    1da0:	4798      	blx	r3
	if (init_status) {
    1da2:	2800      	cmp	r0, #0
    1da4:	d10b      	bne.n	1dbe <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    1da6:	4b0f      	ldr	r3, [pc, #60]	; (1de4 <usart_async_init+0x80>)
    1da8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1daa:	4b0f      	ldr	r3, [pc, #60]	; (1de8 <usart_async_init+0x84>)
    1dac:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1dae:	4b0f      	ldr	r3, [pc, #60]	; (1dec <usart_async_init+0x88>)
    1db0:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1db2:	4b0f      	ldr	r3, [pc, #60]	; (1df0 <usart_async_init+0x8c>)
    1db4:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1db6:	4b0f      	ldr	r3, [pc, #60]	; (1df4 <usart_async_init+0x90>)
    1db8:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1dba:	4b0f      	ldr	r3, [pc, #60]	; (1df8 <usart_async_init+0x94>)
    1dbc:	6163      	str	r3, [r4, #20]
}
    1dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1dc0:	2000      	movs	r0, #0
    1dc2:	e7dd      	b.n	1d80 <usart_async_init+0x1c>
    1dc4:	2000      	movs	r0, #0
    1dc6:	e7db      	b.n	1d80 <usart_async_init+0x1c>
    1dc8:	2000      	movs	r0, #0
    1dca:	e7d9      	b.n	1d80 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    1dcc:	200d      	movs	r0, #13
    1dce:	4240      	negs	r0, r0
    1dd0:	e7f5      	b.n	1dbe <usart_async_init+0x5a>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	0000ca2c 	.word	0x0000ca2c
    1dd8:	00002679 	.word	0x00002679
    1ddc:	00002729 	.word	0x00002729
    1de0:	00002c39 	.word	0x00002c39
    1de4:	00001c85 	.word	0x00001c85
    1de8:	00001be1 	.word	0x00001be1
    1dec:	00001c45 	.word	0x00001c45
    1df0:	00001bc5 	.word	0x00001bc5
    1df4:	00001ba1 	.word	0x00001ba1
    1df8:	00001bb3 	.word	0x00001bb3

00001dfc <usart_async_enable>:
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	0004      	movs	r4, r0
	ASSERT(descr);
    1e00:	1e43      	subs	r3, r0, #1
    1e02:	4198      	sbcs	r0, r3
    1e04:	b2c0      	uxtb	r0, r0
    1e06:	2261      	movs	r2, #97	; 0x61
    1e08:	4904      	ldr	r1, [pc, #16]	; (1e1c <usart_async_enable+0x20>)
    1e0a:	4b05      	ldr	r3, [pc, #20]	; (1e20 <usart_async_enable+0x24>)
    1e0c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1e0e:	0020      	movs	r0, r4
    1e10:	3008      	adds	r0, #8
    1e12:	4b04      	ldr	r3, [pc, #16]	; (1e24 <usart_async_enable+0x28>)
    1e14:	4798      	blx	r3
}
    1e16:	2000      	movs	r0, #0
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	0000ca2c 	.word	0x0000ca2c
    1e20:	00002679 	.word	0x00002679
    1e24:	00002cc9 	.word	0x00002cc9

00001e28 <usart_async_get_io_descriptor>:
{
    1e28:	b570      	push	{r4, r5, r6, lr}
    1e2a:	0004      	movs	r4, r0
    1e2c:	000d      	movs	r5, r1
	ASSERT(descr && io);
    1e2e:	2800      	cmp	r0, #0
    1e30:	d00a      	beq.n	1e48 <usart_async_get_io_descriptor+0x20>
    1e32:	0008      	movs	r0, r1
    1e34:	1e43      	subs	r3, r0, #1
    1e36:	4198      	sbcs	r0, r3
    1e38:	b2c0      	uxtb	r0, r0
    1e3a:	2277      	movs	r2, #119	; 0x77
    1e3c:	4903      	ldr	r1, [pc, #12]	; (1e4c <usart_async_get_io_descriptor+0x24>)
    1e3e:	4b04      	ldr	r3, [pc, #16]	; (1e50 <usart_async_get_io_descriptor+0x28>)
    1e40:	4798      	blx	r3
	*io = &descr->io;
    1e42:	602c      	str	r4, [r5, #0]
}
    1e44:	2000      	movs	r0, #0
    1e46:	bd70      	pop	{r4, r5, r6, pc}
    1e48:	2000      	movs	r0, #0
    1e4a:	e7f6      	b.n	1e3a <usart_async_get_io_descriptor+0x12>
    1e4c:	0000ca2c 	.word	0x0000ca2c
    1e50:	00002679 	.word	0x00002679

00001e54 <usart_async_register_callback>:
{
    1e54:	b570      	push	{r4, r5, r6, lr}
    1e56:	0005      	movs	r5, r0
    1e58:	000e      	movs	r6, r1
    1e5a:	0014      	movs	r4, r2
	ASSERT(descr);
    1e5c:	1e43      	subs	r3, r0, #1
    1e5e:	4198      	sbcs	r0, r3
    1e60:	b2c0      	uxtb	r0, r0
    1e62:	2283      	movs	r2, #131	; 0x83
    1e64:	4916      	ldr	r1, [pc, #88]	; (1ec0 <usart_async_register_callback+0x6c>)
    1e66:	4b17      	ldr	r3, [pc, #92]	; (1ec4 <usart_async_register_callback+0x70>)
    1e68:	4798      	blx	r3
	switch (type) {
    1e6a:	2e01      	cmp	r6, #1
    1e6c:	d011      	beq.n	1e92 <usart_async_register_callback+0x3e>
    1e6e:	2e00      	cmp	r6, #0
    1e70:	d004      	beq.n	1e7c <usart_async_register_callback+0x28>
    1e72:	2e02      	cmp	r6, #2
    1e74:	d018      	beq.n	1ea8 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
    1e76:	200d      	movs	r0, #13
    1e78:	4240      	negs	r0, r0
    1e7a:	e009      	b.n	1e90 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    1e7c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1e7e:	1e62      	subs	r2, r4, #1
    1e80:	4194      	sbcs	r4, r2
    1e82:	b2e2      	uxtb	r2, r4
    1e84:	0028      	movs	r0, r5
    1e86:	3008      	adds	r0, #8
    1e88:	2101      	movs	r1, #1
    1e8a:	4b0f      	ldr	r3, [pc, #60]	; (1ec8 <usart_async_register_callback+0x74>)
    1e8c:	4798      	blx	r3
	return ERR_NONE;
    1e8e:	2000      	movs	r0, #0
}
    1e90:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1e92:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1e94:	1e62      	subs	r2, r4, #1
    1e96:	4194      	sbcs	r4, r2
    1e98:	b2e2      	uxtb	r2, r4
    1e9a:	0028      	movs	r0, r5
    1e9c:	3008      	adds	r0, #8
    1e9e:	2102      	movs	r1, #2
    1ea0:	4b09      	ldr	r3, [pc, #36]	; (1ec8 <usart_async_register_callback+0x74>)
    1ea2:	4798      	blx	r3
	return ERR_NONE;
    1ea4:	2000      	movs	r0, #0
		break;
    1ea6:	e7f3      	b.n	1e90 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
    1ea8:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1eaa:	1e62      	subs	r2, r4, #1
    1eac:	4194      	sbcs	r4, r2
    1eae:	b2e2      	uxtb	r2, r4
    1eb0:	0028      	movs	r0, r5
    1eb2:	3008      	adds	r0, #8
    1eb4:	2103      	movs	r1, #3
    1eb6:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <usart_async_register_callback+0x74>)
    1eb8:	4798      	blx	r3
	return ERR_NONE;
    1eba:	2000      	movs	r0, #0
		break;
    1ebc:	e7e8      	b.n	1e90 <usart_async_register_callback+0x3c>
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	0000ca2c 	.word	0x0000ca2c
    1ec4:	00002679 	.word	0x00002679
    1ec8:	00002d25 	.word	0x00002d25

00001ecc <usart_async_is_rx_not_empty>:
{
    1ecc:	b510      	push	{r4, lr}
    1ece:	0004      	movs	r4, r0
	ASSERT(descr);
    1ed0:	1e43      	subs	r3, r0, #1
    1ed2:	4198      	sbcs	r0, r3
    1ed4:	b2c0      	uxtb	r0, r0
    1ed6:	2202      	movs	r2, #2
    1ed8:	32ff      	adds	r2, #255	; 0xff
    1eda:	4905      	ldr	r1, [pc, #20]	; (1ef0 <usart_async_is_rx_not_empty+0x24>)
    1edc:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <usart_async_is_rx_not_empty+0x28>)
    1ede:	4798      	blx	r3
	return ringbuffer_num(&descr->rx) > 0;
    1ee0:	0020      	movs	r0, r4
    1ee2:	3034      	adds	r0, #52	; 0x34
    1ee4:	4b04      	ldr	r3, [pc, #16]	; (1ef8 <usart_async_is_rx_not_empty+0x2c>)
    1ee6:	4798      	blx	r3
    1ee8:	1e43      	subs	r3, r0, #1
    1eea:	4198      	sbcs	r0, r3
}
    1eec:	bd10      	pop	{r4, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	0000ca2c 	.word	0x0000ca2c
    1ef4:	00002679 	.word	0x00002679
    1ef8:	00002805 	.word	0x00002805

00001efc <usart_async_get_status>:
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0004      	movs	r4, r0
    1f00:	000d      	movs	r5, r1
	ASSERT(descr);
    1f02:	1e43      	subs	r3, r0, #1
    1f04:	4198      	sbcs	r0, r3
    1f06:	b2c0      	uxtb	r0, r0
    1f08:	220c      	movs	r2, #12
    1f0a:	32ff      	adds	r2, #255	; 0xff
    1f0c:	490b      	ldr	r1, [pc, #44]	; (1f3c <usart_async_get_status+0x40>)
    1f0e:	4b0c      	ldr	r3, [pc, #48]	; (1f40 <usart_async_get_status+0x44>)
    1f10:	4798      	blx	r3
	if (status) {
    1f12:	2d00      	cmp	r5, #0
    1f14:	d009      	beq.n	1f2a <usart_async_get_status+0x2e>
		status->flags = *tmp_stat;
    1f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1f18:	602b      	str	r3, [r5, #0]
		status->txcnt = *tmp_txcnt;
    1f1a:	2344      	movs	r3, #68	; 0x44
    1f1c:	5ae3      	ldrh	r3, [r4, r3]
    1f1e:	80ab      	strh	r3, [r5, #4]
		status->rxcnt = ringbuffer_num(&descr->rx);
    1f20:	0020      	movs	r0, r4
    1f22:	3034      	adds	r0, #52	; 0x34
    1f24:	4b07      	ldr	r3, [pc, #28]	; (1f44 <usart_async_get_status+0x48>)
    1f26:	4798      	blx	r3
    1f28:	80e8      	strh	r0, [r5, #6]
	if (*tmp_stat & USART_ASYNC_STATUS_BUSY) {
    1f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1f2c:	07db      	lsls	r3, r3, #31
    1f2e:	d401      	bmi.n	1f34 <usart_async_get_status+0x38>
	return ERR_NONE;
    1f30:	2000      	movs	r0, #0
}
    1f32:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1f34:	2004      	movs	r0, #4
    1f36:	4240      	negs	r0, r0
    1f38:	e7fb      	b.n	1f32 <usart_async_get_status+0x36>
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	0000ca2c 	.word	0x0000ca2c
    1f40:	00002679 	.word	0x00002679
    1f44:	00002805 	.word	0x00002805

00001f48 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f4a:	46ce      	mov	lr, r9
    1f4c:	4647      	mov	r7, r8
    1f4e:	b580      	push	{r7, lr}
    1f50:	0004      	movs	r4, r0
    1f52:	000f      	movs	r7, r1
    1f54:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1f56:	2800      	cmp	r0, #0
    1f58:	d026      	beq.n	1fa8 <usart_sync_write+0x60>
    1f5a:	2900      	cmp	r1, #0
    1f5c:	d026      	beq.n	1fac <usart_sync_write+0x64>
    1f5e:	0010      	movs	r0, r2
    1f60:	1e43      	subs	r3, r0, #1
    1f62:	4198      	sbcs	r0, r3
    1f64:	22f1      	movs	r2, #241	; 0xf1
    1f66:	4912      	ldr	r1, [pc, #72]	; (1fb0 <usart_sync_write+0x68>)
    1f68:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <usart_sync_write+0x6c>)
    1f6a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1f6c:	3408      	adds	r4, #8
    1f6e:	4d12      	ldr	r5, [pc, #72]	; (1fb8 <usart_sync_write+0x70>)
    1f70:	0020      	movs	r0, r4
    1f72:	47a8      	blx	r5
    1f74:	2800      	cmp	r0, #0
    1f76:	d0fb      	beq.n	1f70 <usart_sync_write+0x28>
    1f78:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1f7a:	4b10      	ldr	r3, [pc, #64]	; (1fbc <usart_sync_write+0x74>)
    1f7c:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f7e:	4d0e      	ldr	r5, [pc, #56]	; (1fb8 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1f80:	5db9      	ldrb	r1, [r7, r6]
    1f82:	0020      	movs	r0, r4
    1f84:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1f86:	0020      	movs	r0, r4
    1f88:	47a8      	blx	r5
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d0fb      	beq.n	1f86 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
    1f8e:	3601      	adds	r6, #1
    1f90:	4546      	cmp	r6, r8
    1f92:	d3f5      	bcc.n	1f80 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1f94:	4d0a      	ldr	r5, [pc, #40]	; (1fc0 <usart_sync_write+0x78>)
    1f96:	0020      	movs	r0, r4
    1f98:	47a8      	blx	r5
    1f9a:	2800      	cmp	r0, #0
    1f9c:	d0fb      	beq.n	1f96 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
    1f9e:	0030      	movs	r0, r6
    1fa0:	bc0c      	pop	{r2, r3}
    1fa2:	4690      	mov	r8, r2
    1fa4:	4699      	mov	r9, r3
    1fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1fa8:	2000      	movs	r0, #0
    1faa:	e7db      	b.n	1f64 <usart_sync_write+0x1c>
    1fac:	2000      	movs	r0, #0
    1fae:	e7d9      	b.n	1f64 <usart_sync_write+0x1c>
    1fb0:	0000ca4c 	.word	0x0000ca4c
    1fb4:	00002679 	.word	0x00002679
    1fb8:	00002cf5 	.word	0x00002cf5
    1fbc:	00002cdd 	.word	0x00002cdd
    1fc0:	00002cff 	.word	0x00002cff

00001fc4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fc6:	46ce      	mov	lr, r9
    1fc8:	4647      	mov	r7, r8
    1fca:	b580      	push	{r7, lr}
    1fcc:	0004      	movs	r4, r0
    1fce:	000f      	movs	r7, r1
    1fd0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d01d      	beq.n	2012 <STACK_SIZE+0x12>
    1fd6:	2900      	cmp	r1, #0
    1fd8:	d01d      	beq.n	2016 <STACK_SIZE+0x16>
    1fda:	0010      	movs	r0, r2
    1fdc:	1e43      	subs	r3, r0, #1
    1fde:	4198      	sbcs	r0, r3
    1fe0:	2286      	movs	r2, #134	; 0x86
    1fe2:	0052      	lsls	r2, r2, #1
    1fe4:	490d      	ldr	r1, [pc, #52]	; (201c <STACK_SIZE+0x1c>)
    1fe6:	4b0e      	ldr	r3, [pc, #56]	; (2020 <STACK_SIZE+0x20>)
    1fe8:	4798      	blx	r3
	uint32_t                      offset = 0;
    1fea:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1fec:	3408      	adds	r4, #8
    1fee:	4d0d      	ldr	r5, [pc, #52]	; (2024 <STACK_SIZE+0x24>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1ff0:	4b0d      	ldr	r3, [pc, #52]	; (2028 <STACK_SIZE+0x28>)
    1ff2:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    1ff4:	0020      	movs	r0, r4
    1ff6:	47a8      	blx	r5
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d0fb      	beq.n	1ff4 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1ffc:	0020      	movs	r0, r4
    1ffe:	47c8      	blx	r9
    2000:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    2002:	3601      	adds	r6, #1
    2004:	4546      	cmp	r6, r8
    2006:	d3f5      	bcc.n	1ff4 <usart_sync_read+0x30>

	return (int32_t)offset;
}
    2008:	0030      	movs	r0, r6
    200a:	bc0c      	pop	{r2, r3}
    200c:	4690      	mov	r8, r2
    200e:	4699      	mov	r9, r3
    2010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    2012:	2000      	movs	r0, #0
    2014:	e7e4      	b.n	1fe0 <usart_sync_read+0x1c>
    2016:	2000      	movs	r0, #0
    2018:	e7e2      	b.n	1fe0 <usart_sync_read+0x1c>
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	0000ca4c 	.word	0x0000ca4c
    2020:	00002679 	.word	0x00002679
    2024:	00002d09 	.word	0x00002d09
    2028:	00002ced 	.word	0x00002ced

0000202c <usart_sync_init>:
{
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	0005      	movs	r5, r0
    2030:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    2032:	2800      	cmp	r0, #0
    2034:	d013      	beq.n	205e <usart_sync_init+0x32>
    2036:	0008      	movs	r0, r1
    2038:	1e43      	subs	r3, r0, #1
    203a:	4198      	sbcs	r0, r3
    203c:	b2c0      	uxtb	r0, r0
    203e:	2234      	movs	r2, #52	; 0x34
    2040:	4908      	ldr	r1, [pc, #32]	; (2064 <usart_sync_init+0x38>)
    2042:	4b09      	ldr	r3, [pc, #36]	; (2068 <usart_sync_init+0x3c>)
    2044:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    2046:	0028      	movs	r0, r5
    2048:	3008      	adds	r0, #8
    204a:	0021      	movs	r1, r4
    204c:	4b07      	ldr	r3, [pc, #28]	; (206c <usart_sync_init+0x40>)
    204e:	4798      	blx	r3
	if (init_status) {
    2050:	2800      	cmp	r0, #0
    2052:	d103      	bne.n	205c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    2054:	4b06      	ldr	r3, [pc, #24]	; (2070 <usart_sync_init+0x44>)
    2056:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <usart_sync_init+0x48>)
    205a:	602b      	str	r3, [r5, #0]
}
    205c:	bd70      	pop	{r4, r5, r6, pc}
    205e:	2000      	movs	r0, #0
    2060:	e7ed      	b.n	203e <usart_sync_init+0x12>
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	0000ca4c 	.word	0x0000ca4c
    2068:	00002679 	.word	0x00002679
    206c:	00002c0d 	.word	0x00002c0d
    2070:	00001fc5 	.word	0x00001fc5
    2074:	00001f49 	.word	0x00001f49

00002078 <usart_sync_enable>:
{
    2078:	b510      	push	{r4, lr}
    207a:	0004      	movs	r4, r0
	ASSERT(descr);
    207c:	1e43      	subs	r3, r0, #1
    207e:	4198      	sbcs	r0, r3
    2080:	b2c0      	uxtb	r0, r0
    2082:	2253      	movs	r2, #83	; 0x53
    2084:	4904      	ldr	r1, [pc, #16]	; (2098 <usart_sync_enable+0x20>)
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <usart_sync_enable+0x24>)
    2088:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    208a:	0020      	movs	r0, r4
    208c:	3008      	adds	r0, #8
    208e:	4b04      	ldr	r3, [pc, #16]	; (20a0 <usart_sync_enable+0x28>)
    2090:	4798      	blx	r3
}
    2092:	2000      	movs	r0, #0
    2094:	bd10      	pop	{r4, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	0000ca4c 	.word	0x0000ca4c
    209c:	00002679 	.word	0x00002679
    20a0:	00002cb5 	.word	0x00002cb5

000020a4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    20a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a6:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    20a8:	4b0e      	ldr	r3, [pc, #56]	; (20e4 <_usb_d_find_ep+0x40>)
    20aa:	785a      	ldrb	r2, [r3, #1]
    20ac:	4290      	cmp	r0, r2
    20ae:	d017      	beq.n	20e0 <_usb_d_find_ep+0x3c>
    20b0:	2300      	movs	r3, #0
    20b2:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    20b4:	4d0b      	ldr	r5, [pc, #44]	; (20e4 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    20b6:	270f      	movs	r7, #15
    20b8:	4027      	ands	r7, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    20ba:	002e      	movs	r6, r5
    20bc:	e008      	b.n	20d0 <_usb_d_find_ep+0x2c>
    20be:	3001      	adds	r0, #1
    20c0:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    20c2:	280d      	cmp	r0, #13
    20c4:	d00a      	beq.n	20dc <_usb_d_find_ep+0x38>
    20c6:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    20c8:	18f2      	adds	r2, r6, r3
    20ca:	7852      	ldrb	r2, [r2, #1]
    20cc:	42a2      	cmp	r2, r4
    20ce:	d006      	beq.n	20de <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    20d0:	5d59      	ldrb	r1, [r3, r5]
    20d2:	2900      	cmp	r1, #0
    20d4:	d1f3      	bne.n	20be <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    20d6:	4297      	cmp	r7, r2
    20d8:	d1f1      	bne.n	20be <_usb_d_find_ep+0x1a>
    20da:	e000      	b.n	20de <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    20dc:	380e      	subs	r0, #14
}
    20de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    20e0:	2000      	movs	r0, #0
    20e2:	e7fc      	b.n	20de <_usb_d_find_ep+0x3a>
    20e4:	20000ec0 	.word	0x20000ec0

000020e8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    20e8:	2000      	movs	r0, #0
    20ea:	4770      	bx	lr

000020ec <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    20ec:	b570      	push	{r4, r5, r6, lr}
    20ee:	0004      	movs	r4, r0
    20f0:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    20f2:	4b0a      	ldr	r3, [pc, #40]	; (211c <usb_d_cb_trans_more+0x30>)
    20f4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    20f6:	0142      	lsls	r2, r0, #5
    20f8:	4b09      	ldr	r3, [pc, #36]	; (2120 <usb_d_cb_trans_more+0x34>)
    20fa:	189b      	adds	r3, r3, r2
    20fc:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    20fe:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2100:	2a03      	cmp	r2, #3
    2102:	d001      	beq.n	2108 <usb_d_cb_trans_more+0x1c>
}
    2104:	0018      	movs	r0, r3
    2106:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    2108:	0140      	lsls	r0, r0, #5
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <usb_d_cb_trans_more+0x34>)
    210c:	1818      	adds	r0, r3, r0
    210e:	6983      	ldr	r3, [r0, #24]
    2110:	0029      	movs	r1, r5
    2112:	0020      	movs	r0, r4
    2114:	4798      	blx	r3
    2116:	0003      	movs	r3, r0
    2118:	e7f4      	b.n	2104 <usb_d_cb_trans_more+0x18>
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	000020a5 	.word	0x000020a5
    2120:	20000ec0 	.word	0x20000ec0

00002124 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
    2126:	b085      	sub	sp, #20
    2128:	0005      	movs	r5, r0
    212a:	000f      	movs	r7, r1
    212c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    212e:	4b51      	ldr	r3, [pc, #324]	; (2274 <_usb_d_cb_trans_done+0x150>)
    2130:	4798      	blx	r3
    2132:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    2134:	2f00      	cmp	r7, #0
    2136:	d162      	bne.n	21fe <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2138:	4b4f      	ldr	r3, [pc, #316]	; (2278 <_usb_d_cb_trans_done+0x154>)
    213a:	0142      	lsls	r2, r0, #5
    213c:	1899      	adds	r1, r3, r2
    213e:	2000      	movs	r0, #0
    2140:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2142:	5cd3      	ldrb	r3, [r2, r3]
    2144:	2b00      	cmp	r3, #0
    2146:	d00e      	beq.n	2166 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2148:	0162      	lsls	r2, r4, #5
    214a:	4b4b      	ldr	r3, [pc, #300]	; (2278 <_usb_d_cb_trans_done+0x154>)
    214c:	189b      	adds	r3, r3, r2
    214e:	2201      	movs	r2, #1
    2150:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2152:	0164      	lsls	r4, r4, #5
    2154:	4b48      	ldr	r3, [pc, #288]	; (2278 <_usb_d_cb_trans_done+0x154>)
    2156:	191c      	adds	r4, r3, r4
    2158:	78e1      	ldrb	r1, [r4, #3]
    215a:	69e3      	ldr	r3, [r4, #28]
    215c:	0032      	movs	r2, r6
    215e:	0028      	movs	r0, r5
    2160:	4798      	blx	r3
}
    2162:	b005      	add	sp, #20
    2164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    2166:	788b      	ldrb	r3, [r1, #2]
    2168:	2b03      	cmp	r3, #3
    216a:	d00c      	beq.n	2186 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    216c:	4b42      	ldr	r3, [pc, #264]	; (2278 <_usb_d_cb_trans_done+0x154>)
    216e:	0162      	lsls	r2, r4, #5
    2170:	320c      	adds	r2, #12
    2172:	189a      	adds	r2, r3, r2
    2174:	0164      	lsls	r4, r4, #5
    2176:	191c      	adds	r4, r3, r4
    2178:	7860      	ldrb	r0, [r4, #1]
    217a:	2100      	movs	r1, #0
    217c:	69e3      	ldr	r3, [r4, #28]
    217e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2180:	2302      	movs	r3, #2
    2182:	70a3      	strb	r3, [r4, #2]
    2184:	e7ed      	b.n	2162 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2186:	4a3c      	ldr	r2, [pc, #240]	; (2278 <_usb_d_cb_trans_done+0x154>)
    2188:	000b      	movs	r3, r1
    218a:	250c      	movs	r5, #12
    218c:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    218e:	0161      	lsls	r1, r4, #5
    2190:	310c      	adds	r1, #12
    2192:	1852      	adds	r2, r2, r1
    2194:	7858      	ldrb	r0, [r3, #1]
    2196:	69db      	ldr	r3, [r3, #28]
    2198:	2101      	movs	r1, #1
    219a:	4798      	blx	r3
		if (err) {
    219c:	2800      	cmp	r0, #0
    219e:	d017      	beq.n	21d0 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    21a0:	0162      	lsls	r2, r4, #5
    21a2:	4b35      	ldr	r3, [pc, #212]	; (2278 <_usb_d_cb_trans_done+0x154>)
    21a4:	189b      	adds	r3, r3, r2
    21a6:	2205      	movs	r2, #5
    21a8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    21aa:	3a03      	subs	r2, #3
    21ac:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    21ae:	2d00      	cmp	r5, #0
    21b0:	db09      	blt.n	21c6 <_usb_d_cb_trans_done+0xa2>
    21b2:	0164      	lsls	r4, r4, #5
    21b4:	4b30      	ldr	r3, [pc, #192]	; (2278 <_usb_d_cb_trans_done+0x154>)
    21b6:	191c      	adds	r4, r3, r4
    21b8:	7860      	ldrb	r0, [r4, #1]
    21ba:	2380      	movs	r3, #128	; 0x80
    21bc:	4318      	orrs	r0, r3
    21be:	2101      	movs	r1, #1
    21c0:	4b2e      	ldr	r3, [pc, #184]	; (227c <_usb_d_cb_trans_done+0x158>)
    21c2:	4798      	blx	r3
    21c4:	e7cd      	b.n	2162 <_usb_d_cb_trans_done+0x3e>
    21c6:	0164      	lsls	r4, r4, #5
    21c8:	4b2b      	ldr	r3, [pc, #172]	; (2278 <_usb_d_cb_trans_done+0x154>)
    21ca:	191c      	adds	r4, r3, r4
    21cc:	7860      	ldrb	r0, [r4, #1]
    21ce:	e7f6      	b.n	21be <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    21d0:	0164      	lsls	r4, r4, #5
    21d2:	4b29      	ldr	r3, [pc, #164]	; (2278 <_usb_d_cb_trans_done+0x154>)
    21d4:	191c      	adds	r4, r3, r4
    21d6:	2304      	movs	r3, #4
    21d8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    21da:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    21dc:	2200      	movs	r2, #0
    21de:	9201      	str	r2, [sp, #4]
    21e0:	9202      	str	r2, [sp, #8]
    21e2:	2d00      	cmp	r5, #0
    21e4:	db08      	blt.n	21f8 <_usb_d_cb_trans_done+0xd4>
    21e6:	3280      	adds	r2, #128	; 0x80
    21e8:	4313      	orrs	r3, r2
    21ea:	a801      	add	r0, sp, #4
    21ec:	7203      	strb	r3, [r0, #8]
    21ee:	2301      	movs	r3, #1
    21f0:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    21f2:	4b23      	ldr	r3, [pc, #140]	; (2280 <_usb_d_cb_trans_done+0x15c>)
    21f4:	4798      	blx	r3
    21f6:	e7b4      	b.n	2162 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    21f8:	220f      	movs	r2, #15
    21fa:	4013      	ands	r3, r2
    21fc:	e7f5      	b.n	21ea <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    21fe:	2f01      	cmp	r7, #1
    2200:	d00a      	beq.n	2218 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    2202:	2f02      	cmp	r7, #2
    2204:	d01d      	beq.n	2242 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    2206:	2f03      	cmp	r7, #3
    2208:	d02c      	beq.n	2264 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    220a:	0142      	lsls	r2, r0, #5
    220c:	4b1a      	ldr	r3, [pc, #104]	; (2278 <_usb_d_cb_trans_done+0x154>)
    220e:	189b      	adds	r3, r3, r2
    2210:	2206      	movs	r2, #6
    2212:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2214:	70da      	strb	r2, [r3, #3]
    2216:	e79c      	b.n	2152 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2218:	4b17      	ldr	r3, [pc, #92]	; (2278 <_usb_d_cb_trans_done+0x154>)
    221a:	0142      	lsls	r2, r0, #5
    221c:	1899      	adds	r1, r3, r2
    221e:	2002      	movs	r0, #2
    2220:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2222:	5cd3      	ldrb	r3, [r2, r3]
    2224:	2b00      	cmp	r3, #0
    2226:	d005      	beq.n	2234 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2228:	0162      	lsls	r2, r4, #5
    222a:	4b13      	ldr	r3, [pc, #76]	; (2278 <_usb_d_cb_trans_done+0x154>)
    222c:	189b      	adds	r3, r3, r2
    222e:	2205      	movs	r2, #5
    2230:	709a      	strb	r2, [r3, #2]
    2232:	e78e      	b.n	2152 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2234:	2202      	movs	r2, #2
    2236:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2238:	2100      	movs	r1, #0
    223a:	0028      	movs	r0, r5
    223c:	4b0f      	ldr	r3, [pc, #60]	; (227c <_usb_d_cb_trans_done+0x158>)
    223e:	4798      	blx	r3
    2240:	e787      	b.n	2152 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2242:	4b0d      	ldr	r3, [pc, #52]	; (2278 <_usb_d_cb_trans_done+0x154>)
    2244:	0142      	lsls	r2, r0, #5
    2246:	1899      	adds	r1, r3, r2
    2248:	2004      	movs	r0, #4
    224a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    224c:	5cd3      	ldrb	r3, [r2, r3]
    224e:	2b00      	cmp	r3, #0
    2250:	d005      	beq.n	225e <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2252:	0162      	lsls	r2, r4, #5
    2254:	4b08      	ldr	r3, [pc, #32]	; (2278 <_usb_d_cb_trans_done+0x154>)
    2256:	189b      	adds	r3, r3, r2
    2258:	2201      	movs	r2, #1
    225a:	709a      	strb	r2, [r3, #2]
    225c:	e779      	b.n	2152 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    225e:	2302      	movs	r3, #2
    2260:	708b      	strb	r3, [r1, #2]
			return;
    2262:	e77e      	b.n	2162 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2264:	0142      	lsls	r2, r0, #5
    2266:	4b04      	ldr	r3, [pc, #16]	; (2278 <_usb_d_cb_trans_done+0x154>)
    2268:	189b      	adds	r3, r3, r2
    226a:	2200      	movs	r2, #0
    226c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    226e:	3205      	adds	r2, #5
    2270:	70da      	strb	r2, [r3, #3]
    2272:	e76e      	b.n	2152 <_usb_d_cb_trans_done+0x2e>
    2274:	000020a5 	.word	0x000020a5
    2278:	20000ec0 	.word	0x20000ec0
    227c:	00003f65 	.word	0x00003f65
    2280:	00004139 	.word	0x00004139

00002284 <usb_d_cb_trans_setup>:
{
    2284:	b5f0      	push	{r4, r5, r6, r7, lr}
    2286:	46c6      	mov	lr, r8
    2288:	b500      	push	{lr}
    228a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    228c:	4b1d      	ldr	r3, [pc, #116]	; (2304 <usb_d_cb_trans_setup+0x80>)
    228e:	4798      	blx	r3
    2290:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2292:	0145      	lsls	r5, r0, #5
    2294:	350c      	adds	r5, #12
    2296:	4b1c      	ldr	r3, [pc, #112]	; (2308 <usb_d_cb_trans_setup+0x84>)
    2298:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    229a:	0029      	movs	r1, r5
    229c:	0020      	movs	r0, r4
    229e:	4b1b      	ldr	r3, [pc, #108]	; (230c <usb_d_cb_trans_setup+0x88>)
    22a0:	4798      	blx	r3
	if (n != 8) {
    22a2:	b2c0      	uxtb	r0, r0
    22a4:	2808      	cmp	r0, #8
    22a6:	d00a      	beq.n	22be <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    22a8:	2101      	movs	r1, #1
    22aa:	0020      	movs	r0, r4
    22ac:	4d18      	ldr	r5, [pc, #96]	; (2310 <usb_d_cb_trans_setup+0x8c>)
    22ae:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    22b0:	2080      	movs	r0, #128	; 0x80
    22b2:	4320      	orrs	r0, r4
    22b4:	2101      	movs	r1, #1
    22b6:	47a8      	blx	r5
}
    22b8:	bc04      	pop	{r2}
    22ba:	4690      	mov	r8, r2
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    22be:	2100      	movs	r1, #0
    22c0:	0020      	movs	r0, r4
    22c2:	4b13      	ldr	r3, [pc, #76]	; (2310 <usb_d_cb_trans_setup+0x8c>)
    22c4:	4698      	mov	r8, r3
    22c6:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    22c8:	2780      	movs	r7, #128	; 0x80
    22ca:	4327      	orrs	r7, r4
    22cc:	2100      	movs	r1, #0
    22ce:	0038      	movs	r0, r7
    22d0:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    22d2:	0172      	lsls	r2, r6, #5
    22d4:	4b0c      	ldr	r3, [pc, #48]	; (2308 <usb_d_cb_trans_setup+0x84>)
    22d6:	189b      	adds	r3, r3, r2
    22d8:	2201      	movs	r2, #1
    22da:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    22dc:	695b      	ldr	r3, [r3, #20]
    22de:	0029      	movs	r1, r5
    22e0:	0020      	movs	r0, r4
    22e2:	4798      	blx	r3
    22e4:	2800      	cmp	r0, #0
    22e6:	d1e7      	bne.n	22b8 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    22e8:	0176      	lsls	r6, r6, #5
    22ea:	4b07      	ldr	r3, [pc, #28]	; (2308 <usb_d_cb_trans_setup+0x84>)
    22ec:	199e      	adds	r6, r3, r6
    22ee:	2305      	movs	r3, #5
    22f0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    22f2:	2101      	movs	r1, #1
    22f4:	0020      	movs	r0, r4
    22f6:	4c06      	ldr	r4, [pc, #24]	; (2310 <usb_d_cb_trans_setup+0x8c>)
    22f8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    22fa:	2101      	movs	r1, #1
    22fc:	0038      	movs	r0, r7
    22fe:	47a0      	blx	r4
    2300:	e7da      	b.n	22b8 <usb_d_cb_trans_setup+0x34>
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	000020a5 	.word	0x000020a5
    2308:	20000ec0 	.word	0x20000ec0
    230c:	000040c9 	.word	0x000040c9
    2310:	00003f65 	.word	0x00003f65

00002314 <usb_d_init>:

int32_t usb_d_init(void)
{
    2314:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2316:	4b14      	ldr	r3, [pc, #80]	; (2368 <usb_d_init+0x54>)
    2318:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    231a:	2800      	cmp	r0, #0
    231c:	db22      	blt.n	2364 <usb_d_init+0x50>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    231e:	4c13      	ldr	r4, [pc, #76]	; (236c <usb_d_init+0x58>)
    2320:	22d0      	movs	r2, #208	; 0xd0
    2322:	0052      	lsls	r2, r2, #1
    2324:	2100      	movs	r1, #0
    2326:	0020      	movs	r0, r4
    2328:	4b11      	ldr	r3, [pc, #68]	; (2370 <usb_d_init+0x5c>)
    232a:	4798      	blx	r3
    232c:	1c63      	adds	r3, r4, #1
    232e:	0020      	movs	r0, r4
    2330:	30a2      	adds	r0, #162	; 0xa2
    2332:	30ff      	adds	r0, #255	; 0xff
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2334:	24ff      	movs	r4, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2336:	4a0f      	ldr	r2, [pc, #60]	; (2374 <usb_d_init+0x60>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2338:	701c      	strb	r4, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    233a:	0019      	movs	r1, r3
    233c:	3113      	adds	r1, #19
    233e:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2340:	3104      	adds	r1, #4
    2342:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2344:	3104      	adds	r1, #4
    2346:	600a      	str	r2, [r1, #0]
    2348:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    234a:	4283      	cmp	r3, r0
    234c:	d1f4      	bne.n	2338 <usb_d_init+0x24>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    234e:	490a      	ldr	r1, [pc, #40]	; (2378 <usb_d_init+0x64>)
    2350:	2000      	movs	r0, #0
    2352:	4c0a      	ldr	r4, [pc, #40]	; (237c <usb_d_init+0x68>)
    2354:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2356:	490a      	ldr	r1, [pc, #40]	; (2380 <usb_d_init+0x6c>)
    2358:	2001      	movs	r0, #1
    235a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    235c:	4909      	ldr	r1, [pc, #36]	; (2384 <usb_d_init+0x70>)
    235e:	2002      	movs	r0, #2
    2360:	47a0      	blx	r4
	return ERR_NONE;
    2362:	2000      	movs	r0, #0
}
    2364:	bd10      	pop	{r4, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00003939 	.word	0x00003939
    236c:	20000ec0 	.word	0x20000ec0
    2370:	00007935 	.word	0x00007935
    2374:	000020e9 	.word	0x000020e9
    2378:	00002285 	.word	0x00002285
    237c:	00004371 	.word	0x00004371
    2380:	000020ed 	.word	0x000020ed
    2384:	00002125 	.word	0x00002125

00002388 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2388:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    238a:	4b01      	ldr	r3, [pc, #4]	; (2390 <usb_d_register_callback+0x8>)
    238c:	4798      	blx	r3
}
    238e:	bd10      	pop	{r4, pc}
    2390:	0000434d 	.word	0x0000434d

00002394 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2394:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    2396:	4b01      	ldr	r3, [pc, #4]	; (239c <usb_d_enable+0x8>)
    2398:	4798      	blx	r3
}
    239a:	bd10      	pop	{r4, pc}
    239c:	00003a15 	.word	0x00003a15

000023a0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    23a0:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    23a2:	4b01      	ldr	r3, [pc, #4]	; (23a8 <usb_d_attach+0x8>)
    23a4:	4798      	blx	r3
}
    23a6:	bd10      	pop	{r4, pc}
    23a8:	00003a65 	.word	0x00003a65

000023ac <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    23ac:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    23ae:	4b01      	ldr	r3, [pc, #4]	; (23b4 <usb_d_set_address+0x8>)
    23b0:	4798      	blx	r3
}
    23b2:	bd10      	pop	{r4, pc}
    23b4:	00003a75 	.word	0x00003a75

000023b8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    23b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ba:	0005      	movs	r5, r0
    23bc:	000e      	movs	r6, r1
    23be:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    23c0:	4b0f      	ldr	r3, [pc, #60]	; (2400 <usb_d_ep_init+0x48>)
    23c2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    23c4:	2800      	cmp	r0, #0
    23c6:	da14      	bge.n	23f2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    23c8:	20ff      	movs	r0, #255	; 0xff
    23ca:	4b0d      	ldr	r3, [pc, #52]	; (2400 <usb_d_ep_init+0x48>)
    23cc:	4798      	blx	r3
    23ce:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    23d0:	db12      	blt.n	23f8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    23d2:	003a      	movs	r2, r7
    23d4:	0031      	movs	r1, r6
    23d6:	0028      	movs	r0, r5
    23d8:	4b0a      	ldr	r3, [pc, #40]	; (2404 <usb_d_ep_init+0x4c>)
    23da:	4798      	blx	r3
	if (rc < 0) {
    23dc:	2800      	cmp	r0, #0
    23de:	db07      	blt.n	23f0 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    23e0:	4a09      	ldr	r2, [pc, #36]	; (2408 <usb_d_ep_init+0x50>)
    23e2:	0164      	lsls	r4, r4, #5
    23e4:	1913      	adds	r3, r2, r4
    23e6:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    23e8:	2303      	movs	r3, #3
    23ea:	401e      	ands	r6, r3
    23ec:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    23ee:	2000      	movs	r0, #0
}
    23f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    23f2:	2014      	movs	r0, #20
    23f4:	4240      	negs	r0, r0
    23f6:	e7fb      	b.n	23f0 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    23f8:	2015      	movs	r0, #21
    23fa:	4240      	negs	r0, r0
    23fc:	e7f8      	b.n	23f0 <usb_d_ep_init+0x38>
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	000020a5 	.word	0x000020a5
    2404:	00003a85 	.word	0x00003a85
    2408:	20000ec0 	.word	0x20000ec0

0000240c <usb_d_ep0_init>:
{
    240c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    240e:	b282      	uxth	r2, r0
    2410:	2100      	movs	r1, #0
    2412:	2000      	movs	r0, #0
    2414:	4b01      	ldr	r3, [pc, #4]	; (241c <usb_d_ep0_init+0x10>)
    2416:	4798      	blx	r3
}
    2418:	bd10      	pop	{r4, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	000023b9 	.word	0x000023b9

00002420 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <usb_d_ep_deinit+0x20>)
    2426:	4798      	blx	r3
    2428:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    242a:	db07      	blt.n	243c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    242c:	0028      	movs	r0, r5
    242e:	4b05      	ldr	r3, [pc, #20]	; (2444 <usb_d_ep_deinit+0x24>)
    2430:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2432:	0164      	lsls	r4, r4, #5
    2434:	4b04      	ldr	r3, [pc, #16]	; (2448 <usb_d_ep_deinit+0x28>)
    2436:	191c      	adds	r4, r3, r4
    2438:	23ff      	movs	r3, #255	; 0xff
    243a:	7063      	strb	r3, [r4, #1]
}
    243c:	bd70      	pop	{r4, r5, r6, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	000020a5 	.word	0x000020a5
    2444:	00003bb1 	.word	0x00003bb1
    2448:	20000ec0 	.word	0x20000ec0

0000244c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    244c:	b570      	push	{r4, r5, r6, lr}
    244e:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2450:	4b0e      	ldr	r3, [pc, #56]	; (248c <usb_d_ep_enable+0x40>)
    2452:	4798      	blx	r3
    2454:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2456:	db15      	blt.n	2484 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2458:	0143      	lsls	r3, r0, #5
    245a:	4a0d      	ldr	r2, [pc, #52]	; (2490 <usb_d_ep_enable+0x44>)
    245c:	5c9b      	ldrb	r3, [r3, r2]
    245e:	425a      	negs	r2, r3
    2460:	4153      	adcs	r3, r2
    2462:	3301      	adds	r3, #1
    2464:	0141      	lsls	r1, r0, #5
    2466:	4a0a      	ldr	r2, [pc, #40]	; (2490 <usb_d_ep_enable+0x44>)
    2468:	1852      	adds	r2, r2, r1
    246a:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    246c:	0020      	movs	r0, r4
    246e:	4b09      	ldr	r3, [pc, #36]	; (2494 <usb_d_ep_enable+0x48>)
    2470:	4798      	blx	r3
	if (rc < 0) {
    2472:	2800      	cmp	r0, #0
    2474:	db00      	blt.n	2478 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    2476:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2478:	016d      	lsls	r5, r5, #5
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <usb_d_ep_enable+0x44>)
    247c:	195d      	adds	r5, r3, r5
    247e:	2300      	movs	r3, #0
    2480:	70ab      	strb	r3, [r5, #2]
    2482:	e7f8      	b.n	2476 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    2484:	2012      	movs	r0, #18
    2486:	4240      	negs	r0, r0
    2488:	e7f5      	b.n	2476 <usb_d_ep_enable+0x2a>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	000020a5 	.word	0x000020a5
    2490:	20000ec0 	.word	0x20000ec0
    2494:	00003c7d 	.word	0x00003c7d

00002498 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2498:	b5f0      	push	{r4, r5, r6, r7, lr}
    249a:	46d6      	mov	lr, sl
    249c:	464f      	mov	r7, r9
    249e:	4646      	mov	r6, r8
    24a0:	b5c0      	push	{r6, r7, lr}
    24a2:	b086      	sub	sp, #24
    24a4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    24a6:	7a07      	ldrb	r7, [r0, #8]
    24a8:	0038      	movs	r0, r7
    24aa:	4b40      	ldr	r3, [pc, #256]	; (25ac <usb_d_ep_transfer+0x114>)
    24ac:	4798      	blx	r3
    24ae:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    24b0:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    24b2:	6863      	ldr	r3, [r4, #4]
    24b4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    24b6:	2800      	cmp	r0, #0
    24b8:	da00      	bge.n	24bc <usb_d_ep_transfer+0x24>
    24ba:	e071      	b.n	25a0 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    24bc:	a804      	add	r0, sp, #16
    24be:	4b3c      	ldr	r3, [pc, #240]	; (25b0 <usb_d_ep_transfer+0x118>)
    24c0:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    24c2:	016a      	lsls	r2, r5, #5
    24c4:	4b3b      	ldr	r3, [pc, #236]	; (25b4 <usb_d_ep_transfer+0x11c>)
    24c6:	189b      	adds	r3, r3, r2
    24c8:	789a      	ldrb	r2, [r3, #2]
    24ca:	2317      	movs	r3, #23
    24cc:	446b      	add	r3, sp
    24ce:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b01      	cmp	r3, #1
    24d4:	d010      	beq.n	24f8 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    24d6:	a804      	add	r0, sp, #16
    24d8:	4b37      	ldr	r3, [pc, #220]	; (25b8 <usb_d_ep_transfer+0x120>)
    24da:	4798      	blx	r3
		switch (state) {
    24dc:	2317      	movs	r3, #23
    24de:	446b      	add	r3, sp
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	b2db      	uxtb	r3, r3
    24e4:	2b05      	cmp	r3, #5
    24e6:	d05e      	beq.n	25a6 <usb_d_ep_transfer+0x10e>
    24e8:	2b06      	cmp	r3, #6
    24ea:	d023      	beq.n	2534 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    24ec:	2001      	movs	r0, #1
		switch (state) {
    24ee:	2b00      	cmp	r3, #0
    24f0:	d13c      	bne.n	256c <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    24f2:	2013      	movs	r0, #19
    24f4:	4240      	negs	r0, r0
    24f6:	e039      	b.n	256c <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    24f8:	4b2e      	ldr	r3, [pc, #184]	; (25b4 <usb_d_ep_transfer+0x11c>)
    24fa:	4699      	mov	r9, r3
    24fc:	016b      	lsls	r3, r5, #5
    24fe:	469a      	mov	sl, r3
    2500:	464b      	mov	r3, r9
    2502:	4453      	add	r3, sl
    2504:	2203      	movs	r2, #3
    2506:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2508:	a804      	add	r0, sp, #16
    250a:	4b2b      	ldr	r3, [pc, #172]	; (25b8 <usb_d_ep_transfer+0x120>)
    250c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    250e:	464b      	mov	r3, r9
    2510:	4652      	mov	r2, sl
    2512:	5cd3      	ldrb	r3, [r2, r3]
    2514:	2b00      	cmp	r3, #0
    2516:	d010      	beq.n	253a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2518:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    251a:	1e72      	subs	r2, r6, #1
    251c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    251e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    2520:	6822      	ldr	r2, [r4, #0]
    2522:	9201      	str	r2, [sp, #4]
    2524:	4642      	mov	r2, r8
    2526:	9202      	str	r2, [sp, #8]
    2528:	b27f      	sxtb	r7, r7
    252a:	2f00      	cmp	r7, #0
    252c:	db17      	blt.n	255e <usb_d_ep_transfer+0xc6>
    252e:	220f      	movs	r2, #15
    2530:	4013      	ands	r3, r2
    2532:	e016      	b.n	2562 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    2534:	2010      	movs	r0, #16
    2536:	4240      	negs	r0, r0
    2538:	e018      	b.n	256c <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    253a:	016b      	lsls	r3, r5, #5
    253c:	4a1d      	ldr	r2, [pc, #116]	; (25b4 <usb_d_ep_transfer+0x11c>)
    253e:	18d2      	adds	r2, r2, r3
    2540:	7cd1      	ldrb	r1, [r2, #19]
    2542:	0209      	lsls	r1, r1, #8
    2544:	7c93      	ldrb	r3, [r2, #18]
    2546:	185b      	adds	r3, r3, r1
    2548:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    254a:	2b00      	cmp	r3, #0
    254c:	d114      	bne.n	2578 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    254e:	2304      	movs	r3, #4
    2550:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2552:	2200      	movs	r2, #0
			zlp                 = true;
    2554:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2556:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    2558:	6821      	ldr	r1, [r4, #0]
    255a:	9101      	str	r1, [sp, #4]
    255c:	9202      	str	r2, [sp, #8]
    255e:	2280      	movs	r2, #128	; 0x80
    2560:	4313      	orrs	r3, r2
    2562:	a801      	add	r0, sp, #4
    2564:	7203      	strb	r3, [r0, #8]
    2566:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2568:	4b14      	ldr	r3, [pc, #80]	; (25bc <usb_d_ep_transfer+0x124>)
    256a:	4798      	blx	r3
	return rc;
}
    256c:	b006      	add	sp, #24
    256e:	bc1c      	pop	{r2, r3, r4}
    2570:	4690      	mov	r8, r2
    2572:	4699      	mov	r9, r3
    2574:	46a2      	mov	sl, r4
    2576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2578:	4642      	mov	r2, r8
    257a:	429a      	cmp	r2, r3
    257c:	d900      	bls.n	2580 <usb_d_ep_transfer+0xe8>
    257e:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2580:	016d      	lsls	r5, r5, #5
    2582:	490c      	ldr	r1, [pc, #48]	; (25b4 <usb_d_ep_transfer+0x11c>)
    2584:	194d      	adds	r5, r1, r5
			if (dir) {
    2586:	7b29      	ldrb	r1, [r5, #12]
    2588:	297f      	cmp	r1, #127	; 0x7f
    258a:	d805      	bhi.n	2598 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    258c:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    258e:	6821      	ldr	r1, [r4, #0]
    2590:	9101      	str	r1, [sp, #4]
    2592:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2594:	2600      	movs	r6, #0
    2596:	e7ca      	b.n	252e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    2598:	429a      	cmp	r2, r3
    259a:	41b6      	sbcs	r6, r6
    259c:	4276      	negs	r6, r6
    259e:	e7da      	b.n	2556 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    25a0:	2012      	movs	r0, #18
    25a2:	4240      	negs	r0, r0
    25a4:	e7e2      	b.n	256c <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    25a6:	2002      	movs	r0, #2
    25a8:	e7e0      	b.n	256c <usb_d_ep_transfer+0xd4>
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	000020a5 	.word	0x000020a5
    25b0:	000017f1 	.word	0x000017f1
    25b4:	20000ec0 	.word	0x20000ec0
    25b8:	000017ff 	.word	0x000017ff
    25bc:	00004139 	.word	0x00004139

000025c0 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    25c0:	b570      	push	{r4, r5, r6, lr}
    25c2:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    25c4:	2900      	cmp	r1, #0
    25c6:	d005      	beq.n	25d4 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    25c8:	2901      	cmp	r1, #1
    25ca:	d021      	beq.n	2610 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    25cc:	2102      	movs	r1, #2
    25ce:	4b13      	ldr	r3, [pc, #76]	; (261c <usb_d_ep_halt+0x5c>)
    25d0:	4798      	blx	r3
	}
}
    25d2:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    25d4:	4b12      	ldr	r3, [pc, #72]	; (2620 <usb_d_ep_halt+0x60>)
    25d6:	4798      	blx	r3
    25d8:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    25da:	db1c      	blt.n	2616 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    25dc:	2102      	movs	r1, #2
    25de:	0020      	movs	r0, r4
    25e0:	4b0e      	ldr	r3, [pc, #56]	; (261c <usb_d_ep_halt+0x5c>)
    25e2:	4798      	blx	r3
    25e4:	2800      	cmp	r0, #0
    25e6:	d0f4      	beq.n	25d2 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    25e8:	2100      	movs	r1, #0
    25ea:	0020      	movs	r0, r4
    25ec:	4b0b      	ldr	r3, [pc, #44]	; (261c <usb_d_ep_halt+0x5c>)
    25ee:	4798      	blx	r3
		if (rc < 0) {
    25f0:	2800      	cmp	r0, #0
    25f2:	dbee      	blt.n	25d2 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    25f4:	016d      	lsls	r5, r5, #5
    25f6:	4b0b      	ldr	r3, [pc, #44]	; (2624 <usb_d_ep_halt+0x64>)
    25f8:	195d      	adds	r5, r3, r5
    25fa:	2301      	movs	r3, #1
    25fc:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    25fe:	3302      	adds	r3, #2
    2600:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2602:	69eb      	ldr	r3, [r5, #28]
    2604:	2200      	movs	r2, #0
    2606:	2103      	movs	r1, #3
    2608:	0020      	movs	r0, r4
    260a:	4798      	blx	r3
	return ERR_NONE;
    260c:	2000      	movs	r0, #0
    260e:	e7e0      	b.n	25d2 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2610:	4b02      	ldr	r3, [pc, #8]	; (261c <usb_d_ep_halt+0x5c>)
    2612:	4798      	blx	r3
    2614:	e7dd      	b.n	25d2 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    2616:	2012      	movs	r0, #18
    2618:	4240      	negs	r0, r0
    261a:	e7da      	b.n	25d2 <usb_d_ep_halt+0x12>
    261c:	00003f65 	.word	0x00003f65
    2620:	000020a5 	.word	0x000020a5
    2624:	20000ec0 	.word	0x20000ec0

00002628 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2628:	b570      	push	{r4, r5, r6, lr}
    262a:	000d      	movs	r5, r1
    262c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    262e:	4b0f      	ldr	r3, [pc, #60]	; (266c <usb_d_ep_register_callback+0x44>)
    2630:	4798      	blx	r3
    2632:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2634:	1e22      	subs	r2, r4, #0
    2636:	d008      	beq.n	264a <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    2638:	2b00      	cmp	r3, #0
    263a:	db05      	blt.n	2648 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    263c:	2d01      	cmp	r5, #1
    263e:	d00b      	beq.n	2658 <usb_d_ep_register_callback+0x30>
    2640:	2d00      	cmp	r5, #0
    2642:	d004      	beq.n	264e <usb_d_ep_register_callback+0x26>
    2644:	2d02      	cmp	r5, #2
    2646:	d00c      	beq.n	2662 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    2648:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    264a:	4a09      	ldr	r2, [pc, #36]	; (2670 <usb_d_ep_register_callback+0x48>)
    264c:	e7f4      	b.n	2638 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    264e:	0140      	lsls	r0, r0, #5
    2650:	4b08      	ldr	r3, [pc, #32]	; (2674 <usb_d_ep_register_callback+0x4c>)
    2652:	1818      	adds	r0, r3, r0
    2654:	6142      	str	r2, [r0, #20]
		break;
    2656:	e7f7      	b.n	2648 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2658:	0140      	lsls	r0, r0, #5
    265a:	4b06      	ldr	r3, [pc, #24]	; (2674 <usb_d_ep_register_callback+0x4c>)
    265c:	1818      	adds	r0, r3, r0
    265e:	6182      	str	r2, [r0, #24]
		break;
    2660:	e7f2      	b.n	2648 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2662:	0140      	lsls	r0, r0, #5
    2664:	4b03      	ldr	r3, [pc, #12]	; (2674 <usb_d_ep_register_callback+0x4c>)
    2666:	1818      	adds	r0, r3, r0
    2668:	61c2      	str	r2, [r0, #28]
		break;
    266a:	e7ed      	b.n	2648 <usb_d_ep_register_callback+0x20>
    266c:	000020a5 	.word	0x000020a5
    2670:	000020e9 	.word	0x000020e9
    2674:	20000ec0 	.word	0x20000ec0

00002678 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2678:	2800      	cmp	r0, #0
    267a:	d100      	bne.n	267e <assert+0x6>
		__asm("BKPT #0");
    267c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    267e:	4770      	bx	lr

00002680 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2680:	6803      	ldr	r3, [r0, #0]
    2682:	2b00      	cmp	r3, #0
    2684:	d00a      	beq.n	269c <is_list_element+0x1c>
		if (it == element) {
    2686:	428b      	cmp	r3, r1
    2688:	d00a      	beq.n	26a0 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	2b00      	cmp	r3, #0
    268e:	d003      	beq.n	2698 <is_list_element+0x18>
		if (it == element) {
    2690:	4299      	cmp	r1, r3
    2692:	d1fa      	bne.n	268a <is_list_element+0xa>
			return true;
    2694:	2001      	movs	r0, #1
    2696:	e000      	b.n	269a <is_list_element+0x1a>
		}
	}

	return false;
    2698:	2000      	movs	r0, #0
}
    269a:	4770      	bx	lr
	return false;
    269c:	2000      	movs	r0, #0
    269e:	e7fc      	b.n	269a <is_list_element+0x1a>
			return true;
    26a0:	2001      	movs	r0, #1
    26a2:	e7fa      	b.n	269a <is_list_element+0x1a>

000026a4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	0004      	movs	r4, r0
    26a8:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    26aa:	4b06      	ldr	r3, [pc, #24]	; (26c4 <list_insert_as_head+0x20>)
    26ac:	4798      	blx	r3
    26ae:	2301      	movs	r3, #1
    26b0:	4058      	eors	r0, r3
    26b2:	b2c0      	uxtb	r0, r0
    26b4:	2239      	movs	r2, #57	; 0x39
    26b6:	4904      	ldr	r1, [pc, #16]	; (26c8 <list_insert_as_head+0x24>)
    26b8:	4b04      	ldr	r3, [pc, #16]	; (26cc <list_insert_as_head+0x28>)
    26ba:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    26c0:	6025      	str	r5, [r4, #0]
}
    26c2:	bd70      	pop	{r4, r5, r6, pc}
    26c4:	00002681 	.word	0x00002681
    26c8:	0000ca68 	.word	0x0000ca68
    26cc:	00002679 	.word	0x00002679

000026d0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    26d0:	6803      	ldr	r3, [r0, #0]
    26d2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    26d4:	6001      	str	r1, [r0, #0]
}
    26d6:	4770      	bx	lr

000026d8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	0005      	movs	r5, r0
    26dc:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    26de:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    26e0:	4b0a      	ldr	r3, [pc, #40]	; (270c <list_insert_at_end+0x34>)
    26e2:	4798      	blx	r3
    26e4:	2301      	movs	r3, #1
    26e6:	4058      	eors	r0, r3
    26e8:	b2c0      	uxtb	r0, r0
    26ea:	224f      	movs	r2, #79	; 0x4f
    26ec:	4908      	ldr	r1, [pc, #32]	; (2710 <list_insert_at_end+0x38>)
    26ee:	4b09      	ldr	r3, [pc, #36]	; (2714 <list_insert_at_end+0x3c>)
    26f0:	4798      	blx	r3

	if (!list->head) {
    26f2:	682b      	ldr	r3, [r5, #0]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d103      	bne.n	2700 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    26f8:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    26fa:	6033      	str	r3, [r6, #0]
		return;
    26fc:	e005      	b.n	270a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    26fe:	001c      	movs	r4, r3
	while (it->next) {
    2700:	6823      	ldr	r3, [r4, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d1fb      	bne.n	26fe <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    2706:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2708:	6033      	str	r3, [r6, #0]
}
    270a:	bd70      	pop	{r4, r5, r6, pc}
    270c:	00002681 	.word	0x00002681
    2710:	0000ca68 	.word	0x0000ca68
    2714:	00002679 	.word	0x00002679

00002718 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2718:	6803      	ldr	r3, [r0, #0]
    271a:	2b00      	cmp	r3, #0
    271c:	d001      	beq.n	2722 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    271e:	681a      	ldr	r2, [r3, #0]
    2720:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2722:	0018      	movs	r0, r3
    2724:	4770      	bx	lr
	...

00002728 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	0004      	movs	r4, r0
    272c:	000e      	movs	r6, r1
    272e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    2730:	2800      	cmp	r0, #0
    2732:	d00b      	beq.n	274c <ringbuffer_init+0x24>
    2734:	2900      	cmp	r1, #0
    2736:	d018      	beq.n	276a <ringbuffer_init+0x42>
    2738:	2001      	movs	r0, #1
    273a:	2a00      	cmp	r2, #0
    273c:	d107      	bne.n	274e <ringbuffer_init+0x26>
    273e:	2228      	movs	r2, #40	; 0x28
    2740:	490c      	ldr	r1, [pc, #48]	; (2774 <ringbuffer_init+0x4c>)
    2742:	2000      	movs	r0, #0
    2744:	4b0c      	ldr	r3, [pc, #48]	; (2778 <ringbuffer_init+0x50>)
    2746:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2748:	1e6b      	subs	r3, r5, #1
    274a:	e007      	b.n	275c <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    274c:	2000      	movs	r0, #0
    274e:	2228      	movs	r2, #40	; 0x28
    2750:	4908      	ldr	r1, [pc, #32]	; (2774 <ringbuffer_init+0x4c>)
    2752:	4b09      	ldr	r3, [pc, #36]	; (2778 <ringbuffer_init+0x50>)
    2754:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2756:	1e6b      	subs	r3, r5, #1
    2758:	422b      	tst	r3, r5
    275a:	d108      	bne.n	276e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    275c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    275e:	2300      	movs	r3, #0
    2760:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    2762:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2764:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2766:	2000      	movs	r0, #0
}
    2768:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    276a:	2000      	movs	r0, #0
    276c:	e7ef      	b.n	274e <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    276e:	200d      	movs	r0, #13
    2770:	4240      	negs	r0, r0
    2772:	e7f9      	b.n	2768 <ringbuffer_init+0x40>
    2774:	0000ca88 	.word	0x0000ca88
    2778:	00002679 	.word	0x00002679

0000277c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	0004      	movs	r4, r0
    2780:	000d      	movs	r5, r1
	ASSERT(rb && data);
    2782:	2800      	cmp	r0, #0
    2784:	d015      	beq.n	27b2 <ringbuffer_get+0x36>
    2786:	0008      	movs	r0, r1
    2788:	1e43      	subs	r3, r0, #1
    278a:	4198      	sbcs	r0, r3
    278c:	b2c0      	uxtb	r0, r0
    278e:	2240      	movs	r2, #64	; 0x40
    2790:	490a      	ldr	r1, [pc, #40]	; (27bc <ringbuffer_get+0x40>)
    2792:	4b0b      	ldr	r3, [pc, #44]	; (27c0 <ringbuffer_get+0x44>)
    2794:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2796:	68a3      	ldr	r3, [r4, #8]
    2798:	68e2      	ldr	r2, [r4, #12]
    279a:	429a      	cmp	r2, r3
    279c:	d00b      	beq.n	27b6 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    279e:	6862      	ldr	r2, [r4, #4]
    27a0:	4013      	ands	r3, r2
    27a2:	6822      	ldr	r2, [r4, #0]
    27a4:	5cd3      	ldrb	r3, [r2, r3]
    27a6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    27a8:	68a3      	ldr	r3, [r4, #8]
    27aa:	3301      	adds	r3, #1
    27ac:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    27ae:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    27b0:	bd70      	pop	{r4, r5, r6, pc}
    27b2:	2000      	movs	r0, #0
    27b4:	e7eb      	b.n	278e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    27b6:	200a      	movs	r0, #10
    27b8:	4240      	negs	r0, r0
    27ba:	e7f9      	b.n	27b0 <ringbuffer_get+0x34>
    27bc:	0000ca88 	.word	0x0000ca88
    27c0:	00002679 	.word	0x00002679

000027c4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    27c4:	b570      	push	{r4, r5, r6, lr}
    27c6:	0004      	movs	r4, r0
    27c8:	000d      	movs	r5, r1
	ASSERT(rb);
    27ca:	1e43      	subs	r3, r0, #1
    27cc:	4198      	sbcs	r0, r3
    27ce:	b2c0      	uxtb	r0, r0
    27d0:	2251      	movs	r2, #81	; 0x51
    27d2:	490a      	ldr	r1, [pc, #40]	; (27fc <ringbuffer_put+0x38>)
    27d4:	4b0a      	ldr	r3, [pc, #40]	; (2800 <ringbuffer_put+0x3c>)
    27d6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    27d8:	6863      	ldr	r3, [r4, #4]
    27da:	68e2      	ldr	r2, [r4, #12]
    27dc:	4013      	ands	r3, r2
    27de:	6822      	ldr	r2, [r4, #0]
    27e0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    27e2:	68e3      	ldr	r3, [r4, #12]
    27e4:	6861      	ldr	r1, [r4, #4]
    27e6:	68a2      	ldr	r2, [r4, #8]
    27e8:	1a9a      	subs	r2, r3, r2
    27ea:	428a      	cmp	r2, r1
    27ec:	d901      	bls.n	27f2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    27ee:	1a59      	subs	r1, r3, r1
    27f0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    27f2:	3301      	adds	r3, #1
    27f4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    27f6:	2000      	movs	r0, #0
    27f8:	bd70      	pop	{r4, r5, r6, pc}
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	0000ca88 	.word	0x0000ca88
    2800:	00002679 	.word	0x00002679

00002804 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2804:	b510      	push	{r4, lr}
    2806:	0004      	movs	r4, r0
	ASSERT(rb);
    2808:	1e43      	subs	r3, r0, #1
    280a:	4198      	sbcs	r0, r3
    280c:	b2c0      	uxtb	r0, r0
    280e:	2267      	movs	r2, #103	; 0x67
    2810:	4903      	ldr	r1, [pc, #12]	; (2820 <ringbuffer_num+0x1c>)
    2812:	4b04      	ldr	r3, [pc, #16]	; (2824 <ringbuffer_num+0x20>)
    2814:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2816:	68e0      	ldr	r0, [r4, #12]
    2818:	68a3      	ldr	r3, [r4, #8]
    281a:	1ac0      	subs	r0, r0, r3
}
    281c:	bd10      	pop	{r4, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	0000ca88 	.word	0x0000ca88
    2824:	00002679 	.word	0x00002679

00002828 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2828:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    282a:	4a06      	ldr	r2, [pc, #24]	; (2844 <_sbrk+0x1c>)
    282c:	6812      	ldr	r2, [r2, #0]
    282e:	2a00      	cmp	r2, #0
    2830:	d004      	beq.n	283c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2832:	4a04      	ldr	r2, [pc, #16]	; (2844 <_sbrk+0x1c>)
    2834:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2836:	18c3      	adds	r3, r0, r3
    2838:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    283a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    283c:	4902      	ldr	r1, [pc, #8]	; (2848 <_sbrk+0x20>)
    283e:	4a01      	ldr	r2, [pc, #4]	; (2844 <_sbrk+0x1c>)
    2840:	6011      	str	r1, [r2, #0]
    2842:	e7f6      	b.n	2832 <_sbrk+0xa>
    2844:	20001060 	.word	0x20001060
    2848:	20003718 	.word	0x20003718

0000284c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    284c:	2001      	movs	r0, #1
    284e:	4240      	negs	r0, r0
    2850:	4770      	bx	lr

00002852 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2852:	2380      	movs	r3, #128	; 0x80
    2854:	019b      	lsls	r3, r3, #6
    2856:	604b      	str	r3, [r1, #4]

	return 0;
}
    2858:	2000      	movs	r0, #0
    285a:	4770      	bx	lr

0000285c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    285c:	2000      	movs	r0, #0
    285e:	4770      	bx	lr

00002860 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    2860:	b510      	push	{r4, lr}
    2862:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
    2864:	20c8      	movs	r0, #200	; 0xc8
    2866:	0080      	lsls	r0, r0, #2
    2868:	4358      	muls	r0, r3
    286a:	3801      	subs	r0, #1
    286c:	2164      	movs	r1, #100	; 0x64
    286e:	4b02      	ldr	r3, [pc, #8]	; (2878 <_get_cycles_for_us+0x18>)
    2870:	4798      	blx	r3
    2872:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2874:	bd10      	pop	{r4, pc}
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	00005885 	.word	0x00005885

0000287c <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    287c:	23fa      	movs	r3, #250	; 0xfa
    287e:	015b      	lsls	r3, r3, #5
    2880:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2882:	4770      	bx	lr

00002884 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2884:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2886:	4b06      	ldr	r3, [pc, #24]	; (28a0 <_init_chip+0x1c>)
    2888:	685a      	ldr	r2, [r3, #4]
    288a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    288c:	4b05      	ldr	r3, [pc, #20]	; (28a4 <_init_chip+0x20>)
    288e:	4798      	blx	r3
	_sysctrl_init_sources();
    2890:	4b05      	ldr	r3, [pc, #20]	; (28a8 <_init_chip+0x24>)
    2892:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2894:	4b05      	ldr	r3, [pc, #20]	; (28ac <_init_chip+0x28>)
    2896:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2898:	20ff      	movs	r0, #255	; 0xff
    289a:	4b05      	ldr	r3, [pc, #20]	; (28b0 <_init_chip+0x2c>)
    289c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    289e:	bd10      	pop	{r4, pc}
    28a0:	41004000 	.word	0x41004000
    28a4:	00002aa9 	.word	0x00002aa9
    28a8:	00003041 	.word	0x00003041
    28ac:	0000309d 	.word	0x0000309d
    28b0:	00002a31 	.word	0x00002a31

000028b4 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    28b4:	4a21      	ldr	r2, [pc, #132]	; (293c <_ext_irq_init+0x88>)
    28b6:	7853      	ldrb	r3, [r2, #1]
    28b8:	09db      	lsrs	r3, r3, #7
    28ba:	d1fc      	bne.n	28b6 <_ext_irq_init+0x2>
    28bc:	4a1f      	ldr	r2, [pc, #124]	; (293c <_ext_irq_init+0x88>)
    28be:	7853      	ldrb	r3, [r2, #1]
    28c0:	09db      	lsrs	r3, r3, #7
    28c2:	d1fc      	bne.n	28be <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    28c4:	4b1d      	ldr	r3, [pc, #116]	; (293c <_ext_irq_init+0x88>)
    28c6:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    28c8:	079b      	lsls	r3, r3, #30
    28ca:	d50a      	bpl.n	28e2 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    28cc:	2200      	movs	r2, #0
    28ce:	4b1b      	ldr	r3, [pc, #108]	; (293c <_ext_irq_init+0x88>)
    28d0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    28d2:	001a      	movs	r2, r3
    28d4:	7853      	ldrb	r3, [r2, #1]
    28d6:	09db      	lsrs	r3, r3, #7
    28d8:	d1fc      	bne.n	28d4 <_ext_irq_init+0x20>
    28da:	4a18      	ldr	r2, [pc, #96]	; (293c <_ext_irq_init+0x88>)
    28dc:	7853      	ldrb	r3, [r2, #1]
    28de:	09db      	lsrs	r3, r3, #7
    28e0:	d1fc      	bne.n	28dc <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    28e2:	2201      	movs	r2, #1
    28e4:	4b15      	ldr	r3, [pc, #84]	; (293c <_ext_irq_init+0x88>)
    28e6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    28e8:	001a      	movs	r2, r3
    28ea:	7853      	ldrb	r3, [r2, #1]
    28ec:	09db      	lsrs	r3, r3, #7
    28ee:	d1fc      	bne.n	28ea <_ext_irq_init+0x36>
    28f0:	4a12      	ldr	r2, [pc, #72]	; (293c <_ext_irq_init+0x88>)
    28f2:	7853      	ldrb	r3, [r2, #1]
    28f4:	09db      	lsrs	r3, r3, #7
    28f6:	d1fc      	bne.n	28f2 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    28f8:	4b10      	ldr	r3, [pc, #64]	; (293c <_ext_irq_init+0x88>)
    28fa:	2200      	movs	r2, #0
    28fc:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    28fe:	2120      	movs	r1, #32
    2900:	6059      	str	r1, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    2902:	6159      	str	r1, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2904:	21a0      	movs	r1, #160	; 0xa0
    2906:	0409      	lsls	r1, r1, #16
    2908:	6199      	str	r1, [r3, #24]
    290a:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    290c:	781a      	ldrb	r2, [r3, #0]
    290e:	2102      	movs	r1, #2
    2910:	430a      	orrs	r2, r1
    2912:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2914:	001a      	movs	r2, r3
    2916:	7853      	ldrb	r3, [r2, #1]
    2918:	09db      	lsrs	r3, r3, #7
    291a:	d1fc      	bne.n	2916 <_ext_irq_init+0x62>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    291c:	4b08      	ldr	r3, [pc, #32]	; (2940 <_ext_irq_init+0x8c>)
    291e:	2210      	movs	r2, #16
    2920:	2180      	movs	r1, #128	; 0x80
    2922:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2928:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    292c:	3101      	adds	r1, #1
    292e:	31ff      	adds	r1, #255	; 0xff
    2930:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2932:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    2934:	4b03      	ldr	r3, [pc, #12]	; (2944 <_ext_irq_init+0x90>)
    2936:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2938:	2000      	movs	r0, #0
    293a:	4770      	bx	lr
    293c:	40001800 	.word	0x40001800
    2940:	e000e100 	.word	0xe000e100
    2944:	20001064 	.word	0x20001064

00002948 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    2948:	b5f0      	push	{r4, r5, r6, r7, lr}
    294a:	46ce      	mov	lr, r9
    294c:	4647      	mov	r7, r8
    294e:	b580      	push	{r7, lr}
    2950:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    2952:	4b31      	ldr	r3, [pc, #196]	; (2a18 <EIC_Handler+0xd0>)
    2954:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2956:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2958:	400a      	ands	r2, r1
    295a:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    295c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    295e:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    2960:	4b2e      	ldr	r3, [pc, #184]	; (2a1c <EIC_Handler+0xd4>)
    2962:	6818      	ldr	r0, [r3, #0]
    2964:	1e43      	subs	r3, r0, #1
    2966:	4198      	sbcs	r0, r3
    2968:	b2c0      	uxtb	r0, r0
    296a:	22d2      	movs	r2, #210	; 0xd2
    296c:	492c      	ldr	r1, [pc, #176]	; (2a20 <EIC_Handler+0xd8>)
    296e:	4b2d      	ldr	r3, [pc, #180]	; (2a24 <EIC_Handler+0xdc>)
    2970:	4798      	blx	r3

	while (flags) {
    2972:	9b01      	ldr	r3, [sp, #4]
    2974:	2b00      	cmp	r3, #0
    2976:	d049      	beq.n	2a0c <EIC_Handler+0xc4>
    2978:	2301      	movs	r3, #1
    297a:	425b      	negs	r3, r3
    297c:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
    297e:	4b2a      	ldr	r3, [pc, #168]	; (2a28 <EIC_Handler+0xe0>)
    2980:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    2982:	4f26      	ldr	r7, [pc, #152]	; (2a1c <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
    2984:	4d29      	ldr	r5, [pc, #164]	; (2a2c <EIC_Handler+0xe4>)
    2986:	e03a      	b.n	29fe <EIC_Handler+0xb6>
					upper = middle - 1;
    2988:	3a01      	subs	r2, #1
    298a:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    298c:	42b1      	cmp	r1, r6
    298e:	d80c      	bhi.n	29aa <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
    2990:	1873      	adds	r3, r6, r1
    2992:	105b      	asrs	r3, r3, #1
    2994:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    2996:	4003      	ands	r3, r0
    2998:	00db      	lsls	r3, r3, #3
    299a:	5d5b      	ldrb	r3, [r3, r5]
    299c:	42a3      	cmp	r3, r4
    299e:	d008      	beq.n	29b2 <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
    29a0:	429c      	cmp	r4, r3
    29a2:	ddf1      	ble.n	2988 <EIC_Handler+0x40>
					lower = middle + 1;
    29a4:	3201      	adds	r2, #1
    29a6:	b2d1      	uxtb	r1, r2
    29a8:	e7f0      	b.n	298c <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
    29aa:	464b      	mov	r3, r9
    29ac:	3301      	adds	r3, #1
    29ae:	d005      	beq.n	29bc <EIC_Handler+0x74>
    29b0:	e001      	b.n	29b6 <EIC_Handler+0x6e>
    29b2:	2305      	movs	r3, #5
    29b4:	4699      	mov	r9, r3
				callback(pin);
    29b6:	4648      	mov	r0, r9
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    29bc:	9b01      	ldr	r3, [sp, #4]
    29be:	2201      	movs	r2, #1
    29c0:	40a2      	lsls	r2, r4
    29c2:	4393      	bics	r3, r2
    29c4:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    29c6:	9801      	ldr	r0, [sp, #4]
    29c8:	4b17      	ldr	r3, [pc, #92]	; (2a28 <EIC_Handler+0xe0>)
    29ca:	4798      	blx	r3
    29cc:	3801      	subs	r0, #1
    29ce:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    29d0:	1c63      	adds	r3, r4, #1
    29d2:	d00a      	beq.n	29ea <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
    29d4:	2c05      	cmp	r4, #5
    29d6:	d005      	beq.n	29e4 <EIC_Handler+0x9c>
    29d8:	2305      	movs	r3, #5
    29da:	2200      	movs	r2, #0
    29dc:	2601      	movs	r6, #1
    29de:	2100      	movs	r1, #0
    29e0:	20ff      	movs	r0, #255	; 0xff
    29e2:	e7dd      	b.n	29a0 <EIC_Handler+0x58>
    29e4:	2305      	movs	r3, #5
    29e6:	4699      	mov	r9, r3
    29e8:	e7e5      	b.n	29b6 <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
    29ea:	4b0b      	ldr	r3, [pc, #44]	; (2a18 <EIC_Handler+0xd0>)
    29ec:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    29ee:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    29f0:	400a      	ands	r2, r1
    29f2:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    29f4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    29f6:	611a      	str	r2, [r3, #16]
	while (flags) {
    29f8:	9b01      	ldr	r3, [sp, #4]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d006      	beq.n	2a0c <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
    29fe:	9801      	ldr	r0, [sp, #4]
    2a00:	47c0      	blx	r8
    2a02:	3801      	subs	r0, #1
    2a04:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2a06:	1c63      	adds	r3, r4, #1
    2a08:	d1e4      	bne.n	29d4 <EIC_Handler+0x8c>
    2a0a:	e7ee      	b.n	29ea <EIC_Handler+0xa2>
	}
}
    2a0c:	b003      	add	sp, #12
    2a0e:	bc0c      	pop	{r2, r3}
    2a10:	4690      	mov	r8, r2
    2a12:	4699      	mov	r9, r3
    2a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	40001800 	.word	0x40001800
    2a1c:	20001064 	.word	0x20001064
    2a20:	0000cab4 	.word	0x0000cab4
    2a24:	00002679 	.word	0x00002679
    2a28:	000059dd 	.word	0x000059dd
    2a2c:	0000caac 	.word	0x0000caac

00002a30 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2a30:	07c3      	lsls	r3, r0, #31
    2a32:	d50a      	bpl.n	2a4a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2a34:	4b17      	ldr	r3, [pc, #92]	; (2a94 <_gclk_init_generators_by_fref+0x64>)
    2a36:	2280      	movs	r2, #128	; 0x80
    2a38:	0052      	lsls	r2, r2, #1
    2a3a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2a3c:	2283      	movs	r2, #131	; 0x83
    2a3e:	0252      	lsls	r2, r2, #9
    2a40:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2a42:	001a      	movs	r2, r3
    2a44:	7853      	ldrb	r3, [r2, #1]
    2a46:	09db      	lsrs	r3, r3, #7
    2a48:	d1fc      	bne.n	2a44 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2a4a:	0783      	lsls	r3, r0, #30
    2a4c:	d508      	bpl.n	2a60 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    2a4e:	4b11      	ldr	r3, [pc, #68]	; (2a94 <_gclk_init_generators_by_fref+0x64>)
    2a50:	4a11      	ldr	r2, [pc, #68]	; (2a98 <_gclk_init_generators_by_fref+0x68>)
    2a52:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2a54:	4a11      	ldr	r2, [pc, #68]	; (2a9c <_gclk_init_generators_by_fref+0x6c>)
    2a56:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2a58:	001a      	movs	r2, r3
    2a5a:	7853      	ldrb	r3, [r2, #1]
    2a5c:	09db      	lsrs	r3, r3, #7
    2a5e:	d1fc      	bne.n	2a5a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2a60:	0703      	lsls	r3, r0, #28
    2a62:	d509      	bpl.n	2a78 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    2a64:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <_gclk_init_generators_by_fref+0x64>)
    2a66:	2204      	movs	r2, #4
    2a68:	32ff      	adds	r2, #255	; 0xff
    2a6a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2a6c:	4a0c      	ldr	r2, [pc, #48]	; (2aa0 <_gclk_init_generators_by_fref+0x70>)
    2a6e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2a70:	001a      	movs	r2, r3
    2a72:	7853      	ldrb	r3, [r2, #1]
    2a74:	09db      	lsrs	r3, r3, #7
    2a76:	d1fc      	bne.n	2a72 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    2a78:	0603      	lsls	r3, r0, #24
    2a7a:	d509      	bpl.n	2a90 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENDIV.reg = data;
    2a7c:	4b05      	ldr	r3, [pc, #20]	; (2a94 <_gclk_init_generators_by_fref+0x64>)
    2a7e:	2208      	movs	r2, #8
    2a80:	32ff      	adds	r2, #255	; 0xff
    2a82:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2a84:	4a07      	ldr	r2, [pc, #28]	; (2aa4 <_gclk_init_generators_by_fref+0x74>)
    2a86:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2a88:	001a      	movs	r2, r3
    2a8a:	7853      	ldrb	r3, [r2, #1]
    2a8c:	09db      	lsrs	r3, r3, #7
    2a8e:	d1fc      	bne.n	2a8a <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2a90:	4770      	bx	lr
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	40000c00 	.word	0x40000c00
    2a98:	00000801 	.word	0x00000801
    2a9c:	00010601 	.word	0x00010601
    2aa0:	000b0503 	.word	0x000b0503
    2aa4:	00210707 	.word	0x00210707

00002aa8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2aa8:	4b06      	ldr	r3, [pc, #24]	; (2ac4 <_pm_init+0x1c>)
    2aaa:	7a1a      	ldrb	r2, [r3, #8]
    2aac:	b2d2      	uxtb	r2, r2
    2aae:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2ab0:	7a5a      	ldrb	r2, [r3, #9]
    2ab2:	b2d2      	uxtb	r2, r2
    2ab4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2ab6:	7a9a      	ldrb	r2, [r3, #10]
    2ab8:	b2d2      	uxtb	r2, r2
    2aba:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2abc:	7ada      	ldrb	r2, [r3, #11]
    2abe:	b2d2      	uxtb	r2, r2
    2ac0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    2ac2:	4770      	bx	lr
    2ac4:	40000400 	.word	0x40000400

00002ac8 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2ac8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2aca:	07db      	lsls	r3, r3, #31
    2acc:	d409      	bmi.n	2ae2 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2ace:	6803      	ldr	r3, [r0, #0]
    2ad0:	2202      	movs	r2, #2
    2ad2:	4313      	orrs	r3, r2
    2ad4:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ad6:	3201      	adds	r2, #1
    2ad8:	69c3      	ldr	r3, [r0, #28]
    2ada:	421a      	tst	r2, r3
    2adc:	d1fc      	bne.n	2ad8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2ade:	2000      	movs	r0, #0
}
    2ae0:	4770      	bx	lr
		return ERR_BUSY;
    2ae2:	2004      	movs	r0, #4
    2ae4:	4240      	negs	r0, r0
    2ae6:	e7fb      	b.n	2ae0 <_spi_sync_enable+0x18>

00002ae8 <_usart_init>:
{
    2ae8:	b510      	push	{r4, lr}
    2aea:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2aec:	4b42      	ldr	r3, [pc, #264]	; (2bf8 <_usart_init+0x110>)
    2aee:	18c3      	adds	r3, r0, r3
    2af0:	0a9b      	lsrs	r3, r3, #10
    2af2:	b2db      	uxtb	r3, r3
		if (_usarts[i].number == sercom_offset) {
    2af4:	2b01      	cmp	r3, #1
    2af6:	d053      	beq.n	2ba0 <_usart_init+0xb8>
    2af8:	2b03      	cmp	r3, #3
    2afa:	d053      	beq.n	2ba4 <_usart_init+0xbc>
	ASSERT(false);
    2afc:	4a3f      	ldr	r2, [pc, #252]	; (2bfc <_usart_init+0x114>)
    2afe:	4940      	ldr	r1, [pc, #256]	; (2c00 <_usart_init+0x118>)
    2b00:	2000      	movs	r0, #0
    2b02:	4b40      	ldr	r3, [pc, #256]	; (2c04 <_usart_init+0x11c>)
    2b04:	4798      	blx	r3
	return 0;
    2b06:	2000      	movs	r0, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2b08:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2b0a:	07db      	lsls	r3, r3, #31
    2b0c:	d421      	bmi.n	2b52 <_usart_init+0x6a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2b0e:	0083      	lsls	r3, r0, #2
    2b10:	181b      	adds	r3, r3, r0
    2b12:	009b      	lsls	r3, r3, #2
    2b14:	4a3c      	ldr	r2, [pc, #240]	; (2c08 <_usart_init+0x120>)
    2b16:	18d3      	adds	r3, r2, r3
    2b18:	69d9      	ldr	r1, [r3, #28]
    2b1a:	231c      	movs	r3, #28
    2b1c:	4019      	ands	r1, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b1e:	2203      	movs	r2, #3
    2b20:	69e3      	ldr	r3, [r4, #28]
    2b22:	421a      	tst	r2, r3
    2b24:	d1fc      	bne.n	2b20 <_usart_init+0x38>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2b26:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2b28:	079b      	lsls	r3, r3, #30
    2b2a:	d50b      	bpl.n	2b44 <_usart_init+0x5c>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2b2c:	6823      	ldr	r3, [r4, #0]
    2b2e:	2202      	movs	r2, #2
    2b30:	4393      	bics	r3, r2
    2b32:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b34:	2303      	movs	r3, #3
    2b36:	69e2      	ldr	r2, [r4, #28]
    2b38:	4213      	tst	r3, r2
    2b3a:	d1fc      	bne.n	2b36 <_usart_init+0x4e>
    2b3c:	2302      	movs	r3, #2
    2b3e:	69e2      	ldr	r2, [r4, #28]
    2b40:	4213      	tst	r3, r2
    2b42:	d1fc      	bne.n	2b3e <_usart_init+0x56>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2b44:	2301      	movs	r3, #1
    2b46:	430b      	orrs	r3, r1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2b48:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b4a:	2203      	movs	r2, #3
    2b4c:	69e3      	ldr	r3, [r4, #28]
    2b4e:	421a      	tst	r2, r3
    2b50:	d1fc      	bne.n	2b4c <_usart_init+0x64>
    2b52:	2201      	movs	r2, #1
    2b54:	69e3      	ldr	r3, [r4, #28]
    2b56:	421a      	tst	r2, r3
    2b58:	d1fc      	bne.n	2b54 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2b5a:	0001      	movs	r1, r0
    2b5c:	0083      	lsls	r3, r0, #2
    2b5e:	181b      	adds	r3, r3, r0
    2b60:	009b      	lsls	r3, r3, #2
    2b62:	4a29      	ldr	r2, [pc, #164]	; (2c08 <_usart_init+0x120>)
    2b64:	18d3      	adds	r3, r2, r3
    2b66:	69d8      	ldr	r0, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2b68:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b6a:	2203      	movs	r2, #3
    2b6c:	69e3      	ldr	r3, [r4, #28]
    2b6e:	421a      	tst	r2, r3
    2b70:	d1fc      	bne.n	2b6c <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2b72:	008b      	lsls	r3, r1, #2
    2b74:	185b      	adds	r3, r3, r1
    2b76:	009b      	lsls	r3, r3, #2
    2b78:	4a23      	ldr	r2, [pc, #140]	; (2c08 <_usart_init+0x120>)
    2b7a:	18d3      	adds	r3, r2, r3
    2b7c:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2b7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b80:	2207      	movs	r2, #7
    2b82:	69e3      	ldr	r3, [r4, #28]
    2b84:	421a      	tst	r2, r3
    2b86:	d1fc      	bne.n	2b82 <_usart_init+0x9a>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2b88:	23c0      	movs	r3, #192	; 0xc0
    2b8a:	01db      	lsls	r3, r3, #7
    2b8c:	4218      	tst	r0, r3
    2b8e:	d10b      	bne.n	2ba8 <_usart_init+0xc0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2b90:	008b      	lsls	r3, r1, #2
    2b92:	185b      	adds	r3, r3, r1
    2b94:	009b      	lsls	r3, r3, #2
    2b96:	4a1c      	ldr	r2, [pc, #112]	; (2c08 <_usart_init+0x120>)
    2b98:	18d3      	adds	r3, r2, r3
    2b9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2b9c:	81a3      	strh	r3, [r4, #12]
    2b9e:	e01a      	b.n	2bd6 <_usart_init+0xee>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2ba0:	2000      	movs	r0, #0
    2ba2:	e7b1      	b.n	2b08 <_usart_init+0x20>
		if (_usarts[i].number == sercom_offset) {
    2ba4:	2001      	movs	r0, #1
    2ba6:	e7af      	b.n	2b08 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2ba8:	008a      	lsls	r2, r1, #2
    2baa:	1852      	adds	r2, r2, r1
    2bac:	0093      	lsls	r3, r2, #2
    2bae:	4a16      	ldr	r2, [pc, #88]	; (2c08 <_usart_init+0x120>)
    2bb0:	18d2      	adds	r2, r2, r3
    2bb2:	8c90      	ldrh	r0, [r2, #36]	; 0x24
    2bb4:	89a3      	ldrh	r3, [r4, #12]
    2bb6:	04c0      	lsls	r0, r0, #19
    2bb8:	0cc0      	lsrs	r0, r0, #19
    2bba:	0b5b      	lsrs	r3, r3, #13
    2bbc:	035b      	lsls	r3, r3, #13
    2bbe:	4303      	orrs	r3, r0
    2bc0:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2bc2:	3226      	adds	r2, #38	; 0x26
    2bc4:	7813      	ldrb	r3, [r2, #0]
    2bc6:	2207      	movs	r2, #7
    2bc8:	401a      	ands	r2, r3
    2bca:	89a3      	ldrh	r3, [r4, #12]
    2bcc:	0352      	lsls	r2, r2, #13
    2bce:	04db      	lsls	r3, r3, #19
    2bd0:	0cdb      	lsrs	r3, r3, #19
    2bd2:	4313      	orrs	r3, r2
    2bd4:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2bd6:	4a0c      	ldr	r2, [pc, #48]	; (2c08 <_usart_init+0x120>)
    2bd8:	0088      	lsls	r0, r1, #2
    2bda:	1843      	adds	r3, r0, r1
    2bdc:	009b      	lsls	r3, r3, #2
    2bde:	18d3      	adds	r3, r2, r3
    2be0:	3327      	adds	r3, #39	; 0x27
    2be2:	781b      	ldrb	r3, [r3, #0]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2be4:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2be6:	1841      	adds	r1, r0, r1
    2be8:	0089      	lsls	r1, r1, #2
    2bea:	1852      	adds	r2, r2, r1
    2bec:	3228      	adds	r2, #40	; 0x28
    2bee:	7812      	ldrb	r2, [r2, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2bf0:	2330      	movs	r3, #48	; 0x30
    2bf2:	54e2      	strb	r2, [r4, r3]
}
    2bf4:	2000      	movs	r0, #0
    2bf6:	bd10      	pop	{r4, pc}
    2bf8:	bdfff800 	.word	0xbdfff800
    2bfc:	0000025e 	.word	0x0000025e
    2c00:	0000cb0c 	.word	0x0000cb0c
    2c04:	00002679 	.word	0x00002679
    2c08:	0000cacc 	.word	0x0000cacc

00002c0c <_usart_sync_init>:
{
    2c0c:	b570      	push	{r4, r5, r6, lr}
    2c0e:	0005      	movs	r5, r0
    2c10:	000c      	movs	r4, r1
	ASSERT(device);
    2c12:	1e43      	subs	r3, r0, #1
    2c14:	4198      	sbcs	r0, r3
    2c16:	b2c0      	uxtb	r0, r0
    2c18:	22b6      	movs	r2, #182	; 0xb6
    2c1a:	4904      	ldr	r1, [pc, #16]	; (2c2c <_usart_sync_init+0x20>)
    2c1c:	4b04      	ldr	r3, [pc, #16]	; (2c30 <_usart_sync_init+0x24>)
    2c1e:	4798      	blx	r3
	device->hw = hw;
    2c20:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    2c22:	0020      	movs	r0, r4
    2c24:	4b03      	ldr	r3, [pc, #12]	; (2c34 <_usart_sync_init+0x28>)
    2c26:	4798      	blx	r3
}
    2c28:	bd70      	pop	{r4, r5, r6, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	0000cb0c 	.word	0x0000cb0c
    2c30:	00002679 	.word	0x00002679
    2c34:	00002ae9 	.word	0x00002ae9

00002c38 <_usart_async_init>:
{
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	0005      	movs	r5, r0
    2c3c:	000c      	movs	r4, r1
	ASSERT(device);
    2c3e:	1e43      	subs	r3, r0, #1
    2c40:	4198      	sbcs	r0, r3
    2c42:	b2c0      	uxtb	r0, r0
    2c44:	22c4      	movs	r2, #196	; 0xc4
    2c46:	4914      	ldr	r1, [pc, #80]	; (2c98 <_usart_async_init+0x60>)
    2c48:	4b14      	ldr	r3, [pc, #80]	; (2c9c <_usart_async_init+0x64>)
    2c4a:	4798      	blx	r3
	init_status = _usart_init(hw);
    2c4c:	0020      	movs	r0, r4
    2c4e:	4b14      	ldr	r3, [pc, #80]	; (2ca0 <_usart_async_init+0x68>)
    2c50:	4798      	blx	r3
	if (init_status) {
    2c52:	2800      	cmp	r0, #0
    2c54:	d000      	beq.n	2c58 <_usart_async_init+0x20>
}
    2c56:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2c58:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM1) {
    2c5a:	4b12      	ldr	r3, [pc, #72]	; (2ca4 <_usart_async_init+0x6c>)
    2c5c:	429c      	cmp	r4, r3
    2c5e:	d017      	beq.n	2c90 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2c60:	4b11      	ldr	r3, [pc, #68]	; (2ca8 <_usart_async_init+0x70>)
    2c62:	469c      	mov	ip, r3
    2c64:	4464      	add	r4, ip
    2c66:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2c68:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    2c6a:	b2e3      	uxtb	r3, r4
    2c6c:	0622      	lsls	r2, r4, #24
    2c6e:	d4f2      	bmi.n	2c56 <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c70:	221f      	movs	r2, #31
    2c72:	401a      	ands	r2, r3
    2c74:	2301      	movs	r3, #1
    2c76:	4093      	lsls	r3, r2
    2c78:	4a0c      	ldr	r2, [pc, #48]	; (2cac <_usart_async_init+0x74>)
    2c7a:	2180      	movs	r1, #128	; 0x80
    2c7c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2c7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c86:	3101      	adds	r1, #1
    2c88:	31ff      	adds	r1, #255	; 0xff
    2c8a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c8c:	6013      	str	r3, [r2, #0]
    2c8e:	e7e2      	b.n	2c56 <_usart_async_init+0x1e>
		_sercom1_dev = (struct _usart_async_device *)dev;
    2c90:	4b07      	ldr	r3, [pc, #28]	; (2cb0 <_usart_async_init+0x78>)
    2c92:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2c94:	230a      	movs	r3, #10
    2c96:	e7eb      	b.n	2c70 <_usart_async_init+0x38>
    2c98:	0000cb0c 	.word	0x0000cb0c
    2c9c:	00002679 	.word	0x00002679
    2ca0:	00002ae9 	.word	0x00002ae9
    2ca4:	42000c00 	.word	0x42000c00
    2ca8:	bdfff800 	.word	0xbdfff800
    2cac:	e000e100 	.word	0xe000e100
    2cb0:	20001068 	.word	0x20001068

00002cb4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2cb4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2cb6:	6813      	ldr	r3, [r2, #0]
    2cb8:	2102      	movs	r1, #2
    2cba:	430b      	orrs	r3, r1
    2cbc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2cbe:	3101      	adds	r1, #1
    2cc0:	69d3      	ldr	r3, [r2, #28]
    2cc2:	4219      	tst	r1, r3
    2cc4:	d1fc      	bne.n	2cc0 <_usart_sync_enable+0xc>
}
    2cc6:	4770      	bx	lr

00002cc8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2cc8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2cca:	6813      	ldr	r3, [r2, #0]
    2ccc:	2102      	movs	r1, #2
    2cce:	430b      	orrs	r3, r1
    2cd0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2cd2:	3101      	adds	r1, #1
    2cd4:	69d3      	ldr	r3, [r2, #28]
    2cd6:	4219      	tst	r1, r3
    2cd8:	d1fc      	bne.n	2cd4 <_usart_async_enable+0xc>
}
    2cda:	4770      	bx	lr

00002cdc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2cdc:	6803      	ldr	r3, [r0, #0]
    2cde:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    2ce0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2ce2:	4770      	bx	lr

00002ce4 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2ce4:	6983      	ldr	r3, [r0, #24]
    2ce6:	b289      	uxth	r1, r1
    2ce8:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2cea:	4770      	bx	lr

00002cec <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2cec:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    2cee:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2cf0:	b2c0      	uxtb	r0, r0
}
    2cf2:	4770      	bx	lr

00002cf4 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2cf4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2cf6:	7e18      	ldrb	r0, [r3, #24]
    2cf8:	2301      	movs	r3, #1
    2cfa:	4018      	ands	r0, r3
}
    2cfc:	4770      	bx	lr

00002cfe <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    2cfe:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2d00:	7e18      	ldrb	r0, [r3, #24]
    2d02:	0780      	lsls	r0, r0, #30
    2d04:	0fc0      	lsrs	r0, r0, #31
}
    2d06:	4770      	bx	lr

00002d08 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2d08:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2d0a:	7e18      	ldrb	r0, [r3, #24]
    2d0c:	0740      	lsls	r0, r0, #29
    2d0e:	0fc0      	lsrs	r0, r0, #31
}
    2d10:	4770      	bx	lr

00002d12 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2d12:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2d14:	2201      	movs	r2, #1
    2d16:	759a      	strb	r2, [r3, #22]
}
    2d18:	4770      	bx	lr

00002d1a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2d1a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2d1c:	2202      	movs	r2, #2
    2d1e:	759a      	strb	r2, [r3, #22]
}
    2d20:	4770      	bx	lr
	...

00002d24 <_usart_async_set_irq_state>:
{
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	0004      	movs	r4, r0
    2d28:	000d      	movs	r5, r1
    2d2a:	0016      	movs	r6, r2
	ASSERT(device);
    2d2c:	1e43      	subs	r3, r0, #1
    2d2e:	4198      	sbcs	r0, r3
    2d30:	b2c0      	uxtb	r0, r0
    2d32:	4a16      	ldr	r2, [pc, #88]	; (2d8c <_usart_async_set_irq_state+0x68>)
    2d34:	4916      	ldr	r1, [pc, #88]	; (2d90 <_usart_async_set_irq_state+0x6c>)
    2d36:	4b17      	ldr	r3, [pc, #92]	; (2d94 <_usart_async_set_irq_state+0x70>)
    2d38:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2d3a:	2302      	movs	r3, #2
    2d3c:	002a      	movs	r2, r5
    2d3e:	439a      	bics	r2, r3
    2d40:	d10e      	bne.n	2d60 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2d42:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    2d44:	2e00      	cmp	r6, #0
    2d46:	d105      	bne.n	2d54 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2d48:	2201      	movs	r2, #1
    2d4a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2d4c:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2d4e:	3201      	adds	r2, #1
    2d50:	751a      	strb	r2, [r3, #20]
}
    2d52:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2d54:	2201      	movs	r2, #1
    2d56:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2d58:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2d5a:	3201      	adds	r2, #1
    2d5c:	759a      	strb	r2, [r3, #22]
    2d5e:	e7f8      	b.n	2d52 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    2d60:	2d01      	cmp	r5, #1
    2d62:	d007      	beq.n	2d74 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    2d64:	2d03      	cmp	r5, #3
    2d66:	d1f4      	bne.n	2d52 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2d68:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    2d6a:	2e00      	cmp	r6, #0
    2d6c:	d00b      	beq.n	2d86 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2d6e:	2280      	movs	r2, #128	; 0x80
    2d70:	759a      	strb	r2, [r3, #22]
}
    2d72:	e7ee      	b.n	2d52 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2d74:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    2d76:	2e00      	cmp	r6, #0
    2d78:	d102      	bne.n	2d80 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2d7a:	2204      	movs	r2, #4
    2d7c:	751a      	strb	r2, [r3, #20]
    2d7e:	e7e8      	b.n	2d52 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    2d80:	2204      	movs	r2, #4
    2d82:	759a      	strb	r2, [r3, #22]
    2d84:	e7e5      	b.n	2d52 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2d86:	2280      	movs	r2, #128	; 0x80
    2d88:	751a      	strb	r2, [r3, #20]
    2d8a:	e7e2      	b.n	2d52 <_usart_async_set_irq_state+0x2e>
    2d8c:	0000021e 	.word	0x0000021e
    2d90:	0000cb0c 	.word	0x0000cb0c
    2d94:	00002679 	.word	0x00002679

00002d98 <SERCOM1_Handler>:

	return NULL;
}

void SERCOM1_Handler(void)
{
    2d98:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    2d9a:	4b19      	ldr	r3, [pc, #100]	; (2e00 <SERCOM1_Handler+0x68>)
    2d9c:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    2d9e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2da0:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2da2:	07db      	lsls	r3, r3, #31
    2da4:	d502      	bpl.n	2dac <SERCOM1_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2da6:	7da3      	ldrb	r3, [r4, #22]
    2da8:	07db      	lsls	r3, r3, #31
    2daa:	d40f      	bmi.n	2dcc <SERCOM1_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2dac:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2dae:	079b      	lsls	r3, r3, #30
    2db0:	d502      	bpl.n	2db8 <SERCOM1_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2db2:	7da3      	ldrb	r3, [r4, #22]
    2db4:	079b      	lsls	r3, r3, #30
    2db6:	d40e      	bmi.n	2dd6 <SERCOM1_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2db8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2dba:	075b      	lsls	r3, r3, #29
    2dbc:	d515      	bpl.n	2dea <SERCOM1_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2dbe:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2dc0:	2337      	movs	r3, #55	; 0x37
    2dc2:	421a      	tst	r2, r3
    2dc4:	d00c      	beq.n	2de0 <SERCOM1_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2dc6:	3308      	adds	r3, #8
    2dc8:	8363      	strh	r3, [r4, #26]
}
    2dca:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2dcc:	2301      	movs	r3, #1
    2dce:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2dd0:	6803      	ldr	r3, [r0, #0]
    2dd2:	4798      	blx	r3
    2dd4:	e7f9      	b.n	2dca <SERCOM1_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2dd6:	2302      	movs	r3, #2
    2dd8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2dda:	6883      	ldr	r3, [r0, #8]
    2ddc:	4798      	blx	r3
    2dde:	e7f4      	b.n	2dca <SERCOM1_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    2de0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2de2:	b2c9      	uxtb	r1, r1
    2de4:	6843      	ldr	r3, [r0, #4]
    2de6:	4798      	blx	r3
    2de8:	e7ef      	b.n	2dca <SERCOM1_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2dea:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2dec:	09db      	lsrs	r3, r3, #7
    2dee:	d0ec      	beq.n	2dca <SERCOM1_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2df0:	2380      	movs	r3, #128	; 0x80
    2df2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    2df4:	68c3      	ldr	r3, [r0, #12]
    2df6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2df8:	8b63      	ldrh	r3, [r4, #26]
    2dfa:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2dfc:	8363      	strh	r3, [r4, #26]
}
    2dfe:	e7e4      	b.n	2dca <SERCOM1_Handler+0x32>
    2e00:	20001068 	.word	0x20001068

00002e04 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2e04:	b570      	push	{r4, r5, r6, lr}
    2e06:	0005      	movs	r5, r0
    2e08:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2e0a:	4b35      	ldr	r3, [pc, #212]	; (2ee0 <_spi_m_sync_init+0xdc>)
    2e0c:	18cb      	adds	r3, r1, r3
    2e0e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    2e10:	b2db      	uxtb	r3, r3
    2e12:	2b05      	cmp	r3, #5
    2e14:	d00b      	beq.n	2e2e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2e16:	2800      	cmp	r0, #0
    2e18:	d050      	beq.n	2ebc <_spi_m_sync_init+0xb8>
    2e1a:	1e60      	subs	r0, r4, #1
    2e1c:	4184      	sbcs	r4, r0
    2e1e:	b2e0      	uxtb	r0, r4
    2e20:	4a30      	ldr	r2, [pc, #192]	; (2ee4 <_spi_m_sync_init+0xe0>)
    2e22:	4931      	ldr	r1, [pc, #196]	; (2ee8 <_spi_m_sync_init+0xe4>)
    2e24:	4b31      	ldr	r3, [pc, #196]	; (2eec <_spi_m_sync_init+0xe8>)
    2e26:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2e28:	200d      	movs	r0, #13
    2e2a:	4240      	negs	r0, r0
    2e2c:	e045      	b.n	2eba <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    2e2e:	2800      	cmp	r0, #0
    2e30:	d14c      	bne.n	2ecc <_spi_m_sync_init+0xc8>
    2e32:	4a2c      	ldr	r2, [pc, #176]	; (2ee4 <_spi_m_sync_init+0xe0>)
    2e34:	492c      	ldr	r1, [pc, #176]	; (2ee8 <_spi_m_sync_init+0xe4>)
    2e36:	2000      	movs	r0, #0
    2e38:	4b2c      	ldr	r3, [pc, #176]	; (2eec <_spi_m_sync_init+0xe8>)
    2e3a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e3c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2e3e:	07db      	lsls	r3, r3, #31
    2e40:	d418      	bmi.n	2e74 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e42:	2203      	movs	r2, #3
    2e44:	69e3      	ldr	r3, [r4, #28]
    2e46:	421a      	tst	r2, r3
    2e48:	d1fc      	bne.n	2e44 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2e4a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2e4c:	079b      	lsls	r3, r3, #30
    2e4e:	d50b      	bpl.n	2e68 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2e50:	6823      	ldr	r3, [r4, #0]
    2e52:	2202      	movs	r2, #2
    2e54:	4393      	bics	r3, r2
    2e56:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e58:	3201      	adds	r2, #1
    2e5a:	69e3      	ldr	r3, [r4, #28]
    2e5c:	421a      	tst	r2, r3
    2e5e:	d1fc      	bne.n	2e5a <_spi_m_sync_init+0x56>
    2e60:	2202      	movs	r2, #2
    2e62:	69e3      	ldr	r3, [r4, #28]
    2e64:	421a      	tst	r2, r3
    2e66:	d1fc      	bne.n	2e62 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e68:	230d      	movs	r3, #13
    2e6a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e6c:	2203      	movs	r2, #3
    2e6e:	69e3      	ldr	r3, [r4, #28]
    2e70:	421a      	tst	r2, r3
    2e72:	d1fc      	bne.n	2e6e <_spi_m_sync_init+0x6a>
    2e74:	2201      	movs	r2, #1
    2e76:	69e3      	ldr	r3, [r4, #28]
    2e78:	421a      	tst	r2, r3
    2e7a:	d1fc      	bne.n	2e76 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2e7c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2e7e:	0020      	movs	r0, r4
    2e80:	1e43      	subs	r3, r0, #1
    2e82:	4198      	sbcs	r0, r3
    2e84:	b2c0      	uxtb	r0, r0
    2e86:	4a1a      	ldr	r2, [pc, #104]	; (2ef0 <_spi_m_sync_init+0xec>)
    2e88:	4917      	ldr	r1, [pc, #92]	; (2ee8 <_spi_m_sync_init+0xe4>)
    2e8a:	4b18      	ldr	r3, [pc, #96]	; (2eec <_spi_m_sync_init+0xe8>)
    2e8c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2e8e:	4b19      	ldr	r3, [pc, #100]	; (2ef4 <_spi_m_sync_init+0xf0>)
    2e90:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e92:	2203      	movs	r2, #3
    2e94:	69e3      	ldr	r3, [r4, #28]
    2e96:	421a      	tst	r2, r3
    2e98:	d1fc      	bne.n	2e94 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2e9a:	2380      	movs	r3, #128	; 0x80
    2e9c:	029b      	lsls	r3, r3, #10
    2e9e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ea0:	2207      	movs	r2, #7
    2ea2:	69e3      	ldr	r3, [r4, #28]
    2ea4:	421a      	tst	r2, r3
    2ea6:	d1fc      	bne.n	2ea2 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2ea8:	2301      	movs	r3, #1
    2eaa:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2eac:	2100      	movs	r1, #0
    2eae:	2230      	movs	r2, #48	; 0x30
    2eb0:	54a1      	strb	r1, [r4, r2]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2eb2:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    2eb4:	4b10      	ldr	r3, [pc, #64]	; (2ef8 <_spi_m_sync_init+0xf4>)
    2eb6:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    2eb8:	2000      	movs	r0, #0
}
    2eba:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2ebc:	4a09      	ldr	r2, [pc, #36]	; (2ee4 <_spi_m_sync_init+0xe0>)
    2ebe:	490a      	ldr	r1, [pc, #40]	; (2ee8 <_spi_m_sync_init+0xe4>)
    2ec0:	2000      	movs	r0, #0
    2ec2:	4b0a      	ldr	r3, [pc, #40]	; (2eec <_spi_m_sync_init+0xe8>)
    2ec4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2ec6:	200d      	movs	r0, #13
    2ec8:	4240      	negs	r0, r0
    2eca:	e7f6      	b.n	2eba <_spi_m_sync_init+0xb6>
	ASSERT(dev && hw);
    2ecc:	0008      	movs	r0, r1
    2ece:	1e43      	subs	r3, r0, #1
    2ed0:	4198      	sbcs	r0, r3
    2ed2:	b2c0      	uxtb	r0, r0
    2ed4:	4a03      	ldr	r2, [pc, #12]	; (2ee4 <_spi_m_sync_init+0xe0>)
    2ed6:	4904      	ldr	r1, [pc, #16]	; (2ee8 <_spi_m_sync_init+0xe4>)
    2ed8:	4b04      	ldr	r3, [pc, #16]	; (2eec <_spi_m_sync_init+0xe8>)
    2eda:	4798      	blx	r3
    2edc:	e7ae      	b.n	2e3c <_spi_m_sync_init+0x38>
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	bdfff800 	.word	0xbdfff800
    2ee4:	00000948 	.word	0x00000948
    2ee8:	0000cb0c 	.word	0x0000cb0c
    2eec:	00002679 	.word	0x00002679
    2ef0:	0000090d 	.word	0x0000090d
    2ef4:	0001000c 	.word	0x0001000c
    2ef8:	000001ff 	.word	0x000001ff

00002efc <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    2efc:	b510      	push	{r4, lr}
    2efe:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2f00:	d00b      	beq.n	2f1a <_spi_m_sync_enable+0x1e>
    2f02:	6800      	ldr	r0, [r0, #0]
    2f04:	1e43      	subs	r3, r0, #1
    2f06:	4198      	sbcs	r0, r3
    2f08:	b2c0      	uxtb	r0, r0
    2f0a:	4a05      	ldr	r2, [pc, #20]	; (2f20 <_spi_m_sync_enable+0x24>)
    2f0c:	4905      	ldr	r1, [pc, #20]	; (2f24 <_spi_m_sync_enable+0x28>)
    2f0e:	4b06      	ldr	r3, [pc, #24]	; (2f28 <_spi_m_sync_enable+0x2c>)
    2f10:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2f12:	6820      	ldr	r0, [r4, #0]
    2f14:	4b05      	ldr	r3, [pc, #20]	; (2f2c <_spi_m_sync_enable+0x30>)
    2f16:	4798      	blx	r3
}
    2f18:	bd10      	pop	{r4, pc}
    2f1a:	2000      	movs	r0, #0
    2f1c:	e7f5      	b.n	2f0a <_spi_m_sync_enable+0xe>
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	000009a3 	.word	0x000009a3
    2f24:	0000cb0c 	.word	0x0000cb0c
    2f28:	00002679 	.word	0x00002679
    2f2c:	00002ac9 	.word	0x00002ac9

00002f30 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	46de      	mov	lr, fp
    2f34:	4657      	mov	r7, sl
    2f36:	464e      	mov	r6, r9
    2f38:	4645      	mov	r5, r8
    2f3a:	b5e0      	push	{r5, r6, r7, lr}
    2f3c:	b083      	sub	sp, #12
    2f3e:	4681      	mov	r9, r0
    2f40:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    2f42:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2f44:	680b      	ldr	r3, [r1, #0]
    2f46:	4698      	mov	r8, r3
    2f48:	684d      	ldr	r5, [r1, #4]
    2f4a:	7903      	ldrb	r3, [r0, #4]
    2f4c:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2f4e:	2800      	cmp	r0, #0
    2f50:	d015      	beq.n	2f7e <_spi_m_sync_trans+0x4e>
    2f52:	0020      	movs	r0, r4
    2f54:	1e43      	subs	r3, r0, #1
    2f56:	4198      	sbcs	r0, r3
    2f58:	b2c0      	uxtb	r0, r0
    2f5a:	4a36      	ldr	r2, [pc, #216]	; (3034 <_spi_m_sync_trans+0x104>)
    2f5c:	4936      	ldr	r1, [pc, #216]	; (3038 <_spi_m_sync_trans+0x108>)
    2f5e:	4b37      	ldr	r3, [pc, #220]	; (303c <_spi_m_sync_trans+0x10c>)
    2f60:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2f62:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2f64:	075b      	lsls	r3, r3, #29
    2f66:	d13f      	bne.n	2fe8 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2f68:	2303      	movs	r3, #3
    2f6a:	69e0      	ldr	r0, [r4, #28]
    2f6c:	4018      	ands	r0, r3
    2f6e:	d1fc      	bne.n	2f6a <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2f70:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2f72:	079b      	lsls	r3, r3, #30
    2f74:	d53b      	bpl.n	2fee <_spi_m_sync_trans+0xbe>
    2f76:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2f78:	2301      	movs	r3, #1
    2f7a:	469c      	mov	ip, r3
    2f7c:	e009      	b.n	2f92 <_spi_m_sync_trans+0x62>
    2f7e:	2000      	movs	r0, #0
    2f80:	e7eb      	b.n	2f5a <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    2f82:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    2f84:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2f86:	b25b      	sxtb	r3, r3
    2f88:	2b00      	cmp	r3, #0
    2f8a:	db16      	blt.n	2fba <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2f8c:	68b3      	ldr	r3, [r6, #8]
    2f8e:	4283      	cmp	r3, r0
    2f90:	d927      	bls.n	2fe2 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2f92:	7e23      	ldrb	r3, [r4, #24]
    2f94:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2f96:	2104      	movs	r1, #4
    2f98:	4219      	tst	r1, r3
    2f9a:	d02b      	beq.n	2ff4 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2f9c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2f9e:	2d00      	cmp	r5, #0
    2fa0:	d0f0      	beq.n	2f84 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    2fa2:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    2fa4:	9901      	ldr	r1, [sp, #4]
    2fa6:	2901      	cmp	r1, #1
    2fa8:	d9eb      	bls.n	2f82 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2faa:	0a3f      	lsrs	r7, r7, #8
    2fac:	706f      	strb	r7, [r5, #1]
    2fae:	3502      	adds	r5, #2
    2fb0:	e7e8      	b.n	2f84 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    2fb2:	2101      	movs	r1, #1
    2fb4:	468b      	mov	fp, r1
    2fb6:	44d8      	add	r8, fp
    2fb8:	e037      	b.n	302a <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2fba:	2301      	movs	r3, #1
    2fbc:	425b      	negs	r3, r3
    2fbe:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2fc0:	3381      	adds	r3, #129	; 0x81
    2fc2:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2fc4:	2013      	movs	r0, #19
    2fc6:	4240      	negs	r0, r0
	tmp &= mask;
    2fc8:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2fca:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2fcc:	4213      	tst	r3, r2
    2fce:	d0fc      	beq.n	2fca <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2fd0:	2303      	movs	r3, #3
    2fd2:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2fd4:	b003      	add	sp, #12
    2fd6:	bc3c      	pop	{r2, r3, r4, r5}
    2fd8:	4690      	mov	r8, r2
    2fda:	4699      	mov	r9, r3
    2fdc:	46a2      	mov	sl, r4
    2fde:	46ab      	mov	fp, r5
    2fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2fe2:	4293      	cmp	r3, r2
    2fe4:	d8d5      	bhi.n	2f92 <_spi_m_sync_trans+0x62>
    2fe6:	e7ef      	b.n	2fc8 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    2fe8:	2004      	movs	r0, #4
    2fea:	4240      	negs	r0, r0
    2fec:	e7f2      	b.n	2fd4 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    2fee:	2014      	movs	r0, #20
    2ff0:	4240      	negs	r0, r0
    2ff2:	e7ef      	b.n	2fd4 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2ff4:	4290      	cmp	r0, r2
    2ff6:	d8c6      	bhi.n	2f86 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2ff8:	4667      	mov	r7, ip
    2ffa:	421f      	tst	r7, r3
    2ffc:	d0c3      	beq.n	2f86 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2ffe:	464f      	mov	r7, r9
    3000:	88ff      	ldrh	r7, [r7, #6]
    3002:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    3004:	4647      	mov	r7, r8
    3006:	2f00      	cmp	r7, #0
    3008:	d00f      	beq.n	302a <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    300a:	783f      	ldrb	r7, [r7, #0]
    300c:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    300e:	9901      	ldr	r1, [sp, #4]
    3010:	2901      	cmp	r1, #1
    3012:	d9ce      	bls.n	2fb2 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    3014:	4647      	mov	r7, r8
    3016:	787f      	ldrb	r7, [r7, #1]
    3018:	023f      	lsls	r7, r7, #8
    301a:	46bb      	mov	fp, r7
    301c:	4657      	mov	r7, sl
    301e:	4659      	mov	r1, fp
    3020:	430f      	orrs	r7, r1
    3022:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    3024:	2102      	movs	r1, #2
    3026:	468b      	mov	fp, r1
    3028:	44d8      	add	r8, fp
	ctrl->txcnt++;
    302a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    302c:	4657      	mov	r7, sl
    302e:	62a7      	str	r7, [r4, #40]	; 0x28
    3030:	e7a9      	b.n	2f86 <_spi_m_sync_trans+0x56>
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	00000aa8 	.word	0x00000aa8
    3038:	0000cb0c 	.word	0x0000cb0c
    303c:	00002679 	.word	0x00002679

00003040 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    3040:	4b14      	ldr	r3, [pc, #80]	; (3094 <_sysctrl_init_sources+0x54>)
    3042:	220e      	movs	r2, #14
    3044:	829a      	strh	r2, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3046:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3048:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    304a:	4813      	ldr	r0, [pc, #76]	; (3098 <_sysctrl_init_sources+0x58>)
    304c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    304e:	0f92      	lsrs	r2, r2, #30
    3050:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    3052:	2002      	movs	r0, #2
    3054:	4302      	orrs	r2, r0
    3056:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3058:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    305a:	699a      	ldr	r2, [r3, #24]
    305c:	4302      	orrs	r2, r0
    305e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3060:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3062:	211f      	movs	r1, #31
    3064:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3066:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3068:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    306a:	2202      	movs	r2, #2
    306c:	68cb      	ldr	r3, [r1, #12]
    306e:	421a      	tst	r2, r3
    3070:	d0fc      	beq.n	306c <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
    3072:	4a08      	ldr	r2, [pc, #32]	; (3094 <_sysctrl_init_sources+0x54>)
    3074:	8a93      	ldrh	r3, [r2, #20]
    3076:	2180      	movs	r1, #128	; 0x80
    3078:	430b      	orrs	r3, r1
    307a:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    307c:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    307e:	2208      	movs	r2, #8
    3080:	68cb      	ldr	r3, [r1, #12]
    3082:	421a      	tst	r2, r3
    3084:	d0fc      	beq.n	3080 <_sysctrl_init_sources+0x40>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3086:	4a03      	ldr	r2, [pc, #12]	; (3094 <_sysctrl_init_sources+0x54>)
    3088:	6a13      	ldr	r3, [r2, #32]
    308a:	2180      	movs	r1, #128	; 0x80
    308c:	430b      	orrs	r3, r1
    308e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3090:	4770      	bx	lr
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	40000800 	.word	0x40000800
    3098:	0fff0000 	.word	0x0fff0000

0000309c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    309c:	2202      	movs	r2, #2
    309e:	4b1c      	ldr	r3, [pc, #112]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
    30a0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    30a2:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    30a4:	320e      	adds	r2, #14
    30a6:	68cb      	ldr	r3, [r1, #12]
    30a8:	421a      	tst	r2, r3
    30aa:	d0fc      	beq.n	30a6 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    30ac:	4a19      	ldr	r2, [pc, #100]	; (3114 <_sysctrl_init_referenced_generators+0x78>)
    30ae:	4b18      	ldr	r3, [pc, #96]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
    30b0:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    30b2:	4b19      	ldr	r3, [pc, #100]	; (3118 <_sysctrl_init_referenced_generators+0x7c>)
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	0e9b      	lsrs	r3, r3, #26
    30b8:	2b3f      	cmp	r3, #63	; 0x3f
    30ba:	d01f      	beq.n	30fc <_sysctrl_init_referenced_generators+0x60>
    30bc:	029b      	lsls	r3, r3, #10
    30be:	2280      	movs	r2, #128	; 0x80
    30c0:	0092      	lsls	r2, r2, #2
    30c2:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    30c4:	4a12      	ldr	r2, [pc, #72]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
    30c6:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    30c8:	2393      	movs	r3, #147	; 0x93
    30ca:	005b      	lsls	r3, r3, #1
    30cc:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    30ce:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    30d0:	075b      	lsls	r3, r3, #29
    30d2:	d516      	bpl.n	3102 <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    30d4:	0011      	movs	r1, r2
	tmp &= mask;
    30d6:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    30d8:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    30da:	421a      	tst	r2, r3
    30dc:	d0fc      	beq.n	30d8 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    30de:	4a0c      	ldr	r2, [pc, #48]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
    30e0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    30e2:	2180      	movs	r1, #128	; 0x80
    30e4:	430b      	orrs	r3, r1
    30e6:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    30e8:	4a0c      	ldr	r2, [pc, #48]	; (311c <_sysctrl_init_referenced_generators+0x80>)
    30ea:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    30ec:	09db      	lsrs	r3, r3, #7
    30ee:	d1fc      	bne.n	30ea <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    30f0:	4a07      	ldr	r2, [pc, #28]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
    30f2:	6993      	ldr	r3, [r2, #24]
    30f4:	2102      	movs	r1, #2
    30f6:	438b      	bics	r3, r1
    30f8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    30fa:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    30fc:	23fc      	movs	r3, #252	; 0xfc
    30fe:	01db      	lsls	r3, r3, #7
    3100:	e7e0      	b.n	30c4 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3102:	4903      	ldr	r1, [pc, #12]	; (3110 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3104:	2210      	movs	r2, #16
    3106:	68cb      	ldr	r3, [r1, #12]
    3108:	421a      	tst	r2, r3
    310a:	d0fc      	beq.n	3106 <_sysctrl_init_referenced_generators+0x6a>
    310c:	e7e7      	b.n	30de <_sysctrl_init_referenced_generators+0x42>
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	40000800 	.word	0x40000800
    3114:	0401bb80 	.word	0x0401bb80
    3118:	00806024 	.word	0x00806024
    311c:	40000c00 	.word	0x40000c00

00003120 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3120:	4b02      	ldr	r3, [pc, #8]	; (312c <_delay_init+0xc>)
    3122:	4a03      	ldr	r2, [pc, #12]	; (3130 <_delay_init+0x10>)
    3124:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3126:	2205      	movs	r2, #5
    3128:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    312a:	4770      	bx	lr
    312c:	e000e010 	.word	0xe000e010
    3130:	00ffffff 	.word	0x00ffffff

00003134 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3134:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3136:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3138:	1e5e      	subs	r6, r3, #1
    313a:	b2f6      	uxtb	r6, r6
    313c:	2b00      	cmp	r3, #0
    313e:	d013      	beq.n	3168 <_delay_cycles+0x34>
    3140:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    3142:	4a0e      	ldr	r2, [pc, #56]	; (317c <_delay_cycles+0x48>)
    3144:	4d0e      	ldr	r5, [pc, #56]	; (3180 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3146:	2080      	movs	r0, #128	; 0x80
    3148:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    314a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    314c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    314e:	6813      	ldr	r3, [r2, #0]
    3150:	4203      	tst	r3, r0
    3152:	d0fc      	beq.n	314e <_delay_cycles+0x1a>
	while (n--) {
    3154:	3c01      	subs	r4, #1
    3156:	b2e4      	uxtb	r4, r4
    3158:	2cff      	cmp	r4, #255	; 0xff
    315a:	d1f6      	bne.n	314a <_delay_cycles+0x16>
    315c:	0633      	lsls	r3, r6, #24
    315e:	1af6      	subs	r6, r6, r3
    3160:	4b08      	ldr	r3, [pc, #32]	; (3184 <_delay_cycles+0x50>)
    3162:	469c      	mov	ip, r3
    3164:	4461      	add	r1, ip
    3166:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3168:	4b04      	ldr	r3, [pc, #16]	; (317c <_delay_cycles+0x48>)
    316a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    316c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    316e:	0019      	movs	r1, r3
    3170:	2280      	movs	r2, #128	; 0x80
    3172:	0252      	lsls	r2, r2, #9
    3174:	680b      	ldr	r3, [r1, #0]
    3176:	4213      	tst	r3, r2
    3178:	d0fc      	beq.n	3174 <_delay_cycles+0x40>
		;
}
    317a:	bd70      	pop	{r4, r5, r6, pc}
    317c:	e000e010 	.word	0xe000e010
    3180:	00ffffff 	.word	0x00ffffff
    3184:	ff000001 	.word	0xff000001

00003188 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    3188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    318a:	0007      	movs	r7, r0
    318c:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    318e:	4b3c      	ldr	r3, [pc, #240]	; (3280 <_timer_init+0xf8>)
    3190:	18cd      	adds	r5, r1, r3
    3192:	0aad      	lsrs	r5, r5, #10
    3194:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    3196:	2d00      	cmp	r5, #0
    3198:	d051      	beq.n	323e <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    319a:	229f      	movs	r2, #159	; 0x9f
    319c:	0052      	lsls	r2, r2, #1
    319e:	4939      	ldr	r1, [pc, #228]	; (3284 <_timer_init+0xfc>)
    31a0:	2000      	movs	r0, #0
    31a2:	4b39      	ldr	r3, [pc, #228]	; (3288 <_timer_init+0x100>)
    31a4:	4798      	blx	r3
	return -1;
    31a6:	2601      	movs	r6, #1
    31a8:	4276      	negs	r6, r6
	device->hw = hw;
    31aa:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    31ac:	228b      	movs	r2, #139	; 0x8b
    31ae:	4935      	ldr	r1, [pc, #212]	; (3284 <_timer_init+0xfc>)
    31b0:	2001      	movs	r0, #1
    31b2:	4b35      	ldr	r3, [pc, #212]	; (3288 <_timer_init+0x100>)
    31b4:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    31b6:	7be3      	ldrb	r3, [r4, #15]
    31b8:	09db      	lsrs	r3, r3, #7
    31ba:	d1fc      	bne.n	31b6 <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    31bc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    31be:	079b      	lsls	r3, r3, #30
    31c0:	d504      	bpl.n	31cc <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    31c2:	2300      	movs	r3, #0
    31c4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    31c6:	7be3      	ldrb	r3, [r4, #15]
    31c8:	09db      	lsrs	r3, r3, #7
    31ca:	d1fc      	bne.n	31c6 <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    31cc:	2301      	movs	r3, #1
    31ce:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    31d0:	7be3      	ldrb	r3, [r4, #15]
    31d2:	09db      	lsrs	r3, r3, #7
    31d4:	d1fc      	bne.n	31d0 <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    31d6:	00b3      	lsls	r3, r6, #2
    31d8:	199b      	adds	r3, r3, r6
    31da:	009a      	lsls	r2, r3, #2
    31dc:	4b2b      	ldr	r3, [pc, #172]	; (328c <_timer_init+0x104>)
    31de:	189b      	adds	r3, r3, r2
    31e0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    31e2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    31e4:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    31e6:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    31e8:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    31ea:	8163      	strh	r3, [r4, #10]
    31ec:	230c      	movs	r3, #12
    31ee:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    31f0:	2b08      	cmp	r3, #8
    31f2:	d026      	beq.n	3242 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    31f4:	2b00      	cmp	r3, #0
    31f6:	d12e      	bne.n	3256 <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    31f8:	00b3      	lsls	r3, r6, #2
    31fa:	199b      	adds	r3, r3, r6
    31fc:	009b      	lsls	r3, r3, #2
    31fe:	4a23      	ldr	r2, [pc, #140]	; (328c <_timer_init+0x104>)
    3200:	18d3      	adds	r3, r2, r3
    3202:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3204:	8323      	strh	r3, [r4, #24]
    3206:	2300      	movs	r3, #0
    3208:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    320a:	2301      	movs	r3, #1
    320c:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    320e:	4b20      	ldr	r3, [pc, #128]	; (3290 <_timer_init+0x108>)
    3210:	429c      	cmp	r4, r3
    3212:	d031      	beq.n	3278 <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3214:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    3216:	b2eb      	uxtb	r3, r5
    3218:	062a      	lsls	r2, r5, #24
    321a:	d40e      	bmi.n	323a <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    321c:	221f      	movs	r2, #31
    321e:	401a      	ands	r2, r3
    3220:	2301      	movs	r3, #1
    3222:	4093      	lsls	r3, r2
    3224:	4a1b      	ldr	r2, [pc, #108]	; (3294 <_timer_init+0x10c>)
    3226:	2180      	movs	r1, #128	; 0x80
    3228:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    322a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    322e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3232:	3101      	adds	r1, #1
    3234:	31ff      	adds	r1, #255	; 0xff
    3236:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3238:	6013      	str	r3, [r2, #0]
}
    323a:	2000      	movs	r0, #0
    323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    323e:	2600      	movs	r6, #0
    3240:	e7b3      	b.n	31aa <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3242:	00b3      	lsls	r3, r6, #2
    3244:	199e      	adds	r6, r3, r6
    3246:	00b6      	lsls	r6, r6, #2
    3248:	4b10      	ldr	r3, [pc, #64]	; (328c <_timer_init+0x104>)
    324a:	199e      	adds	r6, r3, r6
    324c:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    324e:	61a3      	str	r3, [r4, #24]
    3250:	2300      	movs	r3, #0
    3252:	61e3      	str	r3, [r4, #28]
    3254:	e7d9      	b.n	320a <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3256:	2b04      	cmp	r3, #4
    3258:	d1d7      	bne.n	320a <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    325a:	480c      	ldr	r0, [pc, #48]	; (328c <_timer_init+0x104>)
    325c:	00b3      	lsls	r3, r6, #2
    325e:	199a      	adds	r2, r3, r6
    3260:	0092      	lsls	r2, r2, #2
    3262:	1882      	adds	r2, r0, r2
    3264:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3266:	7622      	strb	r2, [r4, #24]
    3268:	2200      	movs	r2, #0
    326a:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    326c:	199b      	adds	r3, r3, r6
    326e:	009b      	lsls	r3, r3, #2
    3270:	18c3      	adds	r3, r0, r3
    3272:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3274:	7523      	strb	r3, [r4, #20]
    3276:	e7c8      	b.n	320a <_timer_init+0x82>
		_tc3_dev = (struct _timer_device *)dev;
    3278:	4b07      	ldr	r3, [pc, #28]	; (3298 <_timer_init+0x110>)
    327a:	601f      	str	r7, [r3, #0]
    327c:	e7ca      	b.n	3214 <_timer_init+0x8c>
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	bdffd400 	.word	0xbdffd400
    3284:	0000cb3c 	.word	0x0000cb3c
    3288:	00002679 	.word	0x00002679
    328c:	0000cb28 	.word	0x0000cb28
    3290:	42002c00 	.word	0x42002c00
    3294:	e000e100 	.word	0xe000e100
    3298:	2000106c 	.word	0x2000106c

0000329c <_tc_get_timer>:
}
    329c:	2000      	movs	r0, #0
    329e:	4770      	bx	lr

000032a0 <TC3_Handler>:
{
    32a0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    32a2:	4b06      	ldr	r3, [pc, #24]	; (32bc <TC3_Handler+0x1c>)
    32a4:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    32a6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    32a8:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    32aa:	07d2      	lsls	r2, r2, #31
    32ac:	d400      	bmi.n	32b0 <TC3_Handler+0x10>
}
    32ae:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    32b0:	2201      	movs	r2, #1
    32b2:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    32b4:	6803      	ldr	r3, [r0, #0]
    32b6:	4798      	blx	r3
}
    32b8:	e7f9      	b.n	32ae <TC3_Handler+0xe>
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	2000106c 	.word	0x2000106c

000032c0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    32c0:	2000      	movs	r0, #0
    32c2:	4770      	bx	lr

000032c4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    32c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    32c6:	7c83      	ldrb	r3, [r0, #18]
    32c8:	220f      	movs	r2, #15
    32ca:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    32cc:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    32ce:	3a08      	subs	r2, #8
    32d0:	400a      	ands	r2, r1
    32d2:	2a01      	cmp	r2, #1
    32d4:	d00b      	beq.n	32ee <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    32d6:	015a      	lsls	r2, r3, #5
    32d8:	4919      	ldr	r1, [pc, #100]	; (3340 <_usb_d_dev_handle_setup+0x7c>)
    32da:	468c      	mov	ip, r1
    32dc:	4462      	add	r2, ip
    32de:	2110      	movs	r1, #16
    32e0:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    32e2:	015b      	lsls	r3, r3, #5
    32e4:	4a17      	ldr	r2, [pc, #92]	; (3344 <_usb_d_dev_handle_setup+0x80>)
    32e6:	4694      	mov	ip, r2
    32e8:	4463      	add	r3, ip
    32ea:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    32ec:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    32ee:	064a      	lsls	r2, r1, #25
    32f0:	d50e      	bpl.n	3310 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    32f2:	7cc2      	ldrb	r2, [r0, #19]
    32f4:	2140      	movs	r1, #64	; 0x40
    32f6:	438a      	bics	r2, r1
    32f8:	74c2      	strb	r2, [r0, #19]
    32fa:	015a      	lsls	r2, r3, #5
    32fc:	4c12      	ldr	r4, [pc, #72]	; (3348 <_usb_d_dev_handle_setup+0x84>)
    32fe:	46a4      	mov	ip, r4
    3300:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3302:	2580      	movs	r5, #128	; 0x80
    3304:	2482      	movs	r4, #130	; 0x82
    3306:	0064      	lsls	r4, r4, #1
    3308:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    330a:	2406      	movs	r4, #6
    330c:	34ff      	adds	r4, #255	; 0xff
    330e:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    3310:	7cc2      	ldrb	r2, [r0, #19]
    3312:	2108      	movs	r1, #8
    3314:	438a      	bics	r2, r1
    3316:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    3318:	490c      	ldr	r1, [pc, #48]	; (334c <_usb_d_dev_handle_setup+0x88>)
    331a:	015a      	lsls	r2, r3, #5
    331c:	188c      	adds	r4, r1, r2
    331e:	2500      	movs	r5, #0
    3320:	72a5      	strb	r5, [r4, #10]
    3322:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3324:	0013      	movs	r3, r2
    3326:	4c06      	ldr	r4, [pc, #24]	; (3340 <_usb_d_dev_handle_setup+0x7c>)
    3328:	46a4      	mov	ip, r4
    332a:	4463      	add	r3, ip
    332c:	246f      	movs	r4, #111	; 0x6f
    332e:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3330:	4b04      	ldr	r3, [pc, #16]	; (3344 <_usb_d_dev_handle_setup+0x80>)
    3332:	469c      	mov	ip, r3
    3334:	4462      	add	r2, ip
    3336:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    3338:	7c80      	ldrb	r0, [r0, #18]
    333a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    333c:	4798      	blx	r3
    333e:	e7d5      	b.n	32ec <_usb_d_dev_handle_setup+0x28>
    3340:	41005100 	.word	0x41005100
    3344:	41005108 	.word	0x41005108
    3348:	41005000 	.word	0x41005000
    334c:	20001070 	.word	0x20001070

00003350 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3350:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3352:	2220      	movs	r2, #32
    3354:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3356:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3358:	7c81      	ldrb	r1, [r0, #18]
    335a:	230f      	movs	r3, #15
    335c:	400b      	ands	r3, r1
    335e:	015b      	lsls	r3, r3, #5
    3360:	4905      	ldr	r1, [pc, #20]	; (3378 <_usb_d_dev_handle_stall+0x28>)
    3362:	468c      	mov	ip, r1
    3364:	4463      	add	r3, ip
    3366:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3368:	6882      	ldr	r2, [r0, #8]
    336a:	7c80      	ldrb	r0, [r0, #18]
    336c:	4b03      	ldr	r3, [pc, #12]	; (337c <_usb_d_dev_handle_stall+0x2c>)
    336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3370:	2101      	movs	r1, #1
    3372:	4798      	blx	r3
}
    3374:	bd10      	pop	{r4, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	41005108 	.word	0x41005108
    337c:	20001070 	.word	0x20001070

00003380 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3380:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3382:	7c83      	ldrb	r3, [r0, #18]
    3384:	2bff      	cmp	r3, #255	; 0xff
    3386:	d002      	beq.n	338e <_usb_d_dev_trans_done+0xe>
    3388:	7cc2      	ldrb	r2, [r0, #19]
    338a:	0652      	lsls	r2, r2, #25
    338c:	d400      	bmi.n	3390 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    338e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    3390:	7cc2      	ldrb	r2, [r0, #19]
    3392:	2440      	movs	r4, #64	; 0x40
    3394:	43a2      	bics	r2, r4
    3396:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3398:	6882      	ldr	r2, [r0, #8]
    339a:	4802      	ldr	r0, [pc, #8]	; (33a4 <_usb_d_dev_trans_done+0x24>)
    339c:	6f04      	ldr	r4, [r0, #112]	; 0x70
    339e:	0018      	movs	r0, r3
    33a0:	47a0      	blx	r4
    33a2:	e7f4      	b.n	338e <_usb_d_dev_trans_done+0xe>
    33a4:	20001070 	.word	0x20001070

000033a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    33a8:	b530      	push	{r4, r5, lr}
    33aa:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    33ac:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    33ae:	ac01      	add	r4, sp, #4
    33b0:	2525      	movs	r5, #37	; 0x25
    33b2:	7025      	strb	r5, [r4, #0]
    33b4:	3525      	adds	r5, #37	; 0x25
    33b6:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    33b8:	2bff      	cmp	r3, #255	; 0xff
    33ba:	d01b      	beq.n	33f4 <_usb_d_dev_trans_stop+0x4c>
    33bc:	7cc4      	ldrb	r4, [r0, #19]
    33be:	0664      	lsls	r4, r4, #25
    33c0:	d518      	bpl.n	33f4 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    33c2:	240f      	movs	r4, #15
    33c4:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    33c6:	2900      	cmp	r1, #0
    33c8:	d016      	beq.n	33f8 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    33ca:	015c      	lsls	r4, r3, #5
    33cc:	4d0e      	ldr	r5, [pc, #56]	; (3408 <_usb_d_dev_trans_stop+0x60>)
    33ce:	46ac      	mov	ip, r5
    33d0:	4464      	add	r4, ip
    33d2:	2580      	movs	r5, #128	; 0x80
    33d4:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    33d6:	ac01      	add	r4, sp, #4
    33d8:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33da:	0159      	lsls	r1, r3, #5
    33dc:	4d0a      	ldr	r5, [pc, #40]	; (3408 <_usb_d_dev_trans_stop+0x60>)
    33de:	46ac      	mov	ip, r5
    33e0:	4461      	add	r1, ip
    33e2:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    33e4:	015b      	lsls	r3, r3, #5
    33e6:	4909      	ldr	r1, [pc, #36]	; (340c <_usb_d_dev_trans_stop+0x64>)
    33e8:	468c      	mov	ip, r1
    33ea:	4463      	add	r3, ip
    33ec:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    33ee:	0011      	movs	r1, r2
    33f0:	4b07      	ldr	r3, [pc, #28]	; (3410 <_usb_d_dev_trans_stop+0x68>)
    33f2:	4798      	blx	r3
}
    33f4:	b003      	add	sp, #12
    33f6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    33f8:	015c      	lsls	r4, r3, #5
    33fa:	4d03      	ldr	r5, [pc, #12]	; (3408 <_usb_d_dev_trans_stop+0x60>)
    33fc:	46ac      	mov	ip, r5
    33fe:	4464      	add	r4, ip
    3400:	2540      	movs	r5, #64	; 0x40
    3402:	7165      	strb	r5, [r4, #5]
    3404:	e7e7      	b.n	33d6 <_usb_d_dev_trans_stop+0x2e>
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	41005100 	.word	0x41005100
    340c:	41005108 	.word	0x41005108
    3410:	00003381 	.word	0x00003381

00003414 <_usb_d_dev_handle_trfail>:
{
    3414:	b570      	push	{r4, r5, r6, lr}
    3416:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3418:	7c83      	ldrb	r3, [r0, #18]
    341a:	220f      	movs	r2, #15
    341c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    341e:	aa01      	add	r2, sp, #4
    3420:	2404      	movs	r4, #4
    3422:	7014      	strb	r4, [r2, #0]
    3424:	3404      	adds	r4, #4
    3426:	7054      	strb	r4, [r2, #1]
    3428:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    342a:	2900      	cmp	r1, #0
    342c:	d031      	beq.n	3492 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    342e:	001a      	movs	r2, r3
    3430:	3208      	adds	r2, #8
    3432:	0152      	lsls	r2, r2, #5
    3434:	4c32      	ldr	r4, [pc, #200]	; (3500 <_usb_d_dev_handle_trfail+0xec>)
    3436:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    3438:	0664      	lsls	r4, r4, #25
    343a:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    343c:	010a      	lsls	r2, r1, #4
    343e:	1952      	adds	r2, r2, r5
    3440:	4d30      	ldr	r5, [pc, #192]	; (3504 <_usb_d_dev_handle_trfail+0xf0>)
    3442:	18aa      	adds	r2, r5, r2
    3444:	7a95      	ldrb	r5, [r2, #10]
    3446:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3448:	2c02      	cmp	r4, #2
    344a:	d02a      	beq.n	34a2 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    344c:	07ac      	lsls	r4, r5, #30
    344e:	d541      	bpl.n	34d4 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3450:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3452:	7a94      	ldrb	r4, [r2, #10]
    3454:	2602      	movs	r6, #2
    3456:	43b4      	bics	r4, r6
    3458:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    345a:	aa01      	add	r2, sp, #4
    345c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    345e:	015a      	lsls	r2, r3, #5
    3460:	4e29      	ldr	r6, [pc, #164]	; (3508 <_usb_d_dev_handle_trfail+0xf4>)
    3462:	46b4      	mov	ip, r6
    3464:	4462      	add	r2, ip
    3466:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3468:	015b      	lsls	r3, r3, #5
    346a:	4a28      	ldr	r2, [pc, #160]	; (350c <_usb_d_dev_handle_trfail+0xf8>)
    346c:	4694      	mov	ip, r2
    346e:	4463      	add	r3, ip
    3470:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3472:	2307      	movs	r3, #7
    3474:	402b      	ands	r3, r5
    3476:	2b01      	cmp	r3, #1
    3478:	d13f      	bne.n	34fa <_usb_d_dev_handle_trfail+0xe6>
    347a:	7cc3      	ldrb	r3, [r0, #19]
    347c:	065b      	lsls	r3, r3, #25
    347e:	d53c      	bpl.n	34fa <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3480:	7cc3      	ldrb	r3, [r0, #19]
    3482:	09db      	lsrs	r3, r3, #7
    3484:	4299      	cmp	r1, r3
    3486:	d038      	beq.n	34fa <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3488:	2200      	movs	r2, #0
    348a:	0019      	movs	r1, r3
    348c:	4b20      	ldr	r3, [pc, #128]	; (3510 <_usb_d_dev_handle_trfail+0xfc>)
    348e:	4798      	blx	r3
    3490:	e033      	b.n	34fa <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3492:	001a      	movs	r2, r3
    3494:	3208      	adds	r2, #8
    3496:	0152      	lsls	r2, r2, #5
    3498:	4c19      	ldr	r4, [pc, #100]	; (3500 <_usb_d_dev_handle_trfail+0xec>)
    349a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    349c:	2207      	movs	r2, #7
    349e:	4014      	ands	r4, r2
    34a0:	e7cc      	b.n	343c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    34a2:	07ec      	lsls	r4, r5, #31
    34a4:	d5d2      	bpl.n	344c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    34a6:	7a94      	ldrb	r4, [r2, #10]
    34a8:	2501      	movs	r5, #1
    34aa:	43ac      	bics	r4, r5
    34ac:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    34ae:	aa01      	add	r2, sp, #4
    34b0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34b2:	015a      	lsls	r2, r3, #5
    34b4:	4d14      	ldr	r5, [pc, #80]	; (3508 <_usb_d_dev_handle_trfail+0xf4>)
    34b6:	46ac      	mov	ip, r5
    34b8:	4462      	add	r2, ip
    34ba:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34bc:	015b      	lsls	r3, r3, #5
    34be:	4a13      	ldr	r2, [pc, #76]	; (350c <_usb_d_dev_handle_trfail+0xf8>)
    34c0:	4694      	mov	ip, r2
    34c2:	4463      	add	r3, ip
    34c4:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    34c6:	1e4b      	subs	r3, r1, #1
    34c8:	4199      	sbcs	r1, r3
    34ca:	b2c9      	uxtb	r1, r1
    34cc:	2204      	movs	r2, #4
    34ce:	4b10      	ldr	r3, [pc, #64]	; (3510 <_usb_d_dev_handle_trfail+0xfc>)
    34d0:	4798      	blx	r3
    34d2:	e012      	b.n	34fa <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    34d4:	005a      	lsls	r2, r3, #1
    34d6:	1852      	adds	r2, r2, r1
    34d8:	0112      	lsls	r2, r2, #4
    34da:	480a      	ldr	r0, [pc, #40]	; (3504 <_usb_d_dev_handle_trfail+0xf0>)
    34dc:	1882      	adds	r2, r0, r2
    34de:	2000      	movs	r0, #0
    34e0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    34e2:	aa01      	add	r2, sp, #4
    34e4:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34e6:	015a      	lsls	r2, r3, #5
    34e8:	4807      	ldr	r0, [pc, #28]	; (3508 <_usb_d_dev_handle_trfail+0xf4>)
    34ea:	4684      	mov	ip, r0
    34ec:	4462      	add	r2, ip
    34ee:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34f0:	015b      	lsls	r3, r3, #5
    34f2:	4a06      	ldr	r2, [pc, #24]	; (350c <_usb_d_dev_handle_trfail+0xf8>)
    34f4:	4694      	mov	ip, r2
    34f6:	4463      	add	r3, ip
    34f8:	7019      	strb	r1, [r3, #0]
}
    34fa:	b002      	add	sp, #8
    34fc:	bd70      	pop	{r4, r5, r6, pc}
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	41005000 	.word	0x41005000
    3504:	20001070 	.word	0x20001070
    3508:	41005100 	.word	0x41005100
    350c:	41005108 	.word	0x41005108
    3510:	000033a9 	.word	0x000033a9

00003514 <_usb_d_dev_reset_epts>:
{
    3514:	b5f0      	push	{r4, r5, r6, r7, lr}
    3516:	46c6      	mov	lr, r8
    3518:	b500      	push	{lr}
    351a:	4d0d      	ldr	r5, [pc, #52]	; (3550 <_usb_d_dev_reset_epts+0x3c>)
    351c:	002c      	movs	r4, r5
    351e:	3474      	adds	r4, #116	; 0x74
    3520:	23a4      	movs	r3, #164	; 0xa4
    3522:	009b      	lsls	r3, r3, #2
    3524:	469c      	mov	ip, r3
    3526:	4465      	add	r5, ip
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3528:	4b0a      	ldr	r3, [pc, #40]	; (3554 <_usb_d_dev_reset_epts+0x40>)
    352a:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    352c:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    352e:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3530:	2103      	movs	r1, #3
    3532:	0020      	movs	r0, r4
    3534:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    3536:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    3538:	74e6      	strb	r6, [r4, #19]
    353a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    353c:	42ac      	cmp	r4, r5
    353e:	d1f7      	bne.n	3530 <_usb_d_dev_reset_epts+0x1c>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3540:	2260      	movs	r2, #96	; 0x60
    3542:	2100      	movs	r1, #0
    3544:	4802      	ldr	r0, [pc, #8]	; (3550 <_usb_d_dev_reset_epts+0x3c>)
    3546:	4b04      	ldr	r3, [pc, #16]	; (3558 <_usb_d_dev_reset_epts+0x44>)
    3548:	4798      	blx	r3
}
    354a:	bc04      	pop	{r2}
    354c:	4690      	mov	r8, r2
    354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3550:	20001070 	.word	0x20001070
    3554:	00003381 	.word	0x00003381
    3558:	00007935 	.word	0x00007935

0000355c <_usb_d_dev_in_next>:
{
    355c:	b5f0      	push	{r4, r5, r6, r7, lr}
    355e:	46c6      	mov	lr, r8
    3560:	b500      	push	{lr}
    3562:	0004      	movs	r4, r0
    3564:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    3566:	7c83      	ldrb	r3, [r0, #18]
    3568:	250f      	movs	r5, #15
    356a:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    356c:	2900      	cmp	r1, #0
    356e:	d100      	bne.n	3572 <_usb_d_dev_in_next+0x16>
    3570:	e0aa      	b.n	36c8 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3572:	016a      	lsls	r2, r5, #5
    3574:	4b5a      	ldr	r3, [pc, #360]	; (36e0 <_usb_d_dev_in_next+0x184>)
    3576:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3578:	6958      	ldr	r0, [r3, #20]
    357a:	0480      	lsls	r0, r0, #18
    357c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    357e:	8a23      	ldrh	r3, [r4, #16]
    3580:	4a58      	ldr	r2, [pc, #352]	; (36e4 <_usb_d_dev_in_next+0x188>)
    3582:	4293      	cmp	r3, r2
    3584:	d100      	bne.n	3588 <_usb_d_dev_in_next+0x2c>
    3586:	e09a      	b.n	36be <_usb_d_dev_in_next+0x162>
    3588:	3b01      	subs	r3, #1
    358a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    358c:	7ce3      	ldrb	r3, [r4, #19]
    358e:	2707      	movs	r7, #7
    3590:	401f      	ands	r7, r3
	if (isr) {
    3592:	2e00      	cmp	r6, #0
    3594:	d005      	beq.n	35a2 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3596:	016b      	lsls	r3, r5, #5
    3598:	4953      	ldr	r1, [pc, #332]	; (36e8 <_usb_d_dev_in_next+0x18c>)
    359a:	468c      	mov	ip, r1
    359c:	4463      	add	r3, ip
    359e:	2102      	movs	r1, #2
    35a0:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    35a2:	68a3      	ldr	r3, [r4, #8]
    35a4:	18c1      	adds	r1, r0, r3
    35a6:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    35a8:	6863      	ldr	r3, [r4, #4]
    35aa:	4299      	cmp	r1, r3
    35ac:	d24a      	bcs.n	3644 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    35ae:	1a5b      	subs	r3, r3, r1
    35b0:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    35b2:	7ce2      	ldrb	r2, [r4, #19]
    35b4:	0692      	lsls	r2, r2, #26
    35b6:	d535      	bpl.n	3624 <_usb_d_dev_in_next+0xc8>
    35b8:	8a22      	ldrh	r2, [r4, #16]
    35ba:	1c10      	adds	r0, r2, #0
    35bc:	b292      	uxth	r2, r2
    35be:	429a      	cmp	r2, r3
    35c0:	d900      	bls.n	35c4 <_usb_d_dev_in_next+0x68>
    35c2:	1c18      	adds	r0, r3, #0
    35c4:	b283      	uxth	r3, r0
    35c6:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    35c8:	6823      	ldr	r3, [r4, #0]
    35ca:	469c      	mov	ip, r3
    35cc:	4461      	add	r1, ip
    35ce:	4642      	mov	r2, r8
    35d0:	68e0      	ldr	r0, [r4, #12]
    35d2:	4b46      	ldr	r3, [pc, #280]	; (36ec <_usb_d_dev_in_next+0x190>)
    35d4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    35d6:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    35d8:	016a      	lsls	r2, r5, #5
    35da:	4b41      	ldr	r3, [pc, #260]	; (36e0 <_usb_d_dev_in_next+0x184>)
    35dc:	189b      	adds	r3, r3, r2
    35de:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    35e0:	016a      	lsls	r2, r5, #5
    35e2:	4b3f      	ldr	r3, [pc, #252]	; (36e0 <_usb_d_dev_in_next+0x184>)
    35e4:	189b      	adds	r3, r3, r2
    35e6:	695a      	ldr	r2, [r3, #20]
    35e8:	4641      	mov	r1, r8
    35ea:	0489      	lsls	r1, r1, #18
    35ec:	0c89      	lsrs	r1, r1, #18
    35ee:	0b92      	lsrs	r2, r2, #14
    35f0:	0392      	lsls	r2, r2, #14
    35f2:	430a      	orrs	r2, r1
    35f4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    35f6:	695a      	ldr	r2, [r3, #20]
    35f8:	493d      	ldr	r1, [pc, #244]	; (36f0 <_usb_d_dev_in_next+0x194>)
    35fa:	400a      	ands	r2, r1
    35fc:	615a      	str	r2, [r3, #20]
	if (!isr) {
    35fe:	2e00      	cmp	r6, #0
    3600:	d107      	bne.n	3612 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    3602:	2f01      	cmp	r7, #1
    3604:	d059      	beq.n	36ba <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    3606:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3608:	016b      	lsls	r3, r5, #5
    360a:	493a      	ldr	r1, [pc, #232]	; (36f4 <_usb_d_dev_in_next+0x198>)
    360c:	468c      	mov	ip, r1
    360e:	4463      	add	r3, ip
    3610:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3612:	016d      	lsls	r5, r5, #5
    3614:	4b34      	ldr	r3, [pc, #208]	; (36e8 <_usb_d_dev_in_next+0x18c>)
    3616:	469c      	mov	ip, r3
    3618:	4465      	add	r5, ip
    361a:	2380      	movs	r3, #128	; 0x80
    361c:	716b      	strb	r3, [r5, #5]
}
    361e:	bc04      	pop	{r2}
    3620:	4690      	mov	r8, r2
    3622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3624:	1c1a      	adds	r2, r3, #0
    3626:	2080      	movs	r0, #128	; 0x80
    3628:	0180      	lsls	r0, r0, #6
    362a:	4283      	cmp	r3, r0
    362c:	d901      	bls.n	3632 <_usb_d_dev_in_next+0xd6>
    362e:	4b32      	ldr	r3, [pc, #200]	; (36f8 <_usb_d_dev_in_next+0x19c>)
    3630:	881a      	ldrh	r2, [r3, #0]
    3632:	b293      	uxth	r3, r2
    3634:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3636:	6823      	ldr	r3, [r4, #0]
    3638:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    363a:	016a      	lsls	r2, r5, #5
    363c:	4b28      	ldr	r3, [pc, #160]	; (36e0 <_usb_d_dev_in_next+0x184>)
    363e:	189b      	adds	r3, r3, r2
    3640:	6119      	str	r1, [r3, #16]
    3642:	e7cd      	b.n	35e0 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    3644:	7ce3      	ldrb	r3, [r4, #19]
    3646:	06db      	lsls	r3, r3, #27
    3648:	d50f      	bpl.n	366a <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    364a:	7ce3      	ldrb	r3, [r4, #19]
    364c:	2210      	movs	r2, #16
    364e:	4393      	bics	r3, r2
    3650:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3652:	016a      	lsls	r2, r5, #5
    3654:	4b22      	ldr	r3, [pc, #136]	; (36e0 <_usb_d_dev_in_next+0x184>)
    3656:	189b      	adds	r3, r3, r2
    3658:	695a      	ldr	r2, [r3, #20]
    365a:	0b92      	lsrs	r2, r2, #14
    365c:	0392      	lsls	r2, r2, #14
    365e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3660:	695a      	ldr	r2, [r3, #20]
    3662:	4923      	ldr	r1, [pc, #140]	; (36f0 <_usb_d_dev_in_next+0x194>)
    3664:	400a      	ands	r2, r1
    3666:	615a      	str	r2, [r3, #20]
    3668:	e7c9      	b.n	35fe <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    366a:	2f01      	cmp	r7, #1
    366c:	d00e      	beq.n	368c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    366e:	016d      	lsls	r5, r5, #5
    3670:	4b22      	ldr	r3, [pc, #136]	; (36fc <_usb_d_dev_in_next+0x1a0>)
    3672:	469c      	mov	ip, r3
    3674:	4465      	add	r5, ip
    3676:	234a      	movs	r3, #74	; 0x4a
    3678:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    367a:	8a21      	ldrh	r1, [r4, #16]
    367c:	4002      	ands	r2, r0
    367e:	4291      	cmp	r1, r2
    3680:	d00b      	beq.n	369a <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3682:	2100      	movs	r1, #0
    3684:	0020      	movs	r0, r4
    3686:	4b1e      	ldr	r3, [pc, #120]	; (3700 <_usb_d_dev_in_next+0x1a4>)
    3688:	4798      	blx	r3
	return;
    368a:	e7c8      	b.n	361e <_usb_d_dev_in_next+0xc2>
    368c:	016d      	lsls	r5, r5, #5
    368e:	4b1b      	ldr	r3, [pc, #108]	; (36fc <_usb_d_dev_in_next+0x1a0>)
    3690:	469c      	mov	ip, r3
    3692:	4465      	add	r5, ip
    3694:	234b      	movs	r3, #75	; 0x4b
    3696:	702b      	strb	r3, [r5, #0]
    3698:	e7ef      	b.n	367a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    369a:	7ce3      	ldrb	r3, [r4, #19]
    369c:	2240      	movs	r2, #64	; 0x40
    369e:	4393      	bics	r3, r2
    36a0:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    36a2:	7ca0      	ldrb	r0, [r4, #18]
    36a4:	4b0e      	ldr	r3, [pc, #56]	; (36e0 <_usb_d_dev_in_next+0x184>)
    36a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    36a8:	68a1      	ldr	r1, [r4, #8]
    36aa:	4798      	blx	r3
    36ac:	2800      	cmp	r0, #0
    36ae:	d1b6      	bne.n	361e <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    36b0:	7ce3      	ldrb	r3, [r4, #19]
    36b2:	2240      	movs	r2, #64	; 0x40
    36b4:	4313      	orrs	r3, r2
    36b6:	74e3      	strb	r3, [r4, #19]
    36b8:	e7e3      	b.n	3682 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    36ba:	224e      	movs	r2, #78	; 0x4e
    36bc:	e7a4      	b.n	3608 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    36be:	7ce7      	ldrb	r7, [r4, #19]
    36c0:	2307      	movs	r3, #7
    36c2:	401f      	ands	r7, r3
    36c4:	4a07      	ldr	r2, [pc, #28]	; (36e4 <_usb_d_dev_in_next+0x188>)
    36c6:	e766      	b.n	3596 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    36c8:	8a03      	ldrh	r3, [r0, #16]
    36ca:	4a06      	ldr	r2, [pc, #24]	; (36e4 <_usb_d_dev_in_next+0x188>)
    36cc:	2000      	movs	r0, #0
    36ce:	4293      	cmp	r3, r2
    36d0:	d000      	beq.n	36d4 <_usb_d_dev_in_next+0x178>
    36d2:	e759      	b.n	3588 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    36d4:	7ce3      	ldrb	r3, [r4, #19]
    36d6:	2707      	movs	r7, #7
    36d8:	401f      	ands	r7, r3
    36da:	2000      	movs	r0, #0
    36dc:	4a01      	ldr	r2, [pc, #4]	; (36e4 <_usb_d_dev_in_next+0x188>)
    36de:	e760      	b.n	35a2 <_usb_d_dev_in_next+0x46>
    36e0:	20001070 	.word	0x20001070
    36e4:	000003ff 	.word	0x000003ff
    36e8:	41005100 	.word	0x41005100
    36ec:	000078b1 	.word	0x000078b1
    36f0:	f0003fff 	.word	0xf0003fff
    36f4:	41005109 	.word	0x41005109
    36f8:	0000cb50 	.word	0x0000cb50
    36fc:	41005108 	.word	0x41005108
    3700:	00003381 	.word	0x00003381

00003704 <_usb_d_dev_out_next>:
{
    3704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3706:	46de      	mov	lr, fp
    3708:	4657      	mov	r7, sl
    370a:	464e      	mov	r6, r9
    370c:	4645      	mov	r5, r8
    370e:	b5e0      	push	{r5, r6, r7, lr}
    3710:	0004      	movs	r4, r0
    3712:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3714:	7c83      	ldrb	r3, [r0, #18]
    3716:	250f      	movs	r5, #15
    3718:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    371a:	2900      	cmp	r1, #0
    371c:	d057      	beq.n	37ce <_usb_d_dev_out_next+0xca>
    371e:	016a      	lsls	r2, r5, #5
    3720:	4b7d      	ldr	r3, [pc, #500]	; (3918 <_usb_d_dev_out_next+0x214>)
    3722:	189b      	adds	r3, r3, r2
    3724:	685a      	ldr	r2, [r3, #4]
    3726:	0112      	lsls	r2, r2, #4
    3728:	0c92      	lsrs	r2, r2, #18
    372a:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    372c:	685f      	ldr	r7, [r3, #4]
    372e:	04bf      	lsls	r7, r7, #18
    3730:	0cbf      	lsrs	r7, r7, #18
    3732:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3734:	8a06      	ldrh	r6, [r0, #16]
    3736:	4b79      	ldr	r3, [pc, #484]	; (391c <_usb_d_dev_out_next+0x218>)
    3738:	429e      	cmp	r6, r3
    373a:	d100      	bne.n	373e <_usb_d_dev_out_next+0x3a>
    373c:	e0cd      	b.n	38da <_usb_d_dev_out_next+0x1d6>
    373e:	3e01      	subs	r6, #1
    3740:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    3742:	465f      	mov	r7, fp
    3744:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3746:	7ce3      	ldrb	r3, [r4, #19]
    3748:	2207      	movs	r2, #7
    374a:	401a      	ands	r2, r3
    374c:	4691      	mov	r9, r2
	if (isr) {
    374e:	4643      	mov	r3, r8
    3750:	2b00      	cmp	r3, #0
    3752:	d005      	beq.n	3760 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3754:	016b      	lsls	r3, r5, #5
    3756:	4a72      	ldr	r2, [pc, #456]	; (3920 <_usb_d_dev_out_next+0x21c>)
    3758:	4694      	mov	ip, r2
    375a:	4463      	add	r3, ip
    375c:	2201      	movs	r2, #1
    375e:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3760:	7ce3      	ldrb	r3, [r4, #19]
    3762:	069b      	lsls	r3, r3, #26
    3764:	d50f      	bpl.n	3786 <_usb_d_dev_out_next+0x82>
    3766:	6863      	ldr	r3, [r4, #4]
    3768:	2b00      	cmp	r3, #0
    376a:	d039      	beq.n	37e0 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    376c:	68a0      	ldr	r0, [r4, #8]
    376e:	1a1b      	subs	r3, r3, r0
    3770:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3772:	6822      	ldr	r2, [r4, #0]
    3774:	4694      	mov	ip, r2
    3776:	4460      	add	r0, ip
    3778:	68e1      	ldr	r1, [r4, #12]
    377a:	001a      	movs	r2, r3
    377c:	42bb      	cmp	r3, r7
    377e:	d900      	bls.n	3782 <_usb_d_dev_out_next+0x7e>
    3780:	003a      	movs	r2, r7
    3782:	4b68      	ldr	r3, [pc, #416]	; (3924 <_usb_d_dev_out_next+0x220>)
    3784:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3786:	6863      	ldr	r3, [r4, #4]
    3788:	2b00      	cmp	r3, #0
    378a:	d029      	beq.n	37e0 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    378c:	4642      	mov	r2, r8
    378e:	2a00      	cmp	r2, #0
    3790:	d042      	beq.n	3818 <_usb_d_dev_out_next+0x114>
    3792:	8a22      	ldrh	r2, [r4, #16]
    3794:	42ba      	cmp	r2, r7
    3796:	d93f      	bls.n	3818 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    3798:	7ce3      	ldrb	r3, [r4, #19]
    379a:	2210      	movs	r2, #16
    379c:	4393      	bics	r3, r2
    379e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    37a0:	68a3      	ldr	r3, [r4, #8]
    37a2:	445b      	add	r3, fp
    37a4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    37a6:	464b      	mov	r3, r9
    37a8:	2b01      	cmp	r3, #1
    37aa:	d100      	bne.n	37ae <_usb_d_dev_out_next+0xaa>
    37ac:	e087      	b.n	38be <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    37ae:	016b      	lsls	r3, r5, #5
    37b0:	4a5d      	ldr	r2, [pc, #372]	; (3928 <_usb_d_dev_out_next+0x224>)
    37b2:	4694      	mov	ip, r2
    37b4:	4463      	add	r3, ip
    37b6:	2225      	movs	r2, #37	; 0x25
    37b8:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    37ba:	2d00      	cmp	r5, #0
    37bc:	d102      	bne.n	37c4 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    37be:	4b56      	ldr	r3, [pc, #344]	; (3918 <_usb_d_dev_out_next+0x214>)
    37c0:	68e2      	ldr	r2, [r4, #12]
    37c2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    37c4:	2100      	movs	r1, #0
    37c6:	0020      	movs	r0, r4
    37c8:	4b58      	ldr	r3, [pc, #352]	; (392c <_usb_d_dev_out_next+0x228>)
    37ca:	4798      	blx	r3
	return;
    37cc:	e059      	b.n	3882 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    37ce:	8a06      	ldrh	r6, [r0, #16]
    37d0:	4b52      	ldr	r3, [pc, #328]	; (391c <_usb_d_dev_out_next+0x218>)
    37d2:	429e      	cmp	r6, r3
    37d4:	d100      	bne.n	37d8 <_usb_d_dev_out_next+0xd4>
    37d6:	e08e      	b.n	38f6 <_usb_d_dev_out_next+0x1f2>
    37d8:	2300      	movs	r3, #0
    37da:	469b      	mov	fp, r3
    37dc:	469a      	mov	sl, r3
    37de:	e7ae      	b.n	373e <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    37e0:	7ce3      	ldrb	r3, [r4, #19]
    37e2:	06db      	lsls	r3, r3, #27
    37e4:	d400      	bmi.n	37e8 <_usb_d_dev_out_next+0xe4>
    37e6:	e07f      	b.n	38e8 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    37e8:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    37ea:	2210      	movs	r2, #16
    37ec:	4393      	bics	r3, r2
    37ee:	2220      	movs	r2, #32
    37f0:	4313      	orrs	r3, r2
    37f2:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    37f4:	4a48      	ldr	r2, [pc, #288]	; (3918 <_usb_d_dev_out_next+0x214>)
    37f6:	016b      	lsls	r3, r5, #5
    37f8:	68e1      	ldr	r1, [r4, #12]
    37fa:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    37fc:	8a21      	ldrh	r1, [r4, #16]
    37fe:	18d3      	adds	r3, r2, r3
    3800:	685a      	ldr	r2, [r3, #4]
    3802:	0489      	lsls	r1, r1, #18
    3804:	0909      	lsrs	r1, r1, #4
    3806:	484a      	ldr	r0, [pc, #296]	; (3930 <_usb_d_dev_out_next+0x22c>)
    3808:	4002      	ands	r2, r0
    380a:	430a      	orrs	r2, r1
    380c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    380e:	685a      	ldr	r2, [r3, #4]
    3810:	0b92      	lsrs	r2, r2, #14
    3812:	0392      	lsls	r2, r2, #14
    3814:	605a      	str	r2, [r3, #4]
    3816:	e022      	b.n	385e <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    3818:	68a2      	ldr	r2, [r4, #8]
    381a:	4452      	add	r2, sl
    381c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    381e:	4293      	cmp	r3, r2
    3820:	d9c1      	bls.n	37a6 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    3822:	1a9b      	subs	r3, r3, r2
    3824:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    3826:	7ce1      	ldrb	r1, [r4, #19]
    3828:	0689      	lsls	r1, r1, #26
    382a:	d530      	bpl.n	388e <_usb_d_dev_out_next+0x18a>
    382c:	8a22      	ldrh	r2, [r4, #16]
    382e:	1c11      	adds	r1, r2, #0
    3830:	b292      	uxth	r2, r2
    3832:	429a      	cmp	r2, r3
    3834:	d900      	bls.n	3838 <_usb_d_dev_out_next+0x134>
    3836:	1c19      	adds	r1, r3, #0
    3838:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    383a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    383c:	016a      	lsls	r2, r5, #5
    383e:	4936      	ldr	r1, [pc, #216]	; (3918 <_usb_d_dev_out_next+0x214>)
    3840:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3842:	016a      	lsls	r2, r5, #5
    3844:	4934      	ldr	r1, [pc, #208]	; (3918 <_usb_d_dev_out_next+0x214>)
    3846:	1889      	adds	r1, r1, r2
    3848:	684a      	ldr	r2, [r1, #4]
    384a:	049b      	lsls	r3, r3, #18
    384c:	091b      	lsrs	r3, r3, #4
    384e:	4838      	ldr	r0, [pc, #224]	; (3930 <_usb_d_dev_out_next+0x22c>)
    3850:	4002      	ands	r2, r0
    3852:	4313      	orrs	r3, r2
    3854:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3856:	684b      	ldr	r3, [r1, #4]
    3858:	0b9b      	lsrs	r3, r3, #14
    385a:	039b      	lsls	r3, r3, #14
    385c:	604b      	str	r3, [r1, #4]
	if (!isr) {
    385e:	4643      	mov	r3, r8
    3860:	2b00      	cmp	r3, #0
    3862:	d108      	bne.n	3876 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    3864:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    3866:	464b      	mov	r3, r9
    3868:	2b01      	cmp	r3, #1
    386a:	d02f      	beq.n	38cc <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    386c:	016b      	lsls	r3, r5, #5
    386e:	4931      	ldr	r1, [pc, #196]	; (3934 <_usb_d_dev_out_next+0x230>)
    3870:	468c      	mov	ip, r1
    3872:	4463      	add	r3, ip
    3874:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3876:	016d      	lsls	r5, r5, #5
    3878:	4b29      	ldr	r3, [pc, #164]	; (3920 <_usb_d_dev_out_next+0x21c>)
    387a:	469c      	mov	ip, r3
    387c:	4465      	add	r5, ip
    387e:	2340      	movs	r3, #64	; 0x40
    3880:	712b      	strb	r3, [r5, #4]
}
    3882:	bc3c      	pop	{r2, r3, r4, r5}
    3884:	4690      	mov	r8, r2
    3886:	4699      	mov	r9, r3
    3888:	46a2      	mov	sl, r4
    388a:	46ab      	mov	fp, r5
    388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    388e:	8a21      	ldrh	r1, [r4, #16]
    3890:	428b      	cmp	r3, r1
    3892:	d90a      	bls.n	38aa <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3894:	2180      	movs	r1, #128	; 0x80
    3896:	0189      	lsls	r1, r1, #6
    3898:	428b      	cmp	r3, r1
    389a:	d80d      	bhi.n	38b8 <_usb_d_dev_out_next+0x1b4>
    389c:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    389e:	6821      	ldr	r1, [r4, #0]
    38a0:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    38a2:	0169      	lsls	r1, r5, #5
    38a4:	481c      	ldr	r0, [pc, #112]	; (3918 <_usb_d_dev_out_next+0x214>)
    38a6:	500a      	str	r2, [r1, r0]
    38a8:	e7cb      	b.n	3842 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    38aa:	428b      	cmp	r3, r1
    38ac:	d2f7      	bcs.n	389e <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    38ae:	7ce1      	ldrb	r1, [r4, #19]
    38b0:	2020      	movs	r0, #32
    38b2:	4301      	orrs	r1, r0
    38b4:	74e1      	strb	r1, [r4, #19]
    38b6:	e7f2      	b.n	389e <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    38b8:	2380      	movs	r3, #128	; 0x80
    38ba:	019b      	lsls	r3, r3, #6
    38bc:	e7ef      	b.n	389e <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    38be:	016b      	lsls	r3, r5, #5
    38c0:	4a19      	ldr	r2, [pc, #100]	; (3928 <_usb_d_dev_out_next+0x224>)
    38c2:	4694      	mov	ip, r2
    38c4:	4463      	add	r3, ip
    38c6:	222d      	movs	r2, #45	; 0x2d
    38c8:	701a      	strb	r2, [r3, #0]
    38ca:	e776      	b.n	37ba <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    38cc:	016a      	lsls	r2, r5, #5
    38ce:	4b12      	ldr	r3, [pc, #72]	; (3918 <_usb_d_dev_out_next+0x214>)
    38d0:	189b      	adds	r3, r3, r2
    38d2:	2200      	movs	r2, #0
    38d4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    38d6:	322d      	adds	r2, #45	; 0x2d
    38d8:	e7c8      	b.n	386c <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    38da:	05bf      	lsls	r7, r7, #22
    38dc:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    38de:	7cc3      	ldrb	r3, [r0, #19]
    38e0:	2207      	movs	r2, #7
    38e2:	401a      	ands	r2, r3
    38e4:	4691      	mov	r9, r2
    38e6:	e735      	b.n	3754 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    38e8:	4643      	mov	r3, r8
    38ea:	2b00      	cmp	r3, #0
    38ec:	d10c      	bne.n	3908 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    38ee:	68a3      	ldr	r3, [r4, #8]
    38f0:	4453      	add	r3, sl
    38f2:	60a3      	str	r3, [r4, #8]
    38f4:	e757      	b.n	37a6 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    38f6:	7cc3      	ldrb	r3, [r0, #19]
    38f8:	2207      	movs	r2, #7
    38fa:	401a      	ands	r2, r3
    38fc:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    38fe:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3900:	2300      	movs	r3, #0
    3902:	469b      	mov	fp, r3
    3904:	469a      	mov	sl, r3
    3906:	e72b      	b.n	3760 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    3908:	8a23      	ldrh	r3, [r4, #16]
    390a:	42bb      	cmp	r3, r7
    390c:	d900      	bls.n	3910 <_usb_d_dev_out_next+0x20c>
    390e:	e743      	b.n	3798 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    3910:	68a3      	ldr	r3, [r4, #8]
    3912:	4453      	add	r3, sl
    3914:	60a3      	str	r3, [r4, #8]
    3916:	e746      	b.n	37a6 <_usb_d_dev_out_next+0xa2>
    3918:	20001070 	.word	0x20001070
    391c:	000003ff 	.word	0x000003ff
    3920:	41005100 	.word	0x41005100
    3924:	000078b1 	.word	0x000078b1
    3928:	41005108 	.word	0x41005108
    392c:	00003381 	.word	0x00003381
    3930:	f0003fff 	.word	0xf0003fff
    3934:	41005109 	.word	0x41005109

00003938 <_usb_d_dev_init>:
{
    3938:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    393a:	4b31      	ldr	r3, [pc, #196]	; (3a00 <_usb_d_dev_init+0xc8>)
    393c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    393e:	07db      	lsls	r3, r3, #31
    3940:	d41f      	bmi.n	3982 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3942:	492f      	ldr	r1, [pc, #188]	; (3a00 <_usb_d_dev_init+0xc8>)
    3944:	2203      	movs	r2, #3
    3946:	788b      	ldrb	r3, [r1, #2]
    3948:	4213      	tst	r3, r2
    394a:	d1fc      	bne.n	3946 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    394c:	4b2c      	ldr	r3, [pc, #176]	; (3a00 <_usb_d_dev_init+0xc8>)
    394e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3950:	079b      	lsls	r3, r3, #30
    3952:	d50e      	bpl.n	3972 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3954:	4a2a      	ldr	r2, [pc, #168]	; (3a00 <_usb_d_dev_init+0xc8>)
    3956:	7813      	ldrb	r3, [r2, #0]
    3958:	2102      	movs	r1, #2
    395a:	438b      	bics	r3, r1
    395c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    395e:	0011      	movs	r1, r2
    3960:	2203      	movs	r2, #3
    3962:	788b      	ldrb	r3, [r1, #2]
    3964:	4213      	tst	r3, r2
    3966:	d1fc      	bne.n	3962 <_usb_d_dev_init+0x2a>
    3968:	4925      	ldr	r1, [pc, #148]	; (3a00 <_usb_d_dev_init+0xc8>)
    396a:	2202      	movs	r2, #2
    396c:	788b      	ldrb	r3, [r1, #2]
    396e:	4213      	tst	r3, r2
    3970:	d1fc      	bne.n	396c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3972:	2201      	movs	r2, #1
    3974:	4b22      	ldr	r3, [pc, #136]	; (3a00 <_usb_d_dev_init+0xc8>)
    3976:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3978:	0019      	movs	r1, r3
    397a:	3202      	adds	r2, #2
    397c:	788b      	ldrb	r3, [r1, #2]
    397e:	4213      	tst	r3, r2
    3980:	d1fc      	bne.n	397c <_usb_d_dev_init+0x44>
    3982:	491f      	ldr	r1, [pc, #124]	; (3a00 <_usb_d_dev_init+0xc8>)
    3984:	2201      	movs	r2, #1
    3986:	788b      	ldrb	r3, [r1, #2]
    3988:	4213      	tst	r3, r2
    398a:	d1fc      	bne.n	3986 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    398c:	4b1d      	ldr	r3, [pc, #116]	; (3a04 <_usb_d_dev_init+0xcc>)
    398e:	4a1e      	ldr	r2, [pc, #120]	; (3a08 <_usb_d_dev_init+0xd0>)
    3990:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3992:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3994:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3996:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3998:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    399a:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <_usb_d_dev_init+0xd4>)
    399c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    399e:	4b1c      	ldr	r3, [pc, #112]	; (3a10 <_usb_d_dev_init+0xd8>)
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    39a4:	211f      	movs	r1, #31
    39a6:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    39a8:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    39aa:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    39ac:	019b      	lsls	r3, r3, #6
    39ae:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    39b0:	2a1f      	cmp	r2, #31
    39b2:	d01f      	beq.n	39f4 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    39b4:	291f      	cmp	r1, #31
    39b6:	d01f      	beq.n	39f8 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    39b8:	2b07      	cmp	r3, #7
    39ba:	d01f      	beq.n	39fc <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    39bc:	0192      	lsls	r2, r2, #6
    39be:	430a      	orrs	r2, r1
    39c0:	031b      	lsls	r3, r3, #12
    39c2:	4313      	orrs	r3, r2
    39c4:	4a0e      	ldr	r2, [pc, #56]	; (3a00 <_usb_d_dev_init+0xc8>)
    39c6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    39c8:	78d3      	ldrb	r3, [r2, #3]
    39ca:	2103      	movs	r1, #3
    39cc:	430b      	orrs	r3, r1
    39ce:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    39d0:	78d3      	ldrb	r3, [r2, #3]
    39d2:	210c      	movs	r1, #12
    39d4:	430b      	orrs	r3, r1
    39d6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    39d8:	2304      	movs	r3, #4
    39da:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    39dc:	0011      	movs	r1, r2
    39de:	2203      	movs	r2, #3
    39e0:	788b      	ldrb	r3, [r1, #2]
    39e2:	4213      	tst	r3, r2
    39e4:	d1fc      	bne.n	39e0 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    39e6:	4b06      	ldr	r3, [pc, #24]	; (3a00 <_usb_d_dev_init+0xc8>)
    39e8:	4a06      	ldr	r2, [pc, #24]	; (3a04 <_usb_d_dev_init+0xcc>)
    39ea:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    39ec:	2201      	movs	r2, #1
    39ee:	811a      	strh	r2, [r3, #8]
}
    39f0:	2000      	movs	r0, #0
    39f2:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    39f4:	3a1a      	subs	r2, #26
    39f6:	e7dd      	b.n	39b4 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    39f8:	3902      	subs	r1, #2
    39fa:	e7dd      	b.n	39b8 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    39fc:	3b02      	subs	r3, #2
    39fe:	e7dd      	b.n	39bc <_usb_d_dev_init+0x84>
    3a00:	41005000 	.word	0x41005000
    3a04:	20001070 	.word	0x20001070
    3a08:	000032c1 	.word	0x000032c1
    3a0c:	00003515 	.word	0x00003515
    3a10:	00806024 	.word	0x00806024

00003a14 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3a14:	4b10      	ldr	r3, [pc, #64]	; (3a58 <_usb_d_dev_enable+0x44>)
    3a16:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3a18:	079b      	lsls	r3, r3, #30
    3a1a:	d11a      	bne.n	3a52 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a1c:	490e      	ldr	r1, [pc, #56]	; (3a58 <_usb_d_dev_enable+0x44>)
    3a1e:	2203      	movs	r2, #3
    3a20:	788b      	ldrb	r3, [r1, #2]
    3a22:	4213      	tst	r3, r2
    3a24:	d1fc      	bne.n	3a20 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3a26:	4b0c      	ldr	r3, [pc, #48]	; (3a58 <_usb_d_dev_enable+0x44>)
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3a2c:	079a      	lsls	r2, r3, #30
    3a2e:	d408      	bmi.n	3a42 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3a30:	2202      	movs	r2, #2
    3a32:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3a34:	4a08      	ldr	r2, [pc, #32]	; (3a58 <_usb_d_dev_enable+0x44>)
    3a36:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3a38:	0011      	movs	r1, r2
    3a3a:	2203      	movs	r2, #3
    3a3c:	788b      	ldrb	r3, [r1, #2]
    3a3e:	4213      	tst	r3, r2
    3a40:	d1fc      	bne.n	3a3c <_usb_d_dev_enable+0x28>
    3a42:	2280      	movs	r2, #128	; 0x80
    3a44:	4b05      	ldr	r3, [pc, #20]	; (3a5c <_usb_d_dev_enable+0x48>)
    3a46:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3a48:	4a05      	ldr	r2, [pc, #20]	; (3a60 <_usb_d_dev_enable+0x4c>)
    3a4a:	4b03      	ldr	r3, [pc, #12]	; (3a58 <_usb_d_dev_enable+0x44>)
    3a4c:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3a4e:	2000      	movs	r0, #0
}
    3a50:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3a52:	2011      	movs	r0, #17
    3a54:	4240      	negs	r0, r0
    3a56:	e7fb      	b.n	3a50 <_usb_d_dev_enable+0x3c>
    3a58:	41005000 	.word	0x41005000
    3a5c:	e000e100 	.word	0xe000e100
    3a60:	0000028d 	.word	0x0000028d

00003a64 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3a64:	4a02      	ldr	r2, [pc, #8]	; (3a70 <_usb_d_dev_attach+0xc>)
    3a66:	8913      	ldrh	r3, [r2, #8]
    3a68:	2101      	movs	r1, #1
    3a6a:	438b      	bics	r3, r1
    3a6c:	8113      	strh	r3, [r2, #8]
}
    3a6e:	4770      	bx	lr
    3a70:	41005000 	.word	0x41005000

00003a74 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3a74:	2380      	movs	r3, #128	; 0x80
    3a76:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3a78:	4b01      	ldr	r3, [pc, #4]	; (3a80 <_usb_d_dev_set_address+0xc>)
    3a7a:	7298      	strb	r0, [r3, #10]
}
    3a7c:	4770      	bx	lr
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	41005000 	.word	0x41005000

00003a84 <_usb_d_dev_ep_init>:
{
    3a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3a86:	240f      	movs	r4, #15
    3a88:	4004      	ands	r4, r0
    3a8a:	b243      	sxtb	r3, r0
    3a8c:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a8e:	2c00      	cmp	r4, #0
    3a90:	d054      	beq.n	3b3c <_usb_d_dev_ep_init+0xb8>
    3a92:	0025      	movs	r5, r4
    3a94:	2b00      	cmp	r3, #0
    3a96:	db07      	blt.n	3aa8 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3a98:	2303      	movs	r3, #3
    3a9a:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3a9c:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    3a9e:	2c02      	cmp	r4, #2
    3aa0:	d950      	bls.n	3b44 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    3aa2:	2012      	movs	r0, #18
    3aa4:	4240      	negs	r0, r0
    3aa6:	e025      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3aa8:	1ca5      	adds	r5, r4, #2
    3aaa:	e7f5      	b.n	3a98 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3aac:	4663      	mov	r3, ip
    3aae:	2b00      	cmp	r3, #0
    3ab0:	db21      	blt.n	3af6 <_usb_d_dev_ep_init+0x72>
    3ab2:	007b      	lsls	r3, r7, #1
    3ab4:	19db      	adds	r3, r3, r7
    3ab6:	009b      	lsls	r3, r3, #2
    3ab8:	4c3b      	ldr	r4, [pc, #236]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3aba:	591b      	ldr	r3, [r3, r4]
    3abc:	2b00      	cmp	r3, #0
    3abe:	d166      	bne.n	3b8e <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3ac0:	007b      	lsls	r3, r7, #1
    3ac2:	19df      	adds	r7, r3, r7
    3ac4:	00bf      	lsls	r7, r7, #2
    3ac6:	4b38      	ldr	r3, [pc, #224]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3ac8:	58ff      	ldr	r7, [r7, r3]
    3aca:	4b38      	ldr	r3, [pc, #224]	; (3bac <_usb_d_dev_ep_init+0x128>)
    3acc:	00ae      	lsls	r6, r5, #2
    3ace:	1974      	adds	r4, r6, r5
    3ad0:	00a4      	lsls	r4, r4, #2
    3ad2:	191c      	adds	r4, r3, r4
    3ad4:	3480      	adds	r4, #128	; 0x80
    3ad6:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    3ad8:	3360      	adds	r3, #96	; 0x60
    3ada:	1974      	adds	r4, r6, r5
    3adc:	00a4      	lsls	r4, r4, #2
    3ade:	191c      	adds	r4, r3, r4
    3ae0:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    3ae2:	3427      	adds	r4, #39	; 0x27
    3ae4:	3101      	adds	r1, #1
    3ae6:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    3ae8:	1975      	adds	r5, r6, r5
    3aea:	00ad      	lsls	r5, r5, #2
    3aec:	195b      	adds	r3, r3, r5
    3aee:	3326      	adds	r3, #38	; 0x26
    3af0:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    3af2:	2000      	movs	r0, #0
}
    3af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3af6:	007b      	lsls	r3, r7, #1
    3af8:	19db      	adds	r3, r3, r7
    3afa:	009b      	lsls	r3, r3, #2
    3afc:	4c2a      	ldr	r4, [pc, #168]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3afe:	18e3      	adds	r3, r4, r3
    3b00:	685b      	ldr	r3, [r3, #4]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d106      	bne.n	3b14 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3b06:	007b      	lsls	r3, r7, #1
    3b08:	19df      	adds	r7, r3, r7
    3b0a:	00bf      	lsls	r7, r7, #2
    3b0c:	4b26      	ldr	r3, [pc, #152]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3b0e:	19df      	adds	r7, r3, r7
    3b10:	687f      	ldr	r7, [r7, #4]
    3b12:	e7da      	b.n	3aca <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3b14:	007b      	lsls	r3, r7, #1
    3b16:	19db      	adds	r3, r3, r7
    3b18:	009b      	lsls	r3, r3, #2
    3b1a:	4c23      	ldr	r4, [pc, #140]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3b1c:	18e3      	adds	r3, r4, r3
    3b1e:	895b      	ldrh	r3, [r3, #10]
    3b20:	4293      	cmp	r3, r2
    3b22:	daf0      	bge.n	3b06 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    3b24:	2013      	movs	r0, #19
    3b26:	4240      	negs	r0, r0
    3b28:	e7e4      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    3b2a:	2014      	movs	r0, #20
    3b2c:	4240      	negs	r0, r0
    3b2e:	e7e1      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    3b30:	2014      	movs	r0, #20
    3b32:	4240      	negs	r0, r0
    3b34:	e7de      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    3b36:	2013      	movs	r0, #19
    3b38:	4240      	negs	r0, r0
    3b3a:	e7db      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3b3c:	2303      	movs	r3, #3
    3b3e:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    3b40:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3b42:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    3b44:	00ab      	lsls	r3, r5, #2
    3b46:	195b      	adds	r3, r3, r5
    3b48:	009e      	lsls	r6, r3, #2
    3b4a:	4b18      	ldr	r3, [pc, #96]	; (3bac <_usb_d_dev_ep_init+0x128>)
    3b4c:	199b      	adds	r3, r3, r6
    3b4e:	3386      	adds	r3, #134	; 0x86
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	2bff      	cmp	r3, #255	; 0xff
    3b54:	d1e9      	bne.n	3b2a <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3b56:	2900      	cmp	r1, #0
    3b58:	d1a8      	bne.n	3aac <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b5a:	2c00      	cmp	r4, #0
    3b5c:	d004      	beq.n	3b68 <_usb_d_dev_ep_init+0xe4>
    3b5e:	4663      	mov	r3, ip
    3b60:	2b00      	cmp	r3, #0
    3b62:	db01      	blt.n	3b68 <_usb_d_dev_ep_init+0xe4>
    3b64:	3402      	adds	r4, #2
    3b66:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    3b68:	00a3      	lsls	r3, r4, #2
    3b6a:	191b      	adds	r3, r3, r4
    3b6c:	009b      	lsls	r3, r3, #2
    3b6e:	4c0f      	ldr	r4, [pc, #60]	; (3bac <_usb_d_dev_ep_init+0x128>)
    3b70:	18e4      	adds	r4, r4, r3
    3b72:	3486      	adds	r4, #134	; 0x86
    3b74:	7823      	ldrb	r3, [r4, #0]
    3b76:	2bff      	cmp	r3, #255	; 0xff
    3b78:	d1da      	bne.n	3b30 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    3b7a:	007b      	lsls	r3, r7, #1
    3b7c:	19db      	adds	r3, r3, r7
    3b7e:	009b      	lsls	r3, r3, #2
    3b80:	4c09      	ldr	r4, [pc, #36]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3b82:	591b      	ldr	r3, [r3, r4]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d0d6      	beq.n	3b36 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3b88:	4663      	mov	r3, ip
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	dbb3      	blt.n	3af6 <_usb_d_dev_ep_init+0x72>
    3b8e:	007b      	lsls	r3, r7, #1
    3b90:	19db      	adds	r3, r3, r7
    3b92:	009b      	lsls	r3, r3, #2
    3b94:	4c04      	ldr	r4, [pc, #16]	; (3ba8 <_usb_d_dev_ep_init+0x124>)
    3b96:	18e3      	adds	r3, r4, r3
    3b98:	891b      	ldrh	r3, [r3, #8]
    3b9a:	4293      	cmp	r3, r2
    3b9c:	db00      	blt.n	3ba0 <_usb_d_dev_ep_init+0x11c>
    3b9e:	e78f      	b.n	3ac0 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    3ba0:	2013      	movs	r0, #19
    3ba2:	4240      	negs	r0, r0
    3ba4:	e7a6      	b.n	3af4 <_usb_d_dev_ep_init+0x70>
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	0000cb54 	.word	0x0000cb54
    3bac:	20001070 	.word	0x20001070

00003bb0 <_usb_d_dev_ep_deinit>:
{
    3bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb2:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3bb4:	240f      	movs	r4, #15
    3bb6:	4004      	ands	r4, r0
    3bb8:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3bba:	2c00      	cmp	r4, #0
    3bbc:	d010      	beq.n	3be0 <_usb_d_dev_ep_deinit+0x30>
    3bbe:	0020      	movs	r0, r4
    3bc0:	2f00      	cmp	r7, #0
    3bc2:	db02      	blt.n	3bca <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3bc4:	2c02      	cmp	r4, #2
    3bc6:	d902      	bls.n	3bce <_usb_d_dev_ep_deinit+0x1e>
}
    3bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3bca:	1ca0      	adds	r0, r4, #2
    3bcc:	e7fa      	b.n	3bc4 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    3bce:	0006      	movs	r6, r0
    3bd0:	3001      	adds	r0, #1
    3bd2:	0083      	lsls	r3, r0, #2
    3bd4:	1818      	adds	r0, r3, r0
    3bd6:	0080      	lsls	r0, r0, #2
    3bd8:	4b25      	ldr	r3, [pc, #148]	; (3c70 <_usb_d_dev_ep_deinit+0xc0>)
    3bda:	3360      	adds	r3, #96	; 0x60
    3bdc:	1818      	adds	r0, r3, r0
    3bde:	e002      	b.n	3be6 <_usb_d_dev_ep_deinit+0x36>
    3be0:	4823      	ldr	r0, [pc, #140]	; (3c70 <_usb_d_dev_ep_deinit+0xc0>)
    3be2:	3074      	adds	r0, #116	; 0x74
    3be4:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3be6:	00b3      	lsls	r3, r6, #2
    3be8:	199b      	adds	r3, r3, r6
    3bea:	009a      	lsls	r2, r3, #2
    3bec:	4b20      	ldr	r3, [pc, #128]	; (3c70 <_usb_d_dev_ep_deinit+0xc0>)
    3bee:	189b      	adds	r3, r3, r2
    3bf0:	3386      	adds	r3, #134	; 0x86
    3bf2:	781b      	ldrb	r3, [r3, #0]
    3bf4:	2bff      	cmp	r3, #255	; 0xff
    3bf6:	d0e7      	beq.n	3bc8 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3bf8:	0ff9      	lsrs	r1, r7, #31
    3bfa:	2203      	movs	r2, #3
    3bfc:	4b1d      	ldr	r3, [pc, #116]	; (3c74 <_usb_d_dev_ep_deinit+0xc4>)
    3bfe:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3c00:	00b3      	lsls	r3, r6, #2
    3c02:	199b      	adds	r3, r3, r6
    3c04:	009a      	lsls	r2, r3, #2
    3c06:	4b1a      	ldr	r3, [pc, #104]	; (3c70 <_usb_d_dev_ep_deinit+0xc0>)
    3c08:	189b      	adds	r3, r3, r2
    3c0a:	3380      	adds	r3, #128	; 0x80
    3c0c:	79da      	ldrb	r2, [r3, #7]
    3c0e:	2307      	movs	r3, #7
    3c10:	4013      	ands	r3, r2
    3c12:	2b01      	cmp	r3, #1
    3c14:	d01b      	beq.n	3c4e <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    3c16:	2f00      	cmp	r7, #0
    3c18:	db1f      	blt.n	3c5a <_usb_d_dev_ep_deinit+0xaa>
    3c1a:	016d      	lsls	r5, r5, #5
    3c1c:	4b16      	ldr	r3, [pc, #88]	; (3c78 <_usb_d_dev_ep_deinit+0xc8>)
    3c1e:	469c      	mov	ip, r3
    3c20:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3c22:	2280      	movs	r2, #128	; 0x80
    3c24:	0052      	lsls	r2, r2, #1
    3c26:	5cab      	ldrb	r3, [r5, r2]
    3c28:	2107      	movs	r1, #7
    3c2a:	438b      	bics	r3, r1
    3c2c:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    3c2e:	4b10      	ldr	r3, [pc, #64]	; (3c70 <_usb_d_dev_ep_deinit+0xc0>)
    3c30:	3360      	adds	r3, #96	; 0x60
    3c32:	00b1      	lsls	r1, r6, #2
    3c34:	198a      	adds	r2, r1, r6
    3c36:	0092      	lsls	r2, r2, #2
    3c38:	189a      	adds	r2, r3, r2
    3c3a:	3227      	adds	r2, #39	; 0x27
    3c3c:	2000      	movs	r0, #0
    3c3e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    3c40:	198e      	adds	r6, r1, r6
    3c42:	00b6      	lsls	r6, r6, #2
    3c44:	199b      	adds	r3, r3, r6
    3c46:	3326      	adds	r3, #38	; 0x26
    3c48:	22ff      	movs	r2, #255	; 0xff
    3c4a:	701a      	strb	r2, [r3, #0]
    3c4c:	e7bc      	b.n	3bc8 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3c4e:	3508      	adds	r5, #8
    3c50:	016d      	lsls	r5, r5, #5
    3c52:	2200      	movs	r2, #0
    3c54:	4b08      	ldr	r3, [pc, #32]	; (3c78 <_usb_d_dev_ep_deinit+0xc8>)
    3c56:	54ea      	strb	r2, [r5, r3]
    3c58:	e7e9      	b.n	3c2e <_usb_d_dev_ep_deinit+0x7e>
    3c5a:	0164      	lsls	r4, r4, #5
    3c5c:	4b06      	ldr	r3, [pc, #24]	; (3c78 <_usb_d_dev_ep_deinit+0xc8>)
    3c5e:	469c      	mov	ip, r3
    3c60:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3c62:	2280      	movs	r2, #128	; 0x80
    3c64:	0052      	lsls	r2, r2, #1
    3c66:	5ca3      	ldrb	r3, [r4, r2]
    3c68:	2170      	movs	r1, #112	; 0x70
    3c6a:	438b      	bics	r3, r1
    3c6c:	54a3      	strb	r3, [r4, r2]
    3c6e:	e7de      	b.n	3c2e <_usb_d_dev_ep_deinit+0x7e>
    3c70:	20001070 	.word	0x20001070
    3c74:	000033a9 	.word	0x000033a9
    3c78:	41005000 	.word	0x41005000

00003c7c <_usb_d_dev_ep_enable>:
{
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3c7e:	220f      	movs	r2, #15
    3c80:	4002      	ands	r2, r0
    3c82:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c84:	2a00      	cmp	r2, #0
    3c86:	d100      	bne.n	3c8a <_usb_d_dev_ep_enable+0xe>
    3c88:	e092      	b.n	3db0 <_usb_d_dev_ep_enable+0x134>
    3c8a:	0013      	movs	r3, r2
    3c8c:	2800      	cmp	r0, #0
    3c8e:	db0b      	blt.n	3ca8 <_usb_d_dev_ep_enable+0x2c>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3c90:	0011      	movs	r1, r2
    3c92:	3208      	adds	r2, #8
    3c94:	0152      	lsls	r2, r2, #5
    3c96:	4cae      	ldr	r4, [pc, #696]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3c98:	5d15      	ldrb	r5, [r2, r4]
    3c9a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3c9c:	2902      	cmp	r1, #2
    3c9e:	d800      	bhi.n	3ca2 <_usb_d_dev_ep_enable+0x26>
    3ca0:	e08d      	b.n	3dbe <_usb_d_dev_ep_enable+0x142>
		return -USB_ERR_PARAM;
    3ca2:	2012      	movs	r0, #18
    3ca4:	4240      	negs	r0, r0
    3ca6:	e0e4      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3ca8:	1c93      	adds	r3, r2, #2
    3caa:	e7f1      	b.n	3c90 <_usb_d_dev_ep_enable+0x14>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3cac:	3276      	adds	r2, #118	; 0x76
    3cae:	422a      	tst	r2, r5
    3cb0:	d175      	bne.n	3d9e <_usb_d_dev_ep_enable+0x122>
    3cb2:	4aa7      	ldr	r2, [pc, #668]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3cb4:	4694      	mov	ip, r2
    3cb6:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3cb8:	2011      	movs	r0, #17
    3cba:	2280      	movs	r2, #128	; 0x80
    3cbc:	0052      	lsls	r2, r2, #1
    3cbe:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3cc0:	009a      	lsls	r2, r3, #2
    3cc2:	18d2      	adds	r2, r2, r3
    3cc4:	0095      	lsls	r5, r2, #2
    3cc6:	4aa3      	ldr	r2, [pc, #652]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3cc8:	3260      	adds	r2, #96	; 0x60
    3cca:	1952      	adds	r2, r2, r5
    3ccc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    3cce:	0395      	lsls	r5, r2, #14
    3cd0:	48a1      	ldr	r0, [pc, #644]	; (3f58 <_usb_d_dev_ep_enable+0x2dc>)
    3cd2:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3cd4:	2080      	movs	r0, #128	; 0x80
    3cd6:	0080      	lsls	r0, r0, #2
    3cd8:	4282      	cmp	r2, r0
    3cda:	d900      	bls.n	3cde <_usb_d_dev_ep_enable+0x62>
    3cdc:	e0ca      	b.n	3e74 <_usb_d_dev_ep_enable+0x1f8>
    3cde:	3801      	subs	r0, #1
    3ce0:	38ff      	subs	r0, #255	; 0xff
    3ce2:	4282      	cmp	r2, r0
    3ce4:	d900      	bls.n	3ce8 <_usb_d_dev_ep_enable+0x6c>
    3ce6:	e11b      	b.n	3f20 <_usb_d_dev_ep_enable+0x2a4>
    3ce8:	2a80      	cmp	r2, #128	; 0x80
    3cea:	d900      	bls.n	3cee <_usb_d_dev_ep_enable+0x72>
    3cec:	e108      	b.n	3f00 <_usb_d_dev_ep_enable+0x284>
    3cee:	2a40      	cmp	r2, #64	; 0x40
    3cf0:	d900      	bls.n	3cf4 <_usb_d_dev_ep_enable+0x78>
    3cf2:	e11d      	b.n	3f30 <_usb_d_dev_ep_enable+0x2b4>
    3cf4:	2a20      	cmp	r2, #32
    3cf6:	d900      	bls.n	3cfa <_usb_d_dev_ep_enable+0x7e>
    3cf8:	e10a      	b.n	3f10 <_usb_d_dev_ep_enable+0x294>
    3cfa:	2a10      	cmp	r2, #16
    3cfc:	d900      	bls.n	3d00 <_usb_d_dev_ep_enable+0x84>
    3cfe:	e11f      	b.n	3f40 <_usb_d_dev_ep_enable+0x2c4>
    3d00:	38f8      	subs	r0, #248	; 0xf8
    3d02:	4290      	cmp	r0, r2
    3d04:	4180      	sbcs	r0, r0
    3d06:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d08:	0706      	lsls	r6, r0, #28
    3d0a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3d0c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d0e:	0492      	lsls	r2, r2, #18
    3d10:	0c92      	lsrs	r2, r2, #18
    3d12:	e0b6      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3d14:	2270      	movs	r2, #112	; 0x70
    3d16:	422a      	tst	r2, r5
    3d18:	d144      	bne.n	3da4 <_usb_d_dev_ep_enable+0x128>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3d1a:	488e      	ldr	r0, [pc, #568]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3d1c:	009e      	lsls	r6, r3, #2
    3d1e:	18f2      	adds	r2, r6, r3
    3d20:	0092      	lsls	r2, r2, #2
    3d22:	1882      	adds	r2, r0, r2
    3d24:	3280      	adds	r2, #128	; 0x80
    3d26:	79d2      	ldrb	r2, [r2, #7]
    3d28:	0752      	lsls	r2, r2, #29
    3d2a:	0e52      	lsrs	r2, r2, #25
    3d2c:	4315      	orrs	r5, r2
    3d2e:	4a88      	ldr	r2, [pc, #544]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3d30:	4694      	mov	ip, r2
    3d32:	4464      	add	r4, ip
    3d34:	2280      	movs	r2, #128	; 0x80
    3d36:	0052      	lsls	r2, r2, #1
    3d38:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d3a:	3060      	adds	r0, #96	; 0x60
    3d3c:	18f6      	adds	r6, r6, r3
    3d3e:	00b6      	lsls	r6, r6, #2
    3d40:	1980      	adds	r0, r0, r6
    3d42:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3d44:	0485      	lsls	r5, r0, #18
    3d46:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3d48:	3201      	adds	r2, #1
    3d4a:	32ff      	adds	r2, #255	; 0xff
    3d4c:	2307      	movs	r3, #7
    3d4e:	4290      	cmp	r0, r2
    3d50:	d814      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d52:	3a01      	subs	r2, #1
    3d54:	3aff      	subs	r2, #255	; 0xff
    3d56:	3b01      	subs	r3, #1
    3d58:	4290      	cmp	r0, r2
    3d5a:	d80f      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d5c:	3b01      	subs	r3, #1
    3d5e:	2880      	cmp	r0, #128	; 0x80
    3d60:	d80c      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d62:	3b01      	subs	r3, #1
    3d64:	2840      	cmp	r0, #64	; 0x40
    3d66:	d809      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d68:	3b01      	subs	r3, #1
    3d6a:	2820      	cmp	r0, #32
    3d6c:	d806      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d6e:	3b01      	subs	r3, #1
    3d70:	2810      	cmp	r0, #16
    3d72:	d803      	bhi.n	3d7c <_usb_d_dev_ep_enable+0x100>
    3d74:	3af8      	subs	r2, #248	; 0xf8
    3d76:	4282      	cmp	r2, r0
    3d78:	4192      	sbcs	r2, r2
    3d7a:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d7c:	071b      	lsls	r3, r3, #28
    3d7e:	432b      	orrs	r3, r5
    3d80:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	2382      	movs	r3, #130	; 0x82
    3d86:	005b      	lsls	r3, r3, #1
    3d88:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    3d8a:	0149      	lsls	r1, r1, #5
    3d8c:	4b71      	ldr	r3, [pc, #452]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3d8e:	1859      	adds	r1, r3, r1
    3d90:	2300      	movs	r3, #0
    3d92:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    3d94:	2000      	movs	r0, #0
    3d96:	e06c      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
		return -USB_ERR_PARAM;
    3d98:	2012      	movs	r0, #18
    3d9a:	4240      	negs	r0, r0
    3d9c:	e069      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    3d9e:	2014      	movs	r0, #20
    3da0:	4240      	negs	r0, r0
    3da2:	e066      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    3da4:	2014      	movs	r0, #20
    3da6:	4240      	negs	r0, r0
    3da8:	e063      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
			return -USB_ERR_REDO;
    3daa:	2014      	movs	r0, #20
    3dac:	4240      	negs	r0, r0
    3dae:	e060      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3db0:	2380      	movs	r3, #128	; 0x80
    3db2:	005b      	lsls	r3, r3, #1
    3db4:	4a66      	ldr	r2, [pc, #408]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3db6:	5cd5      	ldrb	r5, [r2, r3]
    3db8:	b2ed      	uxtb	r5, r5
    3dba:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    3dbc:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3dbe:	009a      	lsls	r2, r3, #2
    3dc0:	18d2      	adds	r2, r2, r3
    3dc2:	0094      	lsls	r4, r2, #2
    3dc4:	4a63      	ldr	r2, [pc, #396]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3dc6:	1912      	adds	r2, r2, r4
    3dc8:	3286      	adds	r2, #134	; 0x86
    3dca:	7812      	ldrb	r2, [r2, #0]
    3dcc:	2aff      	cmp	r2, #255	; 0xff
    3dce:	d0e3      	beq.n	3d98 <_usb_d_dev_ep_enable+0x11c>
    3dd0:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3dd2:	4a60      	ldr	r2, [pc, #384]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3dd4:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3dd6:	009e      	lsls	r6, r3, #2
    3dd8:	18f6      	adds	r6, r6, r3
    3dda:	00b6      	lsls	r6, r6, #2
    3ddc:	1992      	adds	r2, r2, r6
    3dde:	3280      	adds	r2, #128	; 0x80
    3de0:	79d6      	ldrb	r6, [r2, #7]
    3de2:	2207      	movs	r2, #7
    3de4:	4032      	ands	r2, r6
    3de6:	2a01      	cmp	r2, #1
    3de8:	d100      	bne.n	3dec <_usb_d_dev_ep_enable+0x170>
    3dea:	e75f      	b.n	3cac <_usb_d_dev_ep_enable+0x30>
	} else if (dir) {
    3dec:	2800      	cmp	r0, #0
    3dee:	db91      	blt.n	3d14 <_usb_d_dev_ep_enable+0x98>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3df0:	076a      	lsls	r2, r5, #29
    3df2:	d1da      	bne.n	3daa <_usb_d_dev_ep_enable+0x12e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3df4:	4857      	ldr	r0, [pc, #348]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3df6:	009e      	lsls	r6, r3, #2
    3df8:	18f2      	adds	r2, r6, r3
    3dfa:	0092      	lsls	r2, r2, #2
    3dfc:	1882      	adds	r2, r0, r2
    3dfe:	3280      	adds	r2, #128	; 0x80
    3e00:	79d2      	ldrb	r2, [r2, #7]
    3e02:	0752      	lsls	r2, r2, #29
    3e04:	0f52      	lsrs	r2, r2, #29
    3e06:	4315      	orrs	r5, r2
    3e08:	4a51      	ldr	r2, [pc, #324]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3e0a:	4694      	mov	ip, r2
    3e0c:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e0e:	2280      	movs	r2, #128	; 0x80
    3e10:	0052      	lsls	r2, r2, #1
    3e12:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e14:	3060      	adds	r0, #96	; 0x60
    3e16:	18f6      	adds	r6, r6, r3
    3e18:	00b6      	lsls	r6, r6, #2
    3e1a:	1980      	adds	r0, r0, r6
    3e1c:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    3e1e:	03ab      	lsls	r3, r5, #14
    3e20:	484d      	ldr	r0, [pc, #308]	; (3f58 <_usb_d_dev_ep_enable+0x2dc>)
    3e22:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e24:	3201      	adds	r2, #1
    3e26:	32ff      	adds	r2, #255	; 0xff
    3e28:	2307      	movs	r3, #7
    3e2a:	4295      	cmp	r5, r2
    3e2c:	d814      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e2e:	3a01      	subs	r2, #1
    3e30:	3aff      	subs	r2, #255	; 0xff
    3e32:	3b01      	subs	r3, #1
    3e34:	4295      	cmp	r5, r2
    3e36:	d80f      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e38:	3b01      	subs	r3, #1
    3e3a:	2d80      	cmp	r5, #128	; 0x80
    3e3c:	d80c      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e3e:	3b01      	subs	r3, #1
    3e40:	2d40      	cmp	r5, #64	; 0x40
    3e42:	d809      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e44:	3b01      	subs	r3, #1
    3e46:	2d20      	cmp	r5, #32
    3e48:	d806      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e4a:	3b01      	subs	r3, #1
    3e4c:	2d10      	cmp	r5, #16
    3e4e:	d803      	bhi.n	3e58 <_usb_d_dev_ep_enable+0x1dc>
    3e50:	3af8      	subs	r2, #248	; 0xf8
    3e52:	42aa      	cmp	r2, r5
    3e54:	4192      	sbcs	r2, r2
    3e56:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e58:	071b      	lsls	r3, r3, #28
    3e5a:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e5c:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e5e:	2240      	movs	r2, #64	; 0x40
    3e60:	2306      	movs	r3, #6
    3e62:	33ff      	adds	r3, #255	; 0xff
    3e64:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    3e66:	0149      	lsls	r1, r1, #5
    3e68:	4b3a      	ldr	r3, [pc, #232]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3e6a:	1859      	adds	r1, r3, r1
    3e6c:	2300      	movs	r3, #0
    3e6e:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    3e70:	2000      	movs	r0, #0
}
    3e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e74:	20e0      	movs	r0, #224	; 0xe0
    3e76:	05c0      	lsls	r0, r0, #23
    3e78:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e7a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e7c:	0492      	lsls	r2, r2, #18
    3e7e:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e80:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e82:	0700      	lsls	r0, r0, #28
    3e84:	4302      	orrs	r2, r0
    3e86:	617a      	str	r2, [r7, #20]
    3e88:	2506      	movs	r5, #6
    3e8a:	35ff      	adds	r5, #255	; 0xff
    3e8c:	2640      	movs	r6, #64	; 0x40
    3e8e:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e90:	2782      	movs	r7, #130	; 0x82
    3e92:	007f      	lsls	r7, r7, #1
    3e94:	2280      	movs	r2, #128	; 0x80
    3e96:	55e2      	strb	r2, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    3e98:	482e      	ldr	r0, [pc, #184]	; (3f54 <_usb_d_dev_ep_enable+0x2d8>)
    3e9a:	0149      	lsls	r1, r1, #5
    3e9c:	1841      	adds	r1, r0, r1
    3e9e:	2200      	movs	r2, #0
    3ea0:	728a      	strb	r2, [r1, #10]
    3ea2:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ea4:	3260      	adds	r2, #96	; 0x60
    3ea6:	4694      	mov	ip, r2
    3ea8:	4484      	add	ip, r0
    3eaa:	0099      	lsls	r1, r3, #2
    3eac:	18ca      	adds	r2, r1, r3
    3eae:	0092      	lsls	r2, r2, #2
    3eb0:	4462      	add	r2, ip
    3eb2:	3226      	adds	r2, #38	; 0x26
    3eb4:	7814      	ldrb	r4, [r2, #0]
    3eb6:	220f      	movs	r2, #15
    3eb8:	4022      	ands	r2, r4
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3eba:	18cc      	adds	r4, r1, r3
    3ebc:	00a4      	lsls	r4, r4, #2
    3ebe:	1904      	adds	r4, r0, r4
    3ec0:	3480      	adds	r4, #128	; 0x80
    3ec2:	6824      	ldr	r4, [r4, #0]
	bank->ADDR.reg          = addr;
    3ec4:	0152      	lsls	r2, r2, #5
    3ec6:	5014      	str	r4, [r2, r0]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3ec8:	18c9      	adds	r1, r1, r3
    3eca:	0089      	lsls	r1, r1, #2
    3ecc:	4461      	add	r1, ip
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3ece:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    3ed0:	1880      	adds	r0, r0, r2
    3ed2:	6843      	ldr	r3, [r0, #4]
    3ed4:	0489      	lsls	r1, r1, #18
    3ed6:	0909      	lsrs	r1, r1, #4
    3ed8:	4c20      	ldr	r4, [pc, #128]	; (3f5c <_usb_d_dev_ep_enable+0x2e0>)
    3eda:	4023      	ands	r3, r4
    3edc:	430b      	orrs	r3, r1
    3ede:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3ee0:	6843      	ldr	r3, [r0, #4]
    3ee2:	0b9b      	lsrs	r3, r3, #14
    3ee4:	039b      	lsls	r3, r3, #14
    3ee6:	6043      	str	r3, [r0, #4]
    3ee8:	4b19      	ldr	r3, [pc, #100]	; (3f50 <_usb_d_dev_ep_enable+0x2d4>)
    3eea:	18d3      	adds	r3, r2, r3
    3eec:	21b0      	movs	r1, #176	; 0xb0
    3eee:	55d9      	strb	r1, [r3, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ef0:	555e      	strb	r6, [r3, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3ef2:	4b1b      	ldr	r3, [pc, #108]	; (3f60 <_usb_d_dev_ep_enable+0x2e4>)
    3ef4:	469c      	mov	ip, r3
    3ef6:	4462      	add	r2, ip
    3ef8:	2310      	movs	r3, #16
    3efa:	7013      	strb	r3, [r2, #0]
	return USB_OK;
    3efc:	2000      	movs	r0, #0
    3efe:	e7b8      	b.n	3e72 <_usb_d_dev_ep_enable+0x1f6>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f00:	20a0      	movs	r0, #160	; 0xa0
    3f02:	05c0      	lsls	r0, r0, #23
    3f04:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f06:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f08:	0492      	lsls	r2, r2, #18
    3f0a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f0c:	2005      	movs	r0, #5
    3f0e:	e7b8      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f10:	20c0      	movs	r0, #192	; 0xc0
    3f12:	0580      	lsls	r0, r0, #22
    3f14:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f16:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f18:	0492      	lsls	r2, r2, #18
    3f1a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f1c:	2003      	movs	r0, #3
    3f1e:	e7b0      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f20:	20c0      	movs	r0, #192	; 0xc0
    3f22:	05c0      	lsls	r0, r0, #23
    3f24:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f26:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f28:	0492      	lsls	r2, r2, #18
    3f2a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f2c:	2006      	movs	r0, #6
    3f2e:	e7a8      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f30:	2080      	movs	r0, #128	; 0x80
    3f32:	05c0      	lsls	r0, r0, #23
    3f34:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f36:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f38:	0492      	lsls	r2, r2, #18
    3f3a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f3c:	2004      	movs	r0, #4
    3f3e:	e7a0      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f40:	2080      	movs	r0, #128	; 0x80
    3f42:	0580      	lsls	r0, r0, #22
    3f44:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f46:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f48:	0492      	lsls	r2, r2, #18
    3f4a:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3f4c:	2002      	movs	r0, #2
    3f4e:	e798      	b.n	3e82 <_usb_d_dev_ep_enable+0x206>
    3f50:	41005000 	.word	0x41005000
    3f54:	20001070 	.word	0x20001070
    3f58:	0fffc000 	.word	0x0fffc000
    3f5c:	f0003fff 	.word	0xf0003fff
    3f60:	41005109 	.word	0x41005109

00003f64 <_usb_d_dev_ep_stall>:
{
    3f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3f66:	230f      	movs	r3, #15
    3f68:	4003      	ands	r3, r0
    3f6a:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3f6c:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d009      	beq.n	3f86 <_usb_d_dev_ep_stall+0x22>
    3f72:	001a      	movs	r2, r3
    3f74:	2800      	cmp	r0, #0
    3f76:	db04      	blt.n	3f82 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    3f78:	2b02      	cmp	r3, #2
    3f7a:	d905      	bls.n	3f88 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    3f7c:	2012      	movs	r0, #18
    3f7e:	4240      	negs	r0, r0
    3f80:	e019      	b.n	3fb6 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3f82:	1c9a      	adds	r2, r3, #2
    3f84:	e7f8      	b.n	3f78 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    3f86:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    3f88:	2901      	cmp	r1, #1
    3f8a:	d015      	beq.n	3fb8 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3f8c:	2900      	cmp	r1, #0
    3f8e:	d036      	beq.n	3ffe <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f90:	0093      	lsls	r3, r2, #2
    3f92:	189b      	adds	r3, r3, r2
    3f94:	009b      	lsls	r3, r3, #2
    3f96:	4a47      	ldr	r2, [pc, #284]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    3f98:	18d2      	adds	r2, r2, r3
    3f9a:	3286      	adds	r2, #134	; 0x86
    3f9c:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f9e:	230f      	movs	r3, #15
    3fa0:	4013      	ands	r3, r2
    3fa2:	015b      	lsls	r3, r3, #5
    3fa4:	4a44      	ldr	r2, [pc, #272]	; (40b8 <_usb_d_dev_ep_stall+0x154>)
    3fa6:	4694      	mov	ip, r2
    3fa8:	4463      	add	r3, ip
    3faa:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3fac:	2310      	movs	r3, #16
    3fae:	40a3      	lsls	r3, r4
    3fb0:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    3fb2:	1e43      	subs	r3, r0, #1
    3fb4:	4198      	sbcs	r0, r3
}
    3fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3fb8:	2510      	movs	r5, #16
    3fba:	40a5      	lsls	r5, r4
    3fbc:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3fbe:	493d      	ldr	r1, [pc, #244]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    3fc0:	0090      	lsls	r0, r2, #2
    3fc2:	1883      	adds	r3, r0, r2
    3fc4:	009b      	lsls	r3, r3, #2
    3fc6:	18cb      	adds	r3, r1, r3
    3fc8:	3386      	adds	r3, #134	; 0x86
    3fca:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3fcc:	230f      	movs	r3, #15
    3fce:	4033      	ands	r3, r6
    3fd0:	015e      	lsls	r6, r3, #5
    3fd2:	4f39      	ldr	r7, [pc, #228]	; (40b8 <_usb_d_dev_ep_stall+0x154>)
    3fd4:	46bc      	mov	ip, r7
    3fd6:	4466      	add	r6, ip
    3fd8:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3fda:	2520      	movs	r5, #32
    3fdc:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3fde:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3fe0:	015b      	lsls	r3, r3, #5
    3fe2:	4d36      	ldr	r5, [pc, #216]	; (40bc <_usb_d_dev_ep_stall+0x158>)
    3fe4:	46ac      	mov	ip, r5
    3fe6:	4463      	add	r3, ip
    3fe8:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    3fea:	1882      	adds	r2, r0, r2
    3fec:	0092      	lsls	r2, r2, #2
    3fee:	188a      	adds	r2, r1, r2
    3ff0:	3280      	adds	r2, #128	; 0x80
    3ff2:	79d3      	ldrb	r3, [r2, #7]
    3ff4:	2108      	movs	r1, #8
    3ff6:	430b      	orrs	r3, r1
    3ff8:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3ffa:	2000      	movs	r0, #0
    3ffc:	e7db      	b.n	3fb6 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3ffe:	0093      	lsls	r3, r2, #2
    4000:	189b      	adds	r3, r3, r2
    4002:	0099      	lsls	r1, r3, #2
    4004:	4b2b      	ldr	r3, [pc, #172]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    4006:	185b      	adds	r3, r3, r1
    4008:	3386      	adds	r3, #134	; 0x86
    400a:	781b      	ldrb	r3, [r3, #0]
    400c:	210f      	movs	r1, #15
    400e:	400b      	ands	r3, r1
    4010:	015d      	lsls	r5, r3, #5
    4012:	492b      	ldr	r1, [pc, #172]	; (40c0 <_usb_d_dev_ep_stall+0x15c>)
    4014:	468c      	mov	ip, r1
    4016:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4018:	2183      	movs	r1, #131	; 0x83
    401a:	0049      	lsls	r1, r1, #1
    401c:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    401e:	39f6      	subs	r1, #246	; 0xf6
    4020:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4022:	2000      	movs	r0, #0
	if (!is_stalled) {
    4024:	420e      	tst	r6, r1
    4026:	d0c6      	beq.n	3fb6 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4028:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    402a:	3005      	adds	r0, #5
    402c:	30ff      	adds	r0, #255	; 0xff
    402e:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4030:	2120      	movs	r1, #32
    4032:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4034:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4036:	015b      	lsls	r3, r3, #5
    4038:	4e22      	ldr	r6, [pc, #136]	; (40c4 <_usb_d_dev_ep_stall+0x160>)
    403a:	46b4      	mov	ip, r6
    403c:	4463      	add	r3, ip
    403e:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4040:	2308      	movs	r3, #8
    4042:	33ff      	adds	r3, #255	; 0xff
    4044:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4046:	420b      	tst	r3, r1
    4048:	d009      	beq.n	405e <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    404a:	2308      	movs	r3, #8
    404c:	33ff      	adds	r3, #255	; 0xff
    404e:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4050:	3b07      	subs	r3, #7
    4052:	3bff      	subs	r3, #255	; 0xff
    4054:	40a3      	lsls	r3, r4
    4056:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4058:	2182      	movs	r1, #130	; 0x82
    405a:	0049      	lsls	r1, r1, #1
    405c:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    405e:	0093      	lsls	r3, r2, #2
    4060:	189b      	adds	r3, r3, r2
    4062:	0099      	lsls	r1, r3, #2
    4064:	4b13      	ldr	r3, [pc, #76]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    4066:	185b      	adds	r3, r3, r1
    4068:	3380      	adds	r3, #128	; 0x80
    406a:	79d9      	ldrb	r1, [r3, #7]
    406c:	2307      	movs	r3, #7
    406e:	400b      	ands	r3, r1
    4070:	2b01      	cmp	r3, #1
    4072:	d00b      	beq.n	408c <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    4074:	0093      	lsls	r3, r2, #2
    4076:	189a      	adds	r2, r3, r2
    4078:	0092      	lsls	r2, r2, #2
    407a:	4b0e      	ldr	r3, [pc, #56]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    407c:	189b      	adds	r3, r3, r2
    407e:	3380      	adds	r3, #128	; 0x80
    4080:	79da      	ldrb	r2, [r3, #7]
    4082:	2108      	movs	r1, #8
    4084:	438a      	bics	r2, r1
    4086:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4088:	2000      	movs	r0, #0
    408a:	e794      	b.n	3fb6 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    408c:	3306      	adds	r3, #6
    408e:	33ff      	adds	r3, #255	; 0xff
    4090:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4092:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4094:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4096:	4219      	tst	r1, r3
    4098:	d000      	beq.n	409c <_usb_d_dev_ep_stall+0x138>
    409a:	e78c      	b.n	3fb6 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    409c:	0093      	lsls	r3, r2, #2
    409e:	189a      	adds	r2, r3, r2
    40a0:	0092      	lsls	r2, r2, #2
    40a2:	4b04      	ldr	r3, [pc, #16]	; (40b4 <_usb_d_dev_ep_stall+0x150>)
    40a4:	189b      	adds	r3, r3, r2
    40a6:	3380      	adds	r3, #128	; 0x80
    40a8:	79da      	ldrb	r2, [r3, #7]
    40aa:	2108      	movs	r1, #8
    40ac:	438a      	bics	r2, r1
    40ae:	71da      	strb	r2, [r3, #7]
    40b0:	e781      	b.n	3fb6 <_usb_d_dev_ep_stall+0x52>
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	20001070 	.word	0x20001070
    40b8:	41005100 	.word	0x41005100
    40bc:	41005109 	.word	0x41005109
    40c0:	41005000 	.word	0x41005000
    40c4:	41005108 	.word	0x41005108

000040c8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    40c8:	b570      	push	{r4, r5, r6, lr}
    40ca:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    40cc:	230f      	movs	r3, #15
    40ce:	4018      	ands	r0, r3
    40d0:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    40d2:	4b16      	ldr	r3, [pc, #88]	; (412c <_usb_d_dev_ep_read_req+0x64>)
    40d4:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    40d6:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    40d8:	685b      	ldr	r3, [r3, #4]
    40da:	049b      	lsls	r3, r3, #18
    40dc:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    40de:	2802      	cmp	r0, #2
    40e0:	d81a      	bhi.n	4118 <_usb_d_dev_ep_read_req+0x50>
    40e2:	2d00      	cmp	r5, #0
    40e4:	d01b      	beq.n	411e <_usb_d_dev_ep_read_req+0x56>
    40e6:	4b12      	ldr	r3, [pc, #72]	; (4130 <_usb_d_dev_ep_read_req+0x68>)
    40e8:	469c      	mov	ip, r3
    40ea:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    40ec:	2380      	movs	r3, #128	; 0x80
    40ee:	005b      	lsls	r3, r3, #1
    40f0:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    40f2:	2b11      	cmp	r3, #17
    40f4:	d116      	bne.n	4124 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    40f6:	2308      	movs	r3, #8
    40f8:	33ff      	adds	r3, #255	; 0xff
    40fa:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    40fc:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    40fe:	06db      	lsls	r3, r3, #27
    4100:	d400      	bmi.n	4104 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4102:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    4104:	2208      	movs	r2, #8
    4106:	0028      	movs	r0, r5
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <_usb_d_dev_ep_read_req+0x6c>)
    410a:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    410c:	2210      	movs	r2, #16
    410e:	2308      	movs	r3, #8
    4110:	33ff      	adds	r3, #255	; 0xff
    4112:	54e2      	strb	r2, [r4, r3]
	return bytes;
    4114:	0030      	movs	r0, r6
    4116:	e7f4      	b.n	4102 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    4118:	2012      	movs	r0, #18
    411a:	4240      	negs	r0, r0
    411c:	e7f1      	b.n	4102 <_usb_d_dev_ep_read_req+0x3a>
    411e:	2012      	movs	r0, #18
    4120:	4240      	negs	r0, r0
    4122:	e7ee      	b.n	4102 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    4124:	2013      	movs	r0, #19
    4126:	4240      	negs	r0, r0
    4128:	e7eb      	b.n	4102 <_usb_d_dev_ep_read_req+0x3a>
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	20001070 	.word	0x20001070
    4130:	41005000 	.word	0x41005000
    4134:	000078b1 	.word	0x000078b1

00004138 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4138:	b5f0      	push	{r4, r5, r6, r7, lr}
    413a:	46de      	mov	lr, fp
    413c:	4657      	mov	r7, sl
    413e:	464e      	mov	r6, r9
    4140:	4645      	mov	r5, r8
    4142:	b5e0      	push	{r5, r6, r7, lr}
    4144:	b085      	sub	sp, #20
    4146:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4148:	7a06      	ldrb	r6, [r0, #8]
    414a:	230f      	movs	r3, #15
    414c:	4033      	ands	r3, r6
    414e:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4150:	2b00      	cmp	r3, #0
    4152:	d100      	bne.n	4156 <_usb_d_dev_ep_trans+0x1e>
    4154:	e0d3      	b.n	42fe <_usb_d_dev_ep_trans+0x1c6>
    4156:	0018      	movs	r0, r3
    4158:	2e00      	cmp	r6, #0
    415a:	db39      	blt.n	41d0 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    415c:	0004      	movs	r4, r0
    415e:	4a73      	ldr	r2, [pc, #460]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    4160:	3260      	adds	r2, #96	; 0x60
    4162:	1c41      	adds	r1, r0, #1
    4164:	008d      	lsls	r5, r1, #2
    4166:	186d      	adds	r5, r5, r1
    4168:	00ad      	lsls	r5, r5, #2
    416a:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    416c:	0081      	lsls	r1, r0, #2
    416e:	1809      	adds	r1, r1, r0
    4170:	0089      	lsls	r1, r1, #2
    4172:	1852      	adds	r2, r2, r1
    4174:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    4176:	4a6e      	ldr	r2, [pc, #440]	; (4330 <_usb_d_dev_ep_trans+0x1f8>)
    4178:	4291      	cmp	r1, r2
    417a:	d02b      	beq.n	41d4 <_usb_d_dev_ep_trans+0x9c>
    417c:	1e4f      	subs	r7, r1, #1
    417e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    4180:	4642      	mov	r2, r8
    4182:	6852      	ldr	r2, [r2, #4]
    4184:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4186:	2b02      	cmp	r3, #2
    4188:	d900      	bls.n	418c <_usb_d_dev_ep_trans+0x54>
    418a:	e0a4      	b.n	42d6 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    418c:	4643      	mov	r3, r8
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	4868      	ldr	r0, [pc, #416]	; (4334 <_usb_d_dev_ep_trans+0x1fc>)
    4192:	4283      	cmp	r3, r0
    4194:	d920      	bls.n	41d8 <_usb_d_dev_ep_trans+0xa0>
    4196:	1898      	adds	r0, r3, r2
    4198:	9001      	str	r0, [sp, #4]
    419a:	4867      	ldr	r0, [pc, #412]	; (4338 <_usb_d_dev_ep_trans+0x200>)
    419c:	4684      	mov	ip, r0
    419e:	9801      	ldr	r0, [sp, #4]
    41a0:	4560      	cmp	r0, ip
    41a2:	d819      	bhi.n	41d8 <_usb_d_dev_ep_trans+0xa0>
    41a4:	079b      	lsls	r3, r3, #30
    41a6:	d117      	bne.n	41d8 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    41a8:	2e00      	cmp	r6, #0
    41aa:	db32      	blt.n	4212 <_usb_d_dev_ep_trans+0xda>
    41ac:	4291      	cmp	r1, r2
    41ae:	d900      	bls.n	41b2 <_usb_d_dev_ep_trans+0x7a>
    41b0:	e0af      	b.n	4312 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    41b2:	2f00      	cmp	r7, #0
    41b4:	d030      	beq.n	4218 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    41b6:	00a3      	lsls	r3, r4, #2
    41b8:	191b      	adds	r3, r3, r4
    41ba:	009a      	lsls	r2, r3, #2
    41bc:	4b5b      	ldr	r3, [pc, #364]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    41be:	189b      	adds	r3, r3, r2
    41c0:	3380      	adds	r3, #128	; 0x80
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d100      	bne.n	41ca <_usb_d_dev_ep_trans+0x92>
    41c8:	e08b      	b.n	42e2 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    41ca:	2300      	movs	r3, #0
    41cc:	4699      	mov	r9, r3
    41ce:	e00f      	b.n	41f0 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    41d0:	1c98      	adds	r0, r3, #2
    41d2:	e7c3      	b.n	415c <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    41d4:	000f      	movs	r7, r1
    41d6:	e7d3      	b.n	4180 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    41d8:	00a3      	lsls	r3, r4, #2
    41da:	191b      	adds	r3, r3, r4
    41dc:	009a      	lsls	r2, r3, #2
    41de:	4b53      	ldr	r3, [pc, #332]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    41e0:	189b      	adds	r3, r3, r2
    41e2:	3380      	adds	r3, #128	; 0x80
    41e4:	681b      	ldr	r3, [r3, #0]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d100      	bne.n	41ec <_usb_d_dev_ep_trans+0xb4>
    41ea:	e077      	b.n	42dc <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    41ec:	2301      	movs	r3, #1
    41ee:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    41f0:	00a3      	lsls	r3, r4, #2
    41f2:	191b      	adds	r3, r3, r4
    41f4:	009a      	lsls	r2, r3, #2
    41f6:	4b4d      	ldr	r3, [pc, #308]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    41f8:	189b      	adds	r3, r3, r2
    41fa:	3380      	adds	r3, #128	; 0x80
    41fc:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    41fe:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    4200:	071b      	lsls	r3, r3, #28
    4202:	d50c      	bpl.n	421e <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4204:	b005      	add	sp, #20
    4206:	bc3c      	pop	{r2, r3, r4, r5}
    4208:	4690      	mov	r8, r2
    420a:	4699      	mov	r9, r3
    420c:	46a2      	mov	sl, r4
    420e:	46ab      	mov	fp, r5
    4210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    4212:	2300      	movs	r3, #0
    4214:	4699      	mov	r9, r3
    4216:	e7eb      	b.n	41f0 <_usb_d_dev_ep_trans+0xb8>
    4218:	2300      	movs	r3, #0
    421a:	4699      	mov	r9, r3
    421c:	e7e8      	b.n	41f0 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    421e:	a803      	add	r0, sp, #12
    4220:	4b46      	ldr	r3, [pc, #280]	; (433c <_usb_d_dev_ep_trans+0x204>)
    4222:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4224:	00a3      	lsls	r3, r4, #2
    4226:	191b      	adds	r3, r3, r4
    4228:	009a      	lsls	r2, r3, #2
    422a:	4b40      	ldr	r3, [pc, #256]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    422c:	189b      	adds	r3, r3, r2
    422e:	3380      	adds	r3, #128	; 0x80
    4230:	79db      	ldrb	r3, [r3, #7]
    4232:	065b      	lsls	r3, r3, #25
    4234:	d444      	bmi.n	42c0 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    4236:	00a3      	lsls	r3, r4, #2
    4238:	191b      	adds	r3, r3, r4
    423a:	009b      	lsls	r3, r3, #2
    423c:	4a3b      	ldr	r2, [pc, #236]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    423e:	4693      	mov	fp, r2
    4240:	449b      	add	fp, r3
    4242:	2380      	movs	r3, #128	; 0x80
    4244:	445b      	add	r3, fp
    4246:	469a      	mov	sl, r3
    4248:	79db      	ldrb	r3, [r3, #7]
    424a:	2240      	movs	r2, #64	; 0x40
    424c:	4313      	orrs	r3, r2
    424e:	4652      	mov	r2, sl
    4250:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    4252:	a803      	add	r0, sp, #12
    4254:	4b3a      	ldr	r3, [pc, #232]	; (4340 <_usb_d_dev_ep_trans+0x208>)
    4256:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    4258:	465b      	mov	r3, fp
    425a:	4642      	mov	r2, r8
    425c:	6812      	ldr	r2, [r2, #0]
    425e:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    4260:	4642      	mov	r2, r8
    4262:	6852      	ldr	r2, [r2, #4]
    4264:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    4266:	2300      	movs	r3, #0
    4268:	465a      	mov	r2, fp
    426a:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    426c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    426e:	01d2      	lsls	r2, r2, #7
    4270:	4653      	mov	r3, sl
    4272:	79d9      	ldrb	r1, [r3, #7]
    4274:	237f      	movs	r3, #127	; 0x7f
    4276:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    4278:	4649      	mov	r1, r9
    427a:	0149      	lsls	r1, r1, #5
    427c:	4313      	orrs	r3, r2
    427e:	2220      	movs	r2, #32
    4280:	4393      	bics	r3, r2
    4282:	430b      	orrs	r3, r1
    4284:	4652      	mov	r2, sl
    4286:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4288:	4643      	mov	r3, r8
    428a:	7a5b      	ldrb	r3, [r3, #9]
    428c:	2200      	movs	r2, #0
    428e:	2b00      	cmp	r3, #0
    4290:	d002      	beq.n	4298 <_usb_d_dev_ep_trans+0x160>
    4292:	427a      	negs	r2, r7
    4294:	417a      	adcs	r2, r7
    4296:	b2d2      	uxtb	r2, r2
    4298:	00a3      	lsls	r3, r4, #2
    429a:	191c      	adds	r4, r3, r4
    429c:	00a4      	lsls	r4, r4, #2
    429e:	4b23      	ldr	r3, [pc, #140]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    42a0:	191b      	adds	r3, r3, r4
    42a2:	3380      	adds	r3, #128	; 0x80
    42a4:	0112      	lsls	r2, r2, #4
    42a6:	79df      	ldrb	r7, [r3, #7]
    42a8:	2110      	movs	r1, #16
    42aa:	438f      	bics	r7, r1
    42ac:	4317      	orrs	r7, r2
    42ae:	71df      	strb	r7, [r3, #7]
	if (dir) {
    42b0:	2e00      	cmp	r6, #0
    42b2:	db0a      	blt.n	42ca <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    42b4:	2100      	movs	r1, #0
    42b6:	0028      	movs	r0, r5
    42b8:	4b22      	ldr	r3, [pc, #136]	; (4344 <_usb_d_dev_ep_trans+0x20c>)
    42ba:	4798      	blx	r3
	return ERR_NONE;
    42bc:	2000      	movs	r0, #0
    42be:	e7a1      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    42c0:	a803      	add	r0, sp, #12
    42c2:	4b1f      	ldr	r3, [pc, #124]	; (4340 <_usb_d_dev_ep_trans+0x208>)
    42c4:	4798      	blx	r3
		return USB_BUSY;
    42c6:	2001      	movs	r0, #1
    42c8:	e79c      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    42ca:	2100      	movs	r1, #0
    42cc:	0028      	movs	r0, r5
    42ce:	4b1e      	ldr	r3, [pc, #120]	; (4348 <_usb_d_dev_ep_trans+0x210>)
    42d0:	4798      	blx	r3
	return ERR_NONE;
    42d2:	2000      	movs	r0, #0
    42d4:	e796      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    42d6:	2012      	movs	r0, #18
    42d8:	4240      	negs	r0, r0
    42da:	e793      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    42dc:	2013      	movs	r0, #19
    42de:	4240      	negs	r0, r0
    42e0:	e790      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    42e2:	2012      	movs	r0, #18
    42e4:	4240      	negs	r0, r0
    42e6:	e78d      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    42e8:	2013      	movs	r0, #19
    42ea:	4240      	negs	r0, r0
    42ec:	e78a      	b.n	4204 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    42ee:	4643      	mov	r3, r8
    42f0:	685a      	ldr	r2, [r3, #4]
    42f2:	0597      	lsls	r7, r2, #22
    42f4:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    42f6:	4d0d      	ldr	r5, [pc, #52]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    42f8:	3574      	adds	r5, #116	; 0x74
    42fa:	2400      	movs	r4, #0
    42fc:	e746      	b.n	418c <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    42fe:	4a0b      	ldr	r2, [pc, #44]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    4300:	3260      	adds	r2, #96	; 0x60
    4302:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    4304:	4a0a      	ldr	r2, [pc, #40]	; (4330 <_usb_d_dev_ep_trans+0x1f8>)
    4306:	4291      	cmp	r1, r2
    4308:	d0f1      	beq.n	42ee <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    430a:	4d08      	ldr	r5, [pc, #32]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    430c:	3574      	adds	r5, #116	; 0x74
    430e:	2400      	movs	r4, #0
    4310:	e734      	b.n	417c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    4312:	00a3      	lsls	r3, r4, #2
    4314:	191b      	adds	r3, r3, r4
    4316:	009a      	lsls	r2, r3, #2
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <_usb_d_dev_ep_trans+0x1f4>)
    431a:	189b      	adds	r3, r3, r2
    431c:	3380      	adds	r3, #128	; 0x80
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	2b00      	cmp	r3, #0
    4322:	d0e1      	beq.n	42e8 <_usb_d_dev_ep_trans+0x1b0>
    4324:	2301      	movs	r3, #1
    4326:	4699      	mov	r9, r3
    4328:	e762      	b.n	41f0 <_usb_d_dev_ep_trans+0xb8>
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	20001070 	.word	0x20001070
    4330:	000003ff 	.word	0x000003ff
    4334:	1fffffff 	.word	0x1fffffff
    4338:	20007fff 	.word	0x20007fff
    433c:	000017f1 	.word	0x000017f1
    4340:	000017ff 	.word	0x000017ff
    4344:	00003705 	.word	0x00003705
    4348:	0000355d 	.word	0x0000355d

0000434c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    434c:	1e0b      	subs	r3, r1, #0
    434e:	d006      	beq.n	435e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    4350:	2801      	cmp	r0, #1
    4352:	d006      	beq.n	4362 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    4354:	2800      	cmp	r0, #0
    4356:	d101      	bne.n	435c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4358:	4a03      	ldr	r2, [pc, #12]	; (4368 <_usb_d_dev_register_callback+0x1c>)
    435a:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    435c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    435e:	4b03      	ldr	r3, [pc, #12]	; (436c <_usb_d_dev_register_callback+0x20>)
    4360:	e7f6      	b.n	4350 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4362:	4a01      	ldr	r2, [pc, #4]	; (4368 <_usb_d_dev_register_callback+0x1c>)
    4364:	6653      	str	r3, [r2, #100]	; 0x64
    4366:	e7f9      	b.n	435c <_usb_d_dev_register_callback+0x10>
    4368:	20001070 	.word	0x20001070
    436c:	000032c1 	.word	0x000032c1

00004370 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4370:	1e0b      	subs	r3, r1, #0
    4372:	d008      	beq.n	4386 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4374:	2800      	cmp	r0, #0
    4376:	d008      	beq.n	438a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4378:	2801      	cmp	r0, #1
    437a:	d009      	beq.n	4390 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    437c:	2802      	cmp	r0, #2
    437e:	d106      	bne.n	438e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4380:	4a05      	ldr	r2, [pc, #20]	; (4398 <_usb_d_dev_register_ep_callback+0x28>)
    4382:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    4384:	e003      	b.n	438e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4386:	4b05      	ldr	r3, [pc, #20]	; (439c <_usb_d_dev_register_ep_callback+0x2c>)
    4388:	e7f4      	b.n	4374 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    438a:	4a03      	ldr	r2, [pc, #12]	; (4398 <_usb_d_dev_register_ep_callback+0x28>)
    438c:	6693      	str	r3, [r2, #104]	; 0x68
}
    438e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4390:	4a01      	ldr	r2, [pc, #4]	; (4398 <_usb_d_dev_register_ep_callback+0x28>)
    4392:	66d3      	str	r3, [r2, #108]	; 0x6c
    4394:	e7fb      	b.n	438e <_usb_d_dev_register_ep_callback+0x1e>
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	20001070 	.word	0x20001070
    439c:	000032c1 	.word	0x000032c1

000043a0 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    43a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43a2:	46c6      	mov	lr, r8
    43a4:	b500      	push	{lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    43a6:	4b83      	ldr	r3, [pc, #524]	; (45b4 <USB_Handler+0x214>)
    43a8:	8c1e      	ldrh	r6, [r3, #32]
    43aa:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    43ac:	2e00      	cmp	r6, #0
    43ae:	d005      	beq.n	43bc <USB_Handler+0x1c>
    43b0:	4c81      	ldr	r4, [pc, #516]	; (45b8 <USB_Handler+0x218>)
    43b2:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    43b4:	2500      	movs	r5, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    43b6:	4b80      	ldr	r3, [pc, #512]	; (45b8 <USB_Handler+0x218>)
    43b8:	4698      	mov	r8, r3
    43ba:	e0bb      	b.n	4534 <USB_Handler+0x194>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    43bc:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    43be:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    43c0:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    43c2:	075a      	lsls	r2, r3, #29
    43c4:	d417      	bmi.n	43f6 <USB_Handler+0x56>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    43c6:	059a      	lsls	r2, r3, #22
    43c8:	d41e      	bmi.n	4408 <USB_Handler+0x68>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    43ca:	061a      	lsls	r2, r3, #24
    43cc:	d440      	bmi.n	4450 <USB_Handler+0xb0>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    43ce:	2270      	movs	r2, #112	; 0x70
    43d0:	421a      	tst	r2, r3
    43d2:	d146      	bne.n	4462 <USB_Handler+0xc2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    43d4:	071a      	lsls	r2, r3, #28
    43d6:	d460      	bmi.n	449a <USB_Handler+0xfa>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    43d8:	07db      	lsls	r3, r3, #31
    43da:	d5e9      	bpl.n	43b0 <USB_Handler+0x10>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    43dc:	4b75      	ldr	r3, [pc, #468]	; (45b4 <USB_Handler+0x214>)
    43de:	4a77      	ldr	r2, [pc, #476]	; (45bc <USB_Handler+0x21c>)
    43e0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    43e2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    43e4:	3a92      	subs	r2, #146	; 0x92
    43e6:	3aff      	subs	r2, #255	; 0xff
    43e8:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    43ea:	4b73      	ldr	r3, [pc, #460]	; (45b8 <USB_Handler+0x218>)
    43ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    43ee:	2100      	movs	r1, #0
    43f0:	2004      	movs	r0, #4
    43f2:	4798      	blx	r3
    43f4:	e005      	b.n	4402 <USB_Handler+0x62>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    43f6:	2204      	movs	r2, #4
    43f8:	4b6e      	ldr	r3, [pc, #440]	; (45b4 <USB_Handler+0x214>)
    43fa:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    43fc:	4b6e      	ldr	r3, [pc, #440]	; (45b8 <USB_Handler+0x218>)
    43fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4400:	4798      	blx	r3

	_usb_d_dev_handler();
}
    4402:	bc04      	pop	{r2}
    4404:	4690      	mov	r8, r2
    4406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4408:	4b6a      	ldr	r3, [pc, #424]	; (45b4 <USB_Handler+0x214>)
    440a:	4a6c      	ldr	r2, [pc, #432]	; (45bc <USB_Handler+0x21c>)
    440c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    440e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4410:	3a92      	subs	r2, #146	; 0x92
    4412:	3aff      	subs	r2, #255	; 0xff
    4414:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4416:	4b68      	ldr	r3, [pc, #416]	; (45b8 <USB_Handler+0x218>)
    4418:	891b      	ldrh	r3, [r3, #8]
    441a:	071b      	lsls	r3, r3, #28
    441c:	0f1b      	lsrs	r3, r3, #28
    441e:	2b03      	cmp	r3, #3
    4420:	d00c      	beq.n	443c <USB_Handler+0x9c>
    4422:	4b65      	ldr	r3, [pc, #404]	; (45b8 <USB_Handler+0x218>)
    4424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4426:	071b      	lsls	r3, r3, #28
    4428:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    442a:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    442c:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    442e:	2b03      	cmp	r3, #3
    4430:	d005      	beq.n	443e <USB_Handler+0x9e>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    4432:	4b61      	ldr	r3, [pc, #388]	; (45b8 <USB_Handler+0x218>)
    4434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4436:	2003      	movs	r0, #3
    4438:	4798      	blx	r3
    443a:	e7e2      	b.n	4402 <USB_Handler+0x62>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    443c:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    443e:	0152      	lsls	r2, r2, #5
    4440:	4b5d      	ldr	r3, [pc, #372]	; (45b8 <USB_Handler+0x218>)
    4442:	189b      	adds	r3, r3, r2
    4444:	8919      	ldrh	r1, [r3, #8]
    4446:	0449      	lsls	r1, r1, #17
    4448:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    444a:	2200      	movs	r2, #0
    444c:	811a      	strh	r2, [r3, #8]
    444e:	e7f0      	b.n	4432 <USB_Handler+0x92>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4450:	2280      	movs	r2, #128	; 0x80
    4452:	4b58      	ldr	r3, [pc, #352]	; (45b4 <USB_Handler+0x214>)
    4454:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4456:	4b58      	ldr	r3, [pc, #352]	; (45b8 <USB_Handler+0x218>)
    4458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    445a:	2100      	movs	r1, #0
    445c:	2005      	movs	r0, #5
    445e:	4798      	blx	r3
    4460:	e7cf      	b.n	4402 <USB_Handler+0x62>
    4462:	4b54      	ldr	r3, [pc, #336]	; (45b4 <USB_Handler+0x214>)
    4464:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4466:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4468:	4a54      	ldr	r2, [pc, #336]	; (45bc <USB_Handler+0x21c>)
    446a:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    446c:	4b54      	ldr	r3, [pc, #336]	; (45c0 <USB_Handler+0x220>)
    446e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4470:	069b      	lsls	r3, r3, #26
    4472:	d40c      	bmi.n	448e <USB_Handler+0xee>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4474:	4952      	ldr	r1, [pc, #328]	; (45c0 <USB_Handler+0x220>)
	tmp &= mask;
    4476:	3a32      	subs	r2, #50	; 0x32
    4478:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    447a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    447c:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    447e:	2bd0      	cmp	r3, #208	; 0xd0
    4480:	d1fb      	bne.n	447a <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4482:	4b4d      	ldr	r3, [pc, #308]	; (45b8 <USB_Handler+0x218>)
    4484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4486:	2100      	movs	r1, #0
    4488:	2002      	movs	r0, #2
    448a:	4798      	blx	r3
    448c:	e7b9      	b.n	4402 <USB_Handler+0x62>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    448e:	494c      	ldr	r1, [pc, #304]	; (45c0 <USB_Handler+0x220>)
	tmp &= mask;
    4490:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    4492:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    4494:	421a      	tst	r2, r3
    4496:	d0fc      	beq.n	4492 <USB_Handler+0xf2>
    4498:	e7f3      	b.n	4482 <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    449a:	4b46      	ldr	r3, [pc, #280]	; (45b4 <USB_Handler+0x214>)
    449c:	2100      	movs	r1, #0
    449e:	2280      	movs	r2, #128	; 0x80
    44a0:	0052      	lsls	r2, r2, #1
    44a2:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    44a4:	3af8      	subs	r2, #248	; 0xf8
    44a6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    44a8:	3268      	adds	r2, #104	; 0x68
    44aa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    44ac:	4a43      	ldr	r2, [pc, #268]	; (45bc <USB_Handler+0x21c>)
    44ae:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    44b0:	4b44      	ldr	r3, [pc, #272]	; (45c4 <USB_Handler+0x224>)
    44b2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    44b4:	4b40      	ldr	r3, [pc, #256]	; (45b8 <USB_Handler+0x218>)
    44b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    44b8:	2100      	movs	r1, #0
    44ba:	2001      	movs	r0, #1
    44bc:	4798      	blx	r3
    44be:	e7a0      	b.n	4402 <USB_Handler+0x62>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    44c0:	06cb      	lsls	r3, r1, #27
    44c2:	d407      	bmi.n	44d4 <USB_Handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    44c4:	064b      	lsls	r3, r1, #25
    44c6:	d408      	bmi.n	44da <USB_Handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    44c8:	068b      	lsls	r3, r1, #26
    44ca:	d52e      	bpl.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 0);
    44cc:	2100      	movs	r1, #0
    44ce:	4b3e      	ldr	r3, [pc, #248]	; (45c8 <USB_Handler+0x228>)
    44d0:	4798      	blx	r3
    44d2:	e02a      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_setup(ept);
    44d4:	4b3d      	ldr	r3, [pc, #244]	; (45cc <USB_Handler+0x22c>)
    44d6:	4798      	blx	r3
    44d8:	e027      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 1);
    44da:	2101      	movs	r1, #1
    44dc:	4b3a      	ldr	r3, [pc, #232]	; (45c8 <USB_Handler+0x228>)
    44de:	4798      	blx	r3
    44e0:	e023      	b.n	452a <USB_Handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    44e2:	064b      	lsls	r3, r1, #25
    44e4:	d40e      	bmi.n	4504 <USB_Handler+0x164>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    44e6:	070b      	lsls	r3, r1, #28
    44e8:	d410      	bmi.n	450c <USB_Handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    44ea:	078b      	lsls	r3, r1, #30
    44ec:	d412      	bmi.n	4514 <USB_Handler+0x174>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    44ee:	2307      	movs	r3, #7
    44f0:	401a      	ands	r2, r3
    44f2:	2a01      	cmp	r2, #1
    44f4:	d119      	bne.n	452a <USB_Handler+0x18a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    44f6:	074b      	lsls	r3, r1, #29
    44f8:	d410      	bmi.n	451c <USB_Handler+0x17c>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    44fa:	06cb      	lsls	r3, r1, #27
    44fc:	d515      	bpl.n	452a <USB_Handler+0x18a>
			_usb_d_dev_handle_setup(ept);
    44fe:	4b33      	ldr	r3, [pc, #204]	; (45cc <USB_Handler+0x22c>)
    4500:	4798      	blx	r3
    4502:	e012      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 1);
    4504:	2101      	movs	r1, #1
    4506:	4b30      	ldr	r3, [pc, #192]	; (45c8 <USB_Handler+0x228>)
    4508:	4798      	blx	r3
    450a:	e00e      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_trfail(ept, 1);
    450c:	2101      	movs	r1, #1
    450e:	4b30      	ldr	r3, [pc, #192]	; (45d0 <USB_Handler+0x230>)
    4510:	4798      	blx	r3
    4512:	e00a      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_in_next(ept, true);
    4514:	2101      	movs	r1, #1
    4516:	4b2f      	ldr	r3, [pc, #188]	; (45d4 <USB_Handler+0x234>)
    4518:	4798      	blx	r3
    451a:	e006      	b.n	452a <USB_Handler+0x18a>
			_usb_d_dev_handle_trfail(ept, 0);
    451c:	2100      	movs	r1, #0
    451e:	4b2c      	ldr	r3, [pc, #176]	; (45d0 <USB_Handler+0x230>)
    4520:	4798      	blx	r3
    4522:	e002      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_stall(ept, 0);
    4524:	2100      	movs	r1, #0
    4526:	4b28      	ldr	r3, [pc, #160]	; (45c8 <USB_Handler+0x228>)
    4528:	4798      	blx	r3
    452a:	3501      	adds	r5, #1
    452c:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    452e:	2d1b      	cmp	r5, #27
    4530:	d100      	bne.n	4534 <USB_Handler+0x194>
    4532:	e766      	b.n	4402 <USB_Handler+0x62>
    4534:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    4536:	7ca1      	ldrb	r1, [r4, #18]
    4538:	29ff      	cmp	r1, #255	; 0xff
    453a:	d0f6      	beq.n	452a <USB_Handler+0x18a>
	if (!(epint & (1u << epn))) {
    453c:	230f      	movs	r3, #15
    453e:	400b      	ands	r3, r1
    4540:	2101      	movs	r1, #1
    4542:	4099      	lsls	r1, r3
    4544:	420e      	tst	r6, r1
    4546:	d0f0      	beq.n	452a <USB_Handler+0x18a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4548:	0159      	lsls	r1, r3, #5
    454a:	4f23      	ldr	r7, [pc, #140]	; (45d8 <USB_Handler+0x238>)
    454c:	46bc      	mov	ip, r7
    454e:	4461      	add	r1, ip
    4550:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4552:	015b      	lsls	r3, r3, #5
    4554:	4f21      	ldr	r7, [pc, #132]	; (45dc <USB_Handler+0x23c>)
    4556:	46bc      	mov	ip, r7
    4558:	4463      	add	r3, ip
    455a:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    455c:	4019      	ands	r1, r3
	if (flags) {
    455e:	d0e4      	beq.n	452a <USB_Handler+0x18a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4560:	00ab      	lsls	r3, r5, #2
    4562:	195a      	adds	r2, r3, r5
    4564:	0092      	lsls	r2, r2, #2
    4566:	4442      	add	r2, r8
    4568:	3270      	adds	r2, #112	; 0x70
    456a:	7dd2      	ldrb	r2, [r2, #23]
    456c:	2347      	movs	r3, #71	; 0x47
    456e:	4013      	ands	r3, r2
    4570:	2b01      	cmp	r3, #1
    4572:	d0a5      	beq.n	44c0 <USB_Handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4574:	b253      	sxtb	r3, r2
    4576:	2b00      	cmp	r3, #0
    4578:	dbb3      	blt.n	44e2 <USB_Handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    457a:	068b      	lsls	r3, r1, #26
    457c:	d4d2      	bmi.n	4524 <USB_Handler+0x184>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    457e:	074b      	lsls	r3, r1, #29
    4580:	d40c      	bmi.n	459c <USB_Handler+0x1fc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4582:	07cb      	lsls	r3, r1, #31
    4584:	d40e      	bmi.n	45a4 <USB_Handler+0x204>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4586:	2307      	movs	r3, #7
    4588:	401a      	ands	r2, r3
    458a:	2a01      	cmp	r2, #1
    458c:	d1cd      	bne.n	452a <USB_Handler+0x18a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    458e:	070b      	lsls	r3, r1, #28
    4590:	d40c      	bmi.n	45ac <USB_Handler+0x20c>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4592:	06cb      	lsls	r3, r1, #27
    4594:	d5c9      	bpl.n	452a <USB_Handler+0x18a>
			_usb_d_dev_handle_setup(ept);
    4596:	4b0d      	ldr	r3, [pc, #52]	; (45cc <USB_Handler+0x22c>)
    4598:	4798      	blx	r3
    459a:	e7c6      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_handle_trfail(ept, 0);
    459c:	2100      	movs	r1, #0
    459e:	4b0c      	ldr	r3, [pc, #48]	; (45d0 <USB_Handler+0x230>)
    45a0:	4798      	blx	r3
    45a2:	e7c2      	b.n	452a <USB_Handler+0x18a>
		_usb_d_dev_out_next(ept, true);
    45a4:	2101      	movs	r1, #1
    45a6:	4b0e      	ldr	r3, [pc, #56]	; (45e0 <USB_Handler+0x240>)
    45a8:	4798      	blx	r3
    45aa:	e7be      	b.n	452a <USB_Handler+0x18a>
			_usb_d_dev_handle_trfail(ept, 1);
    45ac:	2101      	movs	r1, #1
    45ae:	4b08      	ldr	r3, [pc, #32]	; (45d0 <USB_Handler+0x230>)
    45b0:	4798      	blx	r3
    45b2:	e7ba      	b.n	452a <USB_Handler+0x18a>
    45b4:	41005000 	.word	0x41005000
    45b8:	20001070 	.word	0x20001070
    45bc:	00000201 	.word	0x00000201
    45c0:	40000800 	.word	0x40000800
    45c4:	00003515 	.word	0x00003515
    45c8:	00003351 	.word	0x00003351
    45cc:	000032c5 	.word	0x000032c5
    45d0:	00003415 	.word	0x00003415
    45d4:	0000355d 	.word	0x0000355d
    45d8:	41005100 	.word	0x41005100
    45dc:	41005109 	.word	0x41005109
    45e0:	00003705 	.word	0x00003705

000045e4 <start_OLED_display>:
}Geo_Location;
void start_OLED_display(void);
void display_OLED_results(uint8_t display_screen);
void Get_Long_Lat(char *dest_lat,char *dest_lon);
void start_OLED_display(void)
{
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	b083      	sub	sp, #12
	    
		spi_m_sync_enable(&SPI_OLED);
    45e8:	481d      	ldr	r0, [pc, #116]	; (4660 <start_OLED_display+0x7c>)
    45ea:	4b1e      	ldr	r3, [pc, #120]	; (4664 <start_OLED_display+0x80>)
    45ec:	4798      	blx	r3
		gfx_mono_init();
    45ee:	4b1e      	ldr	r3, [pc, #120]	; (4668 <start_OLED_display+0x84>)
    45f0:	4798      	blx	r3
		for (uint16_t lines=0;lines<UG2832HSWEG04_LCD_HEIGHT;lines++)
    45f2:	2400      	movs	r4, #0
		{
			gfx_mono_draw_horizontal_line(&MONOCHROME_GRAPHICS_0_desc,0,lines,UG2832HSWEG04_LCD_WIDTH-1,GFX_PIXEL_SET);
    45f4:	4d1d      	ldr	r5, [pc, #116]	; (466c <start_OLED_display+0x88>)
    45f6:	4f1e      	ldr	r7, [pc, #120]	; (4670 <start_OLED_display+0x8c>)
			delay_ms(10);
    45f8:	4e1e      	ldr	r6, [pc, #120]	; (4674 <start_OLED_display+0x90>)
			gfx_mono_draw_horizontal_line(&MONOCHROME_GRAPHICS_0_desc,0,lines,UG2832HSWEG04_LCD_WIDTH-1,GFX_PIXEL_SET);
    45fa:	b2e2      	uxtb	r2, r4
    45fc:	2301      	movs	r3, #1
    45fe:	9300      	str	r3, [sp, #0]
    4600:	337e      	adds	r3, #126	; 0x7e
    4602:	2100      	movs	r1, #0
    4604:	0028      	movs	r0, r5
    4606:	47b8      	blx	r7
			delay_ms(10);
    4608:	200a      	movs	r0, #10
    460a:	47b0      	blx	r6
		for (uint16_t lines=0;lines<UG2832HSWEG04_LCD_HEIGHT;lines++)
    460c:	3401      	adds	r4, #1
    460e:	b2a4      	uxth	r4, r4
    4610:	2c40      	cmp	r4, #64	; 0x40
    4612:	d1f2      	bne.n	45fa <start_OLED_display+0x16>
		}
		delay_ms(100);
    4614:	2064      	movs	r0, #100	; 0x64
    4616:	4b17      	ldr	r3, [pc, #92]	; (4674 <start_OLED_display+0x90>)
    4618:	4798      	blx	r3
		for (uint16_t lines=0;lines<UG2832HSWEG04_LCD_HEIGHT;lines++)
    461a:	2400      	movs	r4, #0
		{
			gfx_mono_draw_horizontal_line(&MONOCHROME_GRAPHICS_0_desc,0,lines,UG2832HSWEG04_LCD_WIDTH-1,GFX_PIXEL_CLR);
    461c:	4e13      	ldr	r6, [pc, #76]	; (466c <start_OLED_display+0x88>)
    461e:	2500      	movs	r5, #0
    4620:	4f13      	ldr	r7, [pc, #76]	; (4670 <start_OLED_display+0x8c>)
    4622:	b2e2      	uxtb	r2, r4
    4624:	9500      	str	r5, [sp, #0]
    4626:	237f      	movs	r3, #127	; 0x7f
    4628:	0029      	movs	r1, r5
    462a:	0030      	movs	r0, r6
    462c:	47b8      	blx	r7
			delay_ms(10);
    462e:	200a      	movs	r0, #10
    4630:	4b10      	ldr	r3, [pc, #64]	; (4674 <start_OLED_display+0x90>)
    4632:	4798      	blx	r3
		for (uint16_t lines=0;lines<UG2832HSWEG04_LCD_HEIGHT;lines++)
    4634:	3401      	adds	r4, #1
    4636:	b2a4      	uxth	r4, r4
    4638:	2c40      	cmp	r4, #64	; 0x40
    463a:	d1f2      	bne.n	4622 <start_OLED_display+0x3e>
		}
		//draw a frame around the screen
		gfx_mono_draw_rect(&MONOCHROME_GRAPHICS_0_desc,0,0,UG2832HSWEG04_LCD_WIDTH,UG2832HSWEG04_LCD_HEIGHT,GFX_PIXEL_SET);
    463c:	3c3f      	subs	r4, #63	; 0x3f
    463e:	9401      	str	r4, [sp, #4]
    4640:	2340      	movs	r3, #64	; 0x40
    4642:	9300      	str	r3, [sp, #0]
    4644:	3340      	adds	r3, #64	; 0x40
    4646:	2200      	movs	r2, #0
    4648:	2100      	movs	r1, #0
    464a:	4808      	ldr	r0, [pc, #32]	; (466c <start_OLED_display+0x88>)
    464c:	4d0a      	ldr	r5, [pc, #40]	; (4678 <start_OLED_display+0x94>)
    464e:	47a8      	blx	r5
		OLED_Data_disp.Fixed_print_data = 1;
    4650:	4b0a      	ldr	r3, [pc, #40]	; (467c <start_OLED_display+0x98>)
    4652:	751c      	strb	r4, [r3, #20]
		OLED_Data_disp.print_nmea = 1;
    4654:	755c      	strb	r4, [r3, #21]
		OLED_Data_disp.Fix_status = 2;
    4656:	2202      	movs	r2, #2
    4658:	759a      	strb	r2, [r3, #22]
}
    465a:	b003      	add	sp, #12
    465c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	2000151c 	.word	0x2000151c
    4664:	00001979 	.word	0x00001979
    4668:	0000100d 	.word	0x0000100d
    466c:	20001554 	.word	0x20001554
    4670:	00000c45 	.word	0x00000c45
    4674:	00001841 	.word	0x00001841
    4678:	00000ded 	.word	0x00000ded
    467c:	200016d0 	.word	0x200016d0

00004680 <display_OLED_results>:
void display_OLED_results(uint8_t display_screen)
{
    4680:	b5f0      	push	{r4, r5, r6, r7, lr}
    4682:	46c6      	mov	lr, r8
    4684:	b500      	push	{lr}
    4686:	b082      	sub	sp, #8
	if (display_screen == Display_Mode_Long_lat)
    4688:	2801      	cmp	r0, #1
    468a:	d003      	beq.n	4694 <display_OLED_results+0x14>
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Not Avai    " ,x_axis_pos,34,&basic_6x7);
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "0     " ,x_axis_pos,43,&basic_6x7);
		}
		
	}
}
    468c:	b002      	add	sp, #8
    468e:	bc04      	pop	{r2}
    4690:	4690      	mov	r8, r2
    4692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (OLED_Data_disp.Date[0]!=GPRMC.Date[2] || OLED_Data_disp.Date[1]!=GPRMC.Date[3] ||
    4694:	234d      	movs	r3, #77	; 0x4d
    4696:	4aab      	ldr	r2, [pc, #684]	; (4944 <display_OLED_results+0x2c4>)
    4698:	5cd2      	ldrb	r2, [r2, r3]
    469a:	4bab      	ldr	r3, [pc, #684]	; (4948 <display_OLED_results+0x2c8>)
    469c:	781b      	ldrb	r3, [r3, #0]
    469e:	4293      	cmp	r3, r2
    46a0:	d100      	bne.n	46a4 <display_OLED_results+0x24>
    46a2:	e093      	b.n	47cc <display_OLED_results+0x14c>
		OLED_Data_disp.Date[0]=GPRMC.Date[2];
    46a4:	4ba8      	ldr	r3, [pc, #672]	; (4948 <display_OLED_results+0x2c8>)
    46a6:	701a      	strb	r2, [r3, #0]
		OLED_Data_disp.Date[1]=GPRMC.Date[3];
    46a8:	4aa6      	ldr	r2, [pc, #664]	; (4944 <display_OLED_results+0x2c4>)
    46aa:	214e      	movs	r1, #78	; 0x4e
    46ac:	5c51      	ldrb	r1, [r2, r1]
    46ae:	7059      	strb	r1, [r3, #1]
		OLED_Data_disp.Date[2]='/';
    46b0:	212f      	movs	r1, #47	; 0x2f
    46b2:	7099      	strb	r1, [r3, #2]
		OLED_Data_disp.Date[3]=GPRMC.Date[0];
    46b4:	204b      	movs	r0, #75	; 0x4b
    46b6:	5c10      	ldrb	r0, [r2, r0]
    46b8:	70d8      	strb	r0, [r3, #3]
		OLED_Data_disp.Date[4]=GPRMC.Date[1];
    46ba:	204c      	movs	r0, #76	; 0x4c
    46bc:	5c10      	ldrb	r0, [r2, r0]
    46be:	7118      	strb	r0, [r3, #4]
		OLED_Data_disp.Date[5]='/';
    46c0:	7159      	strb	r1, [r3, #5]
		OLED_Data_disp.Date[6]='2';
    46c2:	3103      	adds	r1, #3
    46c4:	7199      	strb	r1, [r3, #6]
		OLED_Data_disp.Date[7]='0';
    46c6:	3902      	subs	r1, #2
    46c8:	71d9      	strb	r1, [r3, #7]
		OLED_Data_disp.Date[8]=GPRMC.Date[4];
    46ca:	311f      	adds	r1, #31
    46cc:	5c51      	ldrb	r1, [r2, r1]
    46ce:	7219      	strb	r1, [r3, #8]
		OLED_Data_disp.Date[9]=GPRMC.Date[5];	
    46d0:	2150      	movs	r1, #80	; 0x50
    46d2:	5c52      	ldrb	r2, [r2, r1]
    46d4:	725a      	strb	r2, [r3, #9]
		OLED_Data_disp.print_date = 1;/*to update the display with new date*/	
    46d6:	2201      	movs	r2, #1
    46d8:	75da      	strb	r2, [r3, #23]
		if (OLED_Data_disp.Time[0]!=GPRMC.Fix_taken[0] || OLED_Data_disp.Time[1]!=GPRMC.Fix_taken[1] ||
    46da:	4b9a      	ldr	r3, [pc, #616]	; (4944 <display_OLED_results+0x2c4>)
    46dc:	7a1a      	ldrb	r2, [r3, #8]
    46de:	4b9a      	ldr	r3, [pc, #616]	; (4948 <display_OLED_results+0x2c8>)
    46e0:	7adb      	ldrb	r3, [r3, #11]
    46e2:	4293      	cmp	r3, r2
    46e4:	d100      	bne.n	46e8 <display_OLED_results+0x68>
    46e6:	e096      	b.n	4816 <display_OLED_results+0x196>
		OLED_Data_disp.Time[0]=GPRMC.Fix_taken[0];
    46e8:	4b97      	ldr	r3, [pc, #604]	; (4948 <display_OLED_results+0x2c8>)
    46ea:	72da      	strb	r2, [r3, #11]
		OLED_Data_disp.Time[1]=GPRMC.Fix_taken[1];
    46ec:	4a95      	ldr	r2, [pc, #596]	; (4944 <display_OLED_results+0x2c4>)
    46ee:	7a51      	ldrb	r1, [r2, #9]
    46f0:	7319      	strb	r1, [r3, #12]
		OLED_Data_disp.Time[2]=':';
    46f2:	213a      	movs	r1, #58	; 0x3a
    46f4:	7359      	strb	r1, [r3, #13]
		OLED_Data_disp.Time[3]=GPRMC.Fix_taken[2];
    46f6:	7a90      	ldrb	r0, [r2, #10]
    46f8:	7398      	strb	r0, [r3, #14]
		OLED_Data_disp.Time[4]=GPRMC.Fix_taken[3];
    46fa:	7ad2      	ldrb	r2, [r2, #11]
    46fc:	73da      	strb	r2, [r3, #15]
		OLED_Data_disp.Time[5]=':';
    46fe:	7419      	strb	r1, [r3, #16]
		OLED_Data_disp.print_time_hm=1;
    4700:	2201      	movs	r2, #1
    4702:	761a      	strb	r2, [r3, #24]
		OLED_Data_disp.Time[6]=GPRMC.Fix_taken[4];
    4704:	4a90      	ldr	r2, [pc, #576]	; (4948 <display_OLED_results+0x2c8>)
    4706:	4b8f      	ldr	r3, [pc, #572]	; (4944 <display_OLED_results+0x2c4>)
    4708:	7b19      	ldrb	r1, [r3, #12]
    470a:	7451      	strb	r1, [r2, #17]
		OLED_Data_disp.Time[7]=GPRMC.Fix_taken[5];
    470c:	7b59      	ldrb	r1, [r3, #13]
    470e:	7491      	strb	r1, [r2, #18]
		 if (GPRMC.status == 'A' && OLED_Data_disp.Fix_status != 1)
    4710:	7e1b      	ldrb	r3, [r3, #24]
    4712:	2b41      	cmp	r3, #65	; 0x41
    4714:	d100      	bne.n	4718 <display_OLED_results+0x98>
    4716:	e094      	b.n	4842 <display_OLED_results+0x1c2>
		 else if (GPRMC.status == 'V' && OLED_Data_disp.Fix_status !=0)
    4718:	2b56      	cmp	r3, #86	; 0x56
    471a:	d100      	bne.n	471e <display_OLED_results+0x9e>
    471c:	e09b      	b.n	4856 <display_OLED_results+0x1d6>
		if (OLED_Data_disp.print_date == 1)
    471e:	4b8a      	ldr	r3, [pc, #552]	; (4948 <display_OLED_results+0x2c8>)
    4720:	7ddb      	ldrb	r3, [r3, #23]
    4722:	2b01      	cmp	r3, #1
    4724:	d100      	bne.n	4728 <display_OLED_results+0xa8>
    4726:	e0a1      	b.n	486c <display_OLED_results+0x1ec>
		if (OLED_Data_disp.print_time_hm == 1)
    4728:	4b87      	ldr	r3, [pc, #540]	; (4948 <display_OLED_results+0x2c8>)
    472a:	7e1b      	ldrb	r3, [r3, #24]
    472c:	2b01      	cmp	r3, #1
    472e:	d100      	bne.n	4732 <display_OLED_results+0xb2>
    4730:	e0a7      	b.n	4882 <display_OLED_results+0x202>
		x_axis_pos=69+((basic_6x7.width +1)*6);
    4732:	4e86      	ldr	r6, [pc, #536]	; (494c <display_OLED_results+0x2cc>)
    4734:	7a34      	ldrb	r4, [r6, #8]
    4736:	3401      	adds	r4, #1
    4738:	0062      	lsls	r2, r4, #1
    473a:	18a4      	adds	r4, r4, r2
    473c:	0064      	lsls	r4, r4, #1
    473e:	3445      	adds	r4, #69	; 0x45
    4740:	b2e4      	uxtb	r4, r4
		gfx_mono_text_draw_char(&MONOCHROME_TEXT_0_desc,OLED_Data_disp.Time[6],x_axis_pos,2,&basic_6x7);
    4742:	4f81      	ldr	r7, [pc, #516]	; (4948 <display_OLED_results+0x2c8>)
    4744:	7c79      	ldrb	r1, [r7, #17]
    4746:	9600      	str	r6, [sp, #0]
    4748:	2302      	movs	r3, #2
    474a:	0022      	movs	r2, r4
    474c:	4880      	ldr	r0, [pc, #512]	; (4950 <display_OLED_results+0x2d0>)
    474e:	4d81      	ldr	r5, [pc, #516]	; (4954 <display_OLED_results+0x2d4>)
    4750:	47a8      	blx	r5
		x_axis_pos+=(basic_6x7.width +1);
    4752:	7a32      	ldrb	r2, [r6, #8]
    4754:	3201      	adds	r2, #1
    4756:	18a2      	adds	r2, r4, r2
		gfx_mono_text_draw_char(&MONOCHROME_TEXT_0_desc,OLED_Data_disp.Time[7],x_axis_pos,2,&basic_6x7);
    4758:	b2d2      	uxtb	r2, r2
    475a:	7cb9      	ldrb	r1, [r7, #18]
    475c:	9600      	str	r6, [sp, #0]
    475e:	2302      	movs	r3, #2
    4760:	487b      	ldr	r0, [pc, #492]	; (4950 <display_OLED_results+0x2d0>)
    4762:	47a8      	blx	r5
		if (OLED_Data_disp.Fixed_print_data == 1)
    4764:	7d3b      	ldrb	r3, [r7, #20]
    4766:	2b01      	cmp	r3, #1
    4768:	d100      	bne.n	476c <display_OLED_results+0xec>
    476a:	e0a2      	b.n	48b2 <display_OLED_results+0x232>
		if (OLED_Data_disp.print_nmea == 2)
    476c:	4b76      	ldr	r3, [pc, #472]	; (4948 <display_OLED_results+0x2c8>)
    476e:	7d5b      	ldrb	r3, [r3, #21]
    4770:	2b02      	cmp	r3, #2
    4772:	d100      	bne.n	4776 <display_OLED_results+0xf6>
    4774:	e0c2      	b.n	48fc <display_OLED_results+0x27c>
		if (OLED_Data_disp.print_nmea == 1)
    4776:	4b74      	ldr	r3, [pc, #464]	; (4948 <display_OLED_results+0x2c8>)
    4778:	7d5b      	ldrb	r3, [r3, #21]
    477a:	2b01      	cmp	r3, #1
    477c:	d000      	beq.n	4780 <display_OLED_results+0x100>
    477e:	e785      	b.n	468c <display_OLED_results+0xc>
			OLED_Data_disp.print_nmea = 0;
    4780:	2200      	movs	r2, #0
    4782:	4b71      	ldr	r3, [pc, #452]	; (4948 <display_OLED_results+0x2c8>)
    4784:	755a      	strb	r2, [r3, #21]
			x_axis_pos=2 +((basic_6x7.width +1)*5);
    4786:	4d71      	ldr	r5, [pc, #452]	; (494c <display_OLED_results+0x2cc>)
    4788:	7a2c      	ldrb	r4, [r5, #8]
    478a:	3401      	adds	r4, #1
    478c:	00a3      	lsls	r3, r4, #2
    478e:	18e4      	adds	r4, r4, r3
    4790:	3402      	adds	r4, #2
    4792:	b2e4      	uxtb	r4, r4
			gfx_mono_text_draw_char(&MONOCHROME_TEXT_0_desc, (uint8_t )'V' ,x_axis_pos,16,&basic_6x7);                        
    4794:	4e6e      	ldr	r6, [pc, #440]	; (4950 <display_OLED_results+0x2d0>)
    4796:	9500      	str	r5, [sp, #0]
    4798:	2310      	movs	r3, #16
    479a:	0022      	movs	r2, r4
    479c:	2156      	movs	r1, #86	; 0x56
    479e:	0030      	movs	r0, r6
    47a0:	4f6c      	ldr	r7, [pc, #432]	; (4954 <display_OLED_results+0x2d4>)
    47a2:	47b8      	blx	r7
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Not Avai    " ,x_axis_pos,25,&basic_6x7);
    47a4:	9500      	str	r5, [sp, #0]
    47a6:	2319      	movs	r3, #25
    47a8:	0022      	movs	r2, r4
    47aa:	496b      	ldr	r1, [pc, #428]	; (4958 <display_OLED_results+0x2d8>)
    47ac:	0030      	movs	r0, r6
    47ae:	4f6b      	ldr	r7, [pc, #428]	; (495c <display_OLED_results+0x2dc>)
    47b0:	47b8      	blx	r7
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Not Avai    " ,x_axis_pos,34,&basic_6x7);
    47b2:	9500      	str	r5, [sp, #0]
    47b4:	2322      	movs	r3, #34	; 0x22
    47b6:	0022      	movs	r2, r4
    47b8:	4967      	ldr	r1, [pc, #412]	; (4958 <display_OLED_results+0x2d8>)
    47ba:	0030      	movs	r0, r6
    47bc:	47b8      	blx	r7
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "0     " ,x_axis_pos,43,&basic_6x7);
    47be:	9500      	str	r5, [sp, #0]
    47c0:	232b      	movs	r3, #43	; 0x2b
    47c2:	0022      	movs	r2, r4
    47c4:	4966      	ldr	r1, [pc, #408]	; (4960 <display_OLED_results+0x2e0>)
    47c6:	0030      	movs	r0, r6
    47c8:	47b8      	blx	r7
}
    47ca:	e75f      	b.n	468c <display_OLED_results+0xc>
		if (OLED_Data_disp.Date[0]!=GPRMC.Date[2] || OLED_Data_disp.Date[1]!=GPRMC.Date[3] ||
    47cc:	4b5e      	ldr	r3, [pc, #376]	; (4948 <display_OLED_results+0x2c8>)
    47ce:	7859      	ldrb	r1, [r3, #1]
    47d0:	234e      	movs	r3, #78	; 0x4e
    47d2:	485c      	ldr	r0, [pc, #368]	; (4944 <display_OLED_results+0x2c4>)
    47d4:	5cc3      	ldrb	r3, [r0, r3]
    47d6:	4299      	cmp	r1, r3
    47d8:	d000      	beq.n	47dc <display_OLED_results+0x15c>
    47da:	e763      	b.n	46a4 <display_OLED_results+0x24>
		    OLED_Data_disp.Date[3]!=GPRMC.Date[0] || OLED_Data_disp.Date[4]!=GPRMC.Date[1] ||
    47dc:	4b5a      	ldr	r3, [pc, #360]	; (4948 <display_OLED_results+0x2c8>)
		if (OLED_Data_disp.Date[0]!=GPRMC.Date[2] || OLED_Data_disp.Date[1]!=GPRMC.Date[3] ||
    47de:	78d9      	ldrb	r1, [r3, #3]
    47e0:	234b      	movs	r3, #75	; 0x4b
    47e2:	5cc3      	ldrb	r3, [r0, r3]
    47e4:	4299      	cmp	r1, r3
    47e6:	d000      	beq.n	47ea <display_OLED_results+0x16a>
    47e8:	e75c      	b.n	46a4 <display_OLED_results+0x24>
		    OLED_Data_disp.Date[3]!=GPRMC.Date[0] || OLED_Data_disp.Date[4]!=GPRMC.Date[1] ||
    47ea:	4b57      	ldr	r3, [pc, #348]	; (4948 <display_OLED_results+0x2c8>)
    47ec:	7919      	ldrb	r1, [r3, #4]
    47ee:	234c      	movs	r3, #76	; 0x4c
    47f0:	5cc3      	ldrb	r3, [r0, r3]
    47f2:	4299      	cmp	r1, r3
    47f4:	d000      	beq.n	47f8 <display_OLED_results+0x178>
    47f6:	e755      	b.n	46a4 <display_OLED_results+0x24>
	        OLED_Data_disp.Date[8]!=GPRMC.Date[4] || OLED_Data_disp.Date[9]!=GPRMC.Date[5])
    47f8:	4b53      	ldr	r3, [pc, #332]	; (4948 <display_OLED_results+0x2c8>)
		    OLED_Data_disp.Date[3]!=GPRMC.Date[0] || OLED_Data_disp.Date[4]!=GPRMC.Date[1] ||
    47fa:	7a19      	ldrb	r1, [r3, #8]
    47fc:	234f      	movs	r3, #79	; 0x4f
    47fe:	5cc3      	ldrb	r3, [r0, r3]
    4800:	4299      	cmp	r1, r3
    4802:	d000      	beq.n	4806 <display_OLED_results+0x186>
    4804:	e74e      	b.n	46a4 <display_OLED_results+0x24>
	        OLED_Data_disp.Date[8]!=GPRMC.Date[4] || OLED_Data_disp.Date[9]!=GPRMC.Date[5])
    4806:	4b50      	ldr	r3, [pc, #320]	; (4948 <display_OLED_results+0x2c8>)
    4808:	7a59      	ldrb	r1, [r3, #9]
    480a:	2350      	movs	r3, #80	; 0x50
    480c:	5cc3      	ldrb	r3, [r0, r3]
    480e:	4299      	cmp	r1, r3
    4810:	d000      	beq.n	4814 <display_OLED_results+0x194>
    4812:	e747      	b.n	46a4 <display_OLED_results+0x24>
    4814:	e761      	b.n	46da <display_OLED_results+0x5a>
		if (OLED_Data_disp.Time[0]!=GPRMC.Fix_taken[0] || OLED_Data_disp.Time[1]!=GPRMC.Fix_taken[1] ||
    4816:	4b4c      	ldr	r3, [pc, #304]	; (4948 <display_OLED_results+0x2c8>)
    4818:	7b19      	ldrb	r1, [r3, #12]
    481a:	4b4a      	ldr	r3, [pc, #296]	; (4944 <display_OLED_results+0x2c4>)
    481c:	7a5b      	ldrb	r3, [r3, #9]
    481e:	4299      	cmp	r1, r3
    4820:	d000      	beq.n	4824 <display_OLED_results+0x1a4>
    4822:	e761      	b.n	46e8 <display_OLED_results+0x68>
		    OLED_Data_disp.Time[3]!=GPRMC.Fix_taken[2] || OLED_Data_disp.Time[4]!=GPRMC.Fix_taken[3])
    4824:	4b48      	ldr	r3, [pc, #288]	; (4948 <display_OLED_results+0x2c8>)
		if (OLED_Data_disp.Time[0]!=GPRMC.Fix_taken[0] || OLED_Data_disp.Time[1]!=GPRMC.Fix_taken[1] ||
    4826:	7b99      	ldrb	r1, [r3, #14]
    4828:	4b46      	ldr	r3, [pc, #280]	; (4944 <display_OLED_results+0x2c4>)
    482a:	7a9b      	ldrb	r3, [r3, #10]
    482c:	4299      	cmp	r1, r3
    482e:	d000      	beq.n	4832 <display_OLED_results+0x1b2>
    4830:	e75a      	b.n	46e8 <display_OLED_results+0x68>
		    OLED_Data_disp.Time[3]!=GPRMC.Fix_taken[2] || OLED_Data_disp.Time[4]!=GPRMC.Fix_taken[3])
    4832:	4b45      	ldr	r3, [pc, #276]	; (4948 <display_OLED_results+0x2c8>)
    4834:	7bd9      	ldrb	r1, [r3, #15]
    4836:	4b43      	ldr	r3, [pc, #268]	; (4944 <display_OLED_results+0x2c4>)
    4838:	7adb      	ldrb	r3, [r3, #11]
    483a:	4299      	cmp	r1, r3
    483c:	d000      	beq.n	4840 <display_OLED_results+0x1c0>
    483e:	e753      	b.n	46e8 <display_OLED_results+0x68>
    4840:	e760      	b.n	4704 <display_OLED_results+0x84>
		 if (GPRMC.status == 'A' && OLED_Data_disp.Fix_status != 1)
    4842:	7d93      	ldrb	r3, [r2, #22]
    4844:	2b01      	cmp	r3, #1
    4846:	d100      	bne.n	484a <display_OLED_results+0x1ca>
    4848:	e769      	b.n	471e <display_OLED_results+0x9e>
			 OLED_Data_disp.print_nmea=2;/*to print the nmea data*/
    484a:	0013      	movs	r3, r2
    484c:	2202      	movs	r2, #2
    484e:	755a      	strb	r2, [r3, #21]
			 OLED_Data_disp.Fix_status=1;
    4850:	3a01      	subs	r2, #1
    4852:	759a      	strb	r2, [r3, #22]
    4854:	e763      	b.n	471e <display_OLED_results+0x9e>
		 else if (GPRMC.status == 'V' && OLED_Data_disp.Fix_status !=0)
    4856:	4b3c      	ldr	r3, [pc, #240]	; (4948 <display_OLED_results+0x2c8>)
    4858:	7d9b      	ldrb	r3, [r3, #22]
    485a:	2b00      	cmp	r3, #0
    485c:	d100      	bne.n	4860 <display_OLED_results+0x1e0>
    485e:	e75e      	b.n	471e <display_OLED_results+0x9e>
			 OLED_Data_disp.print_nmea=1;/*to print not available msg*/
    4860:	4b39      	ldr	r3, [pc, #228]	; (4948 <display_OLED_results+0x2c8>)
    4862:	2201      	movs	r2, #1
    4864:	755a      	strb	r2, [r3, #21]
			 OLED_Data_disp.Fix_status=0;
    4866:	2200      	movs	r2, #0
    4868:	759a      	strb	r2, [r3, #22]
    486a:	e758      	b.n	471e <display_OLED_results+0x9e>
			OLED_Data_disp.print_date=0;
    486c:	4936      	ldr	r1, [pc, #216]	; (4948 <display_OLED_results+0x2c8>)
    486e:	2300      	movs	r3, #0
    4870:	75cb      	strb	r3, [r1, #23]
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) OLED_Data_disp.Date,2,2,&basic_6x7);
    4872:	4b36      	ldr	r3, [pc, #216]	; (494c <display_OLED_results+0x2cc>)
    4874:	9300      	str	r3, [sp, #0]
    4876:	2302      	movs	r3, #2
    4878:	2202      	movs	r2, #2
    487a:	4835      	ldr	r0, [pc, #212]	; (4950 <display_OLED_results+0x2d0>)
    487c:	4c37      	ldr	r4, [pc, #220]	; (495c <display_OLED_results+0x2dc>)
    487e:	47a0      	blx	r4
    4880:	e752      	b.n	4728 <display_OLED_results+0xa8>
			OLED_Data_disp.print_time_hm=0;
    4882:	4f31      	ldr	r7, [pc, #196]	; (4948 <display_OLED_results+0x2c8>)
    4884:	2300      	movs	r3, #0
    4886:	763b      	strb	r3, [r7, #24]
    4888:	003d      	movs	r5, r7
    488a:	350b      	adds	r5, #11
    488c:	3711      	adds	r7, #17
		uint8_t x_axis_pos=69;
    488e:	2445      	movs	r4, #69	; 0x45
				gfx_mono_text_draw_char(&MONOCHROME_TEXT_0_desc,OLED_Data_disp.Time[l],x_axis_pos,2,&basic_6x7);
    4890:	4e2e      	ldr	r6, [pc, #184]	; (494c <display_OLED_results+0x2cc>)
    4892:	4b30      	ldr	r3, [pc, #192]	; (4954 <display_OLED_results+0x2d4>)
    4894:	4698      	mov	r8, r3
    4896:	7829      	ldrb	r1, [r5, #0]
    4898:	9600      	str	r6, [sp, #0]
    489a:	2302      	movs	r3, #2
    489c:	0022      	movs	r2, r4
    489e:	482c      	ldr	r0, [pc, #176]	; (4950 <display_OLED_results+0x2d0>)
    48a0:	47c0      	blx	r8
				x_axis_pos+=(basic_6x7.width +1);
    48a2:	7a32      	ldrb	r2, [r6, #8]
    48a4:	3201      	adds	r2, #1
    48a6:	18a4      	adds	r4, r4, r2
    48a8:	b2e4      	uxtb	r4, r4
    48aa:	3501      	adds	r5, #1
			for (int8_t l=0;l<6;l++)
    48ac:	42bd      	cmp	r5, r7
    48ae:	d1f2      	bne.n	4896 <display_OLED_results+0x216>
    48b0:	e73f      	b.n	4732 <display_OLED_results+0xb2>
			OLED_Data_disp.Fixed_print_data = 0;
    48b2:	2200      	movs	r2, #0
    48b4:	4b24      	ldr	r3, [pc, #144]	; (4948 <display_OLED_results+0x2c8>)
    48b6:	751a      	strb	r2, [r3, #20]
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Fix :",2,16,&basic_6x7);
    48b8:	4d25      	ldr	r5, [pc, #148]	; (4950 <display_OLED_results+0x2d0>)
    48ba:	4e24      	ldr	r6, [pc, #144]	; (494c <display_OLED_results+0x2cc>)
    48bc:	9600      	str	r6, [sp, #0]
    48be:	2310      	movs	r3, #16
    48c0:	3202      	adds	r2, #2
    48c2:	4928      	ldr	r1, [pc, #160]	; (4964 <display_OLED_results+0x2e4>)
    48c4:	0028      	movs	r0, r5
    48c6:	4c25      	ldr	r4, [pc, #148]	; (495c <display_OLED_results+0x2dc>)
    48c8:	47a0      	blx	r4
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Long:",2,25,&basic_6x7);
    48ca:	9600      	str	r6, [sp, #0]
    48cc:	2319      	movs	r3, #25
    48ce:	2202      	movs	r2, #2
    48d0:	4925      	ldr	r1, [pc, #148]	; (4968 <display_OLED_results+0x2e8>)
    48d2:	0028      	movs	r0, r5
    48d4:	47a0      	blx	r4
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "Lati:",2,34,&basic_6x7);
    48d6:	9600      	str	r6, [sp, #0]
    48d8:	2322      	movs	r3, #34	; 0x22
    48da:	2202      	movs	r2, #2
    48dc:	4923      	ldr	r1, [pc, #140]	; (496c <display_OLED_results+0x2ec>)
    48de:	0028      	movs	r0, r5
    48e0:	47a0      	blx	r4
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "SpOG:",2,43,&basic_6x7);
    48e2:	9600      	str	r6, [sp, #0]
    48e4:	232b      	movs	r3, #43	; 0x2b
    48e6:	2202      	movs	r2, #2
    48e8:	4921      	ldr	r1, [pc, #132]	; (4970 <display_OLED_results+0x2f0>)
    48ea:	0028      	movs	r0, r5
    48ec:	47a0      	blx	r4
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) "NMEA:$GPRMC",2,52,&basic_6x7);
    48ee:	9600      	str	r6, [sp, #0]
    48f0:	2334      	movs	r3, #52	; 0x34
    48f2:	2202      	movs	r2, #2
    48f4:	491f      	ldr	r1, [pc, #124]	; (4974 <display_OLED_results+0x2f4>)
    48f6:	0028      	movs	r0, r5
    48f8:	47a0      	blx	r4
    48fa:	e737      	b.n	476c <display_OLED_results+0xec>
			x_axis_pos=2 +((basic_6x7.width +1)*5);                       
    48fc:	4d13      	ldr	r5, [pc, #76]	; (494c <display_OLED_results+0x2cc>)
    48fe:	7a2c      	ldrb	r4, [r5, #8]
    4900:	3401      	adds	r4, #1
    4902:	00a3      	lsls	r3, r4, #2
    4904:	18e4      	adds	r4, r4, r3
    4906:	3402      	adds	r4, #2
    4908:	b2e4      	uxtb	r4, r4
			gfx_mono_text_draw_char(&MONOCHROME_TEXT_0_desc,(uint8_t )'A' ,x_axis_pos,16,&basic_6x7);
    490a:	9500      	str	r5, [sp, #0]
    490c:	2310      	movs	r3, #16
    490e:	0022      	movs	r2, r4
    4910:	2141      	movs	r1, #65	; 0x41
    4912:	480f      	ldr	r0, [pc, #60]	; (4950 <display_OLED_results+0x2d0>)
    4914:	4f0f      	ldr	r7, [pc, #60]	; (4954 <display_OLED_results+0x2d4>)
    4916:	47b8      	blx	r7
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) Geo_Location.gps_Lon_str,x_axis_pos,25,&basic_6x7);
    4918:	4f17      	ldr	r7, [pc, #92]	; (4978 <display_OLED_results+0x2f8>)
    491a:	9500      	str	r5, [sp, #0]
    491c:	2319      	movs	r3, #25
    491e:	0022      	movs	r2, r4
    4920:	0039      	movs	r1, r7
    4922:	480b      	ldr	r0, [pc, #44]	; (4950 <display_OLED_results+0x2d0>)
    4924:	4e0d      	ldr	r6, [pc, #52]	; (495c <display_OLED_results+0x2dc>)
    4926:	47b0      	blx	r6
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) Geo_Location.gps_Lat_str,x_axis_pos,34,&basic_6x7);			
    4928:	0039      	movs	r1, r7
    492a:	3910      	subs	r1, #16
    492c:	9500      	str	r5, [sp, #0]
    492e:	2322      	movs	r3, #34	; 0x22
    4930:	0022      	movs	r2, r4
    4932:	4807      	ldr	r0, [pc, #28]	; (4950 <display_OLED_results+0x2d0>)
    4934:	47b0      	blx	r6
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_0_desc,(uint8_t *) GPRMC.speed_o_ground,x_axis_pos,43,&basic_6x7);
    4936:	9500      	str	r5, [sp, #0]
    4938:	232b      	movs	r3, #43	; 0x2b
    493a:	0022      	movs	r2, r4
    493c:	490f      	ldr	r1, [pc, #60]	; (497c <display_OLED_results+0x2fc>)
    493e:	4804      	ldr	r0, [pc, #16]	; (4950 <display_OLED_results+0x2d0>)
    4940:	47b0      	blx	r6
    4942:	e718      	b.n	4776 <display_OLED_results+0xf6>
    4944:	2000155c 	.word	0x2000155c
    4948:	200016d0 	.word	0x200016d0
    494c:	2000003c 	.word	0x2000003c
    4950:	20001550 	.word	0x20001550
    4954:	00000e8d 	.word	0x00000e8d
    4958:	0000cba4 	.word	0x0000cba4
    495c:	00000f91 	.word	0x00000f91
    4960:	0000cbb4 	.word	0x0000cbb4
    4964:	0000cb78 	.word	0x0000cb78
    4968:	0000cb80 	.word	0x0000cb80
    496c:	0000cb88 	.word	0x0000cb88
    4970:	0000cb90 	.word	0x0000cb90
    4974:	0000cb98 	.word	0x0000cb98
    4978:	200016c0 	.word	0x200016c0
    497c:	20001597 	.word	0x20001597

00004980 <Get_Long_Lat>:

void Get_Long_Lat(char *dest_lat,char *dest_lon)
{
    4980:	b5f0      	push	{r4, r5, r6, r7, lr}
    4982:	46c6      	mov	lr, r8
    4984:	b500      	push	{lr}
    4986:	b082      	sub	sp, #8
    4988:	0004      	movs	r4, r0
    498a:	000d      	movs	r5, r1
	    //03551.9128
		int16_t lon_dd=(dest_lon[0]-48)*100 + ((dest_lon[1]-48)*10)+ (dest_lon[2]-48);
		float lon_tt_int=((dest_lon[3]-48)*10) + ((dest_lon[4]-48)*1);
    498c:	78cb      	ldrb	r3, [r1, #3]
    498e:	3b30      	subs	r3, #48	; 0x30
    4990:	0098      	lsls	r0, r3, #2
    4992:	18c0      	adds	r0, r0, r3
    4994:	0040      	lsls	r0, r0, #1
    4996:	790b      	ldrb	r3, [r1, #4]
    4998:	3b30      	subs	r3, #48	; 0x30
    499a:	18c0      	adds	r0, r0, r3
    499c:	4f4f      	ldr	r7, [pc, #316]	; (4adc <Get_Long_Lat+0x15c>)
    499e:	47b8      	blx	r7
    49a0:	9001      	str	r0, [sp, #4]
		float lon_tt_f=(dest_lon[6]-48)*1000 + (dest_lon[7]-48)*100 + (dest_lon[8]-48)*10 + (dest_lon[9]-48)*1;
    49a2:	79ab      	ldrb	r3, [r5, #6]
    49a4:	3b30      	subs	r3, #48	; 0x30
    49a6:	20fa      	movs	r0, #250	; 0xfa
    49a8:	0080      	lsls	r0, r0, #2
    49aa:	4358      	muls	r0, r3
    49ac:	79ea      	ldrb	r2, [r5, #7]
    49ae:	3a30      	subs	r2, #48	; 0x30
    49b0:	2364      	movs	r3, #100	; 0x64
    49b2:	4353      	muls	r3, r2
    49b4:	18c0      	adds	r0, r0, r3
    49b6:	7a2a      	ldrb	r2, [r5, #8]
    49b8:	3a30      	subs	r2, #48	; 0x30
    49ba:	0093      	lsls	r3, r2, #2
    49bc:	189b      	adds	r3, r3, r2
    49be:	005b      	lsls	r3, r3, #1
    49c0:	18c0      	adds	r0, r0, r3
    49c2:	7a6b      	ldrb	r3, [r5, #9]
    49c4:	3b30      	subs	r3, #48	; 0x30
    49c6:	18c0      	adds	r0, r0, r3
    49c8:	47b8      	blx	r7
		lon_tt_f=lon_tt_f/10000;
    49ca:	4b45      	ldr	r3, [pc, #276]	; (4ae0 <Get_Long_Lat+0x160>)
    49cc:	4698      	mov	r8, r3
    49ce:	4945      	ldr	r1, [pc, #276]	; (4ae4 <Get_Long_Lat+0x164>)
    49d0:	4798      	blx	r3
		lon_tt_int+=lon_tt_f;
    49d2:	4e45      	ldr	r6, [pc, #276]	; (4ae8 <Get_Long_Lat+0x168>)
    49d4:	9901      	ldr	r1, [sp, #4]
    49d6:	47b0      	blx	r6
    49d8:	9001      	str	r0, [sp, #4]
		int16_t lon_dd=(dest_lon[0]-48)*100 + ((dest_lon[1]-48)*10)+ (dest_lon[2]-48);
    49da:	7828      	ldrb	r0, [r5, #0]
    49dc:	3830      	subs	r0, #48	; 0x30
    49de:	2364      	movs	r3, #100	; 0x64
    49e0:	4358      	muls	r0, r3
    49e2:	78ab      	ldrb	r3, [r5, #2]
    49e4:	3b30      	subs	r3, #48	; 0x30
    49e6:	18c0      	adds	r0, r0, r3
    49e8:	786b      	ldrb	r3, [r5, #1]
    49ea:	3b30      	subs	r3, #48	; 0x30
    49ec:	009a      	lsls	r2, r3, #2
    49ee:	189b      	adds	r3, r3, r2
    49f0:	005b      	lsls	r3, r3, #1
    49f2:	18c0      	adds	r0, r0, r3
		lon_tt_int/=60.0000;
		Geo_Location.gps_Longitude=0;
		Geo_Location.gps_Longitude=lon_dd+lon_tt_int;
    49f4:	b200      	sxth	r0, r0
    49f6:	47b8      	blx	r7
    49f8:	1c07      	adds	r7, r0, #0
		lon_tt_int/=60.0000;
    49fa:	493c      	ldr	r1, [pc, #240]	; (4aec <Get_Long_Lat+0x16c>)
    49fc:	9801      	ldr	r0, [sp, #4]
    49fe:	47c0      	blx	r8
    4a00:	1c01      	adds	r1, r0, #0
		Geo_Location.gps_Longitude=lon_dd+lon_tt_int;
    4a02:	1c38      	adds	r0, r7, #0
    4a04:	47b0      	blx	r6
    4a06:	4b3a      	ldr	r3, [pc, #232]	; (4af0 <Get_Long_Lat+0x170>)
    4a08:	6018      	str	r0, [r3, #0]
		// read the E/W char
		if (GPRMC.Longitude_deg == 'W')
    4a0a:	233a      	movs	r3, #58	; 0x3a
    4a0c:	4a39      	ldr	r2, [pc, #228]	; (4af4 <Get_Long_Lat+0x174>)
    4a0e:	5cd3      	ldrb	r3, [r2, r3]
    4a10:	2b57      	cmp	r3, #87	; 0x57
    4a12:	d054      	beq.n	4abe <Get_Long_Lat+0x13e>
		{
			Geo_Location.gps_Longitude*=(-1); // ADD negative sign
		}
		// lat 3204.0719
		int16_t lat_dd=(dest_lat[0]-48)*10 + ((dest_lat[1]-48)*1);
		float lat_tt_int=((dest_lat[2]-48)*10) + ((dest_lat[3]-48)*1);
    4a14:	78a3      	ldrb	r3, [r4, #2]
    4a16:	3b30      	subs	r3, #48	; 0x30
    4a18:	0098      	lsls	r0, r3, #2
    4a1a:	18c0      	adds	r0, r0, r3
    4a1c:	0040      	lsls	r0, r0, #1
    4a1e:	78e3      	ldrb	r3, [r4, #3]
    4a20:	3b30      	subs	r3, #48	; 0x30
    4a22:	18c0      	adds	r0, r0, r3
    4a24:	4e2d      	ldr	r6, [pc, #180]	; (4adc <Get_Long_Lat+0x15c>)
    4a26:	47b0      	blx	r6
    4a28:	9001      	str	r0, [sp, #4]
		float lat_tt_f=(dest_lat[5]-48)*1000 + (dest_lat[6]-48)*100 + (dest_lat[7]-48)*10 + (dest_lat[8]-48)*1;
    4a2a:	7963      	ldrb	r3, [r4, #5]
    4a2c:	3b30      	subs	r3, #48	; 0x30
    4a2e:	20fa      	movs	r0, #250	; 0xfa
    4a30:	0080      	lsls	r0, r0, #2
    4a32:	4358      	muls	r0, r3
    4a34:	79a2      	ldrb	r2, [r4, #6]
    4a36:	3a30      	subs	r2, #48	; 0x30
    4a38:	2364      	movs	r3, #100	; 0x64
    4a3a:	4353      	muls	r3, r2
    4a3c:	18c0      	adds	r0, r0, r3
    4a3e:	79e2      	ldrb	r2, [r4, #7]
    4a40:	3a30      	subs	r2, #48	; 0x30
    4a42:	0093      	lsls	r3, r2, #2
    4a44:	189b      	adds	r3, r3, r2
    4a46:	005b      	lsls	r3, r3, #1
    4a48:	18c0      	adds	r0, r0, r3
    4a4a:	7a23      	ldrb	r3, [r4, #8]
    4a4c:	3b30      	subs	r3, #48	; 0x30
    4a4e:	18c0      	adds	r0, r0, r3
    4a50:	47b0      	blx	r6
		lat_tt_f=lat_tt_f/10000;
    4a52:	4d23      	ldr	r5, [pc, #140]	; (4ae0 <Get_Long_Lat+0x160>)
    4a54:	4923      	ldr	r1, [pc, #140]	; (4ae4 <Get_Long_Lat+0x164>)
    4a56:	47a8      	blx	r5
		lat_tt_int+=lat_tt_f;
    4a58:	4f23      	ldr	r7, [pc, #140]	; (4ae8 <Get_Long_Lat+0x168>)
    4a5a:	9901      	ldr	r1, [sp, #4]
    4a5c:	47b8      	blx	r7
    4a5e:	9001      	str	r0, [sp, #4]
		int16_t lat_dd=(dest_lat[0]-48)*10 + ((dest_lat[1]-48)*1);
    4a60:	7820      	ldrb	r0, [r4, #0]
    4a62:	3830      	subs	r0, #48	; 0x30
    4a64:	0083      	lsls	r3, r0, #2
    4a66:	18c0      	adds	r0, r0, r3
    4a68:	0040      	lsls	r0, r0, #1
    4a6a:	7863      	ldrb	r3, [r4, #1]
    4a6c:	3b30      	subs	r3, #48	; 0x30
		lat_tt_int/=60.0000;
		Geo_Location.gps_Latitude=0;
		Geo_Location.gps_Latitude=lat_dd+lat_tt_int;
    4a6e:	18c0      	adds	r0, r0, r3
    4a70:	47b0      	blx	r6
    4a72:	1c04      	adds	r4, r0, #0
		lat_tt_int/=60.0000;
    4a74:	491d      	ldr	r1, [pc, #116]	; (4aec <Get_Long_Lat+0x16c>)
    4a76:	9801      	ldr	r0, [sp, #4]
    4a78:	47a8      	blx	r5
    4a7a:	1c01      	adds	r1, r0, #0
		Geo_Location.gps_Latitude=lat_dd+lat_tt_int;
    4a7c:	1c20      	adds	r0, r4, #0
    4a7e:	47b8      	blx	r7
    4a80:	4b1b      	ldr	r3, [pc, #108]	; (4af0 <Get_Long_Lat+0x170>)
    4a82:	6058      	str	r0, [r3, #4]
		
		if (GPRMC.Latitude_deg == 'S')
    4a84:	2329      	movs	r3, #41	; 0x29
    4a86:	4a1b      	ldr	r2, [pc, #108]	; (4af4 <Get_Long_Lat+0x174>)
    4a88:	5cd3      	ldrb	r3, [r2, r3]
    4a8a:	2b53      	cmp	r3, #83	; 0x53
    4a8c:	d01e      	beq.n	4acc <Get_Long_Lat+0x14c>
		{
			Geo_Location.gps_Latitude*=(-1); // ADD negative sign
		}
		/*Copy the data to char array for OLED display*/
		sprintf(Geo_Location.gps_Lat_str,"%2.5f",Geo_Location.gps_Latitude);
    4a8e:	4c18      	ldr	r4, [pc, #96]	; (4af0 <Get_Long_Lat+0x170>)
    4a90:	4f19      	ldr	r7, [pc, #100]	; (4af8 <Get_Long_Lat+0x178>)
    4a92:	6860      	ldr	r0, [r4, #4]
    4a94:	47b8      	blx	r7
    4a96:	0002      	movs	r2, r0
    4a98:	000b      	movs	r3, r1
    4a9a:	4e18      	ldr	r6, [pc, #96]	; (4afc <Get_Long_Lat+0x17c>)
    4a9c:	0020      	movs	r0, r4
    4a9e:	3008      	adds	r0, #8
    4aa0:	0031      	movs	r1, r6
    4aa2:	4d17      	ldr	r5, [pc, #92]	; (4b00 <Get_Long_Lat+0x180>)
    4aa4:	47a8      	blx	r5
		sprintf(Geo_Location.gps_Lon_str,"%2.5f",Geo_Location.gps_Longitude);
    4aa6:	6820      	ldr	r0, [r4, #0]
    4aa8:	47b8      	blx	r7
    4aaa:	0002      	movs	r2, r0
    4aac:	000b      	movs	r3, r1
    4aae:	0020      	movs	r0, r4
    4ab0:	3018      	adds	r0, #24
    4ab2:	0031      	movs	r1, r6
    4ab4:	47a8      	blx	r5
		#if DEBUG_SERCOM3_Status == 1
         printf("gps_Latitude,gps_Longitude= [%2.5f,%2.4f]\r\n",Geo_Location.gps_Latitude,Geo_Location.gps_Longitude);
		 printf("gps_Lat_str,gps_Lon_str= [%s,%s]\r\n",(char *)Geo_Location.gps_Lat_str,(char *)Geo_Location.gps_Lon_str);
        #endif
}
    4ab6:	b002      	add	sp, #8
    4ab8:	bc04      	pop	{r2}
    4aba:	4690      	mov	r8, r2
    4abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Geo_Location.gps_Longitude*=(-1); // ADD negative sign
    4abe:	2380      	movs	r3, #128	; 0x80
    4ac0:	061b      	lsls	r3, r3, #24
    4ac2:	469c      	mov	ip, r3
    4ac4:	4460      	add	r0, ip
    4ac6:	4b0a      	ldr	r3, [pc, #40]	; (4af0 <Get_Long_Lat+0x170>)
    4ac8:	6018      	str	r0, [r3, #0]
    4aca:	e7a3      	b.n	4a14 <Get_Long_Lat+0x94>
			Geo_Location.gps_Latitude*=(-1); // ADD negative sign
    4acc:	2380      	movs	r3, #128	; 0x80
    4ace:	061b      	lsls	r3, r3, #24
    4ad0:	469c      	mov	ip, r3
    4ad2:	4460      	add	r0, ip
    4ad4:	4b06      	ldr	r3, [pc, #24]	; (4af0 <Get_Long_Lat+0x170>)
    4ad6:	6058      	str	r0, [r3, #4]
    4ad8:	e7d9      	b.n	4a8e <Get_Long_Lat+0x10e>
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	00006125 	.word	0x00006125
    4ae0:	00005e95 	.word	0x00005e95
    4ae4:	461c4000 	.word	0x461c4000
    4ae8:	00005b71 	.word	0x00005b71
    4aec:	42700000 	.word	0x42700000
    4af0:	200016a8 	.word	0x200016a8
    4af4:	2000155c 	.word	0x2000155c
    4af8:	000074b5 	.word	0x000074b5
    4afc:	0000cbbc 	.word	0x0000cbbc
    4b00:	00007b7d 	.word	0x00007b7d

00004b04 <main>:
int main(void)
{
    4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b06:	46d6      	mov	lr, sl
    4b08:	464f      	mov	r7, r9
    4b0a:	b580      	push	{r7, lr}
    4b0c:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    4b0e:	4b3d      	ldr	r3, [pc, #244]	; (4c04 <main+0x100>)
    4b10:	4798      	blx	r3
	start_OLED_display();
    4b12:	4b3d      	ldr	r3, [pc, #244]	; (4c08 <main+0x104>)
    4b14:	4798      	blx	r3
    gps_uart_async_init();
    4b16:	4b3d      	ldr	r3, [pc, #244]	; (4c0c <main+0x108>)
    4b18:	4798      	blx	r3
    /*usart async driver and enable callback function*/
    usart_async_register_callback(&GPS_UART, USART_ASYNC_RXC_CB, GPS_RXD_cb);
    4b1a:	4c3d      	ldr	r4, [pc, #244]	; (4c10 <main+0x10c>)
    4b1c:	4a3d      	ldr	r2, [pc, #244]	; (4c14 <main+0x110>)
    4b1e:	2100      	movs	r1, #0
    4b20:	0020      	movs	r0, r4
    4b22:	4b3d      	ldr	r3, [pc, #244]	; (4c18 <main+0x114>)
    4b24:	4798      	blx	r3
    usart_async_get_io_descriptor(&GPS_UART, &gps_uart_io);
    4b26:	493d      	ldr	r1, [pc, #244]	; (4c1c <main+0x118>)
    4b28:	0020      	movs	r0, r4
    4b2a:	4b3d      	ldr	r3, [pc, #244]	; (4c20 <main+0x11c>)
    4b2c:	4798      	blx	r3
    usart_async_enable(&GPS_UART);
    4b2e:	0020      	movs	r0, r4
    4b30:	4b3c      	ldr	r3, [pc, #240]	; (4c24 <main+0x120>)
    4b32:	4798      	blx	r3
    /*in default , only GPRMC message is enabled*/
    GPGGA.Enable=0;/*0 if no need for this message*/
    4b34:	2300      	movs	r3, #0
    4b36:	2253      	movs	r2, #83	; 0x53
    4b38:	493b      	ldr	r1, [pc, #236]	; (4c28 <main+0x124>)
    4b3a:	548b      	strb	r3, [r1, r2]
    GPRMC.Enable=1;/*0 if no need for this message*/
    4b3c:	2001      	movs	r0, #1
    4b3e:	320e      	adds	r2, #14
    4b40:	493a      	ldr	r1, [pc, #232]	; (4c2c <main+0x128>)
    4b42:	5488      	strb	r0, [r1, r2]
    GPGLL.Enable=0;/*0 if no need for this message*/
    4b44:	3a21      	subs	r2, #33	; 0x21
    4b46:	493a      	ldr	r1, [pc, #232]	; (4c30 <main+0x12c>)
    4b48:	548b      	strb	r3, [r1, r2]

	/* Replace with your application code */
	while (1) 
	{
		 if (get_gps_ringbuffer_byte() == 1)
    4b4a:	4f3a      	ldr	r7, [pc, #232]	; (4c34 <main+0x130>)
		 {
			 /*the byte is available and ready to use*/
			 /*print this for debugging purpose only*/
			 //printf("%c",rxdata[0]);
			 analyze_gps_data();
    4b4c:	4c3a      	ldr	r4, [pc, #232]	; (4c38 <main+0x134>)
		 }//end if
		 
		 /*check if the sentence is available to use*/
		   if (GPRMC.Ready ==0x01)
    4b4e:	4e37      	ldr	r6, [pc, #220]	; (4c2c <main+0x128>)
			  
			  if (GPRMC.status == 'A')
			  {
				  gpio_set_pin_level(LED2_Grn,true);delay_ms(20);
				  gpio_set_pin_level(LED2_Grn,false);
				  Get_Long_Lat(GPRMC.Latitude,GPRMC.Longitude);/*only here calculate the value of the Long/Lat*/
    4b50:	4b3a      	ldr	r3, [pc, #232]	; (4c3c <main+0x138>)
    4b52:	3b11      	subs	r3, #17
    4b54:	9301      	str	r3, [sp, #4]
    4b56:	e003      	b.n	4b60 <main+0x5c>
		   if (GPRMC.Ready ==0x01)
    4b58:	2360      	movs	r3, #96	; 0x60
    4b5a:	56f3      	ldrsb	r3, [r6, r3]
    4b5c:	2b01      	cmp	r3, #1
    4b5e:	d004      	beq.n	4b6a <main+0x66>
		 if (get_gps_ringbuffer_byte() == 1)
    4b60:	47b8      	blx	r7
    4b62:	2801      	cmp	r0, #1
    4b64:	d1f8      	bne.n	4b58 <main+0x54>
			 analyze_gps_data();
    4b66:	47a0      	blx	r4
    4b68:	e7f6      	b.n	4b58 <main+0x54>
			  if (GPRMC.status == 'V' && reset_gps_data == 1)
    4b6a:	4b30      	ldr	r3, [pc, #192]	; (4c2c <main+0x128>)
    4b6c:	7e1b      	ldrb	r3, [r3, #24]
    4b6e:	2b56      	cmp	r3, #86	; 0x56
    4b70:	d009      	beq.n	4b86 <main+0x82>
			  else if (GPRMC.status == 'A' && reset_gps_data == 0)
    4b72:	2b41      	cmp	r3, #65	; 0x41
    4b74:	d02f      	beq.n	4bd6 <main+0xd2>
			  else if (GPRMC.status == 'V')
			  {
				  gpio_set_pin_level(LED3_Oge,true);delay_ms(20);
				  gpio_set_pin_level(LED3_Oge,false);
			  }			  
			   display_OLED_results(Display_Mode_Long_lat);
    4b76:	2001      	movs	r0, #1
    4b78:	4b31      	ldr	r3, [pc, #196]	; (4c40 <main+0x13c>)
    4b7a:	4798      	blx	r3
			   GPRMC.Ready=0;
    4b7c:	2100      	movs	r1, #0
    4b7e:	2360      	movs	r3, #96	; 0x60
    4b80:	4a2a      	ldr	r2, [pc, #168]	; (4c2c <main+0x128>)
    4b82:	54d1      	strb	r1, [r2, r3]
    4b84:	e7ec      	b.n	4b60 <main+0x5c>
			  if (GPRMC.status == 'V' && reset_gps_data == 1)
    4b86:	4b2f      	ldr	r3, [pc, #188]	; (4c44 <main+0x140>)
    4b88:	781b      	ldrb	r3, [r3, #0]
    4b8a:	2b01      	cmp	r3, #1
    4b8c:	d00e      	beq.n	4bac <main+0xa8>
			  if (GPRMC.status == 'A')
    4b8e:	4b27      	ldr	r3, [pc, #156]	; (4c2c <main+0x128>)
    4b90:	7e1b      	ldrb	r3, [r3, #24]
			  else if (GPRMC.status == 'V')
    4b92:	2b56      	cmp	r3, #86	; 0x56
    4b94:	d1ef      	bne.n	4b76 <main+0x72>
    4b96:	25c0      	movs	r5, #192	; 0xc0
    4b98:	05ed      	lsls	r5, r5, #23
    4b9a:	332a      	adds	r3, #42	; 0x2a
    4b9c:	469a      	mov	sl, r3
    4b9e:	61ab      	str	r3, [r5, #24]
				  gpio_set_pin_level(LED3_Oge,true);delay_ms(20);
    4ba0:	2014      	movs	r0, #20
    4ba2:	4b29      	ldr	r3, [pc, #164]	; (4c48 <main+0x144>)
    4ba4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4ba6:	4653      	mov	r3, sl
    4ba8:	616b      	str	r3, [r5, #20]
    4baa:	e7e4      	b.n	4b76 <main+0x72>
				  reset_gps_data = 0;
    4bac:	2200      	movs	r2, #0
    4bae:	4b25      	ldr	r3, [pc, #148]	; (4c44 <main+0x140>)
    4bb0:	701a      	strb	r2, [r3, #0]
				  reset_gps_msg_info(GPRMC.ID);
    4bb2:	4d1e      	ldr	r5, [pc, #120]	; (4c2c <main+0x128>)
    4bb4:	2000      	movs	r0, #0
    4bb6:	5628      	ldrsb	r0, [r5, r0]
    4bb8:	4b24      	ldr	r3, [pc, #144]	; (4c4c <main+0x148>)
    4bba:	4699      	mov	r9, r3
    4bbc:	4798      	blx	r3
				  reset_gps_msg_info(GPGLL.ID);
    4bbe:	4b1c      	ldr	r3, [pc, #112]	; (4c30 <main+0x12c>)
    4bc0:	2000      	movs	r0, #0
    4bc2:	5618      	ldrsb	r0, [r3, r0]
    4bc4:	47c8      	blx	r9
				  reset_gps_msg_info(GPGGA.ID);
    4bc6:	4b18      	ldr	r3, [pc, #96]	; (4c28 <main+0x124>)
    4bc8:	2000      	movs	r0, #0
    4bca:	5618      	ldrsb	r0, [r3, r0]
    4bcc:	47c8      	blx	r9
			  if (GPRMC.status == 'A')
    4bce:	7e2b      	ldrb	r3, [r5, #24]
    4bd0:	2b41      	cmp	r3, #65	; 0x41
    4bd2:	d1de      	bne.n	4b92 <main+0x8e>
    4bd4:	e006      	b.n	4be4 <main+0xe0>
			  else if (GPRMC.status == 'A' && reset_gps_data == 0)
    4bd6:	4b1b      	ldr	r3, [pc, #108]	; (4c44 <main+0x140>)
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d102      	bne.n	4be4 <main+0xe0>
				  reset_gps_data = 1;
    4bde:	2201      	movs	r2, #1
    4be0:	4b18      	ldr	r3, [pc, #96]	; (4c44 <main+0x140>)
    4be2:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4be4:	25c0      	movs	r5, #192	; 0xc0
    4be6:	05ed      	lsls	r5, r5, #23
    4be8:	2340      	movs	r3, #64	; 0x40
    4bea:	469a      	mov	sl, r3
    4bec:	61ab      	str	r3, [r5, #24]
				  gpio_set_pin_level(LED2_Grn,true);delay_ms(20);
    4bee:	2014      	movs	r0, #20
    4bf0:	4b15      	ldr	r3, [pc, #84]	; (4c48 <main+0x144>)
    4bf2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4bf4:	4653      	mov	r3, sl
    4bf6:	616b      	str	r3, [r5, #20]
				  Get_Long_Lat(GPRMC.Latitude,GPRMC.Longitude);/*only here calculate the value of the Long/Lat*/
    4bf8:	4910      	ldr	r1, [pc, #64]	; (4c3c <main+0x138>)
    4bfa:	9801      	ldr	r0, [sp, #4]
    4bfc:	4b14      	ldr	r3, [pc, #80]	; (4c50 <main+0x14c>)
    4bfe:	4798      	blx	r3
    4c00:	e7b9      	b.n	4b76 <main+0x72>
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	00000115 	.word	0x00000115
    4c08:	000045e5 	.word	0x000045e5
    4c0c:	000015e5 	.word	0x000015e5
    4c10:	200014cc 	.word	0x200014cc
    4c14:	000010b9 	.word	0x000010b9
    4c18:	00001e55 	.word	0x00001e55
    4c1c:	200015c0 	.word	0x200015c0
    4c20:	00001e29 	.word	0x00001e29
    4c24:	00001dfd 	.word	0x00001dfd
    4c28:	20001648 	.word	0x20001648
    4c2c:	2000155c 	.word	0x2000155c
    4c30:	200015c8 	.word	0x200015c8
    4c34:	00001679 	.word	0x00001679
    4c38:	000016a9 	.word	0x000016a9
    4c3c:	20001586 	.word	0x20001586
    4c40:	00004681 	.word	0x00004681
    4c44:	200013c0 	.word	0x200013c0
    4c48:	00001841 	.word	0x00001841
    4c4c:	000014c9 	.word	0x000014c9
    4c50:	00004981 	.word	0x00004981

00004c54 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    4c54:	b510      	push	{r4, lr}
    4c56:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    4c58:	2800      	cmp	r0, #0
    4c5a:	d109      	bne.n	4c70 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    4c5c:	0011      	movs	r1, r2
    4c5e:	0018      	movs	r0, r3
    4c60:	4b05      	ldr	r3, [pc, #20]	; (4c78 <_read+0x24>)
    4c62:	4798      	blx	r3
    4c64:	2800      	cmp	r0, #0
    4c66:	db00      	blt.n	4c6a <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    4c68:	bd10      	pop	{r4, pc}
    4c6a:	2001      	movs	r0, #1
    4c6c:	4240      	negs	r0, r0
    4c6e:	e7fb      	b.n	4c68 <_read+0x14>
		return -1;
    4c70:	2001      	movs	r0, #1
    4c72:	4240      	negs	r0, r0
    4c74:	e7f8      	b.n	4c68 <_read+0x14>
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	00004cd1 	.word	0x00004cd1

00004c7c <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    4c7c:	b510      	push	{r4, lr}
    4c7e:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    4c80:	3801      	subs	r0, #1
    4c82:	2802      	cmp	r0, #2
    4c84:	d809      	bhi.n	4c9a <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    4c86:	0011      	movs	r1, r2
    4c88:	0018      	movs	r0, r3
    4c8a:	4b05      	ldr	r3, [pc, #20]	; (4ca0 <_write+0x24>)
    4c8c:	4798      	blx	r3
    4c8e:	2800      	cmp	r0, #0
    4c90:	db00      	blt.n	4c94 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    4c92:	bd10      	pop	{r4, pc}
    4c94:	2001      	movs	r0, #1
    4c96:	4240      	negs	r0, r0
    4c98:	e7fb      	b.n	4c92 <_write+0x16>
		return -1;
    4c9a:	2001      	movs	r0, #1
    4c9c:	4240      	negs	r0, r0
    4c9e:	e7f8      	b.n	4c92 <_write+0x16>
    4ca0:	00004cf5 	.word	0x00004cf5

00004ca4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    4ca8:	4d06      	ldr	r5, [pc, #24]	; (4cc4 <stdio_io_init+0x20>)
    4caa:	682b      	ldr	r3, [r5, #0]
    4cac:	6898      	ldr	r0, [r3, #8]
    4cae:	2100      	movs	r1, #0
    4cb0:	4c05      	ldr	r4, [pc, #20]	; (4cc8 <stdio_io_init+0x24>)
    4cb2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    4cb4:	682b      	ldr	r3, [r5, #0]
    4cb6:	6858      	ldr	r0, [r3, #4]
    4cb8:	2100      	movs	r1, #0
    4cba:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    4cbc:	4b03      	ldr	r3, [pc, #12]	; (4ccc <stdio_io_init+0x28>)
    4cbe:	601e      	str	r6, [r3, #0]
}
    4cc0:	bd70      	pop	{r4, r5, r6, pc}
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	200000b4 	.word	0x200000b4
    4cc8:	000079c9 	.word	0x000079c9
    4ccc:	200013c4 	.word	0x200013c4

00004cd0 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    4cd0:	b510      	push	{r4, lr}
    4cd2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    4cd4:	4b05      	ldr	r3, [pc, #20]	; (4cec <stdio_io_read+0x1c>)
    4cd6:	6818      	ldr	r0, [r3, #0]
    4cd8:	2800      	cmp	r0, #0
    4cda:	d004      	beq.n	4ce6 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    4cdc:	b28a      	uxth	r2, r1
    4cde:	0021      	movs	r1, r4
    4ce0:	4b03      	ldr	r3, [pc, #12]	; (4cf0 <stdio_io_read+0x20>)
    4ce2:	4798      	blx	r3
}
    4ce4:	bd10      	pop	{r4, pc}
		return 0;
    4ce6:	2000      	movs	r0, #0
    4ce8:	e7fc      	b.n	4ce4 <stdio_io_read+0x14>
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	200013c4 	.word	0x200013c4
    4cf0:	000018f1 	.word	0x000018f1

00004cf4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    4cf4:	b510      	push	{r4, lr}
    4cf6:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    4cf8:	4b05      	ldr	r3, [pc, #20]	; (4d10 <stdio_io_write+0x1c>)
    4cfa:	6818      	ldr	r0, [r3, #0]
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d004      	beq.n	4d0a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    4d00:	b28a      	uxth	r2, r1
    4d02:	0021      	movs	r1, r4
    4d04:	4b03      	ldr	r3, [pc, #12]	; (4d14 <stdio_io_write+0x20>)
    4d06:	4798      	blx	r3
}
    4d08:	bd10      	pop	{r4, pc}
		return 0;
    4d0a:	2000      	movs	r0, #0
    4d0c:	e7fc      	b.n	4d08 <stdio_io_write+0x14>
    4d0e:	46c0      	nop			; (mov r8, r8)
    4d10:	200013c4 	.word	0x200013c4
    4d14:	000018bd 	.word	0x000018bd

00004d18 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    4d18:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    4d1a:	4c04      	ldr	r4, [pc, #16]	; (4d2c <stdio_redirect_init+0x14>)
    4d1c:	0020      	movs	r0, r4
    4d1e:	4b04      	ldr	r3, [pc, #16]	; (4d30 <stdio_redirect_init+0x18>)
    4d20:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    4d22:	0020      	movs	r0, r4
    4d24:	4b03      	ldr	r3, [pc, #12]	; (4d34 <stdio_redirect_init+0x1c>)
    4d26:	4798      	blx	r3
}
    4d28:	bd10      	pop	{r4, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	200014c0 	.word	0x200014c0
    4d30:	00002079 	.word	0x00002079
    4d34:	00004ca5 	.word	0x00004ca5

00004d38 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d3a:	b083      	sub	sp, #12
    4d3c:	0006      	movs	r6, r0
    4d3e:	000c      	movs	r4, r1
    4d40:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4d42:	780a      	ldrb	r2, [r1, #0]
    4d44:	0653      	lsls	r3, r2, #25
    4d46:	0f9b      	lsrs	r3, r3, #30
    4d48:	2b01      	cmp	r3, #1
    4d4a:	d000      	beq.n	4d4e <cdcdf_acm_req+0x16>
    4d4c:	e06c      	b.n	4e28 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    4d4e:	7909      	ldrb	r1, [r1, #4]
    4d50:	7963      	ldrb	r3, [r4, #5]
    4d52:	021b      	lsls	r3, r3, #8
    4d54:	430b      	orrs	r3, r1
    4d56:	493b      	ldr	r1, [pc, #236]	; (4e44 <cdcdf_acm_req+0x10c>)
    4d58:	7809      	ldrb	r1, [r1, #0]
    4d5a:	4299      	cmp	r1, r3
    4d5c:	d003      	beq.n	4d66 <cdcdf_acm_req+0x2e>
    4d5e:	4939      	ldr	r1, [pc, #228]	; (4e44 <cdcdf_acm_req+0x10c>)
    4d60:	7849      	ldrb	r1, [r1, #1]
    4d62:	4299      	cmp	r1, r3
    4d64:	d163      	bne.n	4e2e <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    4d66:	b252      	sxtb	r2, r2
    4d68:	2a00      	cmp	r2, #0
    4d6a:	db0e      	blt.n	4d8a <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    4d6c:	79a7      	ldrb	r7, [r4, #6]
    4d6e:	79e3      	ldrb	r3, [r4, #7]
    4d70:	021b      	lsls	r3, r3, #8
    4d72:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4d74:	4b34      	ldr	r3, [pc, #208]	; (4e48 <cdcdf_acm_req+0x110>)
    4d76:	4798      	blx	r3
	switch (req->bRequest) {
    4d78:	7863      	ldrb	r3, [r4, #1]
    4d7a:	2b20      	cmp	r3, #32
    4d7c:	d018      	beq.n	4db0 <cdcdf_acm_req+0x78>
    4d7e:	2b22      	cmp	r3, #34	; 0x22
    4d80:	d03c      	beq.n	4dfc <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    4d82:	200d      	movs	r0, #13
    4d84:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    4d86:	b003      	add	sp, #12
    4d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    4d8a:	2d01      	cmp	r5, #1
    4d8c:	d052      	beq.n	4e34 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    4d8e:	7863      	ldrb	r3, [r4, #1]
    4d90:	2b21      	cmp	r3, #33	; 0x21
    4d92:	d151      	bne.n	4e38 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    4d94:	79a2      	ldrb	r2, [r4, #6]
    4d96:	79e3      	ldrb	r3, [r4, #7]
    4d98:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4d9a:	4313      	orrs	r3, r2
    4d9c:	2b07      	cmp	r3, #7
    4d9e:	d14e      	bne.n	4e3e <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    4da0:	2300      	movs	r3, #0
    4da2:	2207      	movs	r2, #7
    4da4:	4927      	ldr	r1, [pc, #156]	; (4e44 <cdcdf_acm_req+0x10c>)
    4da6:	3108      	adds	r1, #8
    4da8:	0030      	movs	r0, r6
    4daa:	4c28      	ldr	r4, [pc, #160]	; (4e4c <cdcdf_acm_req+0x114>)
    4dac:	47a0      	blx	r4
    4dae:	e7ea      	b.n	4d86 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4db0:	2f07      	cmp	r7, #7
    4db2:	d134      	bne.n	4e1e <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    4db4:	2d00      	cmp	r5, #0
    4db6:	d01a      	beq.n	4dee <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4db8:	2207      	movs	r2, #7
    4dba:	0001      	movs	r1, r0
    4dbc:	4668      	mov	r0, sp
    4dbe:	4b24      	ldr	r3, [pc, #144]	; (4e50 <cdcdf_acm_req+0x118>)
    4dc0:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4dc2:	4b20      	ldr	r3, [pc, #128]	; (4e44 <cdcdf_acm_req+0x10c>)
    4dc4:	691b      	ldr	r3, [r3, #16]
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d005      	beq.n	4dd6 <cdcdf_acm_req+0x9e>
    4dca:	4668      	mov	r0, sp
    4dcc:	4798      	blx	r3
    4dce:	0003      	movs	r3, r0
			return ERR_NONE;
    4dd0:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d0d7      	beq.n	4d86 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    4dd6:	4a1b      	ldr	r2, [pc, #108]	; (4e44 <cdcdf_acm_req+0x10c>)
    4dd8:	0013      	movs	r3, r2
    4dda:	9900      	ldr	r1, [sp, #0]
    4ddc:	6091      	str	r1, [r2, #8]
    4dde:	466a      	mov	r2, sp
    4de0:	8892      	ldrh	r2, [r2, #4]
    4de2:	819a      	strh	r2, [r3, #12]
    4de4:	466a      	mov	r2, sp
    4de6:	7992      	ldrb	r2, [r2, #6]
    4de8:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    4dea:	2000      	movs	r0, #0
    4dec:	e7cb      	b.n	4d86 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4dee:	2300      	movs	r3, #0
    4df0:	2207      	movs	r2, #7
    4df2:	0001      	movs	r1, r0
    4df4:	0030      	movs	r0, r6
    4df6:	4c15      	ldr	r4, [pc, #84]	; (4e4c <cdcdf_acm_req+0x114>)
    4df8:	47a0      	blx	r4
    4dfa:	e7c4      	b.n	4d86 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    4dfc:	2300      	movs	r3, #0
    4dfe:	2200      	movs	r2, #0
    4e00:	2100      	movs	r1, #0
    4e02:	2000      	movs	r0, #0
    4e04:	4d11      	ldr	r5, [pc, #68]	; (4e4c <cdcdf_acm_req+0x114>)
    4e06:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    4e08:	4b0e      	ldr	r3, [pc, #56]	; (4e44 <cdcdf_acm_req+0x10c>)
    4e0a:	695b      	ldr	r3, [r3, #20]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d009      	beq.n	4e24 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    4e10:	78a2      	ldrb	r2, [r4, #2]
    4e12:	78e0      	ldrb	r0, [r4, #3]
    4e14:	0200      	lsls	r0, r0, #8
    4e16:	4310      	orrs	r0, r2
    4e18:	4798      	blx	r3
		return ERR_NONE;
    4e1a:	2000      	movs	r0, #0
    4e1c:	e7b3      	b.n	4d86 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    4e1e:	2001      	movs	r0, #1
    4e20:	4240      	negs	r0, r0
    4e22:	e7b0      	b.n	4d86 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    4e24:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    4e26:	e7ae      	b.n	4d86 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    4e28:	200a      	movs	r0, #10
    4e2a:	4240      	negs	r0, r0
    4e2c:	e7ab      	b.n	4d86 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    4e2e:	200a      	movs	r0, #10
    4e30:	4240      	negs	r0, r0
    4e32:	e7a8      	b.n	4d86 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    4e34:	2000      	movs	r0, #0
    4e36:	e7a6      	b.n	4d86 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    4e38:	200d      	movs	r0, #13
    4e3a:	4240      	negs	r0, r0
    4e3c:	e7a3      	b.n	4d86 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    4e3e:	2001      	movs	r0, #1
    4e40:	4240      	negs	r0, r0
    4e42:	e7a0      	b.n	4d86 <cdcdf_acm_req+0x4e>
    4e44:	200013c8 	.word	0x200013c8
    4e48:	00005709 	.word	0x00005709
    4e4c:	000051b9 	.word	0x000051b9
    4e50:	000078b1 	.word	0x000078b1

00004e54 <cdcdf_acm_ctrl>:
{
    4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e56:	46de      	mov	lr, fp
    4e58:	4657      	mov	r7, sl
    4e5a:	464e      	mov	r6, r9
    4e5c:	4645      	mov	r5, r8
    4e5e:	b5e0      	push	{r5, r6, r7, lr}
    4e60:	b083      	sub	sp, #12
    4e62:	0016      	movs	r6, r2
	switch (ctrl) {
    4e64:	2901      	cmp	r1, #1
    4e66:	d068      	beq.n	4f3a <cdcdf_acm_ctrl+0xe6>
    4e68:	2900      	cmp	r1, #0
    4e6a:	d00b      	beq.n	4e84 <cdcdf_acm_ctrl+0x30>
    4e6c:	2902      	cmp	r1, #2
    4e6e:	d100      	bne.n	4e72 <cdcdf_acm_ctrl+0x1e>
    4e70:	e093      	b.n	4f9a <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    4e72:	200d      	movs	r0, #13
    4e74:	4240      	negs	r0, r0
}
    4e76:	b003      	add	sp, #12
    4e78:	bc3c      	pop	{r2, r3, r4, r5}
    4e7a:	4690      	mov	r8, r2
    4e7c:	4699      	mov	r9, r3
    4e7e:	46a2      	mov	sl, r4
    4e80:	46ab      	mov	fp, r5
    4e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    4e84:	6883      	ldr	r3, [r0, #8]
    4e86:	4698      	mov	r8, r3
	ifc = desc->sod;
    4e88:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d100      	bne.n	4e90 <cdcdf_acm_ctrl+0x3c>
    4e8e:	e087      	b.n	4fa0 <cdcdf_acm_ctrl+0x14c>
    4e90:	9301      	str	r3, [sp, #4]
    4e92:	2301      	movs	r3, #1
    4e94:	4443      	add	r3, r8
    4e96:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4e98:	4f47      	ldr	r7, [pc, #284]	; (4fb8 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    4e9a:	4b48      	ldr	r3, [pc, #288]	; (4fbc <cdcdf_acm_ctrl+0x168>)
    4e9c:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    4e9e:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4ea0:	7943      	ldrb	r3, [r0, #5]
    4ea2:	2108      	movs	r1, #8
    4ea4:	438b      	bics	r3, r1
    4ea6:	2b02      	cmp	r3, #2
    4ea8:	d002      	beq.n	4eb0 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    4eaa:	200a      	movs	r0, #10
    4eac:	4240      	negs	r0, r0
    4eae:	e7e2      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
    4eb0:	9901      	ldr	r1, [sp, #4]
    4eb2:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    4eb4:	780b      	ldrb	r3, [r1, #0]
    4eb6:	429a      	cmp	r2, r3
    4eb8:	d075      	beq.n	4fa6 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    4eba:	2bff      	cmp	r3, #255	; 0xff
    4ebc:	d176      	bne.n	4fac <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    4ebe:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4ec0:	2205      	movs	r2, #5
    4ec2:	6871      	ldr	r1, [r6, #4]
    4ec4:	4b3e      	ldr	r3, [pc, #248]	; (4fc0 <cdcdf_acm_ctrl+0x16c>)
    4ec6:	4798      	blx	r3
    4ec8:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    4eca:	d11e      	bne.n	4f0a <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    4ecc:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4ece:	7803      	ldrb	r3, [r0, #0]
    4ed0:	18c0      	adds	r0, r0, r3
    4ed2:	2204      	movs	r2, #4
    4ed4:	6871      	ldr	r1, [r6, #4]
    4ed6:	4b3a      	ldr	r3, [pc, #232]	; (4fc0 <cdcdf_acm_ctrl+0x16c>)
    4ed8:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	455b      	cmp	r3, fp
    4ede:	d027      	beq.n	4f30 <cdcdf_acm_ctrl+0xdc>
    4ee0:	9b01      	ldr	r3, [sp, #4]
    4ee2:	3301      	adds	r3, #1
    4ee4:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d1d9      	bne.n	4e9e <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    4eea:	200a      	movs	r0, #10
    4eec:	4240      	negs	r0, r0
    4eee:	e7c2      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4ef0:	4653      	mov	r3, sl
    4ef2:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    4ef4:	0028      	movs	r0, r5
    4ef6:	4b31      	ldr	r3, [pc, #196]	; (4fbc <cdcdf_acm_ctrl+0x168>)
    4ef8:	4798      	blx	r3
			desc->sod = ep;
    4efa:	6034      	str	r4, [r6, #0]
    4efc:	7820      	ldrb	r0, [r4, #0]
    4efe:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4f00:	6871      	ldr	r1, [r6, #4]
    4f02:	4b30      	ldr	r3, [pc, #192]	; (4fc4 <cdcdf_acm_ctrl+0x170>)
    4f04:	4798      	blx	r3
    4f06:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    4f08:	d0e0      	beq.n	4ecc <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    4f0a:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    4f0c:	7963      	ldrb	r3, [r4, #5]
    4f0e:	021b      	lsls	r3, r3, #8
    4f10:	7922      	ldrb	r2, [r4, #4]
    4f12:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4f14:	b292      	uxth	r2, r2
    4f16:	78e1      	ldrb	r1, [r4, #3]
    4f18:	0028      	movs	r0, r5
    4f1a:	47b8      	blx	r7
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d148      	bne.n	4fb2 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4f20:	b26b      	sxtb	r3, r5
    4f22:	2b00      	cmp	r3, #0
    4f24:	dbe4      	blt.n	4ef0 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4f26:	4643      	mov	r3, r8
    4f28:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    4f2a:	0028      	movs	r0, r5
    4f2c:	47c8      	blx	r9
    4f2e:	e7e4      	b.n	4efa <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    4f30:	2201      	movs	r2, #1
    4f32:	4b25      	ldr	r3, [pc, #148]	; (4fc8 <cdcdf_acm_ctrl+0x174>)
    4f34:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    4f36:	2000      	movs	r0, #0
    4f38:	e79d      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    4f3a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    4f3c:	2a00      	cmp	r2, #0
    4f3e:	d008      	beq.n	4f52 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    4f40:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    4f42:	795b      	ldrb	r3, [r3, #5]
    4f44:	2208      	movs	r2, #8
    4f46:	4393      	bics	r3, r2
    4f48:	2b02      	cmp	r3, #2
    4f4a:	d002      	beq.n	4f52 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    4f4c:	200a      	movs	r0, #10
    4f4e:	4240      	negs	r0, r0
    4f50:	e791      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    4f52:	7823      	ldrb	r3, [r4, #0]
    4f54:	2bff      	cmp	r3, #255	; 0xff
    4f56:	d008      	beq.n	4f6a <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    4f58:	23ff      	movs	r3, #255	; 0xff
    4f5a:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    4f5c:	78a0      	ldrb	r0, [r4, #2]
    4f5e:	28ff      	cmp	r0, #255	; 0xff
    4f60:	d003      	beq.n	4f6a <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    4f62:	4b1a      	ldr	r3, [pc, #104]	; (4fcc <cdcdf_acm_ctrl+0x178>)
    4f64:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4f66:	23ff      	movs	r3, #255	; 0xff
    4f68:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    4f6a:	7863      	ldrb	r3, [r4, #1]
    4f6c:	2bff      	cmp	r3, #255	; 0xff
    4f6e:	d008      	beq.n	4f82 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    4f70:	23ff      	movs	r3, #255	; 0xff
    4f72:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    4f74:	78e0      	ldrb	r0, [r4, #3]
    4f76:	28ff      	cmp	r0, #255	; 0xff
    4f78:	d003      	beq.n	4f82 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    4f7a:	4b14      	ldr	r3, [pc, #80]	; (4fcc <cdcdf_acm_ctrl+0x178>)
    4f7c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4f7e:	23ff      	movs	r3, #255	; 0xff
    4f80:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    4f82:	7920      	ldrb	r0, [r4, #4]
    4f84:	28ff      	cmp	r0, #255	; 0xff
    4f86:	d003      	beq.n	4f90 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    4f88:	4b10      	ldr	r3, [pc, #64]	; (4fcc <cdcdf_acm_ctrl+0x178>)
    4f8a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    4f8c:	23ff      	movs	r3, #255	; 0xff
    4f8e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    4f90:	2200      	movs	r2, #0
    4f92:	4b0d      	ldr	r3, [pc, #52]	; (4fc8 <cdcdf_acm_ctrl+0x174>)
    4f94:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    4f96:	2000      	movs	r0, #0
    4f98:	e76d      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    4f9a:	201b      	movs	r0, #27
    4f9c:	4240      	negs	r0, r0
    4f9e:	e76a      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    4fa0:	200a      	movs	r0, #10
    4fa2:	4240      	negs	r0, r0
    4fa4:	e767      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    4fa6:	2012      	movs	r0, #18
    4fa8:	4240      	negs	r0, r0
    4faa:	e764      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    4fac:	201c      	movs	r0, #28
    4fae:	4240      	negs	r0, r0
    4fb0:	e761      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    4fb2:	2014      	movs	r0, #20
    4fb4:	4240      	negs	r0, r0
    4fb6:	e75e      	b.n	4e76 <cdcdf_acm_ctrl+0x22>
    4fb8:	000023b9 	.word	0x000023b9
    4fbc:	0000244d 	.word	0x0000244d
    4fc0:	00005725 	.word	0x00005725
    4fc4:	0000575b 	.word	0x0000575b
    4fc8:	200013c8 	.word	0x200013c8
    4fcc:	00002421 	.word	0x00002421

00004fd0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4fd0:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    4fd2:	4b0a      	ldr	r3, [pc, #40]	; (4ffc <cdcdf_acm_init+0x2c>)
    4fd4:	4798      	blx	r3
    4fd6:	2801      	cmp	r0, #1
    4fd8:	d80c      	bhi.n	4ff4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4fda:	4809      	ldr	r0, [pc, #36]	; (5000 <cdcdf_acm_init+0x30>)
    4fdc:	4b09      	ldr	r3, [pc, #36]	; (5004 <cdcdf_acm_init+0x34>)
    4fde:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4fe0:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    4fe2:	3018      	adds	r0, #24
    4fe4:	4b08      	ldr	r3, [pc, #32]	; (5008 <cdcdf_acm_init+0x38>)
    4fe6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4fe8:	4908      	ldr	r1, [pc, #32]	; (500c <cdcdf_acm_init+0x3c>)
    4fea:	2001      	movs	r0, #1
    4fec:	4b08      	ldr	r3, [pc, #32]	; (5010 <cdcdf_acm_init+0x40>)
    4fee:	4798      	blx	r3
	return ERR_NONE;
    4ff0:	2000      	movs	r0, #0
}
    4ff2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    4ff4:	2011      	movs	r0, #17
    4ff6:	4240      	negs	r0, r0
    4ff8:	e7fb      	b.n	4ff2 <cdcdf_acm_init+0x22>
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	00005715 	.word	0x00005715
    5000:	200013c8 	.word	0x200013c8
    5004:	00004e55 	.word	0x00004e55
    5008:	000056ad 	.word	0x000056ad
    500c:	2000004c 	.word	0x2000004c
    5010:	00005615 	.word	0x00005615

00005014 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5014:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5016:	4b06      	ldr	r3, [pc, #24]	; (5030 <usbdc_unconfig+0x1c>)
    5018:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    501a:	2c00      	cmp	r4, #0
    501c:	d007      	beq.n	502e <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    501e:	2200      	movs	r2, #0
    5020:	2101      	movs	r1, #1
    5022:	0020      	movs	r0, r4
    5024:	6863      	ldr	r3, [r4, #4]
    5026:	4798      	blx	r3
		func = func->next;
    5028:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    502a:	2c00      	cmp	r4, #0
    502c:	d1f7      	bne.n	501e <usbdc_unconfig+0xa>
	}
}
    502e:	bd10      	pop	{r4, pc}
    5030:	200013ec 	.word	0x200013ec

00005034 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    5034:	b570      	push	{r4, r5, r6, lr}
    5036:	0006      	movs	r6, r0
    5038:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    503a:	4b07      	ldr	r3, [pc, #28]	; (5058 <usbdc_change_notify+0x24>)
    503c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    503e:	2c00      	cmp	r4, #0
    5040:	d103      	bne.n	504a <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    5042:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    5044:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    5046:	2c00      	cmp	r4, #0
    5048:	d0fb      	beq.n	5042 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    504a:	6863      	ldr	r3, [r4, #4]
    504c:	2b00      	cmp	r3, #0
    504e:	d0f9      	beq.n	5044 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    5050:	0029      	movs	r1, r5
    5052:	0030      	movs	r0, r6
    5054:	4798      	blx	r3
    5056:	e7f5      	b.n	5044 <usbdc_change_notify+0x10>
    5058:	200013ec 	.word	0x200013ec

0000505c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    505e:	0007      	movs	r7, r0
    5060:	000e      	movs	r6, r1
    5062:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    5064:	4b0d      	ldr	r3, [pc, #52]	; (509c <usbdc_request_handler+0x40>)
    5066:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5068:	2c00      	cmp	r4, #0
    506a:	d104      	bne.n	5076 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    506c:	2000      	movs	r0, #0
    506e:	e011      	b.n	5094 <usbdc_request_handler+0x38>
		h = h->next;
    5070:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    5072:	2c00      	cmp	r4, #0
    5074:	d00d      	beq.n	5092 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    5076:	6863      	ldr	r3, [r4, #4]
    5078:	2b00      	cmp	r3, #0
    507a:	d0f9      	beq.n	5070 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    507c:	002a      	movs	r2, r5
    507e:	0031      	movs	r1, r6
    5080:	0038      	movs	r0, r7
    5082:	4798      	blx	r3
			if (0 == rc) {
    5084:	2800      	cmp	r0, #0
    5086:	d006      	beq.n	5096 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    5088:	300a      	adds	r0, #10
    508a:	d0f1      	beq.n	5070 <usbdc_request_handler+0x14>
				return -1;
    508c:	2001      	movs	r0, #1
    508e:	4240      	negs	r0, r0
    5090:	e000      	b.n	5094 <usbdc_request_handler+0x38>
	return false;
    5092:	2000      	movs	r0, #0
}
    5094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    5096:	2001      	movs	r0, #1
    5098:	e7fc      	b.n	5094 <usbdc_request_handler+0x38>
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	200013ec 	.word	0x200013ec

000050a0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    50a0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    50a2:	4b06      	ldr	r3, [pc, #24]	; (50bc <usbd_sof_cb+0x1c>)
    50a4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    50a6:	2c00      	cmp	r4, #0
    50a8:	d103      	bne.n	50b2 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    50aa:	bd10      	pop	{r4, pc}
		sof = sof->next;
    50ac:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    50ae:	2c00      	cmp	r4, #0
    50b0:	d0fb      	beq.n	50aa <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    50b2:	6863      	ldr	r3, [r4, #4]
    50b4:	2b00      	cmp	r3, #0
    50b6:	d0f9      	beq.n	50ac <usbd_sof_cb+0xc>
			sof->cb();
    50b8:	4798      	blx	r3
    50ba:	e7f7      	b.n	50ac <usbd_sof_cb+0xc>
    50bc:	200013ec 	.word	0x200013ec

000050c0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    50c0:	b510      	push	{r4, lr}
    50c2:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    50c4:	2900      	cmp	r1, #0
    50c6:	d003      	beq.n	50d0 <usbdc_cb_ctl_done+0x10>
    50c8:	2901      	cmp	r1, #1
    50ca:	d029      	beq.n	5120 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    50cc:	2000      	movs	r0, #0
    50ce:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    50d0:	7813      	ldrb	r3, [r2, #0]
    50d2:	2b00      	cmp	r3, #0
    50d4:	d1fa      	bne.n	50cc <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    50d6:	7853      	ldrb	r3, [r2, #1]
    50d8:	2b05      	cmp	r3, #5
    50da:	d011      	beq.n	5100 <usbdc_cb_ctl_done+0x40>
    50dc:	2b09      	cmp	r3, #9
    50de:	d1f5      	bne.n	50cc <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    50e0:	7892      	ldrb	r2, [r2, #2]
    50e2:	4b12      	ldr	r3, [pc, #72]	; (512c <usbdc_cb_ctl_done+0x6c>)
    50e4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    50e6:	78a3      	ldrb	r3, [r4, #2]
    50e8:	78e1      	ldrb	r1, [r4, #3]
    50ea:	0209      	lsls	r1, r1, #8
    50ec:	4319      	orrs	r1, r3
    50ee:	1e4b      	subs	r3, r1, #1
    50f0:	4199      	sbcs	r1, r3
    50f2:	3103      	adds	r1, #3
    50f4:	4b0d      	ldr	r3, [pc, #52]	; (512c <usbdc_cb_ctl_done+0x6c>)
    50f6:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    50f8:	2001      	movs	r0, #1
    50fa:	4b0d      	ldr	r3, [pc, #52]	; (5130 <usbdc_cb_ctl_done+0x70>)
    50fc:	4798      	blx	r3
    50fe:	e7e5      	b.n	50cc <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    5100:	7890      	ldrb	r0, [r2, #2]
    5102:	4b0c      	ldr	r3, [pc, #48]	; (5134 <usbdc_cb_ctl_done+0x74>)
    5104:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5106:	78a3      	ldrb	r3, [r4, #2]
    5108:	78e1      	ldrb	r1, [r4, #3]
    510a:	0209      	lsls	r1, r1, #8
    510c:	4319      	orrs	r1, r3
    510e:	1e4b      	subs	r3, r1, #1
    5110:	4199      	sbcs	r1, r3
    5112:	3102      	adds	r1, #2
    5114:	4b05      	ldr	r3, [pc, #20]	; (512c <usbdc_cb_ctl_done+0x6c>)
    5116:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5118:	2001      	movs	r0, #1
    511a:	4b05      	ldr	r3, [pc, #20]	; (5130 <usbdc_cb_ctl_done+0x70>)
    511c:	4798      	blx	r3
    511e:	e7d5      	b.n	50cc <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    5120:	2201      	movs	r2, #1
    5122:	0021      	movs	r1, r4
    5124:	2000      	movs	r0, #0
    5126:	4b04      	ldr	r3, [pc, #16]	; (5138 <usbdc_cb_ctl_done+0x78>)
    5128:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    512a:	e7cf      	b.n	50cc <usbdc_cb_ctl_done+0xc>
    512c:	200013ec 	.word	0x200013ec
    5130:	00005035 	.word	0x00005035
    5134:	000023ad 	.word	0x000023ad
    5138:	0000505d 	.word	0x0000505d

0000513c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    513c:	b510      	push	{r4, lr}
	usbdc_unconfig();
    513e:	4b0d      	ldr	r3, [pc, #52]	; (5174 <usbdc_reset+0x38>)
    5140:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    5142:	4c0d      	ldr	r4, [pc, #52]	; (5178 <usbdc_reset+0x3c>)
    5144:	2302      	movs	r3, #2
    5146:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    5148:	2300      	movs	r3, #0
    514a:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    514c:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    514e:	2000      	movs	r0, #0
    5150:	4b0a      	ldr	r3, [pc, #40]	; (517c <usbdc_reset+0x40>)
    5152:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5154:	7f20      	ldrb	r0, [r4, #28]
    5156:	4b0a      	ldr	r3, [pc, #40]	; (5180 <usbdc_reset+0x44>)
    5158:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    515a:	4a0a      	ldr	r2, [pc, #40]	; (5184 <usbdc_reset+0x48>)
    515c:	2100      	movs	r1, #0
    515e:	2000      	movs	r0, #0
    5160:	4c09      	ldr	r4, [pc, #36]	; (5188 <usbdc_reset+0x4c>)
    5162:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5164:	4a09      	ldr	r2, [pc, #36]	; (518c <usbdc_reset+0x50>)
    5166:	2102      	movs	r1, #2
    5168:	2000      	movs	r0, #0
    516a:	47a0      	blx	r4
	usb_d_ep_enable(0);
    516c:	2000      	movs	r0, #0
    516e:	4b08      	ldr	r3, [pc, #32]	; (5190 <usbdc_reset+0x54>)
    5170:	4798      	blx	r3
}
    5172:	bd10      	pop	{r4, pc}
    5174:	00005015 	.word	0x00005015
    5178:	200013ec 	.word	0x200013ec
    517c:	00002421 	.word	0x00002421
    5180:	0000240d 	.word	0x0000240d
    5184:	000051d5 	.word	0x000051d5
    5188:	00002629 	.word	0x00002629
    518c:	000050c1 	.word	0x000050c1
    5190:	0000244d 	.word	0x0000244d

00005194 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5194:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    5196:	2800      	cmp	r0, #0
    5198:	d002      	beq.n	51a0 <usbd_event_cb+0xc>
    519a:	2801      	cmp	r0, #1
    519c:	d004      	beq.n	51a8 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    519e:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    51a0:	2000      	movs	r0, #0
    51a2:	4b03      	ldr	r3, [pc, #12]	; (51b0 <usbd_event_cb+0x1c>)
    51a4:	4798      	blx	r3
		break;
    51a6:	e7fa      	b.n	519e <usbd_event_cb+0xa>
		usbdc_reset();
    51a8:	4b02      	ldr	r3, [pc, #8]	; (51b4 <usbd_event_cb+0x20>)
    51aa:	4798      	blx	r3
}
    51ac:	e7f7      	b.n	519e <usbd_event_cb+0xa>
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	00005035 	.word	0x00005035
    51b4:	0000513d 	.word	0x0000513d

000051b8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    51b8:	b510      	push	{r4, lr}
    51ba:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    51bc:	ac01      	add	r4, sp, #4
    51be:	9101      	str	r1, [sp, #4]
    51c0:	9202      	str	r2, [sp, #8]
    51c2:	7220      	strb	r0, [r4, #8]
    51c4:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    51c6:	0020      	movs	r0, r4
    51c8:	4b01      	ldr	r3, [pc, #4]	; (51d0 <usbdc_xfer+0x18>)
    51ca:	4798      	blx	r3
}
    51cc:	b004      	add	sp, #16
    51ce:	bd10      	pop	{r4, pc}
    51d0:	00002499 	.word	0x00002499

000051d4 <usbdc_cb_ctl_req>:
{
    51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d6:	46c6      	mov	lr, r8
    51d8:	b500      	push	{lr}
    51da:	b084      	sub	sp, #16
    51dc:	0005      	movs	r5, r0
    51de:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    51e0:	2200      	movs	r2, #0
    51e2:	4bb5      	ldr	r3, [pc, #724]	; (54b8 <usbdc_cb_ctl_req+0x2e4>)
    51e4:	4798      	blx	r3
    51e6:	1c43      	adds	r3, r0, #1
    51e8:	d00d      	beq.n	5206 <usbdc_cb_ctl_req+0x32>
		return true;
    51ea:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    51ec:	2801      	cmp	r0, #1
    51ee:	d00b      	beq.n	5208 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    51f0:	7822      	ldrb	r2, [r4, #0]
    51f2:	231f      	movs	r3, #31
    51f4:	0011      	movs	r1, r2
    51f6:	4399      	bics	r1, r3
    51f8:	d00b      	beq.n	5212 <usbdc_cb_ctl_req+0x3e>
    51fa:	b2cb      	uxtb	r3, r1
    51fc:	2b80      	cmp	r3, #128	; 0x80
    51fe:	d100      	bne.n	5202 <usbdc_cb_ctl_req+0x2e>
    5200:	e0f8      	b.n	53f4 <usbdc_cb_ctl_req+0x220>
		return false;
    5202:	2300      	movs	r3, #0
    5204:	e000      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    5206:	2300      	movs	r3, #0
}
    5208:	0018      	movs	r0, r3
    520a:	b004      	add	sp, #16
    520c:	bc04      	pop	{r2}
    520e:	4690      	mov	r8, r2
    5210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    5212:	7863      	ldrb	r3, [r4, #1]
    5214:	2b0b      	cmp	r3, #11
    5216:	d900      	bls.n	521a <usbdc_cb_ctl_req+0x46>
    5218:	e1e4      	b.n	55e4 <usbdc_cb_ctl_req+0x410>
    521a:	009b      	lsls	r3, r3, #2
    521c:	49a7      	ldr	r1, [pc, #668]	; (54bc <usbdc_cb_ctl_req+0x2e8>)
    521e:	58cb      	ldr	r3, [r1, r3]
    5220:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5222:	2301      	movs	r3, #1
    5224:	2200      	movs	r2, #0
    5226:	2100      	movs	r1, #0
    5228:	0028      	movs	r0, r5
    522a:	4ca5      	ldr	r4, [pc, #660]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    522c:	47a0      	blx	r4
    522e:	4243      	negs	r3, r0
    5230:	4143      	adcs	r3, r0
    5232:	b2db      	uxtb	r3, r3
    5234:	e7e8      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    5236:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    5238:	2a00      	cmp	r2, #0
    523a:	d01a      	beq.n	5272 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    523c:	4ba1      	ldr	r3, [pc, #644]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    523e:	681b      	ldr	r3, [r3, #0]
    5240:	6859      	ldr	r1, [r3, #4]
    5242:	6818      	ldr	r0, [r3, #0]
    5244:	4ba0      	ldr	r3, [pc, #640]	; (54c8 <usbdc_cb_ctl_req+0x2f4>)
    5246:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5248:	2800      	cmp	r0, #0
    524a:	d100      	bne.n	524e <usbdc_cb_ctl_req+0x7a>
    524c:	e1d4      	b.n	55f8 <usbdc_cb_ctl_req+0x424>
    524e:	78c3      	ldrb	r3, [r0, #3]
    5250:	021b      	lsls	r3, r3, #8
    5252:	7881      	ldrb	r1, [r0, #2]
    5254:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    5256:	b289      	uxth	r1, r1
    5258:	1841      	adds	r1, r0, r1
    525a:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    525c:	2204      	movs	r2, #4
    525e:	4b9b      	ldr	r3, [pc, #620]	; (54cc <usbdc_cb_ctl_req+0x2f8>)
    5260:	4798      	blx	r3
    5262:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    5264:	2800      	cmp	r0, #0
    5266:	d006      	beq.n	5276 <usbdc_cb_ctl_req+0xa2>
    5268:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    526a:	4f96      	ldr	r7, [pc, #600]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    526c:	4b97      	ldr	r3, [pc, #604]	; (54cc <usbdc_cb_ctl_req+0x2f8>)
    526e:	4698      	mov	r8, r3
    5270:	e01a      	b.n	52a8 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    5272:	4b97      	ldr	r3, [pc, #604]	; (54d0 <usbdc_cb_ctl_req+0x2fc>)
    5274:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5276:	2301      	movs	r3, #1
    5278:	2200      	movs	r2, #0
    527a:	2100      	movs	r1, #0
    527c:	0028      	movs	r0, r5
    527e:	4c90      	ldr	r4, [pc, #576]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    5280:	47a0      	blx	r4
    5282:	4243      	negs	r3, r0
    5284:	4143      	adcs	r3, r0
    5286:	b2db      	uxtb	r3, r3
    5288:	e7be      	b.n	5208 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    528a:	0034      	movs	r4, r6
    528c:	e000      	b.n	5290 <usbdc_cb_ctl_req+0xbc>
    528e:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    5290:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    5292:	7803      	ldrb	r3, [r0, #0]
    5294:	18c0      	adds	r0, r0, r3
    5296:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5298:	9b03      	ldr	r3, [sp, #12]
    529a:	9301      	str	r3, [sp, #4]
    529c:	2204      	movs	r2, #4
    529e:	0019      	movs	r1, r3
    52a0:	47c0      	blx	r8
    52a2:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    52a4:	2800      	cmp	r0, #0
    52a6:	d0e6      	beq.n	5276 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    52a8:	7886      	ldrb	r6, [r0, #2]
    52aa:	42a6      	cmp	r6, r4
    52ac:	d0f0      	beq.n	5290 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    52ae:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    52b0:	2c00      	cmp	r4, #0
    52b2:	d0ea      	beq.n	528a <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    52b4:	aa02      	add	r2, sp, #8
    52b6:	2100      	movs	r1, #0
    52b8:	0020      	movs	r0, r4
    52ba:	6863      	ldr	r3, [r4, #4]
    52bc:	4798      	blx	r3
    52be:	2800      	cmp	r0, #0
    52c0:	d0e5      	beq.n	528e <usbdc_cb_ctl_req+0xba>
					func = func->next;
    52c2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    52c4:	2c00      	cmp	r4, #0
    52c6:	d1f5      	bne.n	52b4 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    52c8:	0034      	movs	r4, r6
    52ca:	e7e1      	b.n	5290 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    52cc:	231f      	movs	r3, #31
    52ce:	401a      	ands	r2, r3
		return false;
    52d0:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    52d2:	2a02      	cmp	r2, #2
    52d4:	d198      	bne.n	5208 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    52d6:	79a3      	ldrb	r3, [r4, #6]
    52d8:	79e2      	ldrb	r2, [r4, #7]
    52da:	0212      	lsls	r2, r2, #8
    52dc:	431a      	orrs	r2, r3
			return false;
    52de:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    52e0:	2a00      	cmp	r2, #0
    52e2:	d000      	beq.n	52e6 <usbdc_cb_ctl_req+0x112>
    52e4:	e790      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    52e6:	7920      	ldrb	r0, [r4, #4]
    52e8:	2100      	movs	r1, #0
    52ea:	4b7a      	ldr	r3, [pc, #488]	; (54d4 <usbdc_cb_ctl_req+0x300>)
    52ec:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    52ee:	2301      	movs	r3, #1
    52f0:	2200      	movs	r2, #0
    52f2:	2100      	movs	r1, #0
    52f4:	0028      	movs	r0, r5
    52f6:	4c72      	ldr	r4, [pc, #456]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    52f8:	47a0      	blx	r4
		return true;
    52fa:	2301      	movs	r3, #1
    52fc:	e784      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    52fe:	231f      	movs	r3, #31
    5300:	401a      	ands	r2, r3
		return false;
    5302:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5304:	2a02      	cmp	r2, #2
    5306:	d000      	beq.n	530a <usbdc_cb_ctl_req+0x136>
    5308:	e77e      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    530a:	79a3      	ldrb	r3, [r4, #6]
    530c:	79e2      	ldrb	r2, [r4, #7]
    530e:	0212      	lsls	r2, r2, #8
    5310:	431a      	orrs	r2, r3
			return false;
    5312:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    5314:	2a00      	cmp	r2, #0
    5316:	d000      	beq.n	531a <usbdc_cb_ctl_req+0x146>
    5318:	e776      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    531a:	7920      	ldrb	r0, [r4, #4]
    531c:	2101      	movs	r1, #1
    531e:	4b6d      	ldr	r3, [pc, #436]	; (54d4 <usbdc_cb_ctl_req+0x300>)
    5320:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5322:	2301      	movs	r3, #1
    5324:	2200      	movs	r2, #0
    5326:	2100      	movs	r1, #0
    5328:	0028      	movs	r0, r5
    532a:	4c65      	ldr	r4, [pc, #404]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    532c:	47a0      	blx	r4
		return true;
    532e:	2301      	movs	r3, #1
    5330:	e76a      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    5332:	78a3      	ldrb	r3, [r4, #2]
    5334:	78e5      	ldrb	r5, [r4, #3]
    5336:	022d      	lsls	r5, r5, #8
    5338:	431d      	orrs	r5, r3
    533a:	7923      	ldrb	r3, [r4, #4]
    533c:	7964      	ldrb	r4, [r4, #5]
    533e:	0224      	lsls	r4, r4, #8
    5340:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5342:	4a60      	ldr	r2, [pc, #384]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    5344:	6813      	ldr	r3, [r2, #0]
    5346:	7ed2      	ldrb	r2, [r2, #27]
    5348:	6859      	ldr	r1, [r3, #4]
    534a:	6818      	ldr	r0, [r3, #0]
    534c:	4b5e      	ldr	r3, [pc, #376]	; (54c8 <usbdc_cb_ctl_req+0x2f4>)
    534e:	4798      	blx	r3
	if (NULL == ifc) {
    5350:	2800      	cmp	r0, #0
    5352:	d047      	beq.n	53e4 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    5354:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    5356:	78c3      	ldrb	r3, [r0, #3]
    5358:	021b      	lsls	r3, r3, #8
    535a:	7881      	ldrb	r1, [r0, #2]
    535c:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    535e:	b289      	uxth	r1, r1
    5360:	1841      	adds	r1, r0, r1
    5362:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5364:	2204      	movs	r2, #4
    5366:	4b59      	ldr	r3, [pc, #356]	; (54cc <usbdc_cb_ctl_req+0x2f8>)
    5368:	4798      	blx	r3
    536a:	2800      	cmp	r0, #0
    536c:	d03c      	beq.n	53e8 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    536e:	4e57      	ldr	r6, [pc, #348]	; (54cc <usbdc_cb_ctl_req+0x2f8>)
    5370:	e008      	b.n	5384 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    5372:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    5374:	7803      	ldrb	r3, [r0, #0]
    5376:	18c0      	adds	r0, r0, r3
    5378:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    537a:	2204      	movs	r2, #4
    537c:	9903      	ldr	r1, [sp, #12]
    537e:	47b0      	blx	r6
		if (NULL == ifc) {
    5380:	2800      	cmp	r0, #0
    5382:	d033      	beq.n	53ec <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5384:	7883      	ldrb	r3, [r0, #2]
    5386:	42a3      	cmp	r3, r4
    5388:	d1f3      	bne.n	5372 <usbdc_cb_ctl_req+0x19e>
    538a:	78c3      	ldrb	r3, [r0, #3]
    538c:	42ab      	cmp	r3, r5
    538e:	d1f0      	bne.n	5372 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    5390:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    5392:	4b4c      	ldr	r3, [pc, #304]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    5394:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    5396:	2e00      	cmp	r6, #0
    5398:	d02a      	beq.n	53f0 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    539a:	aa02      	add	r2, sp, #8
    539c:	2101      	movs	r1, #1
    539e:	0030      	movs	r0, r6
    53a0:	6873      	ldr	r3, [r6, #4]
    53a2:	4798      	blx	r3
    53a4:	2800      	cmp	r0, #0
    53a6:	d004      	beq.n	53b2 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    53a8:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    53aa:	2e00      	cmp	r6, #0
    53ac:	d1f5      	bne.n	539a <usbdc_cb_ctl_req+0x1c6>
	return false;
    53ae:	2300      	movs	r3, #0
    53b0:	e72a      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    53b2:	6873      	ldr	r3, [r6, #4]
    53b4:	aa02      	add	r2, sp, #8
    53b6:	2100      	movs	r1, #0
    53b8:	0030      	movs	r0, r6
    53ba:	4798      	blx	r3
			return false;
    53bc:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    53be:	2800      	cmp	r0, #0
    53c0:	d000      	beq.n	53c4 <usbdc_cb_ctl_req+0x1f0>
    53c2:	e721      	b.n	5208 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    53c4:	2d00      	cmp	r5, #0
    53c6:	d005      	beq.n	53d4 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    53c8:	493e      	ldr	r1, [pc, #248]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    53ca:	2201      	movs	r2, #1
    53cc:	40a2      	lsls	r2, r4
    53ce:	7f4b      	ldrb	r3, [r1, #29]
    53d0:	4313      	orrs	r3, r2
    53d2:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    53d4:	2300      	movs	r3, #0
    53d6:	2200      	movs	r2, #0
    53d8:	2100      	movs	r1, #0
    53da:	2000      	movs	r0, #0
    53dc:	4c38      	ldr	r4, [pc, #224]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    53de:	47a0      	blx	r4
			return true;
    53e0:	2301      	movs	r3, #1
    53e2:	e711      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    53e4:	2300      	movs	r3, #0
    53e6:	e70f      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    53e8:	2300      	movs	r3, #0
    53ea:	e70d      	b.n	5208 <usbdc_cb_ctl_req+0x34>
			return false;
    53ec:	2300      	movs	r3, #0
    53ee:	e70b      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	return false;
    53f0:	2300      	movs	r3, #0
    53f2:	e709      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    53f4:	7863      	ldrb	r3, [r4, #1]
    53f6:	2b06      	cmp	r3, #6
    53f8:	d033      	beq.n	5462 <usbdc_cb_ctl_req+0x28e>
    53fa:	b2d9      	uxtb	r1, r3
    53fc:	2906      	cmp	r1, #6
    53fe:	d922      	bls.n	5446 <usbdc_cb_ctl_req+0x272>
    5400:	2b08      	cmp	r3, #8
    5402:	d100      	bne.n	5406 <usbdc_cb_ctl_req+0x232>
    5404:	e0af      	b.n	5566 <usbdc_cb_ctl_req+0x392>
    5406:	2b0a      	cmp	r3, #10
    5408:	d000      	beq.n	540c <usbdc_cb_ctl_req+0x238>
    540a:	e0ed      	b.n	55e8 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    540c:	4b2d      	ldr	r3, [pc, #180]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    540e:	7f5a      	ldrb	r2, [r3, #29]
    5410:	7921      	ldrb	r1, [r4, #4]
    5412:	7963      	ldrb	r3, [r4, #5]
    5414:	021b      	lsls	r3, r3, #8
    5416:	430b      	orrs	r3, r1
    5418:	411a      	asrs	r2, r3
    541a:	07d3      	lsls	r3, r2, #31
    541c:	d400      	bmi.n	5420 <usbdc_cb_ctl_req+0x24c>
    541e:	e0ca      	b.n	55b6 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5420:	4b28      	ldr	r3, [pc, #160]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    5422:	691d      	ldr	r5, [r3, #16]
	return false;
    5424:	2300      	movs	r3, #0
	while (NULL != func) {
    5426:	2d00      	cmp	r5, #0
    5428:	d100      	bne.n	542c <usbdc_cb_ctl_req+0x258>
    542a:	e6ed      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    542c:	0022      	movs	r2, r4
    542e:	2102      	movs	r1, #2
    5430:	0028      	movs	r0, r5
    5432:	686b      	ldr	r3, [r5, #4]
    5434:	4798      	blx	r3
    5436:	2800      	cmp	r0, #0
    5438:	db00      	blt.n	543c <usbdc_cb_ctl_req+0x268>
    543a:	e0c8      	b.n	55ce <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    543c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    543e:	2d00      	cmp	r5, #0
    5440:	d1f4      	bne.n	542c <usbdc_cb_ctl_req+0x258>
	return false;
    5442:	2300      	movs	r3, #0
    5444:	e6e0      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    5446:	2b00      	cmp	r3, #0
    5448:	d000      	beq.n	544c <usbdc_cb_ctl_req+0x278>
    544a:	e0cd      	b.n	55e8 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    544c:	231f      	movs	r3, #31
    544e:	401a      	ands	r2, r3
    5450:	b2d3      	uxtb	r3, r2
    5452:	2b01      	cmp	r3, #1
    5454:	d800      	bhi.n	5458 <usbdc_cb_ctl_req+0x284>
    5456:	e092      	b.n	557e <usbdc_cb_ctl_req+0x3aa>
    5458:	2a02      	cmp	r2, #2
    545a:	d100      	bne.n	545e <usbdc_cb_ctl_req+0x28a>
    545c:	e09f      	b.n	559e <usbdc_cb_ctl_req+0x3ca>
		return false;
    545e:	2300      	movs	r3, #0
    5460:	e6d2      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5462:	78a3      	ldrb	r3, [r4, #2]
    5464:	78e2      	ldrb	r2, [r4, #3]
    5466:	0212      	lsls	r2, r2, #8
    5468:	431a      	orrs	r2, r3
    546a:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    546c:	2b02      	cmp	r3, #2
    546e:	d033      	beq.n	54d8 <usbdc_cb_ctl_req+0x304>
    5470:	2b03      	cmp	r3, #3
    5472:	d056      	beq.n	5522 <usbdc_cb_ctl_req+0x34e>
    5474:	2b01      	cmp	r3, #1
    5476:	d001      	beq.n	547c <usbdc_cb_ctl_req+0x2a8>
	return false;
    5478:	2300      	movs	r3, #0
    547a:	e6c5      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    547c:	79a2      	ldrb	r2, [r4, #6]
    547e:	79e3      	ldrb	r3, [r4, #7]
    5480:	021b      	lsls	r3, r3, #8
    5482:	4313      	orrs	r3, r2
    5484:	1c1a      	adds	r2, r3, #0
    5486:	2b12      	cmp	r3, #18
    5488:	d900      	bls.n	548c <usbdc_cb_ctl_req+0x2b8>
    548a:	2212      	movs	r2, #18
    548c:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    548e:	4b0d      	ldr	r3, [pc, #52]	; (54c4 <usbdc_cb_ctl_req+0x2f0>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	6859      	ldr	r1, [r3, #4]
    5494:	6818      	ldr	r0, [r3, #0]
    5496:	2201      	movs	r2, #1
    5498:	4b0c      	ldr	r3, [pc, #48]	; (54cc <usbdc_cb_ctl_req+0x2f8>)
    549a:	4798      	blx	r3
	if (!dev_desc) {
    549c:	2800      	cmp	r0, #0
    549e:	d100      	bne.n	54a2 <usbdc_cb_ctl_req+0x2ce>
    54a0:	e0a4      	b.n	55ec <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    54a2:	2300      	movs	r3, #0
    54a4:	0022      	movs	r2, r4
    54a6:	0001      	movs	r1, r0
    54a8:	0028      	movs	r0, r5
    54aa:	4c05      	ldr	r4, [pc, #20]	; (54c0 <usbdc_cb_ctl_req+0x2ec>)
    54ac:	47a0      	blx	r4
    54ae:	4243      	negs	r3, r0
    54b0:	4143      	adcs	r3, r0
    54b2:	b2db      	uxtb	r3, r3
    54b4:	e6a8      	b.n	5208 <usbdc_cb_ctl_req+0x34>
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	0000505d 	.word	0x0000505d
    54bc:	0000cbc4 	.word	0x0000cbc4
    54c0:	000051b9 	.word	0x000051b9
    54c4:	200013ec 	.word	0x200013ec
    54c8:	000057a1 	.word	0x000057a1
    54cc:	00005725 	.word	0x00005725
    54d0:	00005015 	.word	0x00005015
    54d4:	000025c1 	.word	0x000025c1
	uint16_t length   = req->wLength;
    54d8:	79a3      	ldrb	r3, [r4, #6]
    54da:	79e6      	ldrb	r6, [r4, #7]
    54dc:	0236      	lsls	r6, r6, #8
    54de:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    54e0:	4b46      	ldr	r3, [pc, #280]	; (55fc <usbdc_cb_ctl_req+0x428>)
    54e2:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	3201      	adds	r2, #1
    54e8:	b2d2      	uxtb	r2, r2
    54ea:	6859      	ldr	r1, [r3, #4]
    54ec:	6818      	ldr	r0, [r3, #0]
    54ee:	4b44      	ldr	r3, [pc, #272]	; (5600 <usbdc_cb_ctl_req+0x42c>)
    54f0:	4798      	blx	r3
    54f2:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    54f4:	d07c      	beq.n	55f0 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    54f6:	78c3      	ldrb	r3, [r0, #3]
    54f8:	021b      	lsls	r3, r3, #8
    54fa:	7884      	ldrb	r4, [r0, #2]
    54fc:	18e4      	adds	r4, r4, r3
    54fe:	b2a4      	uxth	r4, r4
		need_zlp = false;
    5500:	2300      	movs	r3, #0
	if (length <= total_len) {
    5502:	42a6      	cmp	r6, r4
    5504:	d905      	bls.n	5512 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5506:	3f01      	subs	r7, #1
    5508:	403e      	ands	r6, r7
    550a:	4273      	negs	r3, r6
    550c:	4173      	adcs	r3, r6
    550e:	b2db      	uxtb	r3, r3
		length = total_len;
    5510:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    5512:	0032      	movs	r2, r6
    5514:	0028      	movs	r0, r5
    5516:	4c3b      	ldr	r4, [pc, #236]	; (5604 <usbdc_cb_ctl_req+0x430>)
    5518:	47a0      	blx	r4
    551a:	4243      	negs	r3, r0
    551c:	4143      	adcs	r3, r0
    551e:	b2db      	uxtb	r3, r3
    5520:	e672      	b.n	5208 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    5522:	79a3      	ldrb	r3, [r4, #6]
    5524:	79e1      	ldrb	r1, [r4, #7]
    5526:	0209      	lsls	r1, r1, #8
    5528:	4319      	orrs	r1, r3
    552a:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    552c:	4b33      	ldr	r3, [pc, #204]	; (55fc <usbdc_cb_ctl_req+0x428>)
    552e:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	b2d2      	uxtb	r2, r2
    5534:	6859      	ldr	r1, [r3, #4]
    5536:	6818      	ldr	r0, [r3, #0]
    5538:	4b33      	ldr	r3, [pc, #204]	; (5608 <usbdc_cb_ctl_req+0x434>)
    553a:	4798      	blx	r3
    553c:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    553e:	d059      	beq.n	55f4 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    5540:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    5542:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    5544:	4294      	cmp	r4, r2
    5546:	d906      	bls.n	5556 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5548:	1e73      	subs	r3, r6, #1
    554a:	4023      	ands	r3, r4
    554c:	0018      	movs	r0, r3
    554e:	4243      	negs	r3, r0
    5550:	4143      	adcs	r3, r0
    5552:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    5554:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5556:	0022      	movs	r2, r4
    5558:	0028      	movs	r0, r5
    555a:	4c2a      	ldr	r4, [pc, #168]	; (5604 <usbdc_cb_ctl_req+0x430>)
    555c:	47a0      	blx	r4
    555e:	4243      	negs	r3, r0
    5560:	4143      	adcs	r3, r0
    5562:	b2db      	uxtb	r3, r3
    5564:	e650      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5566:	4b25      	ldr	r3, [pc, #148]	; (55fc <usbdc_cb_ctl_req+0x428>)
    5568:	7eda      	ldrb	r2, [r3, #27]
    556a:	6959      	ldr	r1, [r3, #20]
    556c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    556e:	6959      	ldr	r1, [r3, #20]
    5570:	2300      	movs	r3, #0
    5572:	2201      	movs	r2, #1
    5574:	0028      	movs	r0, r5
    5576:	4c23      	ldr	r4, [pc, #140]	; (5604 <usbdc_cb_ctl_req+0x430>)
    5578:	47a0      	blx	r4
		return true;
    557a:	2301      	movs	r3, #1
    557c:	e644      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		st = 0;
    557e:	2300      	movs	r3, #0
    5580:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5582:	4c1e      	ldr	r4, [pc, #120]	; (55fc <usbdc_cb_ctl_req+0x428>)
    5584:	2202      	movs	r2, #2
    5586:	a902      	add	r1, sp, #8
    5588:	6960      	ldr	r0, [r4, #20]
    558a:	4b20      	ldr	r3, [pc, #128]	; (560c <usbdc_cb_ctl_req+0x438>)
    558c:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    558e:	6961      	ldr	r1, [r4, #20]
    5590:	2300      	movs	r3, #0
    5592:	2202      	movs	r2, #2
    5594:	0028      	movs	r0, r5
    5596:	4c1b      	ldr	r4, [pc, #108]	; (5604 <usbdc_cb_ctl_req+0x430>)
    5598:	47a0      	blx	r4
	return true;
    559a:	2301      	movs	r3, #1
    559c:	e634      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    559e:	7920      	ldrb	r0, [r4, #4]
    55a0:	2102      	movs	r1, #2
    55a2:	4b1b      	ldr	r3, [pc, #108]	; (5610 <usbdc_cb_ctl_req+0x43c>)
    55a4:	4798      	blx	r3
		if (st < 0) {
    55a6:	2800      	cmp	r0, #0
    55a8:	db03      	blt.n	55b2 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    55aa:	2301      	movs	r3, #1
    55ac:	4018      	ands	r0, r3
    55ae:	9002      	str	r0, [sp, #8]
    55b0:	e7e7      	b.n	5582 <usbdc_cb_ctl_req+0x3ae>
			return false;
    55b2:	2300      	movs	r3, #0
    55b4:	e628      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    55b6:	4b11      	ldr	r3, [pc, #68]	; (55fc <usbdc_cb_ctl_req+0x428>)
    55b8:	2200      	movs	r2, #0
    55ba:	6959      	ldr	r1, [r3, #20]
    55bc:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    55be:	6959      	ldr	r1, [r3, #20]
    55c0:	2300      	movs	r3, #0
    55c2:	3201      	adds	r2, #1
    55c4:	2000      	movs	r0, #0
    55c6:	4c0f      	ldr	r4, [pc, #60]	; (5604 <usbdc_cb_ctl_req+0x430>)
    55c8:	47a0      	blx	r4
		return true;
    55ca:	2301      	movs	r3, #1
    55cc:	e61c      	b.n	5208 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    55ce:	4b0b      	ldr	r3, [pc, #44]	; (55fc <usbdc_cb_ctl_req+0x428>)
    55d0:	695a      	ldr	r2, [r3, #20]
    55d2:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    55d4:	6959      	ldr	r1, [r3, #20]
    55d6:	2300      	movs	r3, #0
    55d8:	2201      	movs	r2, #1
    55da:	2000      	movs	r0, #0
    55dc:	4c09      	ldr	r4, [pc, #36]	; (5604 <usbdc_cb_ctl_req+0x430>)
    55de:	47a0      	blx	r4
			return true;
    55e0:	2301      	movs	r3, #1
    55e2:	e611      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    55e4:	2300      	movs	r3, #0
    55e6:	e60f      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    55e8:	2300      	movs	r3, #0
    55ea:	e60d      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    55ec:	2300      	movs	r3, #0
    55ee:	e60b      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    55f0:	2300      	movs	r3, #0
    55f2:	e609      	b.n	5208 <usbdc_cb_ctl_req+0x34>
		return false;
    55f4:	2300      	movs	r3, #0
    55f6:	e607      	b.n	5208 <usbdc_cb_ctl_req+0x34>
			return false;
    55f8:	2300      	movs	r3, #0
    55fa:	e605      	b.n	5208 <usbdc_cb_ctl_req+0x34>
    55fc:	200013ec 	.word	0x200013ec
    5600:	000057a1 	.word	0x000057a1
    5604:	000051b9 	.word	0x000051b9
    5608:	00005809 	.word	0x00005809
    560c:	000078b1 	.word	0x000078b1
    5610:	000025c1 	.word	0x000025c1

00005614 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    5614:	b510      	push	{r4, lr}
	switch (type) {
    5616:	2801      	cmp	r0, #1
    5618:	d009      	beq.n	562e <usbdc_register_handler+0x1a>
    561a:	2800      	cmp	r0, #0
    561c:	d002      	beq.n	5624 <usbdc_register_handler+0x10>
    561e:	2802      	cmp	r0, #2
    5620:	d00a      	beq.n	5638 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    5622:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5624:	4807      	ldr	r0, [pc, #28]	; (5644 <usbdc_register_handler+0x30>)
    5626:	3004      	adds	r0, #4
    5628:	4b07      	ldr	r3, [pc, #28]	; (5648 <usbdc_register_handler+0x34>)
    562a:	4798      	blx	r3
		break;
    562c:	e7f9      	b.n	5622 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    562e:	4805      	ldr	r0, [pc, #20]	; (5644 <usbdc_register_handler+0x30>)
    5630:	3008      	adds	r0, #8
    5632:	4b05      	ldr	r3, [pc, #20]	; (5648 <usbdc_register_handler+0x34>)
    5634:	4798      	blx	r3
		break;
    5636:	e7f4      	b.n	5622 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5638:	4802      	ldr	r0, [pc, #8]	; (5644 <usbdc_register_handler+0x30>)
    563a:	300c      	adds	r0, #12
    563c:	4b02      	ldr	r3, [pc, #8]	; (5648 <usbdc_register_handler+0x34>)
    563e:	4798      	blx	r3
}
    5640:	e7ef      	b.n	5622 <usbdc_register_handler+0xe>
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	200013ec 	.word	0x200013ec
    5648:	000026d9 	.word	0x000026d9

0000564c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    564c:	b570      	push	{r4, r5, r6, lr}
    564e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    5650:	1e43      	subs	r3, r0, #1
    5652:	4198      	sbcs	r0, r3
    5654:	b2c0      	uxtb	r0, r0
    5656:	4a0c      	ldr	r2, [pc, #48]	; (5688 <usbdc_init+0x3c>)
    5658:	490c      	ldr	r1, [pc, #48]	; (568c <usbdc_init+0x40>)
    565a:	4b0d      	ldr	r3, [pc, #52]	; (5690 <usbdc_init+0x44>)
    565c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    565e:	4b0d      	ldr	r3, [pc, #52]	; (5694 <usbdc_init+0x48>)
    5660:	4798      	blx	r3
	if (rc < 0) {
    5662:	2800      	cmp	r0, #0
    5664:	db0e      	blt.n	5684 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5666:	4d0c      	ldr	r5, [pc, #48]	; (5698 <usbdc_init+0x4c>)
    5668:	2220      	movs	r2, #32
    566a:	2100      	movs	r1, #0
    566c:	0028      	movs	r0, r5
    566e:	4b0b      	ldr	r3, [pc, #44]	; (569c <usbdc_init+0x50>)
    5670:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5672:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5674:	490a      	ldr	r1, [pc, #40]	; (56a0 <usbdc_init+0x54>)
    5676:	2000      	movs	r0, #0
    5678:	4c0a      	ldr	r4, [pc, #40]	; (56a4 <usbdc_init+0x58>)
    567a:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    567c:	490a      	ldr	r1, [pc, #40]	; (56a8 <usbdc_init+0x5c>)
    567e:	2001      	movs	r0, #1
    5680:	47a0      	blx	r4

	return 0;
    5682:	2000      	movs	r0, #0
}
    5684:	bd70      	pop	{r4, r5, r6, pc}
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	00000355 	.word	0x00000355
    568c:	0000cbf4 	.word	0x0000cbf4
    5690:	00002679 	.word	0x00002679
    5694:	00002315 	.word	0x00002315
    5698:	200013ec 	.word	0x200013ec
    569c:	00007935 	.word	0x00007935
    56a0:	000050a1 	.word	0x000050a1
    56a4:	00002389 	.word	0x00002389
    56a8:	00005195 	.word	0x00005195

000056ac <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    56ac:	b510      	push	{r4, lr}
    56ae:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    56b0:	4802      	ldr	r0, [pc, #8]	; (56bc <usbdc_register_function+0x10>)
    56b2:	3010      	adds	r0, #16
    56b4:	4b02      	ldr	r3, [pc, #8]	; (56c0 <usbdc_register_function+0x14>)
    56b6:	4798      	blx	r3
}
    56b8:	bd10      	pop	{r4, pc}
    56ba:	46c0      	nop			; (mov r8, r8)
    56bc:	200013ec 	.word	0x200013ec
    56c0:	000026d9 	.word	0x000026d9

000056c4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    56c4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    56c6:	4b0b      	ldr	r3, [pc, #44]	; (56f4 <usbdc_start+0x30>)
    56c8:	7e9b      	ldrb	r3, [r3, #26]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d10c      	bne.n	56e8 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    56ce:	2800      	cmp	r0, #0
    56d0:	d00d      	beq.n	56ee <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    56d2:	4b08      	ldr	r3, [pc, #32]	; (56f4 <usbdc_start+0x30>)
    56d4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    56d6:	6802      	ldr	r2, [r0, #0]
    56d8:	79d2      	ldrb	r2, [r2, #7]
    56da:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    56dc:	2201      	movs	r2, #1
    56de:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    56e0:	4b05      	ldr	r3, [pc, #20]	; (56f8 <usbdc_start+0x34>)
    56e2:	4798      	blx	r3
	return ERR_NONE;
    56e4:	2000      	movs	r0, #0
}
    56e6:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    56e8:	2004      	movs	r0, #4
    56ea:	4240      	negs	r0, r0
    56ec:	e7fb      	b.n	56e6 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    56ee:	2009      	movs	r0, #9
    56f0:	4240      	negs	r0, r0
    56f2:	e7f8      	b.n	56e6 <usbdc_start+0x22>
    56f4:	200013ec 	.word	0x200013ec
    56f8:	00002395 	.word	0x00002395

000056fc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    56fc:	b510      	push	{r4, lr}
	usb_d_attach();
    56fe:	4b01      	ldr	r3, [pc, #4]	; (5704 <usbdc_attach+0x8>)
    5700:	4798      	blx	r3
}
    5702:	bd10      	pop	{r4, pc}
    5704:	000023a1 	.word	0x000023a1

00005708 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    5708:	4b01      	ldr	r3, [pc, #4]	; (5710 <usbdc_get_ctrl_buffer+0x8>)
    570a:	6958      	ldr	r0, [r3, #20]
}
    570c:	4770      	bx	lr
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	200013ec 	.word	0x200013ec

00005714 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    5714:	4b02      	ldr	r3, [pc, #8]	; (5720 <usbdc_get_state+0xc>)
    5716:	7e98      	ldrb	r0, [r3, #26]
    5718:	06c3      	lsls	r3, r0, #27
    571a:	d500      	bpl.n	571e <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    571c:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    571e:	4770      	bx	lr
    5720:	200013ec 	.word	0x200013ec

00005724 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    5724:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5726:	4288      	cmp	r0, r1
    5728:	d211      	bcs.n	574e <usb_find_desc+0x2a>
	return desc[0];
    572a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    572c:	2b01      	cmp	r3, #1
    572e:	d910      	bls.n	5752 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    5730:	7844      	ldrb	r4, [r0, #1]
    5732:	4294      	cmp	r4, r2
    5734:	d00a      	beq.n	574c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    5736:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    5738:	4281      	cmp	r1, r0
    573a:	d906      	bls.n	574a <usb_find_desc+0x26>
	return desc[0];
    573c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    573e:	2b01      	cmp	r3, #1
    5740:	d909      	bls.n	5756 <usb_find_desc+0x32>
	return desc[1];
    5742:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    5744:	4294      	cmp	r4, r2
    5746:	d1f6      	bne.n	5736 <usb_find_desc+0x12>
    5748:	e000      	b.n	574c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    574a:	2000      	movs	r0, #0
}
    574c:	bd10      	pop	{r4, pc}
	return NULL;
    574e:	2000      	movs	r0, #0
    5750:	e7fc      	b.n	574c <usb_find_desc+0x28>
		_desc_len_check();
    5752:	2000      	movs	r0, #0
    5754:	e7fa      	b.n	574c <usb_find_desc+0x28>
    5756:	2000      	movs	r0, #0
    5758:	e7f8      	b.n	574c <usb_find_desc+0x28>

0000575a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    575a:	4288      	cmp	r0, r1
    575c:	d215      	bcs.n	578a <usb_find_ep_desc+0x30>
	return desc[0];
    575e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5760:	2b01      	cmp	r3, #1
    5762:	d914      	bls.n	578e <usb_find_ep_desc+0x34>
	return desc[1];
    5764:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5766:	2a04      	cmp	r2, #4
    5768:	d013      	beq.n	5792 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    576a:	2a05      	cmp	r2, #5
    576c:	d00c      	beq.n	5788 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    576e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    5770:	4281      	cmp	r1, r0
    5772:	d908      	bls.n	5786 <usb_find_ep_desc+0x2c>
	return desc[0];
    5774:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5776:	2b01      	cmp	r3, #1
    5778:	d90d      	bls.n	5796 <usb_find_ep_desc+0x3c>
	return desc[1];
    577a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    577c:	2a04      	cmp	r2, #4
    577e:	d00c      	beq.n	579a <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5780:	2a05      	cmp	r2, #5
    5782:	d1f4      	bne.n	576e <usb_find_ep_desc+0x14>
    5784:	e000      	b.n	5788 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5786:	2000      	movs	r0, #0
}
    5788:	4770      	bx	lr
	return NULL;
    578a:	2000      	movs	r0, #0
    578c:	e7fc      	b.n	5788 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    578e:	2000      	movs	r0, #0
    5790:	e7fa      	b.n	5788 <usb_find_ep_desc+0x2e>
	return NULL;
    5792:	2000      	movs	r0, #0
    5794:	e7f8      	b.n	5788 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    5796:	2000      	movs	r0, #0
    5798:	e7f6      	b.n	5788 <usb_find_ep_desc+0x2e>
	return NULL;
    579a:	2000      	movs	r0, #0
    579c:	e7f4      	b.n	5788 <usb_find_ep_desc+0x2e>
	...

000057a0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	000c      	movs	r4, r1
    57a4:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    57a6:	2202      	movs	r2, #2
    57a8:	4b16      	ldr	r3, [pc, #88]	; (5804 <usb_find_cfg_desc+0x64>)
    57aa:	4798      	blx	r3
	if (!desc) {
    57ac:	2800      	cmp	r0, #0
    57ae:	d01d      	beq.n	57ec <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    57b0:	4284      	cmp	r4, r0
    57b2:	d91c      	bls.n	57ee <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    57b4:	7803      	ldrb	r3, [r0, #0]
    57b6:	2b01      	cmp	r3, #1
    57b8:	d91b      	bls.n	57f2 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    57ba:	7843      	ldrb	r3, [r0, #1]
    57bc:	2b02      	cmp	r3, #2
    57be:	d11a      	bne.n	57f6 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    57c0:	7943      	ldrb	r3, [r0, #5]
    57c2:	42ab      	cmp	r3, r5
    57c4:	d012      	beq.n	57ec <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    57c6:	78c2      	ldrb	r2, [r0, #3]
    57c8:	0212      	lsls	r2, r2, #8
    57ca:	7883      	ldrb	r3, [r0, #2]
    57cc:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    57ce:	b29b      	uxth	r3, r3
    57d0:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    57d2:	4284      	cmp	r4, r0
    57d4:	d909      	bls.n	57ea <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    57d6:	7803      	ldrb	r3, [r0, #0]
    57d8:	2b01      	cmp	r3, #1
    57da:	d90e      	bls.n	57fa <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    57dc:	7843      	ldrb	r3, [r0, #1]
    57de:	2b02      	cmp	r3, #2
    57e0:	d10d      	bne.n	57fe <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    57e2:	7943      	ldrb	r3, [r0, #5]
    57e4:	42ab      	cmp	r3, r5
    57e6:	d1ee      	bne.n	57c6 <usb_find_cfg_desc+0x26>
    57e8:	e000      	b.n	57ec <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    57ea:	2000      	movs	r0, #0
}
    57ec:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    57ee:	2000      	movs	r0, #0
    57f0:	e7fc      	b.n	57ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    57f2:	2000      	movs	r0, #0
    57f4:	e7fa      	b.n	57ec <usb_find_cfg_desc+0x4c>
	return NULL;
    57f6:	2000      	movs	r0, #0
    57f8:	e7f8      	b.n	57ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    57fa:	2000      	movs	r0, #0
    57fc:	e7f6      	b.n	57ec <usb_find_cfg_desc+0x4c>
	return NULL;
    57fe:	2000      	movs	r0, #0
    5800:	e7f4      	b.n	57ec <usb_find_cfg_desc+0x4c>
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	00005725 	.word	0x00005725

00005808 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    5808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    580a:	000d      	movs	r5, r1
    580c:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    580e:	4288      	cmp	r0, r1
    5810:	d212      	bcs.n	5838 <usb_find_str_desc+0x30>
    5812:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    5814:	4e0a      	ldr	r6, [pc, #40]	; (5840 <usb_find_str_desc+0x38>)
    5816:	2203      	movs	r2, #3
    5818:	0029      	movs	r1, r5
    581a:	47b0      	blx	r6
		if (desc) {
    581c:	2800      	cmp	r0, #0
    581e:	d00e      	beq.n	583e <usb_find_str_desc+0x36>
	return desc[0];
    5820:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    5822:	2b01      	cmp	r3, #1
    5824:	d90a      	bls.n	583c <usb_find_str_desc+0x34>
			if (i == str_index) {
    5826:	42a7      	cmp	r7, r4
    5828:	d009      	beq.n	583e <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    582a:	3401      	adds	r4, #1
    582c:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    582e:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    5830:	4285      	cmp	r5, r0
    5832:	d8f0      	bhi.n	5816 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5834:	2000      	movs	r0, #0
    5836:	e002      	b.n	583e <usb_find_str_desc+0x36>
    5838:	2000      	movs	r0, #0
    583a:	e000      	b.n	583e <usb_find_str_desc+0x36>
			_desc_len_check();
    583c:	2000      	movs	r0, #0
}
    583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5840:	00005725 	.word	0x00005725

00005844 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5844:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5846:	4806      	ldr	r0, [pc, #24]	; (5860 <cdc_device_acm_init+0x1c>)
    5848:	3040      	adds	r0, #64	; 0x40
    584a:	4b06      	ldr	r3, [pc, #24]	; (5864 <cdc_device_acm_init+0x20>)
    584c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    584e:	4b06      	ldr	r3, [pc, #24]	; (5868 <cdc_device_acm_init+0x24>)
    5850:	4798      	blx	r3

	usbdc_start(single_desc);
    5852:	4806      	ldr	r0, [pc, #24]	; (586c <cdc_device_acm_init+0x28>)
    5854:	4b06      	ldr	r3, [pc, #24]	; (5870 <cdc_device_acm_init+0x2c>)
    5856:	4798      	blx	r3
	usbdc_attach();
    5858:	4b06      	ldr	r3, [pc, #24]	; (5874 <cdc_device_acm_init+0x30>)
    585a:	4798      	blx	r3
}
    585c:	bd10      	pop	{r4, pc}
    585e:	46c0      	nop			; (mov r8, r8)
    5860:	2000140c 	.word	0x2000140c
    5864:	0000564d 	.word	0x0000564d
    5868:	00004fd1 	.word	0x00004fd1
    586c:	20000054 	.word	0x20000054
    5870:	000056c5 	.word	0x000056c5
    5874:	000056fd 	.word	0x000056fd

00005878 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5878:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    587a:	4b01      	ldr	r3, [pc, #4]	; (5880 <usb_init+0x8>)
    587c:	4798      	blx	r3
}
    587e:	bd10      	pop	{r4, pc}
    5880:	00005845 	.word	0x00005845

00005884 <__udivsi3>:
    5884:	2200      	movs	r2, #0
    5886:	0843      	lsrs	r3, r0, #1
    5888:	428b      	cmp	r3, r1
    588a:	d374      	bcc.n	5976 <__udivsi3+0xf2>
    588c:	0903      	lsrs	r3, r0, #4
    588e:	428b      	cmp	r3, r1
    5890:	d35f      	bcc.n	5952 <__udivsi3+0xce>
    5892:	0a03      	lsrs	r3, r0, #8
    5894:	428b      	cmp	r3, r1
    5896:	d344      	bcc.n	5922 <__udivsi3+0x9e>
    5898:	0b03      	lsrs	r3, r0, #12
    589a:	428b      	cmp	r3, r1
    589c:	d328      	bcc.n	58f0 <__udivsi3+0x6c>
    589e:	0c03      	lsrs	r3, r0, #16
    58a0:	428b      	cmp	r3, r1
    58a2:	d30d      	bcc.n	58c0 <__udivsi3+0x3c>
    58a4:	22ff      	movs	r2, #255	; 0xff
    58a6:	0209      	lsls	r1, r1, #8
    58a8:	ba12      	rev	r2, r2
    58aa:	0c03      	lsrs	r3, r0, #16
    58ac:	428b      	cmp	r3, r1
    58ae:	d302      	bcc.n	58b6 <__udivsi3+0x32>
    58b0:	1212      	asrs	r2, r2, #8
    58b2:	0209      	lsls	r1, r1, #8
    58b4:	d065      	beq.n	5982 <__udivsi3+0xfe>
    58b6:	0b03      	lsrs	r3, r0, #12
    58b8:	428b      	cmp	r3, r1
    58ba:	d319      	bcc.n	58f0 <__udivsi3+0x6c>
    58bc:	e000      	b.n	58c0 <__udivsi3+0x3c>
    58be:	0a09      	lsrs	r1, r1, #8
    58c0:	0bc3      	lsrs	r3, r0, #15
    58c2:	428b      	cmp	r3, r1
    58c4:	d301      	bcc.n	58ca <__udivsi3+0x46>
    58c6:	03cb      	lsls	r3, r1, #15
    58c8:	1ac0      	subs	r0, r0, r3
    58ca:	4152      	adcs	r2, r2
    58cc:	0b83      	lsrs	r3, r0, #14
    58ce:	428b      	cmp	r3, r1
    58d0:	d301      	bcc.n	58d6 <__udivsi3+0x52>
    58d2:	038b      	lsls	r3, r1, #14
    58d4:	1ac0      	subs	r0, r0, r3
    58d6:	4152      	adcs	r2, r2
    58d8:	0b43      	lsrs	r3, r0, #13
    58da:	428b      	cmp	r3, r1
    58dc:	d301      	bcc.n	58e2 <__udivsi3+0x5e>
    58de:	034b      	lsls	r3, r1, #13
    58e0:	1ac0      	subs	r0, r0, r3
    58e2:	4152      	adcs	r2, r2
    58e4:	0b03      	lsrs	r3, r0, #12
    58e6:	428b      	cmp	r3, r1
    58e8:	d301      	bcc.n	58ee <__udivsi3+0x6a>
    58ea:	030b      	lsls	r3, r1, #12
    58ec:	1ac0      	subs	r0, r0, r3
    58ee:	4152      	adcs	r2, r2
    58f0:	0ac3      	lsrs	r3, r0, #11
    58f2:	428b      	cmp	r3, r1
    58f4:	d301      	bcc.n	58fa <__udivsi3+0x76>
    58f6:	02cb      	lsls	r3, r1, #11
    58f8:	1ac0      	subs	r0, r0, r3
    58fa:	4152      	adcs	r2, r2
    58fc:	0a83      	lsrs	r3, r0, #10
    58fe:	428b      	cmp	r3, r1
    5900:	d301      	bcc.n	5906 <__udivsi3+0x82>
    5902:	028b      	lsls	r3, r1, #10
    5904:	1ac0      	subs	r0, r0, r3
    5906:	4152      	adcs	r2, r2
    5908:	0a43      	lsrs	r3, r0, #9
    590a:	428b      	cmp	r3, r1
    590c:	d301      	bcc.n	5912 <__udivsi3+0x8e>
    590e:	024b      	lsls	r3, r1, #9
    5910:	1ac0      	subs	r0, r0, r3
    5912:	4152      	adcs	r2, r2
    5914:	0a03      	lsrs	r3, r0, #8
    5916:	428b      	cmp	r3, r1
    5918:	d301      	bcc.n	591e <__udivsi3+0x9a>
    591a:	020b      	lsls	r3, r1, #8
    591c:	1ac0      	subs	r0, r0, r3
    591e:	4152      	adcs	r2, r2
    5920:	d2cd      	bcs.n	58be <__udivsi3+0x3a>
    5922:	09c3      	lsrs	r3, r0, #7
    5924:	428b      	cmp	r3, r1
    5926:	d301      	bcc.n	592c <__udivsi3+0xa8>
    5928:	01cb      	lsls	r3, r1, #7
    592a:	1ac0      	subs	r0, r0, r3
    592c:	4152      	adcs	r2, r2
    592e:	0983      	lsrs	r3, r0, #6
    5930:	428b      	cmp	r3, r1
    5932:	d301      	bcc.n	5938 <__udivsi3+0xb4>
    5934:	018b      	lsls	r3, r1, #6
    5936:	1ac0      	subs	r0, r0, r3
    5938:	4152      	adcs	r2, r2
    593a:	0943      	lsrs	r3, r0, #5
    593c:	428b      	cmp	r3, r1
    593e:	d301      	bcc.n	5944 <__udivsi3+0xc0>
    5940:	014b      	lsls	r3, r1, #5
    5942:	1ac0      	subs	r0, r0, r3
    5944:	4152      	adcs	r2, r2
    5946:	0903      	lsrs	r3, r0, #4
    5948:	428b      	cmp	r3, r1
    594a:	d301      	bcc.n	5950 <__udivsi3+0xcc>
    594c:	010b      	lsls	r3, r1, #4
    594e:	1ac0      	subs	r0, r0, r3
    5950:	4152      	adcs	r2, r2
    5952:	08c3      	lsrs	r3, r0, #3
    5954:	428b      	cmp	r3, r1
    5956:	d301      	bcc.n	595c <__udivsi3+0xd8>
    5958:	00cb      	lsls	r3, r1, #3
    595a:	1ac0      	subs	r0, r0, r3
    595c:	4152      	adcs	r2, r2
    595e:	0883      	lsrs	r3, r0, #2
    5960:	428b      	cmp	r3, r1
    5962:	d301      	bcc.n	5968 <__udivsi3+0xe4>
    5964:	008b      	lsls	r3, r1, #2
    5966:	1ac0      	subs	r0, r0, r3
    5968:	4152      	adcs	r2, r2
    596a:	0843      	lsrs	r3, r0, #1
    596c:	428b      	cmp	r3, r1
    596e:	d301      	bcc.n	5974 <__udivsi3+0xf0>
    5970:	004b      	lsls	r3, r1, #1
    5972:	1ac0      	subs	r0, r0, r3
    5974:	4152      	adcs	r2, r2
    5976:	1a41      	subs	r1, r0, r1
    5978:	d200      	bcs.n	597c <__udivsi3+0xf8>
    597a:	4601      	mov	r1, r0
    597c:	4152      	adcs	r2, r2
    597e:	4610      	mov	r0, r2
    5980:	4770      	bx	lr
    5982:	e7ff      	b.n	5984 <__udivsi3+0x100>
    5984:	b501      	push	{r0, lr}
    5986:	2000      	movs	r0, #0
    5988:	f000 f806 	bl	5998 <__aeabi_idiv0>
    598c:	bd02      	pop	{r1, pc}
    598e:	46c0      	nop			; (mov r8, r8)

00005990 <__aeabi_uidivmod>:
    5990:	2900      	cmp	r1, #0
    5992:	d0f7      	beq.n	5984 <__udivsi3+0x100>
    5994:	e776      	b.n	5884 <__udivsi3>
    5996:	4770      	bx	lr

00005998 <__aeabi_idiv0>:
    5998:	4770      	bx	lr
    599a:	46c0      	nop			; (mov r8, r8)

0000599c <__aeabi_uldivmod>:
    599c:	2b00      	cmp	r3, #0
    599e:	d111      	bne.n	59c4 <__aeabi_uldivmod+0x28>
    59a0:	2a00      	cmp	r2, #0
    59a2:	d10f      	bne.n	59c4 <__aeabi_uldivmod+0x28>
    59a4:	2900      	cmp	r1, #0
    59a6:	d100      	bne.n	59aa <__aeabi_uldivmod+0xe>
    59a8:	2800      	cmp	r0, #0
    59aa:	d002      	beq.n	59b2 <__aeabi_uldivmod+0x16>
    59ac:	2100      	movs	r1, #0
    59ae:	43c9      	mvns	r1, r1
    59b0:	1c08      	adds	r0, r1, #0
    59b2:	b407      	push	{r0, r1, r2}
    59b4:	4802      	ldr	r0, [pc, #8]	; (59c0 <__aeabi_uldivmod+0x24>)
    59b6:	a102      	add	r1, pc, #8	; (adr r1, 59c0 <__aeabi_uldivmod+0x24>)
    59b8:	1840      	adds	r0, r0, r1
    59ba:	9002      	str	r0, [sp, #8]
    59bc:	bd03      	pop	{r0, r1, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	ffffffd9 	.word	0xffffffd9
    59c4:	b403      	push	{r0, r1}
    59c6:	4668      	mov	r0, sp
    59c8:	b501      	push	{r0, lr}
    59ca:	9802      	ldr	r0, [sp, #8]
    59cc:	f000 f810 	bl	59f0 <__udivmoddi4>
    59d0:	9b01      	ldr	r3, [sp, #4]
    59d2:	469e      	mov	lr, r3
    59d4:	b002      	add	sp, #8
    59d6:	bc0c      	pop	{r2, r3}
    59d8:	4770      	bx	lr
    59da:	46c0      	nop			; (mov r8, r8)

000059dc <__ffssi2>:
    59dc:	b510      	push	{r4, lr}
    59de:	2300      	movs	r3, #0
    59e0:	2800      	cmp	r0, #0
    59e2:	d002      	beq.n	59ea <__ffssi2+0xe>
    59e4:	f001 fe20 	bl	7628 <__ctzsi2>
    59e8:	1c43      	adds	r3, r0, #1
    59ea:	0018      	movs	r0, r3
    59ec:	bd10      	pop	{r4, pc}
    59ee:	46c0      	nop			; (mov r8, r8)

000059f0 <__udivmoddi4>:
    59f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59f2:	4657      	mov	r7, sl
    59f4:	464e      	mov	r6, r9
    59f6:	4645      	mov	r5, r8
    59f8:	46de      	mov	lr, fp
    59fa:	b5e0      	push	{r5, r6, r7, lr}
    59fc:	0004      	movs	r4, r0
    59fe:	b083      	sub	sp, #12
    5a00:	000d      	movs	r5, r1
    5a02:	4692      	mov	sl, r2
    5a04:	4699      	mov	r9, r3
    5a06:	428b      	cmp	r3, r1
    5a08:	d82f      	bhi.n	5a6a <__udivmoddi4+0x7a>
    5a0a:	d02c      	beq.n	5a66 <__udivmoddi4+0x76>
    5a0c:	4649      	mov	r1, r9
    5a0e:	4650      	mov	r0, sl
    5a10:	f001 fdfe 	bl	7610 <__clzdi2>
    5a14:	0029      	movs	r1, r5
    5a16:	0006      	movs	r6, r0
    5a18:	0020      	movs	r0, r4
    5a1a:	f001 fdf9 	bl	7610 <__clzdi2>
    5a1e:	1a33      	subs	r3, r6, r0
    5a20:	4698      	mov	r8, r3
    5a22:	3b20      	subs	r3, #32
    5a24:	469b      	mov	fp, r3
    5a26:	d500      	bpl.n	5a2a <__udivmoddi4+0x3a>
    5a28:	e074      	b.n	5b14 <__udivmoddi4+0x124>
    5a2a:	4653      	mov	r3, sl
    5a2c:	465a      	mov	r2, fp
    5a2e:	4093      	lsls	r3, r2
    5a30:	001f      	movs	r7, r3
    5a32:	4653      	mov	r3, sl
    5a34:	4642      	mov	r2, r8
    5a36:	4093      	lsls	r3, r2
    5a38:	001e      	movs	r6, r3
    5a3a:	42af      	cmp	r7, r5
    5a3c:	d829      	bhi.n	5a92 <__udivmoddi4+0xa2>
    5a3e:	d026      	beq.n	5a8e <__udivmoddi4+0x9e>
    5a40:	465b      	mov	r3, fp
    5a42:	1ba4      	subs	r4, r4, r6
    5a44:	41bd      	sbcs	r5, r7
    5a46:	2b00      	cmp	r3, #0
    5a48:	da00      	bge.n	5a4c <__udivmoddi4+0x5c>
    5a4a:	e079      	b.n	5b40 <__udivmoddi4+0x150>
    5a4c:	2200      	movs	r2, #0
    5a4e:	2300      	movs	r3, #0
    5a50:	9200      	str	r2, [sp, #0]
    5a52:	9301      	str	r3, [sp, #4]
    5a54:	2301      	movs	r3, #1
    5a56:	465a      	mov	r2, fp
    5a58:	4093      	lsls	r3, r2
    5a5a:	9301      	str	r3, [sp, #4]
    5a5c:	2301      	movs	r3, #1
    5a5e:	4642      	mov	r2, r8
    5a60:	4093      	lsls	r3, r2
    5a62:	9300      	str	r3, [sp, #0]
    5a64:	e019      	b.n	5a9a <__udivmoddi4+0xaa>
    5a66:	4282      	cmp	r2, r0
    5a68:	d9d0      	bls.n	5a0c <__udivmoddi4+0x1c>
    5a6a:	2200      	movs	r2, #0
    5a6c:	2300      	movs	r3, #0
    5a6e:	9200      	str	r2, [sp, #0]
    5a70:	9301      	str	r3, [sp, #4]
    5a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a74:	2b00      	cmp	r3, #0
    5a76:	d001      	beq.n	5a7c <__udivmoddi4+0x8c>
    5a78:	601c      	str	r4, [r3, #0]
    5a7a:	605d      	str	r5, [r3, #4]
    5a7c:	9800      	ldr	r0, [sp, #0]
    5a7e:	9901      	ldr	r1, [sp, #4]
    5a80:	b003      	add	sp, #12
    5a82:	bc3c      	pop	{r2, r3, r4, r5}
    5a84:	4690      	mov	r8, r2
    5a86:	4699      	mov	r9, r3
    5a88:	46a2      	mov	sl, r4
    5a8a:	46ab      	mov	fp, r5
    5a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a8e:	42a3      	cmp	r3, r4
    5a90:	d9d6      	bls.n	5a40 <__udivmoddi4+0x50>
    5a92:	2200      	movs	r2, #0
    5a94:	2300      	movs	r3, #0
    5a96:	9200      	str	r2, [sp, #0]
    5a98:	9301      	str	r3, [sp, #4]
    5a9a:	4643      	mov	r3, r8
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d0e8      	beq.n	5a72 <__udivmoddi4+0x82>
    5aa0:	07fb      	lsls	r3, r7, #31
    5aa2:	0872      	lsrs	r2, r6, #1
    5aa4:	431a      	orrs	r2, r3
    5aa6:	4646      	mov	r6, r8
    5aa8:	087b      	lsrs	r3, r7, #1
    5aaa:	e00e      	b.n	5aca <__udivmoddi4+0xda>
    5aac:	42ab      	cmp	r3, r5
    5aae:	d101      	bne.n	5ab4 <__udivmoddi4+0xc4>
    5ab0:	42a2      	cmp	r2, r4
    5ab2:	d80c      	bhi.n	5ace <__udivmoddi4+0xde>
    5ab4:	1aa4      	subs	r4, r4, r2
    5ab6:	419d      	sbcs	r5, r3
    5ab8:	2001      	movs	r0, #1
    5aba:	1924      	adds	r4, r4, r4
    5abc:	416d      	adcs	r5, r5
    5abe:	2100      	movs	r1, #0
    5ac0:	3e01      	subs	r6, #1
    5ac2:	1824      	adds	r4, r4, r0
    5ac4:	414d      	adcs	r5, r1
    5ac6:	2e00      	cmp	r6, #0
    5ac8:	d006      	beq.n	5ad8 <__udivmoddi4+0xe8>
    5aca:	42ab      	cmp	r3, r5
    5acc:	d9ee      	bls.n	5aac <__udivmoddi4+0xbc>
    5ace:	3e01      	subs	r6, #1
    5ad0:	1924      	adds	r4, r4, r4
    5ad2:	416d      	adcs	r5, r5
    5ad4:	2e00      	cmp	r6, #0
    5ad6:	d1f8      	bne.n	5aca <__udivmoddi4+0xda>
    5ad8:	465b      	mov	r3, fp
    5ada:	9800      	ldr	r0, [sp, #0]
    5adc:	9901      	ldr	r1, [sp, #4]
    5ade:	1900      	adds	r0, r0, r4
    5ae0:	4169      	adcs	r1, r5
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	db22      	blt.n	5b2c <__udivmoddi4+0x13c>
    5ae6:	002b      	movs	r3, r5
    5ae8:	465a      	mov	r2, fp
    5aea:	40d3      	lsrs	r3, r2
    5aec:	002a      	movs	r2, r5
    5aee:	4644      	mov	r4, r8
    5af0:	40e2      	lsrs	r2, r4
    5af2:	001c      	movs	r4, r3
    5af4:	465b      	mov	r3, fp
    5af6:	0015      	movs	r5, r2
    5af8:	2b00      	cmp	r3, #0
    5afa:	db2c      	blt.n	5b56 <__udivmoddi4+0x166>
    5afc:	0026      	movs	r6, r4
    5afe:	409e      	lsls	r6, r3
    5b00:	0033      	movs	r3, r6
    5b02:	0026      	movs	r6, r4
    5b04:	4647      	mov	r7, r8
    5b06:	40be      	lsls	r6, r7
    5b08:	0032      	movs	r2, r6
    5b0a:	1a80      	subs	r0, r0, r2
    5b0c:	4199      	sbcs	r1, r3
    5b0e:	9000      	str	r0, [sp, #0]
    5b10:	9101      	str	r1, [sp, #4]
    5b12:	e7ae      	b.n	5a72 <__udivmoddi4+0x82>
    5b14:	4642      	mov	r2, r8
    5b16:	2320      	movs	r3, #32
    5b18:	1a9b      	subs	r3, r3, r2
    5b1a:	4652      	mov	r2, sl
    5b1c:	40da      	lsrs	r2, r3
    5b1e:	4641      	mov	r1, r8
    5b20:	0013      	movs	r3, r2
    5b22:	464a      	mov	r2, r9
    5b24:	408a      	lsls	r2, r1
    5b26:	0017      	movs	r7, r2
    5b28:	431f      	orrs	r7, r3
    5b2a:	e782      	b.n	5a32 <__udivmoddi4+0x42>
    5b2c:	4642      	mov	r2, r8
    5b2e:	2320      	movs	r3, #32
    5b30:	1a9b      	subs	r3, r3, r2
    5b32:	002a      	movs	r2, r5
    5b34:	4646      	mov	r6, r8
    5b36:	409a      	lsls	r2, r3
    5b38:	0023      	movs	r3, r4
    5b3a:	40f3      	lsrs	r3, r6
    5b3c:	4313      	orrs	r3, r2
    5b3e:	e7d5      	b.n	5aec <__udivmoddi4+0xfc>
    5b40:	4642      	mov	r2, r8
    5b42:	2320      	movs	r3, #32
    5b44:	2100      	movs	r1, #0
    5b46:	1a9b      	subs	r3, r3, r2
    5b48:	2200      	movs	r2, #0
    5b4a:	9100      	str	r1, [sp, #0]
    5b4c:	9201      	str	r2, [sp, #4]
    5b4e:	2201      	movs	r2, #1
    5b50:	40da      	lsrs	r2, r3
    5b52:	9201      	str	r2, [sp, #4]
    5b54:	e782      	b.n	5a5c <__udivmoddi4+0x6c>
    5b56:	4642      	mov	r2, r8
    5b58:	2320      	movs	r3, #32
    5b5a:	0026      	movs	r6, r4
    5b5c:	1a9b      	subs	r3, r3, r2
    5b5e:	40de      	lsrs	r6, r3
    5b60:	002f      	movs	r7, r5
    5b62:	46b4      	mov	ip, r6
    5b64:	4097      	lsls	r7, r2
    5b66:	4666      	mov	r6, ip
    5b68:	003b      	movs	r3, r7
    5b6a:	4333      	orrs	r3, r6
    5b6c:	e7c9      	b.n	5b02 <__udivmoddi4+0x112>
    5b6e:	46c0      	nop			; (mov r8, r8)

00005b70 <__aeabi_fadd>:
    5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b72:	46c6      	mov	lr, r8
    5b74:	024e      	lsls	r6, r1, #9
    5b76:	0247      	lsls	r7, r0, #9
    5b78:	0a76      	lsrs	r6, r6, #9
    5b7a:	0a7b      	lsrs	r3, r7, #9
    5b7c:	0044      	lsls	r4, r0, #1
    5b7e:	0fc5      	lsrs	r5, r0, #31
    5b80:	00f7      	lsls	r7, r6, #3
    5b82:	0048      	lsls	r0, r1, #1
    5b84:	4698      	mov	r8, r3
    5b86:	b500      	push	{lr}
    5b88:	0e24      	lsrs	r4, r4, #24
    5b8a:	002a      	movs	r2, r5
    5b8c:	00db      	lsls	r3, r3, #3
    5b8e:	0e00      	lsrs	r0, r0, #24
    5b90:	0fc9      	lsrs	r1, r1, #31
    5b92:	46bc      	mov	ip, r7
    5b94:	428d      	cmp	r5, r1
    5b96:	d067      	beq.n	5c68 <__aeabi_fadd+0xf8>
    5b98:	1a22      	subs	r2, r4, r0
    5b9a:	2a00      	cmp	r2, #0
    5b9c:	dc00      	bgt.n	5ba0 <__aeabi_fadd+0x30>
    5b9e:	e0a5      	b.n	5cec <__aeabi_fadd+0x17c>
    5ba0:	2800      	cmp	r0, #0
    5ba2:	d13a      	bne.n	5c1a <__aeabi_fadd+0xaa>
    5ba4:	2f00      	cmp	r7, #0
    5ba6:	d100      	bne.n	5baa <__aeabi_fadd+0x3a>
    5ba8:	e093      	b.n	5cd2 <__aeabi_fadd+0x162>
    5baa:	1e51      	subs	r1, r2, #1
    5bac:	2900      	cmp	r1, #0
    5bae:	d000      	beq.n	5bb2 <__aeabi_fadd+0x42>
    5bb0:	e0bc      	b.n	5d2c <__aeabi_fadd+0x1bc>
    5bb2:	2401      	movs	r4, #1
    5bb4:	1bdb      	subs	r3, r3, r7
    5bb6:	015a      	lsls	r2, r3, #5
    5bb8:	d546      	bpl.n	5c48 <__aeabi_fadd+0xd8>
    5bba:	019b      	lsls	r3, r3, #6
    5bbc:	099e      	lsrs	r6, r3, #6
    5bbe:	0030      	movs	r0, r6
    5bc0:	f001 fd08 	bl	75d4 <__clzsi2>
    5bc4:	3805      	subs	r0, #5
    5bc6:	4086      	lsls	r6, r0
    5bc8:	4284      	cmp	r4, r0
    5bca:	dd00      	ble.n	5bce <__aeabi_fadd+0x5e>
    5bcc:	e09d      	b.n	5d0a <__aeabi_fadd+0x19a>
    5bce:	1b04      	subs	r4, r0, r4
    5bd0:	0032      	movs	r2, r6
    5bd2:	2020      	movs	r0, #32
    5bd4:	3401      	adds	r4, #1
    5bd6:	40e2      	lsrs	r2, r4
    5bd8:	1b04      	subs	r4, r0, r4
    5bda:	40a6      	lsls	r6, r4
    5bdc:	0033      	movs	r3, r6
    5bde:	1e5e      	subs	r6, r3, #1
    5be0:	41b3      	sbcs	r3, r6
    5be2:	2400      	movs	r4, #0
    5be4:	4313      	orrs	r3, r2
    5be6:	075a      	lsls	r2, r3, #29
    5be8:	d004      	beq.n	5bf4 <__aeabi_fadd+0x84>
    5bea:	220f      	movs	r2, #15
    5bec:	401a      	ands	r2, r3
    5bee:	2a04      	cmp	r2, #4
    5bf0:	d000      	beq.n	5bf4 <__aeabi_fadd+0x84>
    5bf2:	3304      	adds	r3, #4
    5bf4:	015a      	lsls	r2, r3, #5
    5bf6:	d529      	bpl.n	5c4c <__aeabi_fadd+0xdc>
    5bf8:	3401      	adds	r4, #1
    5bfa:	2cff      	cmp	r4, #255	; 0xff
    5bfc:	d100      	bne.n	5c00 <__aeabi_fadd+0x90>
    5bfe:	e081      	b.n	5d04 <__aeabi_fadd+0x194>
    5c00:	002a      	movs	r2, r5
    5c02:	019b      	lsls	r3, r3, #6
    5c04:	0a5b      	lsrs	r3, r3, #9
    5c06:	b2e4      	uxtb	r4, r4
    5c08:	025b      	lsls	r3, r3, #9
    5c0a:	05e4      	lsls	r4, r4, #23
    5c0c:	0a58      	lsrs	r0, r3, #9
    5c0e:	07d2      	lsls	r2, r2, #31
    5c10:	4320      	orrs	r0, r4
    5c12:	4310      	orrs	r0, r2
    5c14:	bc04      	pop	{r2}
    5c16:	4690      	mov	r8, r2
    5c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c1a:	2cff      	cmp	r4, #255	; 0xff
    5c1c:	d0e3      	beq.n	5be6 <__aeabi_fadd+0x76>
    5c1e:	2180      	movs	r1, #128	; 0x80
    5c20:	0038      	movs	r0, r7
    5c22:	04c9      	lsls	r1, r1, #19
    5c24:	4308      	orrs	r0, r1
    5c26:	4684      	mov	ip, r0
    5c28:	2a1b      	cmp	r2, #27
    5c2a:	dd00      	ble.n	5c2e <__aeabi_fadd+0xbe>
    5c2c:	e082      	b.n	5d34 <__aeabi_fadd+0x1c4>
    5c2e:	2020      	movs	r0, #32
    5c30:	4661      	mov	r1, ip
    5c32:	40d1      	lsrs	r1, r2
    5c34:	1a82      	subs	r2, r0, r2
    5c36:	4660      	mov	r0, ip
    5c38:	4090      	lsls	r0, r2
    5c3a:	0002      	movs	r2, r0
    5c3c:	1e50      	subs	r0, r2, #1
    5c3e:	4182      	sbcs	r2, r0
    5c40:	430a      	orrs	r2, r1
    5c42:	1a9b      	subs	r3, r3, r2
    5c44:	015a      	lsls	r2, r3, #5
    5c46:	d4b8      	bmi.n	5bba <__aeabi_fadd+0x4a>
    5c48:	075a      	lsls	r2, r3, #29
    5c4a:	d1ce      	bne.n	5bea <__aeabi_fadd+0x7a>
    5c4c:	08de      	lsrs	r6, r3, #3
    5c4e:	002a      	movs	r2, r5
    5c50:	2cff      	cmp	r4, #255	; 0xff
    5c52:	d13a      	bne.n	5cca <__aeabi_fadd+0x15a>
    5c54:	2e00      	cmp	r6, #0
    5c56:	d100      	bne.n	5c5a <__aeabi_fadd+0xea>
    5c58:	e0ae      	b.n	5db8 <__aeabi_fadd+0x248>
    5c5a:	2380      	movs	r3, #128	; 0x80
    5c5c:	03db      	lsls	r3, r3, #15
    5c5e:	4333      	orrs	r3, r6
    5c60:	025b      	lsls	r3, r3, #9
    5c62:	0a5b      	lsrs	r3, r3, #9
    5c64:	24ff      	movs	r4, #255	; 0xff
    5c66:	e7cf      	b.n	5c08 <__aeabi_fadd+0x98>
    5c68:	1a21      	subs	r1, r4, r0
    5c6a:	2900      	cmp	r1, #0
    5c6c:	dd52      	ble.n	5d14 <__aeabi_fadd+0x1a4>
    5c6e:	2800      	cmp	r0, #0
    5c70:	d031      	beq.n	5cd6 <__aeabi_fadd+0x166>
    5c72:	2cff      	cmp	r4, #255	; 0xff
    5c74:	d0b7      	beq.n	5be6 <__aeabi_fadd+0x76>
    5c76:	2080      	movs	r0, #128	; 0x80
    5c78:	003e      	movs	r6, r7
    5c7a:	04c0      	lsls	r0, r0, #19
    5c7c:	4306      	orrs	r6, r0
    5c7e:	46b4      	mov	ip, r6
    5c80:	291b      	cmp	r1, #27
    5c82:	dd00      	ble.n	5c86 <__aeabi_fadd+0x116>
    5c84:	e0aa      	b.n	5ddc <__aeabi_fadd+0x26c>
    5c86:	2620      	movs	r6, #32
    5c88:	4660      	mov	r0, ip
    5c8a:	40c8      	lsrs	r0, r1
    5c8c:	1a71      	subs	r1, r6, r1
    5c8e:	4666      	mov	r6, ip
    5c90:	408e      	lsls	r6, r1
    5c92:	0031      	movs	r1, r6
    5c94:	1e4e      	subs	r6, r1, #1
    5c96:	41b1      	sbcs	r1, r6
    5c98:	4301      	orrs	r1, r0
    5c9a:	185b      	adds	r3, r3, r1
    5c9c:	0159      	lsls	r1, r3, #5
    5c9e:	d5d3      	bpl.n	5c48 <__aeabi_fadd+0xd8>
    5ca0:	3401      	adds	r4, #1
    5ca2:	2cff      	cmp	r4, #255	; 0xff
    5ca4:	d100      	bne.n	5ca8 <__aeabi_fadd+0x138>
    5ca6:	e087      	b.n	5db8 <__aeabi_fadd+0x248>
    5ca8:	2201      	movs	r2, #1
    5caa:	4978      	ldr	r1, [pc, #480]	; (5e8c <__aeabi_fadd+0x31c>)
    5cac:	401a      	ands	r2, r3
    5cae:	085b      	lsrs	r3, r3, #1
    5cb0:	400b      	ands	r3, r1
    5cb2:	4313      	orrs	r3, r2
    5cb4:	e797      	b.n	5be6 <__aeabi_fadd+0x76>
    5cb6:	2c00      	cmp	r4, #0
    5cb8:	d000      	beq.n	5cbc <__aeabi_fadd+0x14c>
    5cba:	e0a7      	b.n	5e0c <__aeabi_fadd+0x29c>
    5cbc:	2b00      	cmp	r3, #0
    5cbe:	d000      	beq.n	5cc2 <__aeabi_fadd+0x152>
    5cc0:	e0b6      	b.n	5e30 <__aeabi_fadd+0x2c0>
    5cc2:	1e3b      	subs	r3, r7, #0
    5cc4:	d162      	bne.n	5d8c <__aeabi_fadd+0x21c>
    5cc6:	2600      	movs	r6, #0
    5cc8:	2200      	movs	r2, #0
    5cca:	0273      	lsls	r3, r6, #9
    5ccc:	0a5b      	lsrs	r3, r3, #9
    5cce:	b2e4      	uxtb	r4, r4
    5cd0:	e79a      	b.n	5c08 <__aeabi_fadd+0x98>
    5cd2:	0014      	movs	r4, r2
    5cd4:	e787      	b.n	5be6 <__aeabi_fadd+0x76>
    5cd6:	2f00      	cmp	r7, #0
    5cd8:	d04d      	beq.n	5d76 <__aeabi_fadd+0x206>
    5cda:	1e48      	subs	r0, r1, #1
    5cdc:	2800      	cmp	r0, #0
    5cde:	d157      	bne.n	5d90 <__aeabi_fadd+0x220>
    5ce0:	4463      	add	r3, ip
    5ce2:	2401      	movs	r4, #1
    5ce4:	015a      	lsls	r2, r3, #5
    5ce6:	d5af      	bpl.n	5c48 <__aeabi_fadd+0xd8>
    5ce8:	2402      	movs	r4, #2
    5cea:	e7dd      	b.n	5ca8 <__aeabi_fadd+0x138>
    5cec:	2a00      	cmp	r2, #0
    5cee:	d124      	bne.n	5d3a <__aeabi_fadd+0x1ca>
    5cf0:	1c62      	adds	r2, r4, #1
    5cf2:	b2d2      	uxtb	r2, r2
    5cf4:	2a01      	cmp	r2, #1
    5cf6:	ddde      	ble.n	5cb6 <__aeabi_fadd+0x146>
    5cf8:	1bde      	subs	r6, r3, r7
    5cfa:	0172      	lsls	r2, r6, #5
    5cfc:	d535      	bpl.n	5d6a <__aeabi_fadd+0x1fa>
    5cfe:	1afe      	subs	r6, r7, r3
    5d00:	000d      	movs	r5, r1
    5d02:	e75c      	b.n	5bbe <__aeabi_fadd+0x4e>
    5d04:	002a      	movs	r2, r5
    5d06:	2300      	movs	r3, #0
    5d08:	e77e      	b.n	5c08 <__aeabi_fadd+0x98>
    5d0a:	0033      	movs	r3, r6
    5d0c:	4a60      	ldr	r2, [pc, #384]	; (5e90 <__aeabi_fadd+0x320>)
    5d0e:	1a24      	subs	r4, r4, r0
    5d10:	4013      	ands	r3, r2
    5d12:	e768      	b.n	5be6 <__aeabi_fadd+0x76>
    5d14:	2900      	cmp	r1, #0
    5d16:	d163      	bne.n	5de0 <__aeabi_fadd+0x270>
    5d18:	1c61      	adds	r1, r4, #1
    5d1a:	b2c8      	uxtb	r0, r1
    5d1c:	2801      	cmp	r0, #1
    5d1e:	dd4e      	ble.n	5dbe <__aeabi_fadd+0x24e>
    5d20:	29ff      	cmp	r1, #255	; 0xff
    5d22:	d049      	beq.n	5db8 <__aeabi_fadd+0x248>
    5d24:	4463      	add	r3, ip
    5d26:	085b      	lsrs	r3, r3, #1
    5d28:	000c      	movs	r4, r1
    5d2a:	e75c      	b.n	5be6 <__aeabi_fadd+0x76>
    5d2c:	2aff      	cmp	r2, #255	; 0xff
    5d2e:	d041      	beq.n	5db4 <__aeabi_fadd+0x244>
    5d30:	000a      	movs	r2, r1
    5d32:	e779      	b.n	5c28 <__aeabi_fadd+0xb8>
    5d34:	2201      	movs	r2, #1
    5d36:	1a9b      	subs	r3, r3, r2
    5d38:	e784      	b.n	5c44 <__aeabi_fadd+0xd4>
    5d3a:	2c00      	cmp	r4, #0
    5d3c:	d01d      	beq.n	5d7a <__aeabi_fadd+0x20a>
    5d3e:	28ff      	cmp	r0, #255	; 0xff
    5d40:	d022      	beq.n	5d88 <__aeabi_fadd+0x218>
    5d42:	2480      	movs	r4, #128	; 0x80
    5d44:	04e4      	lsls	r4, r4, #19
    5d46:	4252      	negs	r2, r2
    5d48:	4323      	orrs	r3, r4
    5d4a:	2a1b      	cmp	r2, #27
    5d4c:	dd00      	ble.n	5d50 <__aeabi_fadd+0x1e0>
    5d4e:	e08a      	b.n	5e66 <__aeabi_fadd+0x2f6>
    5d50:	001c      	movs	r4, r3
    5d52:	2520      	movs	r5, #32
    5d54:	40d4      	lsrs	r4, r2
    5d56:	1aaa      	subs	r2, r5, r2
    5d58:	4093      	lsls	r3, r2
    5d5a:	1e5a      	subs	r2, r3, #1
    5d5c:	4193      	sbcs	r3, r2
    5d5e:	4323      	orrs	r3, r4
    5d60:	4662      	mov	r2, ip
    5d62:	0004      	movs	r4, r0
    5d64:	1ad3      	subs	r3, r2, r3
    5d66:	000d      	movs	r5, r1
    5d68:	e725      	b.n	5bb6 <__aeabi_fadd+0x46>
    5d6a:	2e00      	cmp	r6, #0
    5d6c:	d000      	beq.n	5d70 <__aeabi_fadd+0x200>
    5d6e:	e726      	b.n	5bbe <__aeabi_fadd+0x4e>
    5d70:	2200      	movs	r2, #0
    5d72:	2400      	movs	r4, #0
    5d74:	e7a9      	b.n	5cca <__aeabi_fadd+0x15a>
    5d76:	000c      	movs	r4, r1
    5d78:	e735      	b.n	5be6 <__aeabi_fadd+0x76>
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d04d      	beq.n	5e1a <__aeabi_fadd+0x2aa>
    5d7e:	43d2      	mvns	r2, r2
    5d80:	2a00      	cmp	r2, #0
    5d82:	d0ed      	beq.n	5d60 <__aeabi_fadd+0x1f0>
    5d84:	28ff      	cmp	r0, #255	; 0xff
    5d86:	d1e0      	bne.n	5d4a <__aeabi_fadd+0x1da>
    5d88:	4663      	mov	r3, ip
    5d8a:	24ff      	movs	r4, #255	; 0xff
    5d8c:	000d      	movs	r5, r1
    5d8e:	e72a      	b.n	5be6 <__aeabi_fadd+0x76>
    5d90:	29ff      	cmp	r1, #255	; 0xff
    5d92:	d00f      	beq.n	5db4 <__aeabi_fadd+0x244>
    5d94:	0001      	movs	r1, r0
    5d96:	e773      	b.n	5c80 <__aeabi_fadd+0x110>
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d061      	beq.n	5e60 <__aeabi_fadd+0x2f0>
    5d9c:	24ff      	movs	r4, #255	; 0xff
    5d9e:	2f00      	cmp	r7, #0
    5da0:	d100      	bne.n	5da4 <__aeabi_fadd+0x234>
    5da2:	e720      	b.n	5be6 <__aeabi_fadd+0x76>
    5da4:	2280      	movs	r2, #128	; 0x80
    5da6:	4641      	mov	r1, r8
    5da8:	03d2      	lsls	r2, r2, #15
    5daa:	4211      	tst	r1, r2
    5dac:	d002      	beq.n	5db4 <__aeabi_fadd+0x244>
    5dae:	4216      	tst	r6, r2
    5db0:	d100      	bne.n	5db4 <__aeabi_fadd+0x244>
    5db2:	003b      	movs	r3, r7
    5db4:	24ff      	movs	r4, #255	; 0xff
    5db6:	e716      	b.n	5be6 <__aeabi_fadd+0x76>
    5db8:	24ff      	movs	r4, #255	; 0xff
    5dba:	2300      	movs	r3, #0
    5dbc:	e724      	b.n	5c08 <__aeabi_fadd+0x98>
    5dbe:	2c00      	cmp	r4, #0
    5dc0:	d1ea      	bne.n	5d98 <__aeabi_fadd+0x228>
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d058      	beq.n	5e78 <__aeabi_fadd+0x308>
    5dc6:	2f00      	cmp	r7, #0
    5dc8:	d100      	bne.n	5dcc <__aeabi_fadd+0x25c>
    5dca:	e70c      	b.n	5be6 <__aeabi_fadd+0x76>
    5dcc:	4463      	add	r3, ip
    5dce:	015a      	lsls	r2, r3, #5
    5dd0:	d400      	bmi.n	5dd4 <__aeabi_fadd+0x264>
    5dd2:	e739      	b.n	5c48 <__aeabi_fadd+0xd8>
    5dd4:	4a2e      	ldr	r2, [pc, #184]	; (5e90 <__aeabi_fadd+0x320>)
    5dd6:	000c      	movs	r4, r1
    5dd8:	4013      	ands	r3, r2
    5dda:	e704      	b.n	5be6 <__aeabi_fadd+0x76>
    5ddc:	2101      	movs	r1, #1
    5dde:	e75c      	b.n	5c9a <__aeabi_fadd+0x12a>
    5de0:	2c00      	cmp	r4, #0
    5de2:	d11e      	bne.n	5e22 <__aeabi_fadd+0x2b2>
    5de4:	2b00      	cmp	r3, #0
    5de6:	d040      	beq.n	5e6a <__aeabi_fadd+0x2fa>
    5de8:	43c9      	mvns	r1, r1
    5dea:	2900      	cmp	r1, #0
    5dec:	d00b      	beq.n	5e06 <__aeabi_fadd+0x296>
    5dee:	28ff      	cmp	r0, #255	; 0xff
    5df0:	d036      	beq.n	5e60 <__aeabi_fadd+0x2f0>
    5df2:	291b      	cmp	r1, #27
    5df4:	dc47      	bgt.n	5e86 <__aeabi_fadd+0x316>
    5df6:	001c      	movs	r4, r3
    5df8:	2620      	movs	r6, #32
    5dfa:	40cc      	lsrs	r4, r1
    5dfc:	1a71      	subs	r1, r6, r1
    5dfe:	408b      	lsls	r3, r1
    5e00:	1e59      	subs	r1, r3, #1
    5e02:	418b      	sbcs	r3, r1
    5e04:	4323      	orrs	r3, r4
    5e06:	4463      	add	r3, ip
    5e08:	0004      	movs	r4, r0
    5e0a:	e747      	b.n	5c9c <__aeabi_fadd+0x12c>
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	d118      	bne.n	5e42 <__aeabi_fadd+0x2d2>
    5e10:	1e3b      	subs	r3, r7, #0
    5e12:	d02d      	beq.n	5e70 <__aeabi_fadd+0x300>
    5e14:	000d      	movs	r5, r1
    5e16:	24ff      	movs	r4, #255	; 0xff
    5e18:	e6e5      	b.n	5be6 <__aeabi_fadd+0x76>
    5e1a:	003b      	movs	r3, r7
    5e1c:	0004      	movs	r4, r0
    5e1e:	000d      	movs	r5, r1
    5e20:	e6e1      	b.n	5be6 <__aeabi_fadd+0x76>
    5e22:	28ff      	cmp	r0, #255	; 0xff
    5e24:	d01c      	beq.n	5e60 <__aeabi_fadd+0x2f0>
    5e26:	2480      	movs	r4, #128	; 0x80
    5e28:	04e4      	lsls	r4, r4, #19
    5e2a:	4249      	negs	r1, r1
    5e2c:	4323      	orrs	r3, r4
    5e2e:	e7e0      	b.n	5df2 <__aeabi_fadd+0x282>
    5e30:	2f00      	cmp	r7, #0
    5e32:	d100      	bne.n	5e36 <__aeabi_fadd+0x2c6>
    5e34:	e6d7      	b.n	5be6 <__aeabi_fadd+0x76>
    5e36:	1bde      	subs	r6, r3, r7
    5e38:	0172      	lsls	r2, r6, #5
    5e3a:	d51f      	bpl.n	5e7c <__aeabi_fadd+0x30c>
    5e3c:	1afb      	subs	r3, r7, r3
    5e3e:	000d      	movs	r5, r1
    5e40:	e6d1      	b.n	5be6 <__aeabi_fadd+0x76>
    5e42:	24ff      	movs	r4, #255	; 0xff
    5e44:	2f00      	cmp	r7, #0
    5e46:	d100      	bne.n	5e4a <__aeabi_fadd+0x2da>
    5e48:	e6cd      	b.n	5be6 <__aeabi_fadd+0x76>
    5e4a:	2280      	movs	r2, #128	; 0x80
    5e4c:	4640      	mov	r0, r8
    5e4e:	03d2      	lsls	r2, r2, #15
    5e50:	4210      	tst	r0, r2
    5e52:	d0af      	beq.n	5db4 <__aeabi_fadd+0x244>
    5e54:	4216      	tst	r6, r2
    5e56:	d1ad      	bne.n	5db4 <__aeabi_fadd+0x244>
    5e58:	003b      	movs	r3, r7
    5e5a:	000d      	movs	r5, r1
    5e5c:	24ff      	movs	r4, #255	; 0xff
    5e5e:	e6c2      	b.n	5be6 <__aeabi_fadd+0x76>
    5e60:	4663      	mov	r3, ip
    5e62:	24ff      	movs	r4, #255	; 0xff
    5e64:	e6bf      	b.n	5be6 <__aeabi_fadd+0x76>
    5e66:	2301      	movs	r3, #1
    5e68:	e77a      	b.n	5d60 <__aeabi_fadd+0x1f0>
    5e6a:	003b      	movs	r3, r7
    5e6c:	0004      	movs	r4, r0
    5e6e:	e6ba      	b.n	5be6 <__aeabi_fadd+0x76>
    5e70:	2680      	movs	r6, #128	; 0x80
    5e72:	2200      	movs	r2, #0
    5e74:	03f6      	lsls	r6, r6, #15
    5e76:	e6f0      	b.n	5c5a <__aeabi_fadd+0xea>
    5e78:	003b      	movs	r3, r7
    5e7a:	e6b4      	b.n	5be6 <__aeabi_fadd+0x76>
    5e7c:	1e33      	subs	r3, r6, #0
    5e7e:	d000      	beq.n	5e82 <__aeabi_fadd+0x312>
    5e80:	e6e2      	b.n	5c48 <__aeabi_fadd+0xd8>
    5e82:	2200      	movs	r2, #0
    5e84:	e721      	b.n	5cca <__aeabi_fadd+0x15a>
    5e86:	2301      	movs	r3, #1
    5e88:	e7bd      	b.n	5e06 <__aeabi_fadd+0x296>
    5e8a:	46c0      	nop			; (mov r8, r8)
    5e8c:	7dffffff 	.word	0x7dffffff
    5e90:	fbffffff 	.word	0xfbffffff

00005e94 <__aeabi_fdiv>:
    5e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e96:	4657      	mov	r7, sl
    5e98:	464e      	mov	r6, r9
    5e9a:	46de      	mov	lr, fp
    5e9c:	4645      	mov	r5, r8
    5e9e:	b5e0      	push	{r5, r6, r7, lr}
    5ea0:	0244      	lsls	r4, r0, #9
    5ea2:	0043      	lsls	r3, r0, #1
    5ea4:	0fc6      	lsrs	r6, r0, #31
    5ea6:	b083      	sub	sp, #12
    5ea8:	1c0f      	adds	r7, r1, #0
    5eaa:	0a64      	lsrs	r4, r4, #9
    5eac:	0e1b      	lsrs	r3, r3, #24
    5eae:	46b2      	mov	sl, r6
    5eb0:	d053      	beq.n	5f5a <__aeabi_fdiv+0xc6>
    5eb2:	2bff      	cmp	r3, #255	; 0xff
    5eb4:	d027      	beq.n	5f06 <__aeabi_fdiv+0x72>
    5eb6:	2280      	movs	r2, #128	; 0x80
    5eb8:	00e4      	lsls	r4, r4, #3
    5eba:	04d2      	lsls	r2, r2, #19
    5ebc:	4314      	orrs	r4, r2
    5ebe:	227f      	movs	r2, #127	; 0x7f
    5ec0:	4252      	negs	r2, r2
    5ec2:	4690      	mov	r8, r2
    5ec4:	4498      	add	r8, r3
    5ec6:	2300      	movs	r3, #0
    5ec8:	4699      	mov	r9, r3
    5eca:	469b      	mov	fp, r3
    5ecc:	027d      	lsls	r5, r7, #9
    5ece:	0078      	lsls	r0, r7, #1
    5ed0:	0ffb      	lsrs	r3, r7, #31
    5ed2:	0a6d      	lsrs	r5, r5, #9
    5ed4:	0e00      	lsrs	r0, r0, #24
    5ed6:	9300      	str	r3, [sp, #0]
    5ed8:	d024      	beq.n	5f24 <__aeabi_fdiv+0x90>
    5eda:	28ff      	cmp	r0, #255	; 0xff
    5edc:	d046      	beq.n	5f6c <__aeabi_fdiv+0xd8>
    5ede:	2380      	movs	r3, #128	; 0x80
    5ee0:	2100      	movs	r1, #0
    5ee2:	00ed      	lsls	r5, r5, #3
    5ee4:	04db      	lsls	r3, r3, #19
    5ee6:	431d      	orrs	r5, r3
    5ee8:	387f      	subs	r0, #127	; 0x7f
    5eea:	4647      	mov	r7, r8
    5eec:	1a38      	subs	r0, r7, r0
    5eee:	464f      	mov	r7, r9
    5ef0:	430f      	orrs	r7, r1
    5ef2:	00bf      	lsls	r7, r7, #2
    5ef4:	46b9      	mov	r9, r7
    5ef6:	0033      	movs	r3, r6
    5ef8:	9a00      	ldr	r2, [sp, #0]
    5efa:	4f87      	ldr	r7, [pc, #540]	; (6118 <__aeabi_fdiv+0x284>)
    5efc:	4053      	eors	r3, r2
    5efe:	464a      	mov	r2, r9
    5f00:	58ba      	ldr	r2, [r7, r2]
    5f02:	9301      	str	r3, [sp, #4]
    5f04:	4697      	mov	pc, r2
    5f06:	2c00      	cmp	r4, #0
    5f08:	d14e      	bne.n	5fa8 <__aeabi_fdiv+0x114>
    5f0a:	2308      	movs	r3, #8
    5f0c:	4699      	mov	r9, r3
    5f0e:	33f7      	adds	r3, #247	; 0xf7
    5f10:	4698      	mov	r8, r3
    5f12:	3bfd      	subs	r3, #253	; 0xfd
    5f14:	469b      	mov	fp, r3
    5f16:	027d      	lsls	r5, r7, #9
    5f18:	0078      	lsls	r0, r7, #1
    5f1a:	0ffb      	lsrs	r3, r7, #31
    5f1c:	0a6d      	lsrs	r5, r5, #9
    5f1e:	0e00      	lsrs	r0, r0, #24
    5f20:	9300      	str	r3, [sp, #0]
    5f22:	d1da      	bne.n	5eda <__aeabi_fdiv+0x46>
    5f24:	2d00      	cmp	r5, #0
    5f26:	d126      	bne.n	5f76 <__aeabi_fdiv+0xe2>
    5f28:	2000      	movs	r0, #0
    5f2a:	2101      	movs	r1, #1
    5f2c:	0033      	movs	r3, r6
    5f2e:	9a00      	ldr	r2, [sp, #0]
    5f30:	4f7a      	ldr	r7, [pc, #488]	; (611c <__aeabi_fdiv+0x288>)
    5f32:	4053      	eors	r3, r2
    5f34:	4642      	mov	r2, r8
    5f36:	1a10      	subs	r0, r2, r0
    5f38:	464a      	mov	r2, r9
    5f3a:	430a      	orrs	r2, r1
    5f3c:	0092      	lsls	r2, r2, #2
    5f3e:	58ba      	ldr	r2, [r7, r2]
    5f40:	001d      	movs	r5, r3
    5f42:	4697      	mov	pc, r2
    5f44:	9b00      	ldr	r3, [sp, #0]
    5f46:	002c      	movs	r4, r5
    5f48:	469a      	mov	sl, r3
    5f4a:	468b      	mov	fp, r1
    5f4c:	465b      	mov	r3, fp
    5f4e:	2b02      	cmp	r3, #2
    5f50:	d131      	bne.n	5fb6 <__aeabi_fdiv+0x122>
    5f52:	4653      	mov	r3, sl
    5f54:	21ff      	movs	r1, #255	; 0xff
    5f56:	2400      	movs	r4, #0
    5f58:	e038      	b.n	5fcc <__aeabi_fdiv+0x138>
    5f5a:	2c00      	cmp	r4, #0
    5f5c:	d117      	bne.n	5f8e <__aeabi_fdiv+0xfa>
    5f5e:	2304      	movs	r3, #4
    5f60:	4699      	mov	r9, r3
    5f62:	2300      	movs	r3, #0
    5f64:	4698      	mov	r8, r3
    5f66:	3301      	adds	r3, #1
    5f68:	469b      	mov	fp, r3
    5f6a:	e7af      	b.n	5ecc <__aeabi_fdiv+0x38>
    5f6c:	20ff      	movs	r0, #255	; 0xff
    5f6e:	2d00      	cmp	r5, #0
    5f70:	d10b      	bne.n	5f8a <__aeabi_fdiv+0xf6>
    5f72:	2102      	movs	r1, #2
    5f74:	e7da      	b.n	5f2c <__aeabi_fdiv+0x98>
    5f76:	0028      	movs	r0, r5
    5f78:	f001 fb2c 	bl	75d4 <__clzsi2>
    5f7c:	1f43      	subs	r3, r0, #5
    5f7e:	409d      	lsls	r5, r3
    5f80:	2376      	movs	r3, #118	; 0x76
    5f82:	425b      	negs	r3, r3
    5f84:	1a18      	subs	r0, r3, r0
    5f86:	2100      	movs	r1, #0
    5f88:	e7af      	b.n	5eea <__aeabi_fdiv+0x56>
    5f8a:	2103      	movs	r1, #3
    5f8c:	e7ad      	b.n	5eea <__aeabi_fdiv+0x56>
    5f8e:	0020      	movs	r0, r4
    5f90:	f001 fb20 	bl	75d4 <__clzsi2>
    5f94:	1f43      	subs	r3, r0, #5
    5f96:	409c      	lsls	r4, r3
    5f98:	2376      	movs	r3, #118	; 0x76
    5f9a:	425b      	negs	r3, r3
    5f9c:	1a1b      	subs	r3, r3, r0
    5f9e:	4698      	mov	r8, r3
    5fa0:	2300      	movs	r3, #0
    5fa2:	4699      	mov	r9, r3
    5fa4:	469b      	mov	fp, r3
    5fa6:	e791      	b.n	5ecc <__aeabi_fdiv+0x38>
    5fa8:	230c      	movs	r3, #12
    5faa:	4699      	mov	r9, r3
    5fac:	33f3      	adds	r3, #243	; 0xf3
    5fae:	4698      	mov	r8, r3
    5fb0:	3bfc      	subs	r3, #252	; 0xfc
    5fb2:	469b      	mov	fp, r3
    5fb4:	e78a      	b.n	5ecc <__aeabi_fdiv+0x38>
    5fb6:	2b03      	cmp	r3, #3
    5fb8:	d100      	bne.n	5fbc <__aeabi_fdiv+0x128>
    5fba:	e0a5      	b.n	6108 <__aeabi_fdiv+0x274>
    5fbc:	4655      	mov	r5, sl
    5fbe:	2b01      	cmp	r3, #1
    5fc0:	d000      	beq.n	5fc4 <__aeabi_fdiv+0x130>
    5fc2:	e081      	b.n	60c8 <__aeabi_fdiv+0x234>
    5fc4:	2301      	movs	r3, #1
    5fc6:	2100      	movs	r1, #0
    5fc8:	2400      	movs	r4, #0
    5fca:	402b      	ands	r3, r5
    5fcc:	0264      	lsls	r4, r4, #9
    5fce:	05c9      	lsls	r1, r1, #23
    5fd0:	0a60      	lsrs	r0, r4, #9
    5fd2:	07db      	lsls	r3, r3, #31
    5fd4:	4308      	orrs	r0, r1
    5fd6:	4318      	orrs	r0, r3
    5fd8:	b003      	add	sp, #12
    5fda:	bc3c      	pop	{r2, r3, r4, r5}
    5fdc:	4690      	mov	r8, r2
    5fde:	4699      	mov	r9, r3
    5fe0:	46a2      	mov	sl, r4
    5fe2:	46ab      	mov	fp, r5
    5fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe6:	2480      	movs	r4, #128	; 0x80
    5fe8:	2300      	movs	r3, #0
    5fea:	03e4      	lsls	r4, r4, #15
    5fec:	21ff      	movs	r1, #255	; 0xff
    5fee:	e7ed      	b.n	5fcc <__aeabi_fdiv+0x138>
    5ff0:	21ff      	movs	r1, #255	; 0xff
    5ff2:	2400      	movs	r4, #0
    5ff4:	e7ea      	b.n	5fcc <__aeabi_fdiv+0x138>
    5ff6:	2301      	movs	r3, #1
    5ff8:	1a59      	subs	r1, r3, r1
    5ffa:	291b      	cmp	r1, #27
    5ffc:	dd66      	ble.n	60cc <__aeabi_fdiv+0x238>
    5ffe:	9a01      	ldr	r2, [sp, #4]
    6000:	4013      	ands	r3, r2
    6002:	2100      	movs	r1, #0
    6004:	2400      	movs	r4, #0
    6006:	e7e1      	b.n	5fcc <__aeabi_fdiv+0x138>
    6008:	2380      	movs	r3, #128	; 0x80
    600a:	03db      	lsls	r3, r3, #15
    600c:	421c      	tst	r4, r3
    600e:	d038      	beq.n	6082 <__aeabi_fdiv+0x1ee>
    6010:	421d      	tst	r5, r3
    6012:	d051      	beq.n	60b8 <__aeabi_fdiv+0x224>
    6014:	431c      	orrs	r4, r3
    6016:	0264      	lsls	r4, r4, #9
    6018:	0a64      	lsrs	r4, r4, #9
    601a:	0033      	movs	r3, r6
    601c:	21ff      	movs	r1, #255	; 0xff
    601e:	e7d5      	b.n	5fcc <__aeabi_fdiv+0x138>
    6020:	0163      	lsls	r3, r4, #5
    6022:	016c      	lsls	r4, r5, #5
    6024:	42a3      	cmp	r3, r4
    6026:	d23b      	bcs.n	60a0 <__aeabi_fdiv+0x20c>
    6028:	261b      	movs	r6, #27
    602a:	2100      	movs	r1, #0
    602c:	3801      	subs	r0, #1
    602e:	2501      	movs	r5, #1
    6030:	001f      	movs	r7, r3
    6032:	0049      	lsls	r1, r1, #1
    6034:	005b      	lsls	r3, r3, #1
    6036:	2f00      	cmp	r7, #0
    6038:	db01      	blt.n	603e <__aeabi_fdiv+0x1aa>
    603a:	429c      	cmp	r4, r3
    603c:	d801      	bhi.n	6042 <__aeabi_fdiv+0x1ae>
    603e:	1b1b      	subs	r3, r3, r4
    6040:	4329      	orrs	r1, r5
    6042:	3e01      	subs	r6, #1
    6044:	2e00      	cmp	r6, #0
    6046:	d1f3      	bne.n	6030 <__aeabi_fdiv+0x19c>
    6048:	001c      	movs	r4, r3
    604a:	1e63      	subs	r3, r4, #1
    604c:	419c      	sbcs	r4, r3
    604e:	430c      	orrs	r4, r1
    6050:	0001      	movs	r1, r0
    6052:	317f      	adds	r1, #127	; 0x7f
    6054:	2900      	cmp	r1, #0
    6056:	ddce      	ble.n	5ff6 <__aeabi_fdiv+0x162>
    6058:	0763      	lsls	r3, r4, #29
    605a:	d004      	beq.n	6066 <__aeabi_fdiv+0x1d2>
    605c:	230f      	movs	r3, #15
    605e:	4023      	ands	r3, r4
    6060:	2b04      	cmp	r3, #4
    6062:	d000      	beq.n	6066 <__aeabi_fdiv+0x1d2>
    6064:	3404      	adds	r4, #4
    6066:	0123      	lsls	r3, r4, #4
    6068:	d503      	bpl.n	6072 <__aeabi_fdiv+0x1de>
    606a:	0001      	movs	r1, r0
    606c:	4b2c      	ldr	r3, [pc, #176]	; (6120 <__aeabi_fdiv+0x28c>)
    606e:	3180      	adds	r1, #128	; 0x80
    6070:	401c      	ands	r4, r3
    6072:	29fe      	cmp	r1, #254	; 0xfe
    6074:	dd0d      	ble.n	6092 <__aeabi_fdiv+0x1fe>
    6076:	2301      	movs	r3, #1
    6078:	9a01      	ldr	r2, [sp, #4]
    607a:	21ff      	movs	r1, #255	; 0xff
    607c:	4013      	ands	r3, r2
    607e:	2400      	movs	r4, #0
    6080:	e7a4      	b.n	5fcc <__aeabi_fdiv+0x138>
    6082:	2380      	movs	r3, #128	; 0x80
    6084:	03db      	lsls	r3, r3, #15
    6086:	431c      	orrs	r4, r3
    6088:	0264      	lsls	r4, r4, #9
    608a:	0a64      	lsrs	r4, r4, #9
    608c:	0033      	movs	r3, r6
    608e:	21ff      	movs	r1, #255	; 0xff
    6090:	e79c      	b.n	5fcc <__aeabi_fdiv+0x138>
    6092:	2301      	movs	r3, #1
    6094:	9a01      	ldr	r2, [sp, #4]
    6096:	01a4      	lsls	r4, r4, #6
    6098:	0a64      	lsrs	r4, r4, #9
    609a:	b2c9      	uxtb	r1, r1
    609c:	4013      	ands	r3, r2
    609e:	e795      	b.n	5fcc <__aeabi_fdiv+0x138>
    60a0:	1b1b      	subs	r3, r3, r4
    60a2:	261a      	movs	r6, #26
    60a4:	2101      	movs	r1, #1
    60a6:	e7c2      	b.n	602e <__aeabi_fdiv+0x19a>
    60a8:	9b00      	ldr	r3, [sp, #0]
    60aa:	468b      	mov	fp, r1
    60ac:	469a      	mov	sl, r3
    60ae:	2400      	movs	r4, #0
    60b0:	e74c      	b.n	5f4c <__aeabi_fdiv+0xb8>
    60b2:	0263      	lsls	r3, r4, #9
    60b4:	d5e5      	bpl.n	6082 <__aeabi_fdiv+0x1ee>
    60b6:	2500      	movs	r5, #0
    60b8:	2480      	movs	r4, #128	; 0x80
    60ba:	03e4      	lsls	r4, r4, #15
    60bc:	432c      	orrs	r4, r5
    60be:	0264      	lsls	r4, r4, #9
    60c0:	0a64      	lsrs	r4, r4, #9
    60c2:	9b00      	ldr	r3, [sp, #0]
    60c4:	21ff      	movs	r1, #255	; 0xff
    60c6:	e781      	b.n	5fcc <__aeabi_fdiv+0x138>
    60c8:	9501      	str	r5, [sp, #4]
    60ca:	e7c1      	b.n	6050 <__aeabi_fdiv+0x1bc>
    60cc:	0023      	movs	r3, r4
    60ce:	2020      	movs	r0, #32
    60d0:	40cb      	lsrs	r3, r1
    60d2:	1a41      	subs	r1, r0, r1
    60d4:	408c      	lsls	r4, r1
    60d6:	1e61      	subs	r1, r4, #1
    60d8:	418c      	sbcs	r4, r1
    60da:	431c      	orrs	r4, r3
    60dc:	0763      	lsls	r3, r4, #29
    60de:	d004      	beq.n	60ea <__aeabi_fdiv+0x256>
    60e0:	230f      	movs	r3, #15
    60e2:	4023      	ands	r3, r4
    60e4:	2b04      	cmp	r3, #4
    60e6:	d000      	beq.n	60ea <__aeabi_fdiv+0x256>
    60e8:	3404      	adds	r4, #4
    60ea:	0163      	lsls	r3, r4, #5
    60ec:	d505      	bpl.n	60fa <__aeabi_fdiv+0x266>
    60ee:	2301      	movs	r3, #1
    60f0:	9a01      	ldr	r2, [sp, #4]
    60f2:	2101      	movs	r1, #1
    60f4:	4013      	ands	r3, r2
    60f6:	2400      	movs	r4, #0
    60f8:	e768      	b.n	5fcc <__aeabi_fdiv+0x138>
    60fa:	2301      	movs	r3, #1
    60fc:	9a01      	ldr	r2, [sp, #4]
    60fe:	01a4      	lsls	r4, r4, #6
    6100:	0a64      	lsrs	r4, r4, #9
    6102:	4013      	ands	r3, r2
    6104:	2100      	movs	r1, #0
    6106:	e761      	b.n	5fcc <__aeabi_fdiv+0x138>
    6108:	2380      	movs	r3, #128	; 0x80
    610a:	03db      	lsls	r3, r3, #15
    610c:	431c      	orrs	r4, r3
    610e:	0264      	lsls	r4, r4, #9
    6110:	0a64      	lsrs	r4, r4, #9
    6112:	4653      	mov	r3, sl
    6114:	21ff      	movs	r1, #255	; 0xff
    6116:	e759      	b.n	5fcc <__aeabi_fdiv+0x138>
    6118:	0000cc0c 	.word	0x0000cc0c
    611c:	0000cc4c 	.word	0x0000cc4c
    6120:	f7ffffff 	.word	0xf7ffffff

00006124 <__aeabi_i2f>:
    6124:	b570      	push	{r4, r5, r6, lr}
    6126:	2800      	cmp	r0, #0
    6128:	d030      	beq.n	618c <__aeabi_i2f+0x68>
    612a:	17c3      	asrs	r3, r0, #31
    612c:	18c4      	adds	r4, r0, r3
    612e:	405c      	eors	r4, r3
    6130:	0fc5      	lsrs	r5, r0, #31
    6132:	0020      	movs	r0, r4
    6134:	f001 fa4e 	bl	75d4 <__clzsi2>
    6138:	239e      	movs	r3, #158	; 0x9e
    613a:	1a1b      	subs	r3, r3, r0
    613c:	2b96      	cmp	r3, #150	; 0x96
    613e:	dc0d      	bgt.n	615c <__aeabi_i2f+0x38>
    6140:	2296      	movs	r2, #150	; 0x96
    6142:	1ad2      	subs	r2, r2, r3
    6144:	4094      	lsls	r4, r2
    6146:	002a      	movs	r2, r5
    6148:	0264      	lsls	r4, r4, #9
    614a:	0a64      	lsrs	r4, r4, #9
    614c:	b2db      	uxtb	r3, r3
    614e:	0264      	lsls	r4, r4, #9
    6150:	05db      	lsls	r3, r3, #23
    6152:	0a60      	lsrs	r0, r4, #9
    6154:	07d2      	lsls	r2, r2, #31
    6156:	4318      	orrs	r0, r3
    6158:	4310      	orrs	r0, r2
    615a:	bd70      	pop	{r4, r5, r6, pc}
    615c:	2b99      	cmp	r3, #153	; 0x99
    615e:	dc19      	bgt.n	6194 <__aeabi_i2f+0x70>
    6160:	2299      	movs	r2, #153	; 0x99
    6162:	1ad2      	subs	r2, r2, r3
    6164:	2a00      	cmp	r2, #0
    6166:	dd29      	ble.n	61bc <__aeabi_i2f+0x98>
    6168:	4094      	lsls	r4, r2
    616a:	0022      	movs	r2, r4
    616c:	4c14      	ldr	r4, [pc, #80]	; (61c0 <__aeabi_i2f+0x9c>)
    616e:	4014      	ands	r4, r2
    6170:	0751      	lsls	r1, r2, #29
    6172:	d004      	beq.n	617e <__aeabi_i2f+0x5a>
    6174:	210f      	movs	r1, #15
    6176:	400a      	ands	r2, r1
    6178:	2a04      	cmp	r2, #4
    617a:	d000      	beq.n	617e <__aeabi_i2f+0x5a>
    617c:	3404      	adds	r4, #4
    617e:	0162      	lsls	r2, r4, #5
    6180:	d413      	bmi.n	61aa <__aeabi_i2f+0x86>
    6182:	01a4      	lsls	r4, r4, #6
    6184:	0a64      	lsrs	r4, r4, #9
    6186:	b2db      	uxtb	r3, r3
    6188:	002a      	movs	r2, r5
    618a:	e7e0      	b.n	614e <__aeabi_i2f+0x2a>
    618c:	2200      	movs	r2, #0
    618e:	2300      	movs	r3, #0
    6190:	2400      	movs	r4, #0
    6192:	e7dc      	b.n	614e <__aeabi_i2f+0x2a>
    6194:	2205      	movs	r2, #5
    6196:	0021      	movs	r1, r4
    6198:	1a12      	subs	r2, r2, r0
    619a:	40d1      	lsrs	r1, r2
    619c:	22b9      	movs	r2, #185	; 0xb9
    619e:	1ad2      	subs	r2, r2, r3
    61a0:	4094      	lsls	r4, r2
    61a2:	1e62      	subs	r2, r4, #1
    61a4:	4194      	sbcs	r4, r2
    61a6:	430c      	orrs	r4, r1
    61a8:	e7da      	b.n	6160 <__aeabi_i2f+0x3c>
    61aa:	4b05      	ldr	r3, [pc, #20]	; (61c0 <__aeabi_i2f+0x9c>)
    61ac:	002a      	movs	r2, r5
    61ae:	401c      	ands	r4, r3
    61b0:	239f      	movs	r3, #159	; 0x9f
    61b2:	01a4      	lsls	r4, r4, #6
    61b4:	1a1b      	subs	r3, r3, r0
    61b6:	0a64      	lsrs	r4, r4, #9
    61b8:	b2db      	uxtb	r3, r3
    61ba:	e7c8      	b.n	614e <__aeabi_i2f+0x2a>
    61bc:	0022      	movs	r2, r4
    61be:	e7d5      	b.n	616c <__aeabi_i2f+0x48>
    61c0:	fbffffff 	.word	0xfbffffff

000061c4 <__aeabi_ddiv>:
    61c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c6:	4657      	mov	r7, sl
    61c8:	4645      	mov	r5, r8
    61ca:	46de      	mov	lr, fp
    61cc:	464e      	mov	r6, r9
    61ce:	b5e0      	push	{r5, r6, r7, lr}
    61d0:	004c      	lsls	r4, r1, #1
    61d2:	030e      	lsls	r6, r1, #12
    61d4:	b087      	sub	sp, #28
    61d6:	4683      	mov	fp, r0
    61d8:	4692      	mov	sl, r2
    61da:	001d      	movs	r5, r3
    61dc:	4680      	mov	r8, r0
    61de:	0b36      	lsrs	r6, r6, #12
    61e0:	0d64      	lsrs	r4, r4, #21
    61e2:	0fcf      	lsrs	r7, r1, #31
    61e4:	2c00      	cmp	r4, #0
    61e6:	d04f      	beq.n	6288 <__aeabi_ddiv+0xc4>
    61e8:	4b6f      	ldr	r3, [pc, #444]	; (63a8 <__aeabi_ddiv+0x1e4>)
    61ea:	429c      	cmp	r4, r3
    61ec:	d035      	beq.n	625a <__aeabi_ddiv+0x96>
    61ee:	2380      	movs	r3, #128	; 0x80
    61f0:	0f42      	lsrs	r2, r0, #29
    61f2:	041b      	lsls	r3, r3, #16
    61f4:	00f6      	lsls	r6, r6, #3
    61f6:	4313      	orrs	r3, r2
    61f8:	4333      	orrs	r3, r6
    61fa:	4699      	mov	r9, r3
    61fc:	00c3      	lsls	r3, r0, #3
    61fe:	4698      	mov	r8, r3
    6200:	4b6a      	ldr	r3, [pc, #424]	; (63ac <__aeabi_ddiv+0x1e8>)
    6202:	2600      	movs	r6, #0
    6204:	469c      	mov	ip, r3
    6206:	2300      	movs	r3, #0
    6208:	4464      	add	r4, ip
    620a:	9303      	str	r3, [sp, #12]
    620c:	032b      	lsls	r3, r5, #12
    620e:	0b1b      	lsrs	r3, r3, #12
    6210:	469b      	mov	fp, r3
    6212:	006b      	lsls	r3, r5, #1
    6214:	0fed      	lsrs	r5, r5, #31
    6216:	4650      	mov	r0, sl
    6218:	0d5b      	lsrs	r3, r3, #21
    621a:	9501      	str	r5, [sp, #4]
    621c:	d05e      	beq.n	62dc <__aeabi_ddiv+0x118>
    621e:	4a62      	ldr	r2, [pc, #392]	; (63a8 <__aeabi_ddiv+0x1e4>)
    6220:	4293      	cmp	r3, r2
    6222:	d053      	beq.n	62cc <__aeabi_ddiv+0x108>
    6224:	465a      	mov	r2, fp
    6226:	00d1      	lsls	r1, r2, #3
    6228:	2280      	movs	r2, #128	; 0x80
    622a:	0f40      	lsrs	r0, r0, #29
    622c:	0412      	lsls	r2, r2, #16
    622e:	4302      	orrs	r2, r0
    6230:	430a      	orrs	r2, r1
    6232:	4693      	mov	fp, r2
    6234:	4652      	mov	r2, sl
    6236:	00d1      	lsls	r1, r2, #3
    6238:	4a5c      	ldr	r2, [pc, #368]	; (63ac <__aeabi_ddiv+0x1e8>)
    623a:	4694      	mov	ip, r2
    623c:	2200      	movs	r2, #0
    623e:	4463      	add	r3, ip
    6240:	0038      	movs	r0, r7
    6242:	4068      	eors	r0, r5
    6244:	4684      	mov	ip, r0
    6246:	9002      	str	r0, [sp, #8]
    6248:	1ae4      	subs	r4, r4, r3
    624a:	4316      	orrs	r6, r2
    624c:	2e0f      	cmp	r6, #15
    624e:	d900      	bls.n	6252 <__aeabi_ddiv+0x8e>
    6250:	e0b4      	b.n	63bc <__aeabi_ddiv+0x1f8>
    6252:	4b57      	ldr	r3, [pc, #348]	; (63b0 <__aeabi_ddiv+0x1ec>)
    6254:	00b6      	lsls	r6, r6, #2
    6256:	599b      	ldr	r3, [r3, r6]
    6258:	469f      	mov	pc, r3
    625a:	0003      	movs	r3, r0
    625c:	4333      	orrs	r3, r6
    625e:	4699      	mov	r9, r3
    6260:	d16c      	bne.n	633c <__aeabi_ddiv+0x178>
    6262:	2300      	movs	r3, #0
    6264:	4698      	mov	r8, r3
    6266:	3302      	adds	r3, #2
    6268:	2608      	movs	r6, #8
    626a:	9303      	str	r3, [sp, #12]
    626c:	e7ce      	b.n	620c <__aeabi_ddiv+0x48>
    626e:	46cb      	mov	fp, r9
    6270:	4641      	mov	r1, r8
    6272:	9a03      	ldr	r2, [sp, #12]
    6274:	9701      	str	r7, [sp, #4]
    6276:	2a02      	cmp	r2, #2
    6278:	d165      	bne.n	6346 <__aeabi_ddiv+0x182>
    627a:	9b01      	ldr	r3, [sp, #4]
    627c:	4c4a      	ldr	r4, [pc, #296]	; (63a8 <__aeabi_ddiv+0x1e4>)
    627e:	469c      	mov	ip, r3
    6280:	2300      	movs	r3, #0
    6282:	2200      	movs	r2, #0
    6284:	4698      	mov	r8, r3
    6286:	e06b      	b.n	6360 <__aeabi_ddiv+0x19c>
    6288:	0003      	movs	r3, r0
    628a:	4333      	orrs	r3, r6
    628c:	4699      	mov	r9, r3
    628e:	d04e      	beq.n	632e <__aeabi_ddiv+0x16a>
    6290:	2e00      	cmp	r6, #0
    6292:	d100      	bne.n	6296 <__aeabi_ddiv+0xd2>
    6294:	e1bc      	b.n	6610 <__aeabi_ddiv+0x44c>
    6296:	0030      	movs	r0, r6
    6298:	f001 f99c 	bl	75d4 <__clzsi2>
    629c:	0003      	movs	r3, r0
    629e:	3b0b      	subs	r3, #11
    62a0:	2b1c      	cmp	r3, #28
    62a2:	dd00      	ble.n	62a6 <__aeabi_ddiv+0xe2>
    62a4:	e1ac      	b.n	6600 <__aeabi_ddiv+0x43c>
    62a6:	221d      	movs	r2, #29
    62a8:	1ad3      	subs	r3, r2, r3
    62aa:	465a      	mov	r2, fp
    62ac:	0001      	movs	r1, r0
    62ae:	40da      	lsrs	r2, r3
    62b0:	3908      	subs	r1, #8
    62b2:	408e      	lsls	r6, r1
    62b4:	0013      	movs	r3, r2
    62b6:	4333      	orrs	r3, r6
    62b8:	4699      	mov	r9, r3
    62ba:	465b      	mov	r3, fp
    62bc:	408b      	lsls	r3, r1
    62be:	4698      	mov	r8, r3
    62c0:	2300      	movs	r3, #0
    62c2:	4c3c      	ldr	r4, [pc, #240]	; (63b4 <__aeabi_ddiv+0x1f0>)
    62c4:	2600      	movs	r6, #0
    62c6:	1a24      	subs	r4, r4, r0
    62c8:	9303      	str	r3, [sp, #12]
    62ca:	e79f      	b.n	620c <__aeabi_ddiv+0x48>
    62cc:	4651      	mov	r1, sl
    62ce:	465a      	mov	r2, fp
    62d0:	4311      	orrs	r1, r2
    62d2:	d129      	bne.n	6328 <__aeabi_ddiv+0x164>
    62d4:	2200      	movs	r2, #0
    62d6:	4693      	mov	fp, r2
    62d8:	3202      	adds	r2, #2
    62da:	e7b1      	b.n	6240 <__aeabi_ddiv+0x7c>
    62dc:	4659      	mov	r1, fp
    62de:	4301      	orrs	r1, r0
    62e0:	d01e      	beq.n	6320 <__aeabi_ddiv+0x15c>
    62e2:	465b      	mov	r3, fp
    62e4:	2b00      	cmp	r3, #0
    62e6:	d100      	bne.n	62ea <__aeabi_ddiv+0x126>
    62e8:	e19e      	b.n	6628 <__aeabi_ddiv+0x464>
    62ea:	4658      	mov	r0, fp
    62ec:	f001 f972 	bl	75d4 <__clzsi2>
    62f0:	0003      	movs	r3, r0
    62f2:	3b0b      	subs	r3, #11
    62f4:	2b1c      	cmp	r3, #28
    62f6:	dd00      	ble.n	62fa <__aeabi_ddiv+0x136>
    62f8:	e18f      	b.n	661a <__aeabi_ddiv+0x456>
    62fa:	0002      	movs	r2, r0
    62fc:	4659      	mov	r1, fp
    62fe:	3a08      	subs	r2, #8
    6300:	4091      	lsls	r1, r2
    6302:	468b      	mov	fp, r1
    6304:	211d      	movs	r1, #29
    6306:	1acb      	subs	r3, r1, r3
    6308:	4651      	mov	r1, sl
    630a:	40d9      	lsrs	r1, r3
    630c:	000b      	movs	r3, r1
    630e:	4659      	mov	r1, fp
    6310:	430b      	orrs	r3, r1
    6312:	4651      	mov	r1, sl
    6314:	469b      	mov	fp, r3
    6316:	4091      	lsls	r1, r2
    6318:	4b26      	ldr	r3, [pc, #152]	; (63b4 <__aeabi_ddiv+0x1f0>)
    631a:	2200      	movs	r2, #0
    631c:	1a1b      	subs	r3, r3, r0
    631e:	e78f      	b.n	6240 <__aeabi_ddiv+0x7c>
    6320:	2300      	movs	r3, #0
    6322:	2201      	movs	r2, #1
    6324:	469b      	mov	fp, r3
    6326:	e78b      	b.n	6240 <__aeabi_ddiv+0x7c>
    6328:	4651      	mov	r1, sl
    632a:	2203      	movs	r2, #3
    632c:	e788      	b.n	6240 <__aeabi_ddiv+0x7c>
    632e:	2300      	movs	r3, #0
    6330:	4698      	mov	r8, r3
    6332:	3301      	adds	r3, #1
    6334:	2604      	movs	r6, #4
    6336:	2400      	movs	r4, #0
    6338:	9303      	str	r3, [sp, #12]
    633a:	e767      	b.n	620c <__aeabi_ddiv+0x48>
    633c:	2303      	movs	r3, #3
    633e:	46b1      	mov	r9, r6
    6340:	9303      	str	r3, [sp, #12]
    6342:	260c      	movs	r6, #12
    6344:	e762      	b.n	620c <__aeabi_ddiv+0x48>
    6346:	2a03      	cmp	r2, #3
    6348:	d100      	bne.n	634c <__aeabi_ddiv+0x188>
    634a:	e25c      	b.n	6806 <__aeabi_ddiv+0x642>
    634c:	9b01      	ldr	r3, [sp, #4]
    634e:	2a01      	cmp	r2, #1
    6350:	d000      	beq.n	6354 <__aeabi_ddiv+0x190>
    6352:	e1e4      	b.n	671e <__aeabi_ddiv+0x55a>
    6354:	4013      	ands	r3, r2
    6356:	469c      	mov	ip, r3
    6358:	2300      	movs	r3, #0
    635a:	2400      	movs	r4, #0
    635c:	2200      	movs	r2, #0
    635e:	4698      	mov	r8, r3
    6360:	2100      	movs	r1, #0
    6362:	0312      	lsls	r2, r2, #12
    6364:	0b13      	lsrs	r3, r2, #12
    6366:	0d0a      	lsrs	r2, r1, #20
    6368:	0512      	lsls	r2, r2, #20
    636a:	431a      	orrs	r2, r3
    636c:	0523      	lsls	r3, r4, #20
    636e:	4c12      	ldr	r4, [pc, #72]	; (63b8 <__aeabi_ddiv+0x1f4>)
    6370:	4640      	mov	r0, r8
    6372:	4022      	ands	r2, r4
    6374:	4313      	orrs	r3, r2
    6376:	4662      	mov	r2, ip
    6378:	005b      	lsls	r3, r3, #1
    637a:	07d2      	lsls	r2, r2, #31
    637c:	085b      	lsrs	r3, r3, #1
    637e:	4313      	orrs	r3, r2
    6380:	0019      	movs	r1, r3
    6382:	b007      	add	sp, #28
    6384:	bc3c      	pop	{r2, r3, r4, r5}
    6386:	4690      	mov	r8, r2
    6388:	4699      	mov	r9, r3
    638a:	46a2      	mov	sl, r4
    638c:	46ab      	mov	fp, r5
    638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6390:	2300      	movs	r3, #0
    6392:	2280      	movs	r2, #128	; 0x80
    6394:	469c      	mov	ip, r3
    6396:	0312      	lsls	r2, r2, #12
    6398:	4698      	mov	r8, r3
    639a:	4c03      	ldr	r4, [pc, #12]	; (63a8 <__aeabi_ddiv+0x1e4>)
    639c:	e7e0      	b.n	6360 <__aeabi_ddiv+0x19c>
    639e:	2300      	movs	r3, #0
    63a0:	4c01      	ldr	r4, [pc, #4]	; (63a8 <__aeabi_ddiv+0x1e4>)
    63a2:	2200      	movs	r2, #0
    63a4:	4698      	mov	r8, r3
    63a6:	e7db      	b.n	6360 <__aeabi_ddiv+0x19c>
    63a8:	000007ff 	.word	0x000007ff
    63ac:	fffffc01 	.word	0xfffffc01
    63b0:	0000cc8c 	.word	0x0000cc8c
    63b4:	fffffc0d 	.word	0xfffffc0d
    63b8:	800fffff 	.word	0x800fffff
    63bc:	45d9      	cmp	r9, fp
    63be:	d900      	bls.n	63c2 <__aeabi_ddiv+0x1fe>
    63c0:	e139      	b.n	6636 <__aeabi_ddiv+0x472>
    63c2:	d100      	bne.n	63c6 <__aeabi_ddiv+0x202>
    63c4:	e134      	b.n	6630 <__aeabi_ddiv+0x46c>
    63c6:	2300      	movs	r3, #0
    63c8:	4646      	mov	r6, r8
    63ca:	464d      	mov	r5, r9
    63cc:	469a      	mov	sl, r3
    63ce:	3c01      	subs	r4, #1
    63d0:	465b      	mov	r3, fp
    63d2:	0e0a      	lsrs	r2, r1, #24
    63d4:	021b      	lsls	r3, r3, #8
    63d6:	431a      	orrs	r2, r3
    63d8:	020b      	lsls	r3, r1, #8
    63da:	0c17      	lsrs	r7, r2, #16
    63dc:	9303      	str	r3, [sp, #12]
    63de:	0413      	lsls	r3, r2, #16
    63e0:	0c1b      	lsrs	r3, r3, #16
    63e2:	0039      	movs	r1, r7
    63e4:	0028      	movs	r0, r5
    63e6:	4690      	mov	r8, r2
    63e8:	9301      	str	r3, [sp, #4]
    63ea:	f7ff fa4b 	bl	5884 <__udivsi3>
    63ee:	0002      	movs	r2, r0
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	4683      	mov	fp, r0
    63f4:	435a      	muls	r2, r3
    63f6:	0028      	movs	r0, r5
    63f8:	0039      	movs	r1, r7
    63fa:	4691      	mov	r9, r2
    63fc:	f7ff fac8 	bl	5990 <__aeabi_uidivmod>
    6400:	0c35      	lsrs	r5, r6, #16
    6402:	0409      	lsls	r1, r1, #16
    6404:	430d      	orrs	r5, r1
    6406:	45a9      	cmp	r9, r5
    6408:	d90d      	bls.n	6426 <__aeabi_ddiv+0x262>
    640a:	465b      	mov	r3, fp
    640c:	4445      	add	r5, r8
    640e:	3b01      	subs	r3, #1
    6410:	45a8      	cmp	r8, r5
    6412:	d900      	bls.n	6416 <__aeabi_ddiv+0x252>
    6414:	e13a      	b.n	668c <__aeabi_ddiv+0x4c8>
    6416:	45a9      	cmp	r9, r5
    6418:	d800      	bhi.n	641c <__aeabi_ddiv+0x258>
    641a:	e137      	b.n	668c <__aeabi_ddiv+0x4c8>
    641c:	2302      	movs	r3, #2
    641e:	425b      	negs	r3, r3
    6420:	469c      	mov	ip, r3
    6422:	4445      	add	r5, r8
    6424:	44e3      	add	fp, ip
    6426:	464b      	mov	r3, r9
    6428:	1aeb      	subs	r3, r5, r3
    642a:	0039      	movs	r1, r7
    642c:	0018      	movs	r0, r3
    642e:	9304      	str	r3, [sp, #16]
    6430:	f7ff fa28 	bl	5884 <__udivsi3>
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	0005      	movs	r5, r0
    6438:	4343      	muls	r3, r0
    643a:	0039      	movs	r1, r7
    643c:	9804      	ldr	r0, [sp, #16]
    643e:	4699      	mov	r9, r3
    6440:	f7ff faa6 	bl	5990 <__aeabi_uidivmod>
    6444:	0433      	lsls	r3, r6, #16
    6446:	0409      	lsls	r1, r1, #16
    6448:	0c1b      	lsrs	r3, r3, #16
    644a:	430b      	orrs	r3, r1
    644c:	4599      	cmp	r9, r3
    644e:	d909      	bls.n	6464 <__aeabi_ddiv+0x2a0>
    6450:	4443      	add	r3, r8
    6452:	1e6a      	subs	r2, r5, #1
    6454:	4598      	cmp	r8, r3
    6456:	d900      	bls.n	645a <__aeabi_ddiv+0x296>
    6458:	e11a      	b.n	6690 <__aeabi_ddiv+0x4cc>
    645a:	4599      	cmp	r9, r3
    645c:	d800      	bhi.n	6460 <__aeabi_ddiv+0x29c>
    645e:	e117      	b.n	6690 <__aeabi_ddiv+0x4cc>
    6460:	3d02      	subs	r5, #2
    6462:	4443      	add	r3, r8
    6464:	464a      	mov	r2, r9
    6466:	1a9b      	subs	r3, r3, r2
    6468:	465a      	mov	r2, fp
    646a:	0412      	lsls	r2, r2, #16
    646c:	432a      	orrs	r2, r5
    646e:	9903      	ldr	r1, [sp, #12]
    6470:	4693      	mov	fp, r2
    6472:	0c10      	lsrs	r0, r2, #16
    6474:	0c0a      	lsrs	r2, r1, #16
    6476:	4691      	mov	r9, r2
    6478:	0409      	lsls	r1, r1, #16
    647a:	465a      	mov	r2, fp
    647c:	0c09      	lsrs	r1, r1, #16
    647e:	464e      	mov	r6, r9
    6480:	000d      	movs	r5, r1
    6482:	0412      	lsls	r2, r2, #16
    6484:	0c12      	lsrs	r2, r2, #16
    6486:	4345      	muls	r5, r0
    6488:	9105      	str	r1, [sp, #20]
    648a:	4351      	muls	r1, r2
    648c:	4372      	muls	r2, r6
    648e:	4370      	muls	r0, r6
    6490:	1952      	adds	r2, r2, r5
    6492:	0c0e      	lsrs	r6, r1, #16
    6494:	18b2      	adds	r2, r6, r2
    6496:	4295      	cmp	r5, r2
    6498:	d903      	bls.n	64a2 <__aeabi_ddiv+0x2de>
    649a:	2580      	movs	r5, #128	; 0x80
    649c:	026d      	lsls	r5, r5, #9
    649e:	46ac      	mov	ip, r5
    64a0:	4460      	add	r0, ip
    64a2:	0c15      	lsrs	r5, r2, #16
    64a4:	0409      	lsls	r1, r1, #16
    64a6:	0412      	lsls	r2, r2, #16
    64a8:	0c09      	lsrs	r1, r1, #16
    64aa:	1828      	adds	r0, r5, r0
    64ac:	1852      	adds	r2, r2, r1
    64ae:	4283      	cmp	r3, r0
    64b0:	d200      	bcs.n	64b4 <__aeabi_ddiv+0x2f0>
    64b2:	e0ce      	b.n	6652 <__aeabi_ddiv+0x48e>
    64b4:	d100      	bne.n	64b8 <__aeabi_ddiv+0x2f4>
    64b6:	e0c8      	b.n	664a <__aeabi_ddiv+0x486>
    64b8:	1a1d      	subs	r5, r3, r0
    64ba:	4653      	mov	r3, sl
    64bc:	1a9e      	subs	r6, r3, r2
    64be:	45b2      	cmp	sl, r6
    64c0:	4192      	sbcs	r2, r2
    64c2:	4252      	negs	r2, r2
    64c4:	1aab      	subs	r3, r5, r2
    64c6:	469a      	mov	sl, r3
    64c8:	4598      	cmp	r8, r3
    64ca:	d100      	bne.n	64ce <__aeabi_ddiv+0x30a>
    64cc:	e117      	b.n	66fe <__aeabi_ddiv+0x53a>
    64ce:	0039      	movs	r1, r7
    64d0:	0018      	movs	r0, r3
    64d2:	f7ff f9d7 	bl	5884 <__udivsi3>
    64d6:	9b01      	ldr	r3, [sp, #4]
    64d8:	0005      	movs	r5, r0
    64da:	4343      	muls	r3, r0
    64dc:	0039      	movs	r1, r7
    64de:	4650      	mov	r0, sl
    64e0:	9304      	str	r3, [sp, #16]
    64e2:	f7ff fa55 	bl	5990 <__aeabi_uidivmod>
    64e6:	9804      	ldr	r0, [sp, #16]
    64e8:	040b      	lsls	r3, r1, #16
    64ea:	0c31      	lsrs	r1, r6, #16
    64ec:	4319      	orrs	r1, r3
    64ee:	4288      	cmp	r0, r1
    64f0:	d909      	bls.n	6506 <__aeabi_ddiv+0x342>
    64f2:	4441      	add	r1, r8
    64f4:	1e6b      	subs	r3, r5, #1
    64f6:	4588      	cmp	r8, r1
    64f8:	d900      	bls.n	64fc <__aeabi_ddiv+0x338>
    64fa:	e107      	b.n	670c <__aeabi_ddiv+0x548>
    64fc:	4288      	cmp	r0, r1
    64fe:	d800      	bhi.n	6502 <__aeabi_ddiv+0x33e>
    6500:	e104      	b.n	670c <__aeabi_ddiv+0x548>
    6502:	3d02      	subs	r5, #2
    6504:	4441      	add	r1, r8
    6506:	9b04      	ldr	r3, [sp, #16]
    6508:	1acb      	subs	r3, r1, r3
    650a:	0018      	movs	r0, r3
    650c:	0039      	movs	r1, r7
    650e:	9304      	str	r3, [sp, #16]
    6510:	f7ff f9b8 	bl	5884 <__udivsi3>
    6514:	9b01      	ldr	r3, [sp, #4]
    6516:	4682      	mov	sl, r0
    6518:	4343      	muls	r3, r0
    651a:	0039      	movs	r1, r7
    651c:	9804      	ldr	r0, [sp, #16]
    651e:	9301      	str	r3, [sp, #4]
    6520:	f7ff fa36 	bl	5990 <__aeabi_uidivmod>
    6524:	9801      	ldr	r0, [sp, #4]
    6526:	040b      	lsls	r3, r1, #16
    6528:	0431      	lsls	r1, r6, #16
    652a:	0c09      	lsrs	r1, r1, #16
    652c:	4319      	orrs	r1, r3
    652e:	4288      	cmp	r0, r1
    6530:	d90d      	bls.n	654e <__aeabi_ddiv+0x38a>
    6532:	4653      	mov	r3, sl
    6534:	4441      	add	r1, r8
    6536:	3b01      	subs	r3, #1
    6538:	4588      	cmp	r8, r1
    653a:	d900      	bls.n	653e <__aeabi_ddiv+0x37a>
    653c:	e0e8      	b.n	6710 <__aeabi_ddiv+0x54c>
    653e:	4288      	cmp	r0, r1
    6540:	d800      	bhi.n	6544 <__aeabi_ddiv+0x380>
    6542:	e0e5      	b.n	6710 <__aeabi_ddiv+0x54c>
    6544:	2302      	movs	r3, #2
    6546:	425b      	negs	r3, r3
    6548:	469c      	mov	ip, r3
    654a:	4441      	add	r1, r8
    654c:	44e2      	add	sl, ip
    654e:	9b01      	ldr	r3, [sp, #4]
    6550:	042d      	lsls	r5, r5, #16
    6552:	1ace      	subs	r6, r1, r3
    6554:	4651      	mov	r1, sl
    6556:	4329      	orrs	r1, r5
    6558:	9d05      	ldr	r5, [sp, #20]
    655a:	464f      	mov	r7, r9
    655c:	002a      	movs	r2, r5
    655e:	040b      	lsls	r3, r1, #16
    6560:	0c08      	lsrs	r0, r1, #16
    6562:	0c1b      	lsrs	r3, r3, #16
    6564:	435a      	muls	r2, r3
    6566:	4345      	muls	r5, r0
    6568:	437b      	muls	r3, r7
    656a:	4378      	muls	r0, r7
    656c:	195b      	adds	r3, r3, r5
    656e:	0c17      	lsrs	r7, r2, #16
    6570:	18fb      	adds	r3, r7, r3
    6572:	429d      	cmp	r5, r3
    6574:	d903      	bls.n	657e <__aeabi_ddiv+0x3ba>
    6576:	2580      	movs	r5, #128	; 0x80
    6578:	026d      	lsls	r5, r5, #9
    657a:	46ac      	mov	ip, r5
    657c:	4460      	add	r0, ip
    657e:	0c1d      	lsrs	r5, r3, #16
    6580:	0412      	lsls	r2, r2, #16
    6582:	041b      	lsls	r3, r3, #16
    6584:	0c12      	lsrs	r2, r2, #16
    6586:	1828      	adds	r0, r5, r0
    6588:	189b      	adds	r3, r3, r2
    658a:	4286      	cmp	r6, r0
    658c:	d200      	bcs.n	6590 <__aeabi_ddiv+0x3cc>
    658e:	e093      	b.n	66b8 <__aeabi_ddiv+0x4f4>
    6590:	d100      	bne.n	6594 <__aeabi_ddiv+0x3d0>
    6592:	e08e      	b.n	66b2 <__aeabi_ddiv+0x4ee>
    6594:	2301      	movs	r3, #1
    6596:	4319      	orrs	r1, r3
    6598:	4ba0      	ldr	r3, [pc, #640]	; (681c <__aeabi_ddiv+0x658>)
    659a:	18e3      	adds	r3, r4, r3
    659c:	2b00      	cmp	r3, #0
    659e:	dc00      	bgt.n	65a2 <__aeabi_ddiv+0x3de>
    65a0:	e099      	b.n	66d6 <__aeabi_ddiv+0x512>
    65a2:	074a      	lsls	r2, r1, #29
    65a4:	d000      	beq.n	65a8 <__aeabi_ddiv+0x3e4>
    65a6:	e09e      	b.n	66e6 <__aeabi_ddiv+0x522>
    65a8:	465a      	mov	r2, fp
    65aa:	01d2      	lsls	r2, r2, #7
    65ac:	d506      	bpl.n	65bc <__aeabi_ddiv+0x3f8>
    65ae:	465a      	mov	r2, fp
    65b0:	4b9b      	ldr	r3, [pc, #620]	; (6820 <__aeabi_ddiv+0x65c>)
    65b2:	401a      	ands	r2, r3
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	4693      	mov	fp, r2
    65b8:	00db      	lsls	r3, r3, #3
    65ba:	18e3      	adds	r3, r4, r3
    65bc:	4a99      	ldr	r2, [pc, #612]	; (6824 <__aeabi_ddiv+0x660>)
    65be:	4293      	cmp	r3, r2
    65c0:	dd68      	ble.n	6694 <__aeabi_ddiv+0x4d0>
    65c2:	2301      	movs	r3, #1
    65c4:	9a02      	ldr	r2, [sp, #8]
    65c6:	4c98      	ldr	r4, [pc, #608]	; (6828 <__aeabi_ddiv+0x664>)
    65c8:	401a      	ands	r2, r3
    65ca:	2300      	movs	r3, #0
    65cc:	4694      	mov	ip, r2
    65ce:	4698      	mov	r8, r3
    65d0:	2200      	movs	r2, #0
    65d2:	e6c5      	b.n	6360 <__aeabi_ddiv+0x19c>
    65d4:	2280      	movs	r2, #128	; 0x80
    65d6:	464b      	mov	r3, r9
    65d8:	0312      	lsls	r2, r2, #12
    65da:	4213      	tst	r3, r2
    65dc:	d00a      	beq.n	65f4 <__aeabi_ddiv+0x430>
    65de:	465b      	mov	r3, fp
    65e0:	4213      	tst	r3, r2
    65e2:	d106      	bne.n	65f2 <__aeabi_ddiv+0x42e>
    65e4:	431a      	orrs	r2, r3
    65e6:	0312      	lsls	r2, r2, #12
    65e8:	0b12      	lsrs	r2, r2, #12
    65ea:	46ac      	mov	ip, r5
    65ec:	4688      	mov	r8, r1
    65ee:	4c8e      	ldr	r4, [pc, #568]	; (6828 <__aeabi_ddiv+0x664>)
    65f0:	e6b6      	b.n	6360 <__aeabi_ddiv+0x19c>
    65f2:	464b      	mov	r3, r9
    65f4:	431a      	orrs	r2, r3
    65f6:	0312      	lsls	r2, r2, #12
    65f8:	0b12      	lsrs	r2, r2, #12
    65fa:	46bc      	mov	ip, r7
    65fc:	4c8a      	ldr	r4, [pc, #552]	; (6828 <__aeabi_ddiv+0x664>)
    65fe:	e6af      	b.n	6360 <__aeabi_ddiv+0x19c>
    6600:	0003      	movs	r3, r0
    6602:	465a      	mov	r2, fp
    6604:	3b28      	subs	r3, #40	; 0x28
    6606:	409a      	lsls	r2, r3
    6608:	2300      	movs	r3, #0
    660a:	4691      	mov	r9, r2
    660c:	4698      	mov	r8, r3
    660e:	e657      	b.n	62c0 <__aeabi_ddiv+0xfc>
    6610:	4658      	mov	r0, fp
    6612:	f000 ffdf 	bl	75d4 <__clzsi2>
    6616:	3020      	adds	r0, #32
    6618:	e640      	b.n	629c <__aeabi_ddiv+0xd8>
    661a:	0003      	movs	r3, r0
    661c:	4652      	mov	r2, sl
    661e:	3b28      	subs	r3, #40	; 0x28
    6620:	409a      	lsls	r2, r3
    6622:	2100      	movs	r1, #0
    6624:	4693      	mov	fp, r2
    6626:	e677      	b.n	6318 <__aeabi_ddiv+0x154>
    6628:	f000 ffd4 	bl	75d4 <__clzsi2>
    662c:	3020      	adds	r0, #32
    662e:	e65f      	b.n	62f0 <__aeabi_ddiv+0x12c>
    6630:	4588      	cmp	r8, r1
    6632:	d200      	bcs.n	6636 <__aeabi_ddiv+0x472>
    6634:	e6c7      	b.n	63c6 <__aeabi_ddiv+0x202>
    6636:	464b      	mov	r3, r9
    6638:	07de      	lsls	r6, r3, #31
    663a:	085d      	lsrs	r5, r3, #1
    663c:	4643      	mov	r3, r8
    663e:	085b      	lsrs	r3, r3, #1
    6640:	431e      	orrs	r6, r3
    6642:	4643      	mov	r3, r8
    6644:	07db      	lsls	r3, r3, #31
    6646:	469a      	mov	sl, r3
    6648:	e6c2      	b.n	63d0 <__aeabi_ddiv+0x20c>
    664a:	2500      	movs	r5, #0
    664c:	4592      	cmp	sl, r2
    664e:	d300      	bcc.n	6652 <__aeabi_ddiv+0x48e>
    6650:	e733      	b.n	64ba <__aeabi_ddiv+0x2f6>
    6652:	9e03      	ldr	r6, [sp, #12]
    6654:	4659      	mov	r1, fp
    6656:	46b4      	mov	ip, r6
    6658:	44e2      	add	sl, ip
    665a:	45b2      	cmp	sl, r6
    665c:	41ad      	sbcs	r5, r5
    665e:	426d      	negs	r5, r5
    6660:	4445      	add	r5, r8
    6662:	18eb      	adds	r3, r5, r3
    6664:	3901      	subs	r1, #1
    6666:	4598      	cmp	r8, r3
    6668:	d207      	bcs.n	667a <__aeabi_ddiv+0x4b6>
    666a:	4298      	cmp	r0, r3
    666c:	d900      	bls.n	6670 <__aeabi_ddiv+0x4ac>
    666e:	e07f      	b.n	6770 <__aeabi_ddiv+0x5ac>
    6670:	d100      	bne.n	6674 <__aeabi_ddiv+0x4b0>
    6672:	e0bc      	b.n	67ee <__aeabi_ddiv+0x62a>
    6674:	1a1d      	subs	r5, r3, r0
    6676:	468b      	mov	fp, r1
    6678:	e71f      	b.n	64ba <__aeabi_ddiv+0x2f6>
    667a:	4598      	cmp	r8, r3
    667c:	d1fa      	bne.n	6674 <__aeabi_ddiv+0x4b0>
    667e:	9d03      	ldr	r5, [sp, #12]
    6680:	4555      	cmp	r5, sl
    6682:	d9f2      	bls.n	666a <__aeabi_ddiv+0x4a6>
    6684:	4643      	mov	r3, r8
    6686:	468b      	mov	fp, r1
    6688:	1a1d      	subs	r5, r3, r0
    668a:	e716      	b.n	64ba <__aeabi_ddiv+0x2f6>
    668c:	469b      	mov	fp, r3
    668e:	e6ca      	b.n	6426 <__aeabi_ddiv+0x262>
    6690:	0015      	movs	r5, r2
    6692:	e6e7      	b.n	6464 <__aeabi_ddiv+0x2a0>
    6694:	465a      	mov	r2, fp
    6696:	08c9      	lsrs	r1, r1, #3
    6698:	0752      	lsls	r2, r2, #29
    669a:	430a      	orrs	r2, r1
    669c:	055b      	lsls	r3, r3, #21
    669e:	4690      	mov	r8, r2
    66a0:	0d5c      	lsrs	r4, r3, #21
    66a2:	465a      	mov	r2, fp
    66a4:	2301      	movs	r3, #1
    66a6:	9902      	ldr	r1, [sp, #8]
    66a8:	0252      	lsls	r2, r2, #9
    66aa:	4019      	ands	r1, r3
    66ac:	0b12      	lsrs	r2, r2, #12
    66ae:	468c      	mov	ip, r1
    66b0:	e656      	b.n	6360 <__aeabi_ddiv+0x19c>
    66b2:	2b00      	cmp	r3, #0
    66b4:	d100      	bne.n	66b8 <__aeabi_ddiv+0x4f4>
    66b6:	e76f      	b.n	6598 <__aeabi_ddiv+0x3d4>
    66b8:	4446      	add	r6, r8
    66ba:	1e4a      	subs	r2, r1, #1
    66bc:	45b0      	cmp	r8, r6
    66be:	d929      	bls.n	6714 <__aeabi_ddiv+0x550>
    66c0:	0011      	movs	r1, r2
    66c2:	4286      	cmp	r6, r0
    66c4:	d000      	beq.n	66c8 <__aeabi_ddiv+0x504>
    66c6:	e765      	b.n	6594 <__aeabi_ddiv+0x3d0>
    66c8:	9a03      	ldr	r2, [sp, #12]
    66ca:	4293      	cmp	r3, r2
    66cc:	d000      	beq.n	66d0 <__aeabi_ddiv+0x50c>
    66ce:	e761      	b.n	6594 <__aeabi_ddiv+0x3d0>
    66d0:	e762      	b.n	6598 <__aeabi_ddiv+0x3d4>
    66d2:	2101      	movs	r1, #1
    66d4:	4249      	negs	r1, r1
    66d6:	2001      	movs	r0, #1
    66d8:	1ac2      	subs	r2, r0, r3
    66da:	2a38      	cmp	r2, #56	; 0x38
    66dc:	dd21      	ble.n	6722 <__aeabi_ddiv+0x55e>
    66de:	9b02      	ldr	r3, [sp, #8]
    66e0:	4003      	ands	r3, r0
    66e2:	469c      	mov	ip, r3
    66e4:	e638      	b.n	6358 <__aeabi_ddiv+0x194>
    66e6:	220f      	movs	r2, #15
    66e8:	400a      	ands	r2, r1
    66ea:	2a04      	cmp	r2, #4
    66ec:	d100      	bne.n	66f0 <__aeabi_ddiv+0x52c>
    66ee:	e75b      	b.n	65a8 <__aeabi_ddiv+0x3e4>
    66f0:	000a      	movs	r2, r1
    66f2:	1d11      	adds	r1, r2, #4
    66f4:	4291      	cmp	r1, r2
    66f6:	4192      	sbcs	r2, r2
    66f8:	4252      	negs	r2, r2
    66fa:	4493      	add	fp, r2
    66fc:	e754      	b.n	65a8 <__aeabi_ddiv+0x3e4>
    66fe:	4b47      	ldr	r3, [pc, #284]	; (681c <__aeabi_ddiv+0x658>)
    6700:	18e3      	adds	r3, r4, r3
    6702:	2b00      	cmp	r3, #0
    6704:	dde5      	ble.n	66d2 <__aeabi_ddiv+0x50e>
    6706:	2201      	movs	r2, #1
    6708:	4252      	negs	r2, r2
    670a:	e7f2      	b.n	66f2 <__aeabi_ddiv+0x52e>
    670c:	001d      	movs	r5, r3
    670e:	e6fa      	b.n	6506 <__aeabi_ddiv+0x342>
    6710:	469a      	mov	sl, r3
    6712:	e71c      	b.n	654e <__aeabi_ddiv+0x38a>
    6714:	42b0      	cmp	r0, r6
    6716:	d839      	bhi.n	678c <__aeabi_ddiv+0x5c8>
    6718:	d06e      	beq.n	67f8 <__aeabi_ddiv+0x634>
    671a:	0011      	movs	r1, r2
    671c:	e73a      	b.n	6594 <__aeabi_ddiv+0x3d0>
    671e:	9302      	str	r3, [sp, #8]
    6720:	e73a      	b.n	6598 <__aeabi_ddiv+0x3d4>
    6722:	2a1f      	cmp	r2, #31
    6724:	dc3c      	bgt.n	67a0 <__aeabi_ddiv+0x5dc>
    6726:	2320      	movs	r3, #32
    6728:	1a9b      	subs	r3, r3, r2
    672a:	000c      	movs	r4, r1
    672c:	4658      	mov	r0, fp
    672e:	4099      	lsls	r1, r3
    6730:	4098      	lsls	r0, r3
    6732:	1e4b      	subs	r3, r1, #1
    6734:	4199      	sbcs	r1, r3
    6736:	465b      	mov	r3, fp
    6738:	40d4      	lsrs	r4, r2
    673a:	40d3      	lsrs	r3, r2
    673c:	4320      	orrs	r0, r4
    673e:	4308      	orrs	r0, r1
    6740:	001a      	movs	r2, r3
    6742:	0743      	lsls	r3, r0, #29
    6744:	d009      	beq.n	675a <__aeabi_ddiv+0x596>
    6746:	230f      	movs	r3, #15
    6748:	4003      	ands	r3, r0
    674a:	2b04      	cmp	r3, #4
    674c:	d005      	beq.n	675a <__aeabi_ddiv+0x596>
    674e:	0001      	movs	r1, r0
    6750:	1d08      	adds	r0, r1, #4
    6752:	4288      	cmp	r0, r1
    6754:	419b      	sbcs	r3, r3
    6756:	425b      	negs	r3, r3
    6758:	18d2      	adds	r2, r2, r3
    675a:	0213      	lsls	r3, r2, #8
    675c:	d53a      	bpl.n	67d4 <__aeabi_ddiv+0x610>
    675e:	2301      	movs	r3, #1
    6760:	9a02      	ldr	r2, [sp, #8]
    6762:	2401      	movs	r4, #1
    6764:	401a      	ands	r2, r3
    6766:	2300      	movs	r3, #0
    6768:	4694      	mov	ip, r2
    676a:	4698      	mov	r8, r3
    676c:	2200      	movs	r2, #0
    676e:	e5f7      	b.n	6360 <__aeabi_ddiv+0x19c>
    6770:	2102      	movs	r1, #2
    6772:	4249      	negs	r1, r1
    6774:	468c      	mov	ip, r1
    6776:	9d03      	ldr	r5, [sp, #12]
    6778:	44e3      	add	fp, ip
    677a:	46ac      	mov	ip, r5
    677c:	44e2      	add	sl, ip
    677e:	45aa      	cmp	sl, r5
    6780:	41ad      	sbcs	r5, r5
    6782:	426d      	negs	r5, r5
    6784:	4445      	add	r5, r8
    6786:	18ed      	adds	r5, r5, r3
    6788:	1a2d      	subs	r5, r5, r0
    678a:	e696      	b.n	64ba <__aeabi_ddiv+0x2f6>
    678c:	1e8a      	subs	r2, r1, #2
    678e:	9903      	ldr	r1, [sp, #12]
    6790:	004d      	lsls	r5, r1, #1
    6792:	428d      	cmp	r5, r1
    6794:	4189      	sbcs	r1, r1
    6796:	4249      	negs	r1, r1
    6798:	4441      	add	r1, r8
    679a:	1876      	adds	r6, r6, r1
    679c:	9503      	str	r5, [sp, #12]
    679e:	e78f      	b.n	66c0 <__aeabi_ddiv+0x4fc>
    67a0:	201f      	movs	r0, #31
    67a2:	4240      	negs	r0, r0
    67a4:	1ac3      	subs	r3, r0, r3
    67a6:	4658      	mov	r0, fp
    67a8:	40d8      	lsrs	r0, r3
    67aa:	0003      	movs	r3, r0
    67ac:	2a20      	cmp	r2, #32
    67ae:	d028      	beq.n	6802 <__aeabi_ddiv+0x63e>
    67b0:	2040      	movs	r0, #64	; 0x40
    67b2:	465d      	mov	r5, fp
    67b4:	1a82      	subs	r2, r0, r2
    67b6:	4095      	lsls	r5, r2
    67b8:	4329      	orrs	r1, r5
    67ba:	1e4a      	subs	r2, r1, #1
    67bc:	4191      	sbcs	r1, r2
    67be:	4319      	orrs	r1, r3
    67c0:	2307      	movs	r3, #7
    67c2:	2200      	movs	r2, #0
    67c4:	400b      	ands	r3, r1
    67c6:	d009      	beq.n	67dc <__aeabi_ddiv+0x618>
    67c8:	230f      	movs	r3, #15
    67ca:	2200      	movs	r2, #0
    67cc:	400b      	ands	r3, r1
    67ce:	0008      	movs	r0, r1
    67d0:	2b04      	cmp	r3, #4
    67d2:	d1bd      	bne.n	6750 <__aeabi_ddiv+0x58c>
    67d4:	0001      	movs	r1, r0
    67d6:	0753      	lsls	r3, r2, #29
    67d8:	0252      	lsls	r2, r2, #9
    67da:	0b12      	lsrs	r2, r2, #12
    67dc:	08c9      	lsrs	r1, r1, #3
    67de:	4319      	orrs	r1, r3
    67e0:	2301      	movs	r3, #1
    67e2:	4688      	mov	r8, r1
    67e4:	9902      	ldr	r1, [sp, #8]
    67e6:	2400      	movs	r4, #0
    67e8:	4019      	ands	r1, r3
    67ea:	468c      	mov	ip, r1
    67ec:	e5b8      	b.n	6360 <__aeabi_ddiv+0x19c>
    67ee:	4552      	cmp	r2, sl
    67f0:	d8be      	bhi.n	6770 <__aeabi_ddiv+0x5ac>
    67f2:	468b      	mov	fp, r1
    67f4:	2500      	movs	r5, #0
    67f6:	e660      	b.n	64ba <__aeabi_ddiv+0x2f6>
    67f8:	9d03      	ldr	r5, [sp, #12]
    67fa:	429d      	cmp	r5, r3
    67fc:	d3c6      	bcc.n	678c <__aeabi_ddiv+0x5c8>
    67fe:	0011      	movs	r1, r2
    6800:	e762      	b.n	66c8 <__aeabi_ddiv+0x504>
    6802:	2500      	movs	r5, #0
    6804:	e7d8      	b.n	67b8 <__aeabi_ddiv+0x5f4>
    6806:	2280      	movs	r2, #128	; 0x80
    6808:	465b      	mov	r3, fp
    680a:	0312      	lsls	r2, r2, #12
    680c:	431a      	orrs	r2, r3
    680e:	9b01      	ldr	r3, [sp, #4]
    6810:	0312      	lsls	r2, r2, #12
    6812:	0b12      	lsrs	r2, r2, #12
    6814:	469c      	mov	ip, r3
    6816:	4688      	mov	r8, r1
    6818:	4c03      	ldr	r4, [pc, #12]	; (6828 <__aeabi_ddiv+0x664>)
    681a:	e5a1      	b.n	6360 <__aeabi_ddiv+0x19c>
    681c:	000003ff 	.word	0x000003ff
    6820:	feffffff 	.word	0xfeffffff
    6824:	000007fe 	.word	0x000007fe
    6828:	000007ff 	.word	0x000007ff

0000682c <__aeabi_dmul>:
    682c:	b5f0      	push	{r4, r5, r6, r7, lr}
    682e:	4657      	mov	r7, sl
    6830:	4645      	mov	r5, r8
    6832:	46de      	mov	lr, fp
    6834:	464e      	mov	r6, r9
    6836:	b5e0      	push	{r5, r6, r7, lr}
    6838:	030c      	lsls	r4, r1, #12
    683a:	4698      	mov	r8, r3
    683c:	004e      	lsls	r6, r1, #1
    683e:	0b23      	lsrs	r3, r4, #12
    6840:	b087      	sub	sp, #28
    6842:	0007      	movs	r7, r0
    6844:	4692      	mov	sl, r2
    6846:	469b      	mov	fp, r3
    6848:	0d76      	lsrs	r6, r6, #21
    684a:	0fcd      	lsrs	r5, r1, #31
    684c:	2e00      	cmp	r6, #0
    684e:	d06b      	beq.n	6928 <__aeabi_dmul+0xfc>
    6850:	4b6d      	ldr	r3, [pc, #436]	; (6a08 <__aeabi_dmul+0x1dc>)
    6852:	429e      	cmp	r6, r3
    6854:	d035      	beq.n	68c2 <__aeabi_dmul+0x96>
    6856:	2480      	movs	r4, #128	; 0x80
    6858:	465b      	mov	r3, fp
    685a:	0f42      	lsrs	r2, r0, #29
    685c:	0424      	lsls	r4, r4, #16
    685e:	00db      	lsls	r3, r3, #3
    6860:	4314      	orrs	r4, r2
    6862:	431c      	orrs	r4, r3
    6864:	00c3      	lsls	r3, r0, #3
    6866:	4699      	mov	r9, r3
    6868:	4b68      	ldr	r3, [pc, #416]	; (6a0c <__aeabi_dmul+0x1e0>)
    686a:	46a3      	mov	fp, r4
    686c:	469c      	mov	ip, r3
    686e:	2300      	movs	r3, #0
    6870:	2700      	movs	r7, #0
    6872:	4466      	add	r6, ip
    6874:	9302      	str	r3, [sp, #8]
    6876:	4643      	mov	r3, r8
    6878:	031c      	lsls	r4, r3, #12
    687a:	005a      	lsls	r2, r3, #1
    687c:	0fdb      	lsrs	r3, r3, #31
    687e:	4650      	mov	r0, sl
    6880:	0b24      	lsrs	r4, r4, #12
    6882:	0d52      	lsrs	r2, r2, #21
    6884:	4698      	mov	r8, r3
    6886:	d100      	bne.n	688a <__aeabi_dmul+0x5e>
    6888:	e076      	b.n	6978 <__aeabi_dmul+0x14c>
    688a:	4b5f      	ldr	r3, [pc, #380]	; (6a08 <__aeabi_dmul+0x1dc>)
    688c:	429a      	cmp	r2, r3
    688e:	d06d      	beq.n	696c <__aeabi_dmul+0x140>
    6890:	2380      	movs	r3, #128	; 0x80
    6892:	0f41      	lsrs	r1, r0, #29
    6894:	041b      	lsls	r3, r3, #16
    6896:	430b      	orrs	r3, r1
    6898:	495c      	ldr	r1, [pc, #368]	; (6a0c <__aeabi_dmul+0x1e0>)
    689a:	00e4      	lsls	r4, r4, #3
    689c:	468c      	mov	ip, r1
    689e:	431c      	orrs	r4, r3
    68a0:	00c3      	lsls	r3, r0, #3
    68a2:	2000      	movs	r0, #0
    68a4:	4462      	add	r2, ip
    68a6:	4641      	mov	r1, r8
    68a8:	18b6      	adds	r6, r6, r2
    68aa:	4069      	eors	r1, r5
    68ac:	1c72      	adds	r2, r6, #1
    68ae:	9101      	str	r1, [sp, #4]
    68b0:	4694      	mov	ip, r2
    68b2:	4307      	orrs	r7, r0
    68b4:	2f0f      	cmp	r7, #15
    68b6:	d900      	bls.n	68ba <__aeabi_dmul+0x8e>
    68b8:	e0b0      	b.n	6a1c <__aeabi_dmul+0x1f0>
    68ba:	4a55      	ldr	r2, [pc, #340]	; (6a10 <__aeabi_dmul+0x1e4>)
    68bc:	00bf      	lsls	r7, r7, #2
    68be:	59d2      	ldr	r2, [r2, r7]
    68c0:	4697      	mov	pc, r2
    68c2:	465b      	mov	r3, fp
    68c4:	4303      	orrs	r3, r0
    68c6:	4699      	mov	r9, r3
    68c8:	d000      	beq.n	68cc <__aeabi_dmul+0xa0>
    68ca:	e087      	b.n	69dc <__aeabi_dmul+0x1b0>
    68cc:	2300      	movs	r3, #0
    68ce:	469b      	mov	fp, r3
    68d0:	3302      	adds	r3, #2
    68d2:	2708      	movs	r7, #8
    68d4:	9302      	str	r3, [sp, #8]
    68d6:	e7ce      	b.n	6876 <__aeabi_dmul+0x4a>
    68d8:	4642      	mov	r2, r8
    68da:	9201      	str	r2, [sp, #4]
    68dc:	2802      	cmp	r0, #2
    68de:	d067      	beq.n	69b0 <__aeabi_dmul+0x184>
    68e0:	2803      	cmp	r0, #3
    68e2:	d100      	bne.n	68e6 <__aeabi_dmul+0xba>
    68e4:	e20e      	b.n	6d04 <__aeabi_dmul+0x4d8>
    68e6:	2801      	cmp	r0, #1
    68e8:	d000      	beq.n	68ec <__aeabi_dmul+0xc0>
    68ea:	e162      	b.n	6bb2 <__aeabi_dmul+0x386>
    68ec:	2300      	movs	r3, #0
    68ee:	2400      	movs	r4, #0
    68f0:	2200      	movs	r2, #0
    68f2:	4699      	mov	r9, r3
    68f4:	9901      	ldr	r1, [sp, #4]
    68f6:	4001      	ands	r1, r0
    68f8:	b2cd      	uxtb	r5, r1
    68fa:	2100      	movs	r1, #0
    68fc:	0312      	lsls	r2, r2, #12
    68fe:	0d0b      	lsrs	r3, r1, #20
    6900:	0b12      	lsrs	r2, r2, #12
    6902:	051b      	lsls	r3, r3, #20
    6904:	4313      	orrs	r3, r2
    6906:	4a43      	ldr	r2, [pc, #268]	; (6a14 <__aeabi_dmul+0x1e8>)
    6908:	0524      	lsls	r4, r4, #20
    690a:	4013      	ands	r3, r2
    690c:	431c      	orrs	r4, r3
    690e:	0064      	lsls	r4, r4, #1
    6910:	07ed      	lsls	r5, r5, #31
    6912:	0864      	lsrs	r4, r4, #1
    6914:	432c      	orrs	r4, r5
    6916:	4648      	mov	r0, r9
    6918:	0021      	movs	r1, r4
    691a:	b007      	add	sp, #28
    691c:	bc3c      	pop	{r2, r3, r4, r5}
    691e:	4690      	mov	r8, r2
    6920:	4699      	mov	r9, r3
    6922:	46a2      	mov	sl, r4
    6924:	46ab      	mov	fp, r5
    6926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6928:	4303      	orrs	r3, r0
    692a:	4699      	mov	r9, r3
    692c:	d04f      	beq.n	69ce <__aeabi_dmul+0x1a2>
    692e:	465b      	mov	r3, fp
    6930:	2b00      	cmp	r3, #0
    6932:	d100      	bne.n	6936 <__aeabi_dmul+0x10a>
    6934:	e189      	b.n	6c4a <__aeabi_dmul+0x41e>
    6936:	4658      	mov	r0, fp
    6938:	f000 fe4c 	bl	75d4 <__clzsi2>
    693c:	0003      	movs	r3, r0
    693e:	3b0b      	subs	r3, #11
    6940:	2b1c      	cmp	r3, #28
    6942:	dd00      	ble.n	6946 <__aeabi_dmul+0x11a>
    6944:	e17a      	b.n	6c3c <__aeabi_dmul+0x410>
    6946:	221d      	movs	r2, #29
    6948:	1ad3      	subs	r3, r2, r3
    694a:	003a      	movs	r2, r7
    694c:	0001      	movs	r1, r0
    694e:	465c      	mov	r4, fp
    6950:	40da      	lsrs	r2, r3
    6952:	3908      	subs	r1, #8
    6954:	408c      	lsls	r4, r1
    6956:	0013      	movs	r3, r2
    6958:	408f      	lsls	r7, r1
    695a:	4323      	orrs	r3, r4
    695c:	469b      	mov	fp, r3
    695e:	46b9      	mov	r9, r7
    6960:	2300      	movs	r3, #0
    6962:	4e2d      	ldr	r6, [pc, #180]	; (6a18 <__aeabi_dmul+0x1ec>)
    6964:	2700      	movs	r7, #0
    6966:	1a36      	subs	r6, r6, r0
    6968:	9302      	str	r3, [sp, #8]
    696a:	e784      	b.n	6876 <__aeabi_dmul+0x4a>
    696c:	4653      	mov	r3, sl
    696e:	4323      	orrs	r3, r4
    6970:	d12a      	bne.n	69c8 <__aeabi_dmul+0x19c>
    6972:	2400      	movs	r4, #0
    6974:	2002      	movs	r0, #2
    6976:	e796      	b.n	68a6 <__aeabi_dmul+0x7a>
    6978:	4653      	mov	r3, sl
    697a:	4323      	orrs	r3, r4
    697c:	d020      	beq.n	69c0 <__aeabi_dmul+0x194>
    697e:	2c00      	cmp	r4, #0
    6980:	d100      	bne.n	6984 <__aeabi_dmul+0x158>
    6982:	e157      	b.n	6c34 <__aeabi_dmul+0x408>
    6984:	0020      	movs	r0, r4
    6986:	f000 fe25 	bl	75d4 <__clzsi2>
    698a:	0003      	movs	r3, r0
    698c:	3b0b      	subs	r3, #11
    698e:	2b1c      	cmp	r3, #28
    6990:	dd00      	ble.n	6994 <__aeabi_dmul+0x168>
    6992:	e149      	b.n	6c28 <__aeabi_dmul+0x3fc>
    6994:	211d      	movs	r1, #29
    6996:	1acb      	subs	r3, r1, r3
    6998:	4651      	mov	r1, sl
    699a:	0002      	movs	r2, r0
    699c:	40d9      	lsrs	r1, r3
    699e:	4653      	mov	r3, sl
    69a0:	3a08      	subs	r2, #8
    69a2:	4094      	lsls	r4, r2
    69a4:	4093      	lsls	r3, r2
    69a6:	430c      	orrs	r4, r1
    69a8:	4a1b      	ldr	r2, [pc, #108]	; (6a18 <__aeabi_dmul+0x1ec>)
    69aa:	1a12      	subs	r2, r2, r0
    69ac:	2000      	movs	r0, #0
    69ae:	e77a      	b.n	68a6 <__aeabi_dmul+0x7a>
    69b0:	2501      	movs	r5, #1
    69b2:	9b01      	ldr	r3, [sp, #4]
    69b4:	4c14      	ldr	r4, [pc, #80]	; (6a08 <__aeabi_dmul+0x1dc>)
    69b6:	401d      	ands	r5, r3
    69b8:	2300      	movs	r3, #0
    69ba:	2200      	movs	r2, #0
    69bc:	4699      	mov	r9, r3
    69be:	e79c      	b.n	68fa <__aeabi_dmul+0xce>
    69c0:	2400      	movs	r4, #0
    69c2:	2200      	movs	r2, #0
    69c4:	2001      	movs	r0, #1
    69c6:	e76e      	b.n	68a6 <__aeabi_dmul+0x7a>
    69c8:	4653      	mov	r3, sl
    69ca:	2003      	movs	r0, #3
    69cc:	e76b      	b.n	68a6 <__aeabi_dmul+0x7a>
    69ce:	2300      	movs	r3, #0
    69d0:	469b      	mov	fp, r3
    69d2:	3301      	adds	r3, #1
    69d4:	2704      	movs	r7, #4
    69d6:	2600      	movs	r6, #0
    69d8:	9302      	str	r3, [sp, #8]
    69da:	e74c      	b.n	6876 <__aeabi_dmul+0x4a>
    69dc:	2303      	movs	r3, #3
    69de:	4681      	mov	r9, r0
    69e0:	270c      	movs	r7, #12
    69e2:	9302      	str	r3, [sp, #8]
    69e4:	e747      	b.n	6876 <__aeabi_dmul+0x4a>
    69e6:	2280      	movs	r2, #128	; 0x80
    69e8:	2300      	movs	r3, #0
    69ea:	2500      	movs	r5, #0
    69ec:	0312      	lsls	r2, r2, #12
    69ee:	4699      	mov	r9, r3
    69f0:	4c05      	ldr	r4, [pc, #20]	; (6a08 <__aeabi_dmul+0x1dc>)
    69f2:	e782      	b.n	68fa <__aeabi_dmul+0xce>
    69f4:	465c      	mov	r4, fp
    69f6:	464b      	mov	r3, r9
    69f8:	9802      	ldr	r0, [sp, #8]
    69fa:	e76f      	b.n	68dc <__aeabi_dmul+0xb0>
    69fc:	465c      	mov	r4, fp
    69fe:	464b      	mov	r3, r9
    6a00:	9501      	str	r5, [sp, #4]
    6a02:	9802      	ldr	r0, [sp, #8]
    6a04:	e76a      	b.n	68dc <__aeabi_dmul+0xb0>
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	000007ff 	.word	0x000007ff
    6a0c:	fffffc01 	.word	0xfffffc01
    6a10:	0000cccc 	.word	0x0000cccc
    6a14:	800fffff 	.word	0x800fffff
    6a18:	fffffc0d 	.word	0xfffffc0d
    6a1c:	464a      	mov	r2, r9
    6a1e:	4649      	mov	r1, r9
    6a20:	0c17      	lsrs	r7, r2, #16
    6a22:	0c1a      	lsrs	r2, r3, #16
    6a24:	041b      	lsls	r3, r3, #16
    6a26:	0c1b      	lsrs	r3, r3, #16
    6a28:	0408      	lsls	r0, r1, #16
    6a2a:	0019      	movs	r1, r3
    6a2c:	0c00      	lsrs	r0, r0, #16
    6a2e:	4341      	muls	r1, r0
    6a30:	0015      	movs	r5, r2
    6a32:	4688      	mov	r8, r1
    6a34:	0019      	movs	r1, r3
    6a36:	437d      	muls	r5, r7
    6a38:	4379      	muls	r1, r7
    6a3a:	9503      	str	r5, [sp, #12]
    6a3c:	4689      	mov	r9, r1
    6a3e:	0029      	movs	r1, r5
    6a40:	0015      	movs	r5, r2
    6a42:	4345      	muls	r5, r0
    6a44:	444d      	add	r5, r9
    6a46:	9502      	str	r5, [sp, #8]
    6a48:	4645      	mov	r5, r8
    6a4a:	0c2d      	lsrs	r5, r5, #16
    6a4c:	46aa      	mov	sl, r5
    6a4e:	9d02      	ldr	r5, [sp, #8]
    6a50:	4455      	add	r5, sl
    6a52:	45a9      	cmp	r9, r5
    6a54:	d906      	bls.n	6a64 <__aeabi_dmul+0x238>
    6a56:	468a      	mov	sl, r1
    6a58:	2180      	movs	r1, #128	; 0x80
    6a5a:	0249      	lsls	r1, r1, #9
    6a5c:	4689      	mov	r9, r1
    6a5e:	44ca      	add	sl, r9
    6a60:	4651      	mov	r1, sl
    6a62:	9103      	str	r1, [sp, #12]
    6a64:	0c29      	lsrs	r1, r5, #16
    6a66:	9104      	str	r1, [sp, #16]
    6a68:	4641      	mov	r1, r8
    6a6a:	0409      	lsls	r1, r1, #16
    6a6c:	042d      	lsls	r5, r5, #16
    6a6e:	0c09      	lsrs	r1, r1, #16
    6a70:	4688      	mov	r8, r1
    6a72:	0029      	movs	r1, r5
    6a74:	0c25      	lsrs	r5, r4, #16
    6a76:	0424      	lsls	r4, r4, #16
    6a78:	4441      	add	r1, r8
    6a7a:	0c24      	lsrs	r4, r4, #16
    6a7c:	9105      	str	r1, [sp, #20]
    6a7e:	0021      	movs	r1, r4
    6a80:	4341      	muls	r1, r0
    6a82:	4688      	mov	r8, r1
    6a84:	0021      	movs	r1, r4
    6a86:	4379      	muls	r1, r7
    6a88:	468a      	mov	sl, r1
    6a8a:	4368      	muls	r0, r5
    6a8c:	4641      	mov	r1, r8
    6a8e:	4450      	add	r0, sl
    6a90:	4681      	mov	r9, r0
    6a92:	0c08      	lsrs	r0, r1, #16
    6a94:	4448      	add	r0, r9
    6a96:	436f      	muls	r7, r5
    6a98:	4582      	cmp	sl, r0
    6a9a:	d903      	bls.n	6aa4 <__aeabi_dmul+0x278>
    6a9c:	2180      	movs	r1, #128	; 0x80
    6a9e:	0249      	lsls	r1, r1, #9
    6aa0:	4689      	mov	r9, r1
    6aa2:	444f      	add	r7, r9
    6aa4:	0c01      	lsrs	r1, r0, #16
    6aa6:	4689      	mov	r9, r1
    6aa8:	0039      	movs	r1, r7
    6aaa:	4449      	add	r1, r9
    6aac:	9102      	str	r1, [sp, #8]
    6aae:	4641      	mov	r1, r8
    6ab0:	040f      	lsls	r7, r1, #16
    6ab2:	9904      	ldr	r1, [sp, #16]
    6ab4:	0c3f      	lsrs	r7, r7, #16
    6ab6:	4688      	mov	r8, r1
    6ab8:	0400      	lsls	r0, r0, #16
    6aba:	19c0      	adds	r0, r0, r7
    6abc:	4480      	add	r8, r0
    6abe:	4641      	mov	r1, r8
    6ac0:	9104      	str	r1, [sp, #16]
    6ac2:	4659      	mov	r1, fp
    6ac4:	0c0f      	lsrs	r7, r1, #16
    6ac6:	0409      	lsls	r1, r1, #16
    6ac8:	0c09      	lsrs	r1, r1, #16
    6aca:	4688      	mov	r8, r1
    6acc:	4359      	muls	r1, r3
    6ace:	468a      	mov	sl, r1
    6ad0:	0039      	movs	r1, r7
    6ad2:	4351      	muls	r1, r2
    6ad4:	4689      	mov	r9, r1
    6ad6:	4641      	mov	r1, r8
    6ad8:	434a      	muls	r2, r1
    6ada:	4651      	mov	r1, sl
    6adc:	0c09      	lsrs	r1, r1, #16
    6ade:	468b      	mov	fp, r1
    6ae0:	437b      	muls	r3, r7
    6ae2:	18d2      	adds	r2, r2, r3
    6ae4:	445a      	add	r2, fp
    6ae6:	4293      	cmp	r3, r2
    6ae8:	d903      	bls.n	6af2 <__aeabi_dmul+0x2c6>
    6aea:	2380      	movs	r3, #128	; 0x80
    6aec:	025b      	lsls	r3, r3, #9
    6aee:	469b      	mov	fp, r3
    6af0:	44d9      	add	r9, fp
    6af2:	4651      	mov	r1, sl
    6af4:	0409      	lsls	r1, r1, #16
    6af6:	0c09      	lsrs	r1, r1, #16
    6af8:	468a      	mov	sl, r1
    6afa:	4641      	mov	r1, r8
    6afc:	4361      	muls	r1, r4
    6afe:	437c      	muls	r4, r7
    6b00:	0c13      	lsrs	r3, r2, #16
    6b02:	0412      	lsls	r2, r2, #16
    6b04:	444b      	add	r3, r9
    6b06:	4452      	add	r2, sl
    6b08:	46a1      	mov	r9, r4
    6b0a:	468a      	mov	sl, r1
    6b0c:	003c      	movs	r4, r7
    6b0e:	4641      	mov	r1, r8
    6b10:	436c      	muls	r4, r5
    6b12:	434d      	muls	r5, r1
    6b14:	4651      	mov	r1, sl
    6b16:	444d      	add	r5, r9
    6b18:	0c0f      	lsrs	r7, r1, #16
    6b1a:	197d      	adds	r5, r7, r5
    6b1c:	45a9      	cmp	r9, r5
    6b1e:	d903      	bls.n	6b28 <__aeabi_dmul+0x2fc>
    6b20:	2180      	movs	r1, #128	; 0x80
    6b22:	0249      	lsls	r1, r1, #9
    6b24:	4688      	mov	r8, r1
    6b26:	4444      	add	r4, r8
    6b28:	9f04      	ldr	r7, [sp, #16]
    6b2a:	9903      	ldr	r1, [sp, #12]
    6b2c:	46b8      	mov	r8, r7
    6b2e:	4441      	add	r1, r8
    6b30:	468b      	mov	fp, r1
    6b32:	4583      	cmp	fp, r0
    6b34:	4180      	sbcs	r0, r0
    6b36:	4241      	negs	r1, r0
    6b38:	4688      	mov	r8, r1
    6b3a:	4651      	mov	r1, sl
    6b3c:	0408      	lsls	r0, r1, #16
    6b3e:	042f      	lsls	r7, r5, #16
    6b40:	0c00      	lsrs	r0, r0, #16
    6b42:	183f      	adds	r7, r7, r0
    6b44:	4658      	mov	r0, fp
    6b46:	9902      	ldr	r1, [sp, #8]
    6b48:	1810      	adds	r0, r2, r0
    6b4a:	4689      	mov	r9, r1
    6b4c:	4290      	cmp	r0, r2
    6b4e:	4192      	sbcs	r2, r2
    6b50:	444f      	add	r7, r9
    6b52:	46ba      	mov	sl, r7
    6b54:	4252      	negs	r2, r2
    6b56:	4699      	mov	r9, r3
    6b58:	4693      	mov	fp, r2
    6b5a:	44c2      	add	sl, r8
    6b5c:	44d1      	add	r9, sl
    6b5e:	44cb      	add	fp, r9
    6b60:	428f      	cmp	r7, r1
    6b62:	41bf      	sbcs	r7, r7
    6b64:	45c2      	cmp	sl, r8
    6b66:	4189      	sbcs	r1, r1
    6b68:	4599      	cmp	r9, r3
    6b6a:	419b      	sbcs	r3, r3
    6b6c:	4593      	cmp	fp, r2
    6b6e:	4192      	sbcs	r2, r2
    6b70:	427f      	negs	r7, r7
    6b72:	4249      	negs	r1, r1
    6b74:	0c2d      	lsrs	r5, r5, #16
    6b76:	4252      	negs	r2, r2
    6b78:	430f      	orrs	r7, r1
    6b7a:	425b      	negs	r3, r3
    6b7c:	4313      	orrs	r3, r2
    6b7e:	197f      	adds	r7, r7, r5
    6b80:	18ff      	adds	r7, r7, r3
    6b82:	465b      	mov	r3, fp
    6b84:	193c      	adds	r4, r7, r4
    6b86:	0ddb      	lsrs	r3, r3, #23
    6b88:	9a05      	ldr	r2, [sp, #20]
    6b8a:	0264      	lsls	r4, r4, #9
    6b8c:	431c      	orrs	r4, r3
    6b8e:	0243      	lsls	r3, r0, #9
    6b90:	4313      	orrs	r3, r2
    6b92:	1e5d      	subs	r5, r3, #1
    6b94:	41ab      	sbcs	r3, r5
    6b96:	465a      	mov	r2, fp
    6b98:	0dc0      	lsrs	r0, r0, #23
    6b9a:	4303      	orrs	r3, r0
    6b9c:	0252      	lsls	r2, r2, #9
    6b9e:	4313      	orrs	r3, r2
    6ba0:	01e2      	lsls	r2, r4, #7
    6ba2:	d556      	bpl.n	6c52 <__aeabi_dmul+0x426>
    6ba4:	2001      	movs	r0, #1
    6ba6:	085a      	lsrs	r2, r3, #1
    6ba8:	4003      	ands	r3, r0
    6baa:	4313      	orrs	r3, r2
    6bac:	07e2      	lsls	r2, r4, #31
    6bae:	4313      	orrs	r3, r2
    6bb0:	0864      	lsrs	r4, r4, #1
    6bb2:	485a      	ldr	r0, [pc, #360]	; (6d1c <__aeabi_dmul+0x4f0>)
    6bb4:	4460      	add	r0, ip
    6bb6:	2800      	cmp	r0, #0
    6bb8:	dd4d      	ble.n	6c56 <__aeabi_dmul+0x42a>
    6bba:	075a      	lsls	r2, r3, #29
    6bbc:	d009      	beq.n	6bd2 <__aeabi_dmul+0x3a6>
    6bbe:	220f      	movs	r2, #15
    6bc0:	401a      	ands	r2, r3
    6bc2:	2a04      	cmp	r2, #4
    6bc4:	d005      	beq.n	6bd2 <__aeabi_dmul+0x3a6>
    6bc6:	1d1a      	adds	r2, r3, #4
    6bc8:	429a      	cmp	r2, r3
    6bca:	419b      	sbcs	r3, r3
    6bcc:	425b      	negs	r3, r3
    6bce:	18e4      	adds	r4, r4, r3
    6bd0:	0013      	movs	r3, r2
    6bd2:	01e2      	lsls	r2, r4, #7
    6bd4:	d504      	bpl.n	6be0 <__aeabi_dmul+0x3b4>
    6bd6:	2080      	movs	r0, #128	; 0x80
    6bd8:	4a51      	ldr	r2, [pc, #324]	; (6d20 <__aeabi_dmul+0x4f4>)
    6bda:	00c0      	lsls	r0, r0, #3
    6bdc:	4014      	ands	r4, r2
    6bde:	4460      	add	r0, ip
    6be0:	4a50      	ldr	r2, [pc, #320]	; (6d24 <__aeabi_dmul+0x4f8>)
    6be2:	4290      	cmp	r0, r2
    6be4:	dd00      	ble.n	6be8 <__aeabi_dmul+0x3bc>
    6be6:	e6e3      	b.n	69b0 <__aeabi_dmul+0x184>
    6be8:	2501      	movs	r5, #1
    6bea:	08db      	lsrs	r3, r3, #3
    6bec:	0762      	lsls	r2, r4, #29
    6bee:	431a      	orrs	r2, r3
    6bf0:	0264      	lsls	r4, r4, #9
    6bf2:	9b01      	ldr	r3, [sp, #4]
    6bf4:	4691      	mov	r9, r2
    6bf6:	0b22      	lsrs	r2, r4, #12
    6bf8:	0544      	lsls	r4, r0, #21
    6bfa:	0d64      	lsrs	r4, r4, #21
    6bfc:	401d      	ands	r5, r3
    6bfe:	e67c      	b.n	68fa <__aeabi_dmul+0xce>
    6c00:	2280      	movs	r2, #128	; 0x80
    6c02:	4659      	mov	r1, fp
    6c04:	0312      	lsls	r2, r2, #12
    6c06:	4211      	tst	r1, r2
    6c08:	d008      	beq.n	6c1c <__aeabi_dmul+0x3f0>
    6c0a:	4214      	tst	r4, r2
    6c0c:	d106      	bne.n	6c1c <__aeabi_dmul+0x3f0>
    6c0e:	4322      	orrs	r2, r4
    6c10:	0312      	lsls	r2, r2, #12
    6c12:	0b12      	lsrs	r2, r2, #12
    6c14:	4645      	mov	r5, r8
    6c16:	4699      	mov	r9, r3
    6c18:	4c43      	ldr	r4, [pc, #268]	; (6d28 <__aeabi_dmul+0x4fc>)
    6c1a:	e66e      	b.n	68fa <__aeabi_dmul+0xce>
    6c1c:	465b      	mov	r3, fp
    6c1e:	431a      	orrs	r2, r3
    6c20:	0312      	lsls	r2, r2, #12
    6c22:	0b12      	lsrs	r2, r2, #12
    6c24:	4c40      	ldr	r4, [pc, #256]	; (6d28 <__aeabi_dmul+0x4fc>)
    6c26:	e668      	b.n	68fa <__aeabi_dmul+0xce>
    6c28:	0003      	movs	r3, r0
    6c2a:	4654      	mov	r4, sl
    6c2c:	3b28      	subs	r3, #40	; 0x28
    6c2e:	409c      	lsls	r4, r3
    6c30:	2300      	movs	r3, #0
    6c32:	e6b9      	b.n	69a8 <__aeabi_dmul+0x17c>
    6c34:	f000 fcce 	bl	75d4 <__clzsi2>
    6c38:	3020      	adds	r0, #32
    6c3a:	e6a6      	b.n	698a <__aeabi_dmul+0x15e>
    6c3c:	0003      	movs	r3, r0
    6c3e:	3b28      	subs	r3, #40	; 0x28
    6c40:	409f      	lsls	r7, r3
    6c42:	2300      	movs	r3, #0
    6c44:	46bb      	mov	fp, r7
    6c46:	4699      	mov	r9, r3
    6c48:	e68a      	b.n	6960 <__aeabi_dmul+0x134>
    6c4a:	f000 fcc3 	bl	75d4 <__clzsi2>
    6c4e:	3020      	adds	r0, #32
    6c50:	e674      	b.n	693c <__aeabi_dmul+0x110>
    6c52:	46b4      	mov	ip, r6
    6c54:	e7ad      	b.n	6bb2 <__aeabi_dmul+0x386>
    6c56:	2501      	movs	r5, #1
    6c58:	1a2a      	subs	r2, r5, r0
    6c5a:	2a38      	cmp	r2, #56	; 0x38
    6c5c:	dd06      	ble.n	6c6c <__aeabi_dmul+0x440>
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	2400      	movs	r4, #0
    6c62:	401d      	ands	r5, r3
    6c64:	2300      	movs	r3, #0
    6c66:	2200      	movs	r2, #0
    6c68:	4699      	mov	r9, r3
    6c6a:	e646      	b.n	68fa <__aeabi_dmul+0xce>
    6c6c:	2a1f      	cmp	r2, #31
    6c6e:	dc21      	bgt.n	6cb4 <__aeabi_dmul+0x488>
    6c70:	2520      	movs	r5, #32
    6c72:	0020      	movs	r0, r4
    6c74:	1aad      	subs	r5, r5, r2
    6c76:	001e      	movs	r6, r3
    6c78:	40ab      	lsls	r3, r5
    6c7a:	40a8      	lsls	r0, r5
    6c7c:	40d6      	lsrs	r6, r2
    6c7e:	1e5d      	subs	r5, r3, #1
    6c80:	41ab      	sbcs	r3, r5
    6c82:	4330      	orrs	r0, r6
    6c84:	4318      	orrs	r0, r3
    6c86:	40d4      	lsrs	r4, r2
    6c88:	0743      	lsls	r3, r0, #29
    6c8a:	d009      	beq.n	6ca0 <__aeabi_dmul+0x474>
    6c8c:	230f      	movs	r3, #15
    6c8e:	4003      	ands	r3, r0
    6c90:	2b04      	cmp	r3, #4
    6c92:	d005      	beq.n	6ca0 <__aeabi_dmul+0x474>
    6c94:	0003      	movs	r3, r0
    6c96:	1d18      	adds	r0, r3, #4
    6c98:	4298      	cmp	r0, r3
    6c9a:	419b      	sbcs	r3, r3
    6c9c:	425b      	negs	r3, r3
    6c9e:	18e4      	adds	r4, r4, r3
    6ca0:	0223      	lsls	r3, r4, #8
    6ca2:	d521      	bpl.n	6ce8 <__aeabi_dmul+0x4bc>
    6ca4:	2501      	movs	r5, #1
    6ca6:	9b01      	ldr	r3, [sp, #4]
    6ca8:	2401      	movs	r4, #1
    6caa:	401d      	ands	r5, r3
    6cac:	2300      	movs	r3, #0
    6cae:	2200      	movs	r2, #0
    6cb0:	4699      	mov	r9, r3
    6cb2:	e622      	b.n	68fa <__aeabi_dmul+0xce>
    6cb4:	251f      	movs	r5, #31
    6cb6:	0021      	movs	r1, r4
    6cb8:	426d      	negs	r5, r5
    6cba:	1a28      	subs	r0, r5, r0
    6cbc:	40c1      	lsrs	r1, r0
    6cbe:	0008      	movs	r0, r1
    6cc0:	2a20      	cmp	r2, #32
    6cc2:	d01d      	beq.n	6d00 <__aeabi_dmul+0x4d4>
    6cc4:	355f      	adds	r5, #95	; 0x5f
    6cc6:	1aaa      	subs	r2, r5, r2
    6cc8:	4094      	lsls	r4, r2
    6cca:	4323      	orrs	r3, r4
    6ccc:	1e5c      	subs	r4, r3, #1
    6cce:	41a3      	sbcs	r3, r4
    6cd0:	2507      	movs	r5, #7
    6cd2:	4303      	orrs	r3, r0
    6cd4:	401d      	ands	r5, r3
    6cd6:	2200      	movs	r2, #0
    6cd8:	2d00      	cmp	r5, #0
    6cda:	d009      	beq.n	6cf0 <__aeabi_dmul+0x4c4>
    6cdc:	220f      	movs	r2, #15
    6cde:	2400      	movs	r4, #0
    6ce0:	401a      	ands	r2, r3
    6ce2:	0018      	movs	r0, r3
    6ce4:	2a04      	cmp	r2, #4
    6ce6:	d1d6      	bne.n	6c96 <__aeabi_dmul+0x46a>
    6ce8:	0003      	movs	r3, r0
    6cea:	0765      	lsls	r5, r4, #29
    6cec:	0264      	lsls	r4, r4, #9
    6cee:	0b22      	lsrs	r2, r4, #12
    6cf0:	08db      	lsrs	r3, r3, #3
    6cf2:	432b      	orrs	r3, r5
    6cf4:	2501      	movs	r5, #1
    6cf6:	4699      	mov	r9, r3
    6cf8:	9b01      	ldr	r3, [sp, #4]
    6cfa:	2400      	movs	r4, #0
    6cfc:	401d      	ands	r5, r3
    6cfe:	e5fc      	b.n	68fa <__aeabi_dmul+0xce>
    6d00:	2400      	movs	r4, #0
    6d02:	e7e2      	b.n	6cca <__aeabi_dmul+0x49e>
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	2501      	movs	r5, #1
    6d08:	0312      	lsls	r2, r2, #12
    6d0a:	4322      	orrs	r2, r4
    6d0c:	9901      	ldr	r1, [sp, #4]
    6d0e:	0312      	lsls	r2, r2, #12
    6d10:	0b12      	lsrs	r2, r2, #12
    6d12:	400d      	ands	r5, r1
    6d14:	4699      	mov	r9, r3
    6d16:	4c04      	ldr	r4, [pc, #16]	; (6d28 <__aeabi_dmul+0x4fc>)
    6d18:	e5ef      	b.n	68fa <__aeabi_dmul+0xce>
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	000003ff 	.word	0x000003ff
    6d20:	feffffff 	.word	0xfeffffff
    6d24:	000007fe 	.word	0x000007fe
    6d28:	000007ff 	.word	0x000007ff

00006d2c <__aeabi_dsub>:
    6d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d2e:	4646      	mov	r6, r8
    6d30:	46d6      	mov	lr, sl
    6d32:	464f      	mov	r7, r9
    6d34:	030c      	lsls	r4, r1, #12
    6d36:	b5c0      	push	{r6, r7, lr}
    6d38:	0fcd      	lsrs	r5, r1, #31
    6d3a:	004e      	lsls	r6, r1, #1
    6d3c:	0a61      	lsrs	r1, r4, #9
    6d3e:	0f44      	lsrs	r4, r0, #29
    6d40:	430c      	orrs	r4, r1
    6d42:	00c1      	lsls	r1, r0, #3
    6d44:	0058      	lsls	r0, r3, #1
    6d46:	0d40      	lsrs	r0, r0, #21
    6d48:	4684      	mov	ip, r0
    6d4a:	468a      	mov	sl, r1
    6d4c:	000f      	movs	r7, r1
    6d4e:	0319      	lsls	r1, r3, #12
    6d50:	0f50      	lsrs	r0, r2, #29
    6d52:	0a49      	lsrs	r1, r1, #9
    6d54:	4301      	orrs	r1, r0
    6d56:	48c6      	ldr	r0, [pc, #792]	; (7070 <__aeabi_dsub+0x344>)
    6d58:	0d76      	lsrs	r6, r6, #21
    6d5a:	46a8      	mov	r8, r5
    6d5c:	0fdb      	lsrs	r3, r3, #31
    6d5e:	00d2      	lsls	r2, r2, #3
    6d60:	4584      	cmp	ip, r0
    6d62:	d100      	bne.n	6d66 <__aeabi_dsub+0x3a>
    6d64:	e0d8      	b.n	6f18 <__aeabi_dsub+0x1ec>
    6d66:	2001      	movs	r0, #1
    6d68:	4043      	eors	r3, r0
    6d6a:	42ab      	cmp	r3, r5
    6d6c:	d100      	bne.n	6d70 <__aeabi_dsub+0x44>
    6d6e:	e0a6      	b.n	6ebe <__aeabi_dsub+0x192>
    6d70:	4660      	mov	r0, ip
    6d72:	1a35      	subs	r5, r6, r0
    6d74:	2d00      	cmp	r5, #0
    6d76:	dc00      	bgt.n	6d7a <__aeabi_dsub+0x4e>
    6d78:	e105      	b.n	6f86 <__aeabi_dsub+0x25a>
    6d7a:	2800      	cmp	r0, #0
    6d7c:	d110      	bne.n	6da0 <__aeabi_dsub+0x74>
    6d7e:	000b      	movs	r3, r1
    6d80:	4313      	orrs	r3, r2
    6d82:	d100      	bne.n	6d86 <__aeabi_dsub+0x5a>
    6d84:	e0d7      	b.n	6f36 <__aeabi_dsub+0x20a>
    6d86:	1e6b      	subs	r3, r5, #1
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d000      	beq.n	6d8e <__aeabi_dsub+0x62>
    6d8c:	e14b      	b.n	7026 <__aeabi_dsub+0x2fa>
    6d8e:	4653      	mov	r3, sl
    6d90:	1a9f      	subs	r7, r3, r2
    6d92:	45ba      	cmp	sl, r7
    6d94:	4180      	sbcs	r0, r0
    6d96:	1a64      	subs	r4, r4, r1
    6d98:	4240      	negs	r0, r0
    6d9a:	1a24      	subs	r4, r4, r0
    6d9c:	2601      	movs	r6, #1
    6d9e:	e01e      	b.n	6dde <__aeabi_dsub+0xb2>
    6da0:	4bb3      	ldr	r3, [pc, #716]	; (7070 <__aeabi_dsub+0x344>)
    6da2:	429e      	cmp	r6, r3
    6da4:	d048      	beq.n	6e38 <__aeabi_dsub+0x10c>
    6da6:	2380      	movs	r3, #128	; 0x80
    6da8:	041b      	lsls	r3, r3, #16
    6daa:	4319      	orrs	r1, r3
    6dac:	2d38      	cmp	r5, #56	; 0x38
    6dae:	dd00      	ble.n	6db2 <__aeabi_dsub+0x86>
    6db0:	e119      	b.n	6fe6 <__aeabi_dsub+0x2ba>
    6db2:	2d1f      	cmp	r5, #31
    6db4:	dd00      	ble.n	6db8 <__aeabi_dsub+0x8c>
    6db6:	e14c      	b.n	7052 <__aeabi_dsub+0x326>
    6db8:	2320      	movs	r3, #32
    6dba:	000f      	movs	r7, r1
    6dbc:	1b5b      	subs	r3, r3, r5
    6dbe:	0010      	movs	r0, r2
    6dc0:	409a      	lsls	r2, r3
    6dc2:	409f      	lsls	r7, r3
    6dc4:	40e8      	lsrs	r0, r5
    6dc6:	1e53      	subs	r3, r2, #1
    6dc8:	419a      	sbcs	r2, r3
    6dca:	40e9      	lsrs	r1, r5
    6dcc:	4307      	orrs	r7, r0
    6dce:	4317      	orrs	r7, r2
    6dd0:	4653      	mov	r3, sl
    6dd2:	1bdf      	subs	r7, r3, r7
    6dd4:	1a61      	subs	r1, r4, r1
    6dd6:	45ba      	cmp	sl, r7
    6dd8:	41a4      	sbcs	r4, r4
    6dda:	4264      	negs	r4, r4
    6ddc:	1b0c      	subs	r4, r1, r4
    6dde:	0223      	lsls	r3, r4, #8
    6de0:	d400      	bmi.n	6de4 <__aeabi_dsub+0xb8>
    6de2:	e0c5      	b.n	6f70 <__aeabi_dsub+0x244>
    6de4:	0264      	lsls	r4, r4, #9
    6de6:	0a65      	lsrs	r5, r4, #9
    6de8:	2d00      	cmp	r5, #0
    6dea:	d100      	bne.n	6dee <__aeabi_dsub+0xc2>
    6dec:	e0f6      	b.n	6fdc <__aeabi_dsub+0x2b0>
    6dee:	0028      	movs	r0, r5
    6df0:	f000 fbf0 	bl	75d4 <__clzsi2>
    6df4:	0003      	movs	r3, r0
    6df6:	3b08      	subs	r3, #8
    6df8:	2b1f      	cmp	r3, #31
    6dfa:	dd00      	ble.n	6dfe <__aeabi_dsub+0xd2>
    6dfc:	e0e9      	b.n	6fd2 <__aeabi_dsub+0x2a6>
    6dfe:	2220      	movs	r2, #32
    6e00:	003c      	movs	r4, r7
    6e02:	1ad2      	subs	r2, r2, r3
    6e04:	409d      	lsls	r5, r3
    6e06:	40d4      	lsrs	r4, r2
    6e08:	409f      	lsls	r7, r3
    6e0a:	4325      	orrs	r5, r4
    6e0c:	429e      	cmp	r6, r3
    6e0e:	dd00      	ble.n	6e12 <__aeabi_dsub+0xe6>
    6e10:	e0db      	b.n	6fca <__aeabi_dsub+0x29e>
    6e12:	1b9e      	subs	r6, r3, r6
    6e14:	1c73      	adds	r3, r6, #1
    6e16:	2b1f      	cmp	r3, #31
    6e18:	dd00      	ble.n	6e1c <__aeabi_dsub+0xf0>
    6e1a:	e10a      	b.n	7032 <__aeabi_dsub+0x306>
    6e1c:	2220      	movs	r2, #32
    6e1e:	0038      	movs	r0, r7
    6e20:	1ad2      	subs	r2, r2, r3
    6e22:	0029      	movs	r1, r5
    6e24:	4097      	lsls	r7, r2
    6e26:	002c      	movs	r4, r5
    6e28:	4091      	lsls	r1, r2
    6e2a:	40d8      	lsrs	r0, r3
    6e2c:	1e7a      	subs	r2, r7, #1
    6e2e:	4197      	sbcs	r7, r2
    6e30:	40dc      	lsrs	r4, r3
    6e32:	2600      	movs	r6, #0
    6e34:	4301      	orrs	r1, r0
    6e36:	430f      	orrs	r7, r1
    6e38:	077b      	lsls	r3, r7, #29
    6e3a:	d009      	beq.n	6e50 <__aeabi_dsub+0x124>
    6e3c:	230f      	movs	r3, #15
    6e3e:	403b      	ands	r3, r7
    6e40:	2b04      	cmp	r3, #4
    6e42:	d005      	beq.n	6e50 <__aeabi_dsub+0x124>
    6e44:	1d3b      	adds	r3, r7, #4
    6e46:	42bb      	cmp	r3, r7
    6e48:	41bf      	sbcs	r7, r7
    6e4a:	427f      	negs	r7, r7
    6e4c:	19e4      	adds	r4, r4, r7
    6e4e:	001f      	movs	r7, r3
    6e50:	0223      	lsls	r3, r4, #8
    6e52:	d525      	bpl.n	6ea0 <__aeabi_dsub+0x174>
    6e54:	4b86      	ldr	r3, [pc, #536]	; (7070 <__aeabi_dsub+0x344>)
    6e56:	3601      	adds	r6, #1
    6e58:	429e      	cmp	r6, r3
    6e5a:	d100      	bne.n	6e5e <__aeabi_dsub+0x132>
    6e5c:	e0af      	b.n	6fbe <__aeabi_dsub+0x292>
    6e5e:	4b85      	ldr	r3, [pc, #532]	; (7074 <__aeabi_dsub+0x348>)
    6e60:	2501      	movs	r5, #1
    6e62:	401c      	ands	r4, r3
    6e64:	4643      	mov	r3, r8
    6e66:	0762      	lsls	r2, r4, #29
    6e68:	08ff      	lsrs	r7, r7, #3
    6e6a:	0264      	lsls	r4, r4, #9
    6e6c:	0576      	lsls	r6, r6, #21
    6e6e:	4317      	orrs	r7, r2
    6e70:	0b24      	lsrs	r4, r4, #12
    6e72:	0d76      	lsrs	r6, r6, #21
    6e74:	401d      	ands	r5, r3
    6e76:	2100      	movs	r1, #0
    6e78:	0324      	lsls	r4, r4, #12
    6e7a:	0b23      	lsrs	r3, r4, #12
    6e7c:	0d0c      	lsrs	r4, r1, #20
    6e7e:	4a7e      	ldr	r2, [pc, #504]	; (7078 <__aeabi_dsub+0x34c>)
    6e80:	0524      	lsls	r4, r4, #20
    6e82:	431c      	orrs	r4, r3
    6e84:	4014      	ands	r4, r2
    6e86:	0533      	lsls	r3, r6, #20
    6e88:	4323      	orrs	r3, r4
    6e8a:	005b      	lsls	r3, r3, #1
    6e8c:	07ed      	lsls	r5, r5, #31
    6e8e:	085b      	lsrs	r3, r3, #1
    6e90:	432b      	orrs	r3, r5
    6e92:	0038      	movs	r0, r7
    6e94:	0019      	movs	r1, r3
    6e96:	bc1c      	pop	{r2, r3, r4}
    6e98:	4690      	mov	r8, r2
    6e9a:	4699      	mov	r9, r3
    6e9c:	46a2      	mov	sl, r4
    6e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ea0:	2501      	movs	r5, #1
    6ea2:	4643      	mov	r3, r8
    6ea4:	0762      	lsls	r2, r4, #29
    6ea6:	08ff      	lsrs	r7, r7, #3
    6ea8:	4317      	orrs	r7, r2
    6eaa:	08e4      	lsrs	r4, r4, #3
    6eac:	401d      	ands	r5, r3
    6eae:	4b70      	ldr	r3, [pc, #448]	; (7070 <__aeabi_dsub+0x344>)
    6eb0:	429e      	cmp	r6, r3
    6eb2:	d036      	beq.n	6f22 <__aeabi_dsub+0x1f6>
    6eb4:	0324      	lsls	r4, r4, #12
    6eb6:	0576      	lsls	r6, r6, #21
    6eb8:	0b24      	lsrs	r4, r4, #12
    6eba:	0d76      	lsrs	r6, r6, #21
    6ebc:	e7db      	b.n	6e76 <__aeabi_dsub+0x14a>
    6ebe:	4663      	mov	r3, ip
    6ec0:	1af3      	subs	r3, r6, r3
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	dc00      	bgt.n	6ec8 <__aeabi_dsub+0x19c>
    6ec6:	e094      	b.n	6ff2 <__aeabi_dsub+0x2c6>
    6ec8:	4660      	mov	r0, ip
    6eca:	2800      	cmp	r0, #0
    6ecc:	d035      	beq.n	6f3a <__aeabi_dsub+0x20e>
    6ece:	4868      	ldr	r0, [pc, #416]	; (7070 <__aeabi_dsub+0x344>)
    6ed0:	4286      	cmp	r6, r0
    6ed2:	d0b1      	beq.n	6e38 <__aeabi_dsub+0x10c>
    6ed4:	2780      	movs	r7, #128	; 0x80
    6ed6:	043f      	lsls	r7, r7, #16
    6ed8:	4339      	orrs	r1, r7
    6eda:	2b38      	cmp	r3, #56	; 0x38
    6edc:	dc00      	bgt.n	6ee0 <__aeabi_dsub+0x1b4>
    6ede:	e0fd      	b.n	70dc <__aeabi_dsub+0x3b0>
    6ee0:	430a      	orrs	r2, r1
    6ee2:	0017      	movs	r7, r2
    6ee4:	2100      	movs	r1, #0
    6ee6:	1e7a      	subs	r2, r7, #1
    6ee8:	4197      	sbcs	r7, r2
    6eea:	4457      	add	r7, sl
    6eec:	4557      	cmp	r7, sl
    6eee:	4180      	sbcs	r0, r0
    6ef0:	1909      	adds	r1, r1, r4
    6ef2:	4244      	negs	r4, r0
    6ef4:	190c      	adds	r4, r1, r4
    6ef6:	0223      	lsls	r3, r4, #8
    6ef8:	d53a      	bpl.n	6f70 <__aeabi_dsub+0x244>
    6efa:	4b5d      	ldr	r3, [pc, #372]	; (7070 <__aeabi_dsub+0x344>)
    6efc:	3601      	adds	r6, #1
    6efe:	429e      	cmp	r6, r3
    6f00:	d100      	bne.n	6f04 <__aeabi_dsub+0x1d8>
    6f02:	e14b      	b.n	719c <__aeabi_dsub+0x470>
    6f04:	2201      	movs	r2, #1
    6f06:	4b5b      	ldr	r3, [pc, #364]	; (7074 <__aeabi_dsub+0x348>)
    6f08:	401c      	ands	r4, r3
    6f0a:	087b      	lsrs	r3, r7, #1
    6f0c:	4017      	ands	r7, r2
    6f0e:	431f      	orrs	r7, r3
    6f10:	07e2      	lsls	r2, r4, #31
    6f12:	4317      	orrs	r7, r2
    6f14:	0864      	lsrs	r4, r4, #1
    6f16:	e78f      	b.n	6e38 <__aeabi_dsub+0x10c>
    6f18:	0008      	movs	r0, r1
    6f1a:	4310      	orrs	r0, r2
    6f1c:	d000      	beq.n	6f20 <__aeabi_dsub+0x1f4>
    6f1e:	e724      	b.n	6d6a <__aeabi_dsub+0x3e>
    6f20:	e721      	b.n	6d66 <__aeabi_dsub+0x3a>
    6f22:	0023      	movs	r3, r4
    6f24:	433b      	orrs	r3, r7
    6f26:	d100      	bne.n	6f2a <__aeabi_dsub+0x1fe>
    6f28:	e1b9      	b.n	729e <__aeabi_dsub+0x572>
    6f2a:	2280      	movs	r2, #128	; 0x80
    6f2c:	0312      	lsls	r2, r2, #12
    6f2e:	4314      	orrs	r4, r2
    6f30:	0324      	lsls	r4, r4, #12
    6f32:	0b24      	lsrs	r4, r4, #12
    6f34:	e79f      	b.n	6e76 <__aeabi_dsub+0x14a>
    6f36:	002e      	movs	r6, r5
    6f38:	e77e      	b.n	6e38 <__aeabi_dsub+0x10c>
    6f3a:	0008      	movs	r0, r1
    6f3c:	4310      	orrs	r0, r2
    6f3e:	d100      	bne.n	6f42 <__aeabi_dsub+0x216>
    6f40:	e0ca      	b.n	70d8 <__aeabi_dsub+0x3ac>
    6f42:	1e58      	subs	r0, r3, #1
    6f44:	4684      	mov	ip, r0
    6f46:	2800      	cmp	r0, #0
    6f48:	d000      	beq.n	6f4c <__aeabi_dsub+0x220>
    6f4a:	e0e7      	b.n	711c <__aeabi_dsub+0x3f0>
    6f4c:	4452      	add	r2, sl
    6f4e:	4552      	cmp	r2, sl
    6f50:	4180      	sbcs	r0, r0
    6f52:	1864      	adds	r4, r4, r1
    6f54:	4240      	negs	r0, r0
    6f56:	1824      	adds	r4, r4, r0
    6f58:	0017      	movs	r7, r2
    6f5a:	2601      	movs	r6, #1
    6f5c:	0223      	lsls	r3, r4, #8
    6f5e:	d507      	bpl.n	6f70 <__aeabi_dsub+0x244>
    6f60:	2602      	movs	r6, #2
    6f62:	e7cf      	b.n	6f04 <__aeabi_dsub+0x1d8>
    6f64:	4664      	mov	r4, ip
    6f66:	432c      	orrs	r4, r5
    6f68:	d100      	bne.n	6f6c <__aeabi_dsub+0x240>
    6f6a:	e1b3      	b.n	72d4 <__aeabi_dsub+0x5a8>
    6f6c:	002c      	movs	r4, r5
    6f6e:	4667      	mov	r7, ip
    6f70:	077b      	lsls	r3, r7, #29
    6f72:	d000      	beq.n	6f76 <__aeabi_dsub+0x24a>
    6f74:	e762      	b.n	6e3c <__aeabi_dsub+0x110>
    6f76:	0763      	lsls	r3, r4, #29
    6f78:	08ff      	lsrs	r7, r7, #3
    6f7a:	431f      	orrs	r7, r3
    6f7c:	2501      	movs	r5, #1
    6f7e:	4643      	mov	r3, r8
    6f80:	08e4      	lsrs	r4, r4, #3
    6f82:	401d      	ands	r5, r3
    6f84:	e793      	b.n	6eae <__aeabi_dsub+0x182>
    6f86:	2d00      	cmp	r5, #0
    6f88:	d178      	bne.n	707c <__aeabi_dsub+0x350>
    6f8a:	1c75      	adds	r5, r6, #1
    6f8c:	056d      	lsls	r5, r5, #21
    6f8e:	0d6d      	lsrs	r5, r5, #21
    6f90:	2d01      	cmp	r5, #1
    6f92:	dc00      	bgt.n	6f96 <__aeabi_dsub+0x26a>
    6f94:	e0f2      	b.n	717c <__aeabi_dsub+0x450>
    6f96:	4650      	mov	r0, sl
    6f98:	1a80      	subs	r0, r0, r2
    6f9a:	4582      	cmp	sl, r0
    6f9c:	41bf      	sbcs	r7, r7
    6f9e:	1a65      	subs	r5, r4, r1
    6fa0:	427f      	negs	r7, r7
    6fa2:	1bed      	subs	r5, r5, r7
    6fa4:	4684      	mov	ip, r0
    6fa6:	0228      	lsls	r0, r5, #8
    6fa8:	d400      	bmi.n	6fac <__aeabi_dsub+0x280>
    6faa:	e08c      	b.n	70c6 <__aeabi_dsub+0x39a>
    6fac:	4650      	mov	r0, sl
    6fae:	1a17      	subs	r7, r2, r0
    6fb0:	42ba      	cmp	r2, r7
    6fb2:	4192      	sbcs	r2, r2
    6fb4:	1b0c      	subs	r4, r1, r4
    6fb6:	4255      	negs	r5, r2
    6fb8:	1b65      	subs	r5, r4, r5
    6fba:	4698      	mov	r8, r3
    6fbc:	e714      	b.n	6de8 <__aeabi_dsub+0xbc>
    6fbe:	2501      	movs	r5, #1
    6fc0:	4643      	mov	r3, r8
    6fc2:	2400      	movs	r4, #0
    6fc4:	401d      	ands	r5, r3
    6fc6:	2700      	movs	r7, #0
    6fc8:	e755      	b.n	6e76 <__aeabi_dsub+0x14a>
    6fca:	4c2a      	ldr	r4, [pc, #168]	; (7074 <__aeabi_dsub+0x348>)
    6fcc:	1af6      	subs	r6, r6, r3
    6fce:	402c      	ands	r4, r5
    6fd0:	e732      	b.n	6e38 <__aeabi_dsub+0x10c>
    6fd2:	003d      	movs	r5, r7
    6fd4:	3828      	subs	r0, #40	; 0x28
    6fd6:	4085      	lsls	r5, r0
    6fd8:	2700      	movs	r7, #0
    6fda:	e717      	b.n	6e0c <__aeabi_dsub+0xe0>
    6fdc:	0038      	movs	r0, r7
    6fde:	f000 faf9 	bl	75d4 <__clzsi2>
    6fe2:	3020      	adds	r0, #32
    6fe4:	e706      	b.n	6df4 <__aeabi_dsub+0xc8>
    6fe6:	430a      	orrs	r2, r1
    6fe8:	0017      	movs	r7, r2
    6fea:	2100      	movs	r1, #0
    6fec:	1e7a      	subs	r2, r7, #1
    6fee:	4197      	sbcs	r7, r2
    6ff0:	e6ee      	b.n	6dd0 <__aeabi_dsub+0xa4>
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d000      	beq.n	6ff8 <__aeabi_dsub+0x2cc>
    6ff6:	e0e5      	b.n	71c4 <__aeabi_dsub+0x498>
    6ff8:	1c73      	adds	r3, r6, #1
    6ffa:	469c      	mov	ip, r3
    6ffc:	055b      	lsls	r3, r3, #21
    6ffe:	0d5b      	lsrs	r3, r3, #21
    7000:	2b01      	cmp	r3, #1
    7002:	dc00      	bgt.n	7006 <__aeabi_dsub+0x2da>
    7004:	e09f      	b.n	7146 <__aeabi_dsub+0x41a>
    7006:	4b1a      	ldr	r3, [pc, #104]	; (7070 <__aeabi_dsub+0x344>)
    7008:	459c      	cmp	ip, r3
    700a:	d100      	bne.n	700e <__aeabi_dsub+0x2e2>
    700c:	e0c5      	b.n	719a <__aeabi_dsub+0x46e>
    700e:	4452      	add	r2, sl
    7010:	4552      	cmp	r2, sl
    7012:	4180      	sbcs	r0, r0
    7014:	1864      	adds	r4, r4, r1
    7016:	4240      	negs	r0, r0
    7018:	1824      	adds	r4, r4, r0
    701a:	07e7      	lsls	r7, r4, #31
    701c:	0852      	lsrs	r2, r2, #1
    701e:	4317      	orrs	r7, r2
    7020:	0864      	lsrs	r4, r4, #1
    7022:	4666      	mov	r6, ip
    7024:	e708      	b.n	6e38 <__aeabi_dsub+0x10c>
    7026:	4812      	ldr	r0, [pc, #72]	; (7070 <__aeabi_dsub+0x344>)
    7028:	4285      	cmp	r5, r0
    702a:	d100      	bne.n	702e <__aeabi_dsub+0x302>
    702c:	e085      	b.n	713a <__aeabi_dsub+0x40e>
    702e:	001d      	movs	r5, r3
    7030:	e6bc      	b.n	6dac <__aeabi_dsub+0x80>
    7032:	0029      	movs	r1, r5
    7034:	3e1f      	subs	r6, #31
    7036:	40f1      	lsrs	r1, r6
    7038:	2b20      	cmp	r3, #32
    703a:	d100      	bne.n	703e <__aeabi_dsub+0x312>
    703c:	e07f      	b.n	713e <__aeabi_dsub+0x412>
    703e:	2240      	movs	r2, #64	; 0x40
    7040:	1ad3      	subs	r3, r2, r3
    7042:	409d      	lsls	r5, r3
    7044:	432f      	orrs	r7, r5
    7046:	1e7d      	subs	r5, r7, #1
    7048:	41af      	sbcs	r7, r5
    704a:	2400      	movs	r4, #0
    704c:	430f      	orrs	r7, r1
    704e:	2600      	movs	r6, #0
    7050:	e78e      	b.n	6f70 <__aeabi_dsub+0x244>
    7052:	002b      	movs	r3, r5
    7054:	000f      	movs	r7, r1
    7056:	3b20      	subs	r3, #32
    7058:	40df      	lsrs	r7, r3
    705a:	2d20      	cmp	r5, #32
    705c:	d071      	beq.n	7142 <__aeabi_dsub+0x416>
    705e:	2340      	movs	r3, #64	; 0x40
    7060:	1b5d      	subs	r5, r3, r5
    7062:	40a9      	lsls	r1, r5
    7064:	430a      	orrs	r2, r1
    7066:	1e51      	subs	r1, r2, #1
    7068:	418a      	sbcs	r2, r1
    706a:	2100      	movs	r1, #0
    706c:	4317      	orrs	r7, r2
    706e:	e6af      	b.n	6dd0 <__aeabi_dsub+0xa4>
    7070:	000007ff 	.word	0x000007ff
    7074:	ff7fffff 	.word	0xff7fffff
    7078:	800fffff 	.word	0x800fffff
    707c:	2e00      	cmp	r6, #0
    707e:	d03e      	beq.n	70fe <__aeabi_dsub+0x3d2>
    7080:	4eb3      	ldr	r6, [pc, #716]	; (7350 <__aeabi_dsub+0x624>)
    7082:	45b4      	cmp	ip, r6
    7084:	d045      	beq.n	7112 <__aeabi_dsub+0x3e6>
    7086:	2680      	movs	r6, #128	; 0x80
    7088:	0436      	lsls	r6, r6, #16
    708a:	426d      	negs	r5, r5
    708c:	4334      	orrs	r4, r6
    708e:	2d38      	cmp	r5, #56	; 0x38
    7090:	dd00      	ble.n	7094 <__aeabi_dsub+0x368>
    7092:	e0a8      	b.n	71e6 <__aeabi_dsub+0x4ba>
    7094:	2d1f      	cmp	r5, #31
    7096:	dd00      	ble.n	709a <__aeabi_dsub+0x36e>
    7098:	e11f      	b.n	72da <__aeabi_dsub+0x5ae>
    709a:	2620      	movs	r6, #32
    709c:	0027      	movs	r7, r4
    709e:	4650      	mov	r0, sl
    70a0:	1b76      	subs	r6, r6, r5
    70a2:	40b7      	lsls	r7, r6
    70a4:	40e8      	lsrs	r0, r5
    70a6:	4307      	orrs	r7, r0
    70a8:	4650      	mov	r0, sl
    70aa:	40b0      	lsls	r0, r6
    70ac:	1e46      	subs	r6, r0, #1
    70ae:	41b0      	sbcs	r0, r6
    70b0:	40ec      	lsrs	r4, r5
    70b2:	4338      	orrs	r0, r7
    70b4:	1a17      	subs	r7, r2, r0
    70b6:	42ba      	cmp	r2, r7
    70b8:	4192      	sbcs	r2, r2
    70ba:	1b0c      	subs	r4, r1, r4
    70bc:	4252      	negs	r2, r2
    70be:	1aa4      	subs	r4, r4, r2
    70c0:	4666      	mov	r6, ip
    70c2:	4698      	mov	r8, r3
    70c4:	e68b      	b.n	6dde <__aeabi_dsub+0xb2>
    70c6:	4664      	mov	r4, ip
    70c8:	4667      	mov	r7, ip
    70ca:	432c      	orrs	r4, r5
    70cc:	d000      	beq.n	70d0 <__aeabi_dsub+0x3a4>
    70ce:	e68b      	b.n	6de8 <__aeabi_dsub+0xbc>
    70d0:	2500      	movs	r5, #0
    70d2:	2600      	movs	r6, #0
    70d4:	2700      	movs	r7, #0
    70d6:	e6ea      	b.n	6eae <__aeabi_dsub+0x182>
    70d8:	001e      	movs	r6, r3
    70da:	e6ad      	b.n	6e38 <__aeabi_dsub+0x10c>
    70dc:	2b1f      	cmp	r3, #31
    70de:	dc60      	bgt.n	71a2 <__aeabi_dsub+0x476>
    70e0:	2720      	movs	r7, #32
    70e2:	1af8      	subs	r0, r7, r3
    70e4:	000f      	movs	r7, r1
    70e6:	4684      	mov	ip, r0
    70e8:	4087      	lsls	r7, r0
    70ea:	0010      	movs	r0, r2
    70ec:	40d8      	lsrs	r0, r3
    70ee:	4307      	orrs	r7, r0
    70f0:	4660      	mov	r0, ip
    70f2:	4082      	lsls	r2, r0
    70f4:	1e50      	subs	r0, r2, #1
    70f6:	4182      	sbcs	r2, r0
    70f8:	40d9      	lsrs	r1, r3
    70fa:	4317      	orrs	r7, r2
    70fc:	e6f5      	b.n	6eea <__aeabi_dsub+0x1be>
    70fe:	0026      	movs	r6, r4
    7100:	4650      	mov	r0, sl
    7102:	4306      	orrs	r6, r0
    7104:	d005      	beq.n	7112 <__aeabi_dsub+0x3e6>
    7106:	43ed      	mvns	r5, r5
    7108:	2d00      	cmp	r5, #0
    710a:	d0d3      	beq.n	70b4 <__aeabi_dsub+0x388>
    710c:	4e90      	ldr	r6, [pc, #576]	; (7350 <__aeabi_dsub+0x624>)
    710e:	45b4      	cmp	ip, r6
    7110:	d1bd      	bne.n	708e <__aeabi_dsub+0x362>
    7112:	000c      	movs	r4, r1
    7114:	0017      	movs	r7, r2
    7116:	4666      	mov	r6, ip
    7118:	4698      	mov	r8, r3
    711a:	e68d      	b.n	6e38 <__aeabi_dsub+0x10c>
    711c:	488c      	ldr	r0, [pc, #560]	; (7350 <__aeabi_dsub+0x624>)
    711e:	4283      	cmp	r3, r0
    7120:	d00b      	beq.n	713a <__aeabi_dsub+0x40e>
    7122:	4663      	mov	r3, ip
    7124:	e6d9      	b.n	6eda <__aeabi_dsub+0x1ae>
    7126:	2d00      	cmp	r5, #0
    7128:	d000      	beq.n	712c <__aeabi_dsub+0x400>
    712a:	e096      	b.n	725a <__aeabi_dsub+0x52e>
    712c:	0008      	movs	r0, r1
    712e:	4310      	orrs	r0, r2
    7130:	d100      	bne.n	7134 <__aeabi_dsub+0x408>
    7132:	e0e2      	b.n	72fa <__aeabi_dsub+0x5ce>
    7134:	000c      	movs	r4, r1
    7136:	0017      	movs	r7, r2
    7138:	4698      	mov	r8, r3
    713a:	4e85      	ldr	r6, [pc, #532]	; (7350 <__aeabi_dsub+0x624>)
    713c:	e67c      	b.n	6e38 <__aeabi_dsub+0x10c>
    713e:	2500      	movs	r5, #0
    7140:	e780      	b.n	7044 <__aeabi_dsub+0x318>
    7142:	2100      	movs	r1, #0
    7144:	e78e      	b.n	7064 <__aeabi_dsub+0x338>
    7146:	0023      	movs	r3, r4
    7148:	4650      	mov	r0, sl
    714a:	4303      	orrs	r3, r0
    714c:	2e00      	cmp	r6, #0
    714e:	d000      	beq.n	7152 <__aeabi_dsub+0x426>
    7150:	e0a8      	b.n	72a4 <__aeabi_dsub+0x578>
    7152:	2b00      	cmp	r3, #0
    7154:	d100      	bne.n	7158 <__aeabi_dsub+0x42c>
    7156:	e0de      	b.n	7316 <__aeabi_dsub+0x5ea>
    7158:	000b      	movs	r3, r1
    715a:	4313      	orrs	r3, r2
    715c:	d100      	bne.n	7160 <__aeabi_dsub+0x434>
    715e:	e66b      	b.n	6e38 <__aeabi_dsub+0x10c>
    7160:	4452      	add	r2, sl
    7162:	4552      	cmp	r2, sl
    7164:	4180      	sbcs	r0, r0
    7166:	1864      	adds	r4, r4, r1
    7168:	4240      	negs	r0, r0
    716a:	1824      	adds	r4, r4, r0
    716c:	0017      	movs	r7, r2
    716e:	0223      	lsls	r3, r4, #8
    7170:	d400      	bmi.n	7174 <__aeabi_dsub+0x448>
    7172:	e6fd      	b.n	6f70 <__aeabi_dsub+0x244>
    7174:	4b77      	ldr	r3, [pc, #476]	; (7354 <__aeabi_dsub+0x628>)
    7176:	4666      	mov	r6, ip
    7178:	401c      	ands	r4, r3
    717a:	e65d      	b.n	6e38 <__aeabi_dsub+0x10c>
    717c:	0025      	movs	r5, r4
    717e:	4650      	mov	r0, sl
    7180:	4305      	orrs	r5, r0
    7182:	2e00      	cmp	r6, #0
    7184:	d1cf      	bne.n	7126 <__aeabi_dsub+0x3fa>
    7186:	2d00      	cmp	r5, #0
    7188:	d14f      	bne.n	722a <__aeabi_dsub+0x4fe>
    718a:	000c      	movs	r4, r1
    718c:	4314      	orrs	r4, r2
    718e:	d100      	bne.n	7192 <__aeabi_dsub+0x466>
    7190:	e0a0      	b.n	72d4 <__aeabi_dsub+0x5a8>
    7192:	000c      	movs	r4, r1
    7194:	0017      	movs	r7, r2
    7196:	4698      	mov	r8, r3
    7198:	e64e      	b.n	6e38 <__aeabi_dsub+0x10c>
    719a:	4666      	mov	r6, ip
    719c:	2400      	movs	r4, #0
    719e:	2700      	movs	r7, #0
    71a0:	e685      	b.n	6eae <__aeabi_dsub+0x182>
    71a2:	001f      	movs	r7, r3
    71a4:	0008      	movs	r0, r1
    71a6:	3f20      	subs	r7, #32
    71a8:	40f8      	lsrs	r0, r7
    71aa:	0007      	movs	r7, r0
    71ac:	2b20      	cmp	r3, #32
    71ae:	d100      	bne.n	71b2 <__aeabi_dsub+0x486>
    71b0:	e08e      	b.n	72d0 <__aeabi_dsub+0x5a4>
    71b2:	2040      	movs	r0, #64	; 0x40
    71b4:	1ac3      	subs	r3, r0, r3
    71b6:	4099      	lsls	r1, r3
    71b8:	430a      	orrs	r2, r1
    71ba:	1e51      	subs	r1, r2, #1
    71bc:	418a      	sbcs	r2, r1
    71be:	2100      	movs	r1, #0
    71c0:	4317      	orrs	r7, r2
    71c2:	e692      	b.n	6eea <__aeabi_dsub+0x1be>
    71c4:	2e00      	cmp	r6, #0
    71c6:	d114      	bne.n	71f2 <__aeabi_dsub+0x4c6>
    71c8:	0026      	movs	r6, r4
    71ca:	4650      	mov	r0, sl
    71cc:	4306      	orrs	r6, r0
    71ce:	d062      	beq.n	7296 <__aeabi_dsub+0x56a>
    71d0:	43db      	mvns	r3, r3
    71d2:	2b00      	cmp	r3, #0
    71d4:	d15c      	bne.n	7290 <__aeabi_dsub+0x564>
    71d6:	1887      	adds	r7, r0, r2
    71d8:	4297      	cmp	r7, r2
    71da:	4192      	sbcs	r2, r2
    71dc:	1864      	adds	r4, r4, r1
    71de:	4252      	negs	r2, r2
    71e0:	18a4      	adds	r4, r4, r2
    71e2:	4666      	mov	r6, ip
    71e4:	e687      	b.n	6ef6 <__aeabi_dsub+0x1ca>
    71e6:	4650      	mov	r0, sl
    71e8:	4320      	orrs	r0, r4
    71ea:	1e44      	subs	r4, r0, #1
    71ec:	41a0      	sbcs	r0, r4
    71ee:	2400      	movs	r4, #0
    71f0:	e760      	b.n	70b4 <__aeabi_dsub+0x388>
    71f2:	4e57      	ldr	r6, [pc, #348]	; (7350 <__aeabi_dsub+0x624>)
    71f4:	45b4      	cmp	ip, r6
    71f6:	d04e      	beq.n	7296 <__aeabi_dsub+0x56a>
    71f8:	2680      	movs	r6, #128	; 0x80
    71fa:	0436      	lsls	r6, r6, #16
    71fc:	425b      	negs	r3, r3
    71fe:	4334      	orrs	r4, r6
    7200:	2b38      	cmp	r3, #56	; 0x38
    7202:	dd00      	ble.n	7206 <__aeabi_dsub+0x4da>
    7204:	e07f      	b.n	7306 <__aeabi_dsub+0x5da>
    7206:	2b1f      	cmp	r3, #31
    7208:	dd00      	ble.n	720c <__aeabi_dsub+0x4e0>
    720a:	e08b      	b.n	7324 <__aeabi_dsub+0x5f8>
    720c:	2620      	movs	r6, #32
    720e:	0027      	movs	r7, r4
    7210:	4650      	mov	r0, sl
    7212:	1af6      	subs	r6, r6, r3
    7214:	40b7      	lsls	r7, r6
    7216:	40d8      	lsrs	r0, r3
    7218:	4307      	orrs	r7, r0
    721a:	4650      	mov	r0, sl
    721c:	40b0      	lsls	r0, r6
    721e:	1e46      	subs	r6, r0, #1
    7220:	41b0      	sbcs	r0, r6
    7222:	4307      	orrs	r7, r0
    7224:	40dc      	lsrs	r4, r3
    7226:	18bf      	adds	r7, r7, r2
    7228:	e7d6      	b.n	71d8 <__aeabi_dsub+0x4ac>
    722a:	000d      	movs	r5, r1
    722c:	4315      	orrs	r5, r2
    722e:	d100      	bne.n	7232 <__aeabi_dsub+0x506>
    7230:	e602      	b.n	6e38 <__aeabi_dsub+0x10c>
    7232:	4650      	mov	r0, sl
    7234:	1a80      	subs	r0, r0, r2
    7236:	4582      	cmp	sl, r0
    7238:	41bf      	sbcs	r7, r7
    723a:	1a65      	subs	r5, r4, r1
    723c:	427f      	negs	r7, r7
    723e:	1bed      	subs	r5, r5, r7
    7240:	4684      	mov	ip, r0
    7242:	0228      	lsls	r0, r5, #8
    7244:	d400      	bmi.n	7248 <__aeabi_dsub+0x51c>
    7246:	e68d      	b.n	6f64 <__aeabi_dsub+0x238>
    7248:	4650      	mov	r0, sl
    724a:	1a17      	subs	r7, r2, r0
    724c:	42ba      	cmp	r2, r7
    724e:	4192      	sbcs	r2, r2
    7250:	1b0c      	subs	r4, r1, r4
    7252:	4252      	negs	r2, r2
    7254:	1aa4      	subs	r4, r4, r2
    7256:	4698      	mov	r8, r3
    7258:	e5ee      	b.n	6e38 <__aeabi_dsub+0x10c>
    725a:	000d      	movs	r5, r1
    725c:	4315      	orrs	r5, r2
    725e:	d100      	bne.n	7262 <__aeabi_dsub+0x536>
    7260:	e76b      	b.n	713a <__aeabi_dsub+0x40e>
    7262:	4650      	mov	r0, sl
    7264:	0767      	lsls	r7, r4, #29
    7266:	08c0      	lsrs	r0, r0, #3
    7268:	4307      	orrs	r7, r0
    726a:	2080      	movs	r0, #128	; 0x80
    726c:	08e4      	lsrs	r4, r4, #3
    726e:	0300      	lsls	r0, r0, #12
    7270:	4204      	tst	r4, r0
    7272:	d007      	beq.n	7284 <__aeabi_dsub+0x558>
    7274:	08cd      	lsrs	r5, r1, #3
    7276:	4205      	tst	r5, r0
    7278:	d104      	bne.n	7284 <__aeabi_dsub+0x558>
    727a:	002c      	movs	r4, r5
    727c:	4698      	mov	r8, r3
    727e:	08d7      	lsrs	r7, r2, #3
    7280:	0749      	lsls	r1, r1, #29
    7282:	430f      	orrs	r7, r1
    7284:	0f7b      	lsrs	r3, r7, #29
    7286:	00e4      	lsls	r4, r4, #3
    7288:	431c      	orrs	r4, r3
    728a:	00ff      	lsls	r7, r7, #3
    728c:	4e30      	ldr	r6, [pc, #192]	; (7350 <__aeabi_dsub+0x624>)
    728e:	e5d3      	b.n	6e38 <__aeabi_dsub+0x10c>
    7290:	4e2f      	ldr	r6, [pc, #188]	; (7350 <__aeabi_dsub+0x624>)
    7292:	45b4      	cmp	ip, r6
    7294:	d1b4      	bne.n	7200 <__aeabi_dsub+0x4d4>
    7296:	000c      	movs	r4, r1
    7298:	0017      	movs	r7, r2
    729a:	4666      	mov	r6, ip
    729c:	e5cc      	b.n	6e38 <__aeabi_dsub+0x10c>
    729e:	2700      	movs	r7, #0
    72a0:	2400      	movs	r4, #0
    72a2:	e5e8      	b.n	6e76 <__aeabi_dsub+0x14a>
    72a4:	2b00      	cmp	r3, #0
    72a6:	d039      	beq.n	731c <__aeabi_dsub+0x5f0>
    72a8:	000b      	movs	r3, r1
    72aa:	4313      	orrs	r3, r2
    72ac:	d100      	bne.n	72b0 <__aeabi_dsub+0x584>
    72ae:	e744      	b.n	713a <__aeabi_dsub+0x40e>
    72b0:	08c0      	lsrs	r0, r0, #3
    72b2:	0767      	lsls	r7, r4, #29
    72b4:	4307      	orrs	r7, r0
    72b6:	2080      	movs	r0, #128	; 0x80
    72b8:	08e4      	lsrs	r4, r4, #3
    72ba:	0300      	lsls	r0, r0, #12
    72bc:	4204      	tst	r4, r0
    72be:	d0e1      	beq.n	7284 <__aeabi_dsub+0x558>
    72c0:	08cb      	lsrs	r3, r1, #3
    72c2:	4203      	tst	r3, r0
    72c4:	d1de      	bne.n	7284 <__aeabi_dsub+0x558>
    72c6:	08d7      	lsrs	r7, r2, #3
    72c8:	0749      	lsls	r1, r1, #29
    72ca:	430f      	orrs	r7, r1
    72cc:	001c      	movs	r4, r3
    72ce:	e7d9      	b.n	7284 <__aeabi_dsub+0x558>
    72d0:	2100      	movs	r1, #0
    72d2:	e771      	b.n	71b8 <__aeabi_dsub+0x48c>
    72d4:	2500      	movs	r5, #0
    72d6:	2700      	movs	r7, #0
    72d8:	e5e9      	b.n	6eae <__aeabi_dsub+0x182>
    72da:	002e      	movs	r6, r5
    72dc:	0027      	movs	r7, r4
    72de:	3e20      	subs	r6, #32
    72e0:	40f7      	lsrs	r7, r6
    72e2:	2d20      	cmp	r5, #32
    72e4:	d02f      	beq.n	7346 <__aeabi_dsub+0x61a>
    72e6:	2640      	movs	r6, #64	; 0x40
    72e8:	1b75      	subs	r5, r6, r5
    72ea:	40ac      	lsls	r4, r5
    72ec:	4650      	mov	r0, sl
    72ee:	4320      	orrs	r0, r4
    72f0:	1e44      	subs	r4, r0, #1
    72f2:	41a0      	sbcs	r0, r4
    72f4:	2400      	movs	r4, #0
    72f6:	4338      	orrs	r0, r7
    72f8:	e6dc      	b.n	70b4 <__aeabi_dsub+0x388>
    72fa:	2480      	movs	r4, #128	; 0x80
    72fc:	2500      	movs	r5, #0
    72fe:	0324      	lsls	r4, r4, #12
    7300:	4e13      	ldr	r6, [pc, #76]	; (7350 <__aeabi_dsub+0x624>)
    7302:	2700      	movs	r7, #0
    7304:	e5d3      	b.n	6eae <__aeabi_dsub+0x182>
    7306:	4650      	mov	r0, sl
    7308:	4320      	orrs	r0, r4
    730a:	0007      	movs	r7, r0
    730c:	1e78      	subs	r0, r7, #1
    730e:	4187      	sbcs	r7, r0
    7310:	2400      	movs	r4, #0
    7312:	18bf      	adds	r7, r7, r2
    7314:	e760      	b.n	71d8 <__aeabi_dsub+0x4ac>
    7316:	000c      	movs	r4, r1
    7318:	0017      	movs	r7, r2
    731a:	e58d      	b.n	6e38 <__aeabi_dsub+0x10c>
    731c:	000c      	movs	r4, r1
    731e:	0017      	movs	r7, r2
    7320:	4e0b      	ldr	r6, [pc, #44]	; (7350 <__aeabi_dsub+0x624>)
    7322:	e589      	b.n	6e38 <__aeabi_dsub+0x10c>
    7324:	001e      	movs	r6, r3
    7326:	0027      	movs	r7, r4
    7328:	3e20      	subs	r6, #32
    732a:	40f7      	lsrs	r7, r6
    732c:	2b20      	cmp	r3, #32
    732e:	d00c      	beq.n	734a <__aeabi_dsub+0x61e>
    7330:	2640      	movs	r6, #64	; 0x40
    7332:	1af3      	subs	r3, r6, r3
    7334:	409c      	lsls	r4, r3
    7336:	4650      	mov	r0, sl
    7338:	4320      	orrs	r0, r4
    733a:	1e44      	subs	r4, r0, #1
    733c:	41a0      	sbcs	r0, r4
    733e:	4307      	orrs	r7, r0
    7340:	2400      	movs	r4, #0
    7342:	18bf      	adds	r7, r7, r2
    7344:	e748      	b.n	71d8 <__aeabi_dsub+0x4ac>
    7346:	2400      	movs	r4, #0
    7348:	e7d0      	b.n	72ec <__aeabi_dsub+0x5c0>
    734a:	2400      	movs	r4, #0
    734c:	e7f3      	b.n	7336 <__aeabi_dsub+0x60a>
    734e:	46c0      	nop			; (mov r8, r8)
    7350:	000007ff 	.word	0x000007ff
    7354:	ff7fffff 	.word	0xff7fffff

00007358 <__aeabi_d2iz>:
    7358:	b530      	push	{r4, r5, lr}
    735a:	4d13      	ldr	r5, [pc, #76]	; (73a8 <__aeabi_d2iz+0x50>)
    735c:	030a      	lsls	r2, r1, #12
    735e:	004b      	lsls	r3, r1, #1
    7360:	0b12      	lsrs	r2, r2, #12
    7362:	0d5b      	lsrs	r3, r3, #21
    7364:	0fc9      	lsrs	r1, r1, #31
    7366:	2400      	movs	r4, #0
    7368:	42ab      	cmp	r3, r5
    736a:	dd10      	ble.n	738e <__aeabi_d2iz+0x36>
    736c:	4c0f      	ldr	r4, [pc, #60]	; (73ac <__aeabi_d2iz+0x54>)
    736e:	42a3      	cmp	r3, r4
    7370:	dc0f      	bgt.n	7392 <__aeabi_d2iz+0x3a>
    7372:	2480      	movs	r4, #128	; 0x80
    7374:	4d0e      	ldr	r5, [pc, #56]	; (73b0 <__aeabi_d2iz+0x58>)
    7376:	0364      	lsls	r4, r4, #13
    7378:	4322      	orrs	r2, r4
    737a:	1aed      	subs	r5, r5, r3
    737c:	2d1f      	cmp	r5, #31
    737e:	dd0b      	ble.n	7398 <__aeabi_d2iz+0x40>
    7380:	480c      	ldr	r0, [pc, #48]	; (73b4 <__aeabi_d2iz+0x5c>)
    7382:	1ac3      	subs	r3, r0, r3
    7384:	40da      	lsrs	r2, r3
    7386:	4254      	negs	r4, r2
    7388:	2900      	cmp	r1, #0
    738a:	d100      	bne.n	738e <__aeabi_d2iz+0x36>
    738c:	0014      	movs	r4, r2
    738e:	0020      	movs	r0, r4
    7390:	bd30      	pop	{r4, r5, pc}
    7392:	4b09      	ldr	r3, [pc, #36]	; (73b8 <__aeabi_d2iz+0x60>)
    7394:	18cc      	adds	r4, r1, r3
    7396:	e7fa      	b.n	738e <__aeabi_d2iz+0x36>
    7398:	4c08      	ldr	r4, [pc, #32]	; (73bc <__aeabi_d2iz+0x64>)
    739a:	40e8      	lsrs	r0, r5
    739c:	46a4      	mov	ip, r4
    739e:	4463      	add	r3, ip
    73a0:	409a      	lsls	r2, r3
    73a2:	4302      	orrs	r2, r0
    73a4:	e7ef      	b.n	7386 <__aeabi_d2iz+0x2e>
    73a6:	46c0      	nop			; (mov r8, r8)
    73a8:	000003fe 	.word	0x000003fe
    73ac:	0000041d 	.word	0x0000041d
    73b0:	00000433 	.word	0x00000433
    73b4:	00000413 	.word	0x00000413
    73b8:	7fffffff 	.word	0x7fffffff
    73bc:	fffffbed 	.word	0xfffffbed

000073c0 <__aeabi_i2d>:
    73c0:	b570      	push	{r4, r5, r6, lr}
    73c2:	2800      	cmp	r0, #0
    73c4:	d030      	beq.n	7428 <__aeabi_i2d+0x68>
    73c6:	17c3      	asrs	r3, r0, #31
    73c8:	18c4      	adds	r4, r0, r3
    73ca:	405c      	eors	r4, r3
    73cc:	0fc5      	lsrs	r5, r0, #31
    73ce:	0020      	movs	r0, r4
    73d0:	f000 f900 	bl	75d4 <__clzsi2>
    73d4:	4b17      	ldr	r3, [pc, #92]	; (7434 <__aeabi_i2d+0x74>)
    73d6:	4a18      	ldr	r2, [pc, #96]	; (7438 <__aeabi_i2d+0x78>)
    73d8:	1a1b      	subs	r3, r3, r0
    73da:	1ad2      	subs	r2, r2, r3
    73dc:	2a1f      	cmp	r2, #31
    73de:	dd18      	ble.n	7412 <__aeabi_i2d+0x52>
    73e0:	4a16      	ldr	r2, [pc, #88]	; (743c <__aeabi_i2d+0x7c>)
    73e2:	1ad2      	subs	r2, r2, r3
    73e4:	4094      	lsls	r4, r2
    73e6:	2200      	movs	r2, #0
    73e8:	0324      	lsls	r4, r4, #12
    73ea:	055b      	lsls	r3, r3, #21
    73ec:	0b24      	lsrs	r4, r4, #12
    73ee:	0d5b      	lsrs	r3, r3, #21
    73f0:	2100      	movs	r1, #0
    73f2:	0010      	movs	r0, r2
    73f4:	0324      	lsls	r4, r4, #12
    73f6:	0d0a      	lsrs	r2, r1, #20
    73f8:	0b24      	lsrs	r4, r4, #12
    73fa:	0512      	lsls	r2, r2, #20
    73fc:	4322      	orrs	r2, r4
    73fe:	4c10      	ldr	r4, [pc, #64]	; (7440 <__aeabi_i2d+0x80>)
    7400:	051b      	lsls	r3, r3, #20
    7402:	4022      	ands	r2, r4
    7404:	4313      	orrs	r3, r2
    7406:	005b      	lsls	r3, r3, #1
    7408:	07ed      	lsls	r5, r5, #31
    740a:	085b      	lsrs	r3, r3, #1
    740c:	432b      	orrs	r3, r5
    740e:	0019      	movs	r1, r3
    7410:	bd70      	pop	{r4, r5, r6, pc}
    7412:	0021      	movs	r1, r4
    7414:	4091      	lsls	r1, r2
    7416:	000a      	movs	r2, r1
    7418:	210b      	movs	r1, #11
    741a:	1a08      	subs	r0, r1, r0
    741c:	40c4      	lsrs	r4, r0
    741e:	055b      	lsls	r3, r3, #21
    7420:	0324      	lsls	r4, r4, #12
    7422:	0b24      	lsrs	r4, r4, #12
    7424:	0d5b      	lsrs	r3, r3, #21
    7426:	e7e3      	b.n	73f0 <__aeabi_i2d+0x30>
    7428:	2500      	movs	r5, #0
    742a:	2300      	movs	r3, #0
    742c:	2400      	movs	r4, #0
    742e:	2200      	movs	r2, #0
    7430:	e7de      	b.n	73f0 <__aeabi_i2d+0x30>
    7432:	46c0      	nop			; (mov r8, r8)
    7434:	0000041e 	.word	0x0000041e
    7438:	00000433 	.word	0x00000433
    743c:	00000413 	.word	0x00000413
    7440:	800fffff 	.word	0x800fffff

00007444 <__aeabi_ui2d>:
    7444:	b510      	push	{r4, lr}
    7446:	1e04      	subs	r4, r0, #0
    7448:	d028      	beq.n	749c <__aeabi_ui2d+0x58>
    744a:	f000 f8c3 	bl	75d4 <__clzsi2>
    744e:	4b15      	ldr	r3, [pc, #84]	; (74a4 <__aeabi_ui2d+0x60>)
    7450:	4a15      	ldr	r2, [pc, #84]	; (74a8 <__aeabi_ui2d+0x64>)
    7452:	1a1b      	subs	r3, r3, r0
    7454:	1ad2      	subs	r2, r2, r3
    7456:	2a1f      	cmp	r2, #31
    7458:	dd15      	ble.n	7486 <__aeabi_ui2d+0x42>
    745a:	4a14      	ldr	r2, [pc, #80]	; (74ac <__aeabi_ui2d+0x68>)
    745c:	1ad2      	subs	r2, r2, r3
    745e:	4094      	lsls	r4, r2
    7460:	2200      	movs	r2, #0
    7462:	0324      	lsls	r4, r4, #12
    7464:	055b      	lsls	r3, r3, #21
    7466:	0b24      	lsrs	r4, r4, #12
    7468:	0d5b      	lsrs	r3, r3, #21
    746a:	2100      	movs	r1, #0
    746c:	0010      	movs	r0, r2
    746e:	0324      	lsls	r4, r4, #12
    7470:	0d0a      	lsrs	r2, r1, #20
    7472:	0b24      	lsrs	r4, r4, #12
    7474:	0512      	lsls	r2, r2, #20
    7476:	4322      	orrs	r2, r4
    7478:	4c0d      	ldr	r4, [pc, #52]	; (74b0 <__aeabi_ui2d+0x6c>)
    747a:	051b      	lsls	r3, r3, #20
    747c:	4022      	ands	r2, r4
    747e:	4313      	orrs	r3, r2
    7480:	005b      	lsls	r3, r3, #1
    7482:	0859      	lsrs	r1, r3, #1
    7484:	bd10      	pop	{r4, pc}
    7486:	0021      	movs	r1, r4
    7488:	4091      	lsls	r1, r2
    748a:	000a      	movs	r2, r1
    748c:	210b      	movs	r1, #11
    748e:	1a08      	subs	r0, r1, r0
    7490:	40c4      	lsrs	r4, r0
    7492:	055b      	lsls	r3, r3, #21
    7494:	0324      	lsls	r4, r4, #12
    7496:	0b24      	lsrs	r4, r4, #12
    7498:	0d5b      	lsrs	r3, r3, #21
    749a:	e7e6      	b.n	746a <__aeabi_ui2d+0x26>
    749c:	2300      	movs	r3, #0
    749e:	2400      	movs	r4, #0
    74a0:	2200      	movs	r2, #0
    74a2:	e7e2      	b.n	746a <__aeabi_ui2d+0x26>
    74a4:	0000041e 	.word	0x0000041e
    74a8:	00000433 	.word	0x00000433
    74ac:	00000413 	.word	0x00000413
    74b0:	800fffff 	.word	0x800fffff

000074b4 <__aeabi_f2d>:
    74b4:	0041      	lsls	r1, r0, #1
    74b6:	0e09      	lsrs	r1, r1, #24
    74b8:	1c4b      	adds	r3, r1, #1
    74ba:	b570      	push	{r4, r5, r6, lr}
    74bc:	b2db      	uxtb	r3, r3
    74be:	0246      	lsls	r6, r0, #9
    74c0:	0a75      	lsrs	r5, r6, #9
    74c2:	0fc4      	lsrs	r4, r0, #31
    74c4:	2b01      	cmp	r3, #1
    74c6:	dd14      	ble.n	74f2 <__aeabi_f2d+0x3e>
    74c8:	23e0      	movs	r3, #224	; 0xe0
    74ca:	009b      	lsls	r3, r3, #2
    74cc:	076d      	lsls	r5, r5, #29
    74ce:	0b36      	lsrs	r6, r6, #12
    74d0:	18cb      	adds	r3, r1, r3
    74d2:	2100      	movs	r1, #0
    74d4:	0d0a      	lsrs	r2, r1, #20
    74d6:	0028      	movs	r0, r5
    74d8:	0512      	lsls	r2, r2, #20
    74da:	4d1c      	ldr	r5, [pc, #112]	; (754c <__aeabi_f2d+0x98>)
    74dc:	4332      	orrs	r2, r6
    74de:	055b      	lsls	r3, r3, #21
    74e0:	402a      	ands	r2, r5
    74e2:	085b      	lsrs	r3, r3, #1
    74e4:	4313      	orrs	r3, r2
    74e6:	005b      	lsls	r3, r3, #1
    74e8:	07e4      	lsls	r4, r4, #31
    74ea:	085b      	lsrs	r3, r3, #1
    74ec:	4323      	orrs	r3, r4
    74ee:	0019      	movs	r1, r3
    74f0:	bd70      	pop	{r4, r5, r6, pc}
    74f2:	2900      	cmp	r1, #0
    74f4:	d114      	bne.n	7520 <__aeabi_f2d+0x6c>
    74f6:	2d00      	cmp	r5, #0
    74f8:	d01e      	beq.n	7538 <__aeabi_f2d+0x84>
    74fa:	0028      	movs	r0, r5
    74fc:	f000 f86a 	bl	75d4 <__clzsi2>
    7500:	280a      	cmp	r0, #10
    7502:	dc1c      	bgt.n	753e <__aeabi_f2d+0x8a>
    7504:	230b      	movs	r3, #11
    7506:	002a      	movs	r2, r5
    7508:	1a1b      	subs	r3, r3, r0
    750a:	40da      	lsrs	r2, r3
    750c:	0003      	movs	r3, r0
    750e:	3315      	adds	r3, #21
    7510:	409d      	lsls	r5, r3
    7512:	4b0f      	ldr	r3, [pc, #60]	; (7550 <__aeabi_f2d+0x9c>)
    7514:	0312      	lsls	r2, r2, #12
    7516:	1a1b      	subs	r3, r3, r0
    7518:	055b      	lsls	r3, r3, #21
    751a:	0b16      	lsrs	r6, r2, #12
    751c:	0d5b      	lsrs	r3, r3, #21
    751e:	e7d8      	b.n	74d2 <__aeabi_f2d+0x1e>
    7520:	2d00      	cmp	r5, #0
    7522:	d006      	beq.n	7532 <__aeabi_f2d+0x7e>
    7524:	0b32      	lsrs	r2, r6, #12
    7526:	2680      	movs	r6, #128	; 0x80
    7528:	0336      	lsls	r6, r6, #12
    752a:	076d      	lsls	r5, r5, #29
    752c:	4316      	orrs	r6, r2
    752e:	4b09      	ldr	r3, [pc, #36]	; (7554 <__aeabi_f2d+0xa0>)
    7530:	e7cf      	b.n	74d2 <__aeabi_f2d+0x1e>
    7532:	4b08      	ldr	r3, [pc, #32]	; (7554 <__aeabi_f2d+0xa0>)
    7534:	2600      	movs	r6, #0
    7536:	e7cc      	b.n	74d2 <__aeabi_f2d+0x1e>
    7538:	2300      	movs	r3, #0
    753a:	2600      	movs	r6, #0
    753c:	e7c9      	b.n	74d2 <__aeabi_f2d+0x1e>
    753e:	0003      	movs	r3, r0
    7540:	002a      	movs	r2, r5
    7542:	3b0b      	subs	r3, #11
    7544:	409a      	lsls	r2, r3
    7546:	2500      	movs	r5, #0
    7548:	e7e3      	b.n	7512 <__aeabi_f2d+0x5e>
    754a:	46c0      	nop			; (mov r8, r8)
    754c:	800fffff 	.word	0x800fffff
    7550:	00000389 	.word	0x00000389
    7554:	000007ff 	.word	0x000007ff

00007558 <__aeabi_cdrcmple>:
    7558:	4684      	mov	ip, r0
    755a:	1c10      	adds	r0, r2, #0
    755c:	4662      	mov	r2, ip
    755e:	468c      	mov	ip, r1
    7560:	1c19      	adds	r1, r3, #0
    7562:	4663      	mov	r3, ip
    7564:	e000      	b.n	7568 <__aeabi_cdcmpeq>
    7566:	46c0      	nop			; (mov r8, r8)

00007568 <__aeabi_cdcmpeq>:
    7568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    756a:	f000 f91b 	bl	77a4 <__ledf2>
    756e:	2800      	cmp	r0, #0
    7570:	d401      	bmi.n	7576 <__aeabi_cdcmpeq+0xe>
    7572:	2100      	movs	r1, #0
    7574:	42c8      	cmn	r0, r1
    7576:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007578 <__aeabi_dcmpeq>:
    7578:	b510      	push	{r4, lr}
    757a:	f000 f875 	bl	7668 <__eqdf2>
    757e:	4240      	negs	r0, r0
    7580:	3001      	adds	r0, #1
    7582:	bd10      	pop	{r4, pc}

00007584 <__aeabi_dcmplt>:
    7584:	b510      	push	{r4, lr}
    7586:	f000 f90d 	bl	77a4 <__ledf2>
    758a:	2800      	cmp	r0, #0
    758c:	db01      	blt.n	7592 <__aeabi_dcmplt+0xe>
    758e:	2000      	movs	r0, #0
    7590:	bd10      	pop	{r4, pc}
    7592:	2001      	movs	r0, #1
    7594:	bd10      	pop	{r4, pc}
    7596:	46c0      	nop			; (mov r8, r8)

00007598 <__aeabi_dcmple>:
    7598:	b510      	push	{r4, lr}
    759a:	f000 f903 	bl	77a4 <__ledf2>
    759e:	2800      	cmp	r0, #0
    75a0:	dd01      	ble.n	75a6 <__aeabi_dcmple+0xe>
    75a2:	2000      	movs	r0, #0
    75a4:	bd10      	pop	{r4, pc}
    75a6:	2001      	movs	r0, #1
    75a8:	bd10      	pop	{r4, pc}
    75aa:	46c0      	nop			; (mov r8, r8)

000075ac <__aeabi_dcmpgt>:
    75ac:	b510      	push	{r4, lr}
    75ae:	f000 f895 	bl	76dc <__gedf2>
    75b2:	2800      	cmp	r0, #0
    75b4:	dc01      	bgt.n	75ba <__aeabi_dcmpgt+0xe>
    75b6:	2000      	movs	r0, #0
    75b8:	bd10      	pop	{r4, pc}
    75ba:	2001      	movs	r0, #1
    75bc:	bd10      	pop	{r4, pc}
    75be:	46c0      	nop			; (mov r8, r8)

000075c0 <__aeabi_dcmpge>:
    75c0:	b510      	push	{r4, lr}
    75c2:	f000 f88b 	bl	76dc <__gedf2>
    75c6:	2800      	cmp	r0, #0
    75c8:	da01      	bge.n	75ce <__aeabi_dcmpge+0xe>
    75ca:	2000      	movs	r0, #0
    75cc:	bd10      	pop	{r4, pc}
    75ce:	2001      	movs	r0, #1
    75d0:	bd10      	pop	{r4, pc}
    75d2:	46c0      	nop			; (mov r8, r8)

000075d4 <__clzsi2>:
    75d4:	211c      	movs	r1, #28
    75d6:	2301      	movs	r3, #1
    75d8:	041b      	lsls	r3, r3, #16
    75da:	4298      	cmp	r0, r3
    75dc:	d301      	bcc.n	75e2 <__clzsi2+0xe>
    75de:	0c00      	lsrs	r0, r0, #16
    75e0:	3910      	subs	r1, #16
    75e2:	0a1b      	lsrs	r3, r3, #8
    75e4:	4298      	cmp	r0, r3
    75e6:	d301      	bcc.n	75ec <__clzsi2+0x18>
    75e8:	0a00      	lsrs	r0, r0, #8
    75ea:	3908      	subs	r1, #8
    75ec:	091b      	lsrs	r3, r3, #4
    75ee:	4298      	cmp	r0, r3
    75f0:	d301      	bcc.n	75f6 <__clzsi2+0x22>
    75f2:	0900      	lsrs	r0, r0, #4
    75f4:	3904      	subs	r1, #4
    75f6:	a202      	add	r2, pc, #8	; (adr r2, 7600 <__clzsi2+0x2c>)
    75f8:	5c10      	ldrb	r0, [r2, r0]
    75fa:	1840      	adds	r0, r0, r1
    75fc:	4770      	bx	lr
    75fe:	46c0      	nop			; (mov r8, r8)
    7600:	02020304 	.word	0x02020304
    7604:	01010101 	.word	0x01010101
	...

00007610 <__clzdi2>:
    7610:	b510      	push	{r4, lr}
    7612:	2900      	cmp	r1, #0
    7614:	d103      	bne.n	761e <__clzdi2+0xe>
    7616:	f7ff ffdd 	bl	75d4 <__clzsi2>
    761a:	3020      	adds	r0, #32
    761c:	e002      	b.n	7624 <__clzdi2+0x14>
    761e:	1c08      	adds	r0, r1, #0
    7620:	f7ff ffd8 	bl	75d4 <__clzsi2>
    7624:	bd10      	pop	{r4, pc}
    7626:	46c0      	nop			; (mov r8, r8)

00007628 <__ctzsi2>:
    7628:	4241      	negs	r1, r0
    762a:	4008      	ands	r0, r1
    762c:	211c      	movs	r1, #28
    762e:	2301      	movs	r3, #1
    7630:	041b      	lsls	r3, r3, #16
    7632:	4298      	cmp	r0, r3
    7634:	d301      	bcc.n	763a <__ctzsi2+0x12>
    7636:	0c00      	lsrs	r0, r0, #16
    7638:	3910      	subs	r1, #16
    763a:	0a1b      	lsrs	r3, r3, #8
    763c:	4298      	cmp	r0, r3
    763e:	d301      	bcc.n	7644 <__ctzsi2+0x1c>
    7640:	0a00      	lsrs	r0, r0, #8
    7642:	3908      	subs	r1, #8
    7644:	091b      	lsrs	r3, r3, #4
    7646:	4298      	cmp	r0, r3
    7648:	d301      	bcc.n	764e <__ctzsi2+0x26>
    764a:	0900      	lsrs	r0, r0, #4
    764c:	3904      	subs	r1, #4
    764e:	a202      	add	r2, pc, #8	; (adr r2, 7658 <__ctzsi2+0x30>)
    7650:	5c10      	ldrb	r0, [r2, r0]
    7652:	1a40      	subs	r0, r0, r1
    7654:	4770      	bx	lr
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	1d1d1c1b 	.word	0x1d1d1c1b
    765c:	1e1e1e1e 	.word	0x1e1e1e1e
    7660:	1f1f1f1f 	.word	0x1f1f1f1f
    7664:	1f1f1f1f 	.word	0x1f1f1f1f

00007668 <__eqdf2>:
    7668:	b5f0      	push	{r4, r5, r6, r7, lr}
    766a:	464f      	mov	r7, r9
    766c:	4646      	mov	r6, r8
    766e:	46d6      	mov	lr, sl
    7670:	005c      	lsls	r4, r3, #1
    7672:	b5c0      	push	{r6, r7, lr}
    7674:	031f      	lsls	r7, r3, #12
    7676:	0fdb      	lsrs	r3, r3, #31
    7678:	469a      	mov	sl, r3
    767a:	4b17      	ldr	r3, [pc, #92]	; (76d8 <__eqdf2+0x70>)
    767c:	030e      	lsls	r6, r1, #12
    767e:	004d      	lsls	r5, r1, #1
    7680:	4684      	mov	ip, r0
    7682:	4680      	mov	r8, r0
    7684:	0b36      	lsrs	r6, r6, #12
    7686:	0d6d      	lsrs	r5, r5, #21
    7688:	0fc9      	lsrs	r1, r1, #31
    768a:	4691      	mov	r9, r2
    768c:	0b3f      	lsrs	r7, r7, #12
    768e:	0d64      	lsrs	r4, r4, #21
    7690:	2001      	movs	r0, #1
    7692:	429d      	cmp	r5, r3
    7694:	d008      	beq.n	76a8 <__eqdf2+0x40>
    7696:	429c      	cmp	r4, r3
    7698:	d001      	beq.n	769e <__eqdf2+0x36>
    769a:	42a5      	cmp	r5, r4
    769c:	d00b      	beq.n	76b6 <__eqdf2+0x4e>
    769e:	bc1c      	pop	{r2, r3, r4}
    76a0:	4690      	mov	r8, r2
    76a2:	4699      	mov	r9, r3
    76a4:	46a2      	mov	sl, r4
    76a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76a8:	4663      	mov	r3, ip
    76aa:	4333      	orrs	r3, r6
    76ac:	d1f7      	bne.n	769e <__eqdf2+0x36>
    76ae:	42ac      	cmp	r4, r5
    76b0:	d1f5      	bne.n	769e <__eqdf2+0x36>
    76b2:	433a      	orrs	r2, r7
    76b4:	d1f3      	bne.n	769e <__eqdf2+0x36>
    76b6:	2001      	movs	r0, #1
    76b8:	42be      	cmp	r6, r7
    76ba:	d1f0      	bne.n	769e <__eqdf2+0x36>
    76bc:	45c8      	cmp	r8, r9
    76be:	d1ee      	bne.n	769e <__eqdf2+0x36>
    76c0:	4551      	cmp	r1, sl
    76c2:	d007      	beq.n	76d4 <__eqdf2+0x6c>
    76c4:	2d00      	cmp	r5, #0
    76c6:	d1ea      	bne.n	769e <__eqdf2+0x36>
    76c8:	4663      	mov	r3, ip
    76ca:	431e      	orrs	r6, r3
    76cc:	0030      	movs	r0, r6
    76ce:	1e46      	subs	r6, r0, #1
    76d0:	41b0      	sbcs	r0, r6
    76d2:	e7e4      	b.n	769e <__eqdf2+0x36>
    76d4:	2000      	movs	r0, #0
    76d6:	e7e2      	b.n	769e <__eqdf2+0x36>
    76d8:	000007ff 	.word	0x000007ff

000076dc <__gedf2>:
    76dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    76de:	4645      	mov	r5, r8
    76e0:	46de      	mov	lr, fp
    76e2:	4657      	mov	r7, sl
    76e4:	464e      	mov	r6, r9
    76e6:	b5e0      	push	{r5, r6, r7, lr}
    76e8:	031f      	lsls	r7, r3, #12
    76ea:	0b3d      	lsrs	r5, r7, #12
    76ec:	4f2c      	ldr	r7, [pc, #176]	; (77a0 <__gedf2+0xc4>)
    76ee:	030e      	lsls	r6, r1, #12
    76f0:	004c      	lsls	r4, r1, #1
    76f2:	46ab      	mov	fp, r5
    76f4:	005d      	lsls	r5, r3, #1
    76f6:	4684      	mov	ip, r0
    76f8:	0b36      	lsrs	r6, r6, #12
    76fa:	0d64      	lsrs	r4, r4, #21
    76fc:	0fc9      	lsrs	r1, r1, #31
    76fe:	4690      	mov	r8, r2
    7700:	0d6d      	lsrs	r5, r5, #21
    7702:	0fdb      	lsrs	r3, r3, #31
    7704:	42bc      	cmp	r4, r7
    7706:	d02a      	beq.n	775e <__gedf2+0x82>
    7708:	4f25      	ldr	r7, [pc, #148]	; (77a0 <__gedf2+0xc4>)
    770a:	42bd      	cmp	r5, r7
    770c:	d02d      	beq.n	776a <__gedf2+0x8e>
    770e:	2c00      	cmp	r4, #0
    7710:	d10f      	bne.n	7732 <__gedf2+0x56>
    7712:	4330      	orrs	r0, r6
    7714:	0007      	movs	r7, r0
    7716:	4681      	mov	r9, r0
    7718:	4278      	negs	r0, r7
    771a:	4178      	adcs	r0, r7
    771c:	b2c0      	uxtb	r0, r0
    771e:	2d00      	cmp	r5, #0
    7720:	d117      	bne.n	7752 <__gedf2+0x76>
    7722:	465f      	mov	r7, fp
    7724:	433a      	orrs	r2, r7
    7726:	d114      	bne.n	7752 <__gedf2+0x76>
    7728:	464b      	mov	r3, r9
    772a:	2000      	movs	r0, #0
    772c:	2b00      	cmp	r3, #0
    772e:	d00a      	beq.n	7746 <__gedf2+0x6a>
    7730:	e006      	b.n	7740 <__gedf2+0x64>
    7732:	2d00      	cmp	r5, #0
    7734:	d102      	bne.n	773c <__gedf2+0x60>
    7736:	4658      	mov	r0, fp
    7738:	4302      	orrs	r2, r0
    773a:	d001      	beq.n	7740 <__gedf2+0x64>
    773c:	4299      	cmp	r1, r3
    773e:	d018      	beq.n	7772 <__gedf2+0x96>
    7740:	4248      	negs	r0, r1
    7742:	2101      	movs	r1, #1
    7744:	4308      	orrs	r0, r1
    7746:	bc3c      	pop	{r2, r3, r4, r5}
    7748:	4690      	mov	r8, r2
    774a:	4699      	mov	r9, r3
    774c:	46a2      	mov	sl, r4
    774e:	46ab      	mov	fp, r5
    7750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7752:	2800      	cmp	r0, #0
    7754:	d0f2      	beq.n	773c <__gedf2+0x60>
    7756:	2001      	movs	r0, #1
    7758:	3b01      	subs	r3, #1
    775a:	4318      	orrs	r0, r3
    775c:	e7f3      	b.n	7746 <__gedf2+0x6a>
    775e:	0037      	movs	r7, r6
    7760:	4307      	orrs	r7, r0
    7762:	d0d1      	beq.n	7708 <__gedf2+0x2c>
    7764:	2002      	movs	r0, #2
    7766:	4240      	negs	r0, r0
    7768:	e7ed      	b.n	7746 <__gedf2+0x6a>
    776a:	465f      	mov	r7, fp
    776c:	4317      	orrs	r7, r2
    776e:	d0ce      	beq.n	770e <__gedf2+0x32>
    7770:	e7f8      	b.n	7764 <__gedf2+0x88>
    7772:	42ac      	cmp	r4, r5
    7774:	dce4      	bgt.n	7740 <__gedf2+0x64>
    7776:	da03      	bge.n	7780 <__gedf2+0xa4>
    7778:	1e48      	subs	r0, r1, #1
    777a:	2101      	movs	r1, #1
    777c:	4308      	orrs	r0, r1
    777e:	e7e2      	b.n	7746 <__gedf2+0x6a>
    7780:	455e      	cmp	r6, fp
    7782:	d8dd      	bhi.n	7740 <__gedf2+0x64>
    7784:	d006      	beq.n	7794 <__gedf2+0xb8>
    7786:	2000      	movs	r0, #0
    7788:	455e      	cmp	r6, fp
    778a:	d2dc      	bcs.n	7746 <__gedf2+0x6a>
    778c:	2301      	movs	r3, #1
    778e:	1e48      	subs	r0, r1, #1
    7790:	4318      	orrs	r0, r3
    7792:	e7d8      	b.n	7746 <__gedf2+0x6a>
    7794:	45c4      	cmp	ip, r8
    7796:	d8d3      	bhi.n	7740 <__gedf2+0x64>
    7798:	2000      	movs	r0, #0
    779a:	45c4      	cmp	ip, r8
    779c:	d3f6      	bcc.n	778c <__gedf2+0xb0>
    779e:	e7d2      	b.n	7746 <__gedf2+0x6a>
    77a0:	000007ff 	.word	0x000007ff

000077a4 <__ledf2>:
    77a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    77a6:	464e      	mov	r6, r9
    77a8:	4645      	mov	r5, r8
    77aa:	46de      	mov	lr, fp
    77ac:	4657      	mov	r7, sl
    77ae:	005c      	lsls	r4, r3, #1
    77b0:	b5e0      	push	{r5, r6, r7, lr}
    77b2:	031f      	lsls	r7, r3, #12
    77b4:	0fdb      	lsrs	r3, r3, #31
    77b6:	4699      	mov	r9, r3
    77b8:	4b2a      	ldr	r3, [pc, #168]	; (7864 <__ledf2+0xc0>)
    77ba:	030e      	lsls	r6, r1, #12
    77bc:	004d      	lsls	r5, r1, #1
    77be:	0fc9      	lsrs	r1, r1, #31
    77c0:	4684      	mov	ip, r0
    77c2:	0b36      	lsrs	r6, r6, #12
    77c4:	0d6d      	lsrs	r5, r5, #21
    77c6:	468b      	mov	fp, r1
    77c8:	4690      	mov	r8, r2
    77ca:	0b3f      	lsrs	r7, r7, #12
    77cc:	0d64      	lsrs	r4, r4, #21
    77ce:	429d      	cmp	r5, r3
    77d0:	d020      	beq.n	7814 <__ledf2+0x70>
    77d2:	4b24      	ldr	r3, [pc, #144]	; (7864 <__ledf2+0xc0>)
    77d4:	429c      	cmp	r4, r3
    77d6:	d022      	beq.n	781e <__ledf2+0x7a>
    77d8:	2d00      	cmp	r5, #0
    77da:	d112      	bne.n	7802 <__ledf2+0x5e>
    77dc:	4330      	orrs	r0, r6
    77de:	4243      	negs	r3, r0
    77e0:	4143      	adcs	r3, r0
    77e2:	b2db      	uxtb	r3, r3
    77e4:	2c00      	cmp	r4, #0
    77e6:	d01f      	beq.n	7828 <__ledf2+0x84>
    77e8:	2b00      	cmp	r3, #0
    77ea:	d00c      	beq.n	7806 <__ledf2+0x62>
    77ec:	464b      	mov	r3, r9
    77ee:	2001      	movs	r0, #1
    77f0:	3b01      	subs	r3, #1
    77f2:	4303      	orrs	r3, r0
    77f4:	0018      	movs	r0, r3
    77f6:	bc3c      	pop	{r2, r3, r4, r5}
    77f8:	4690      	mov	r8, r2
    77fa:	4699      	mov	r9, r3
    77fc:	46a2      	mov	sl, r4
    77fe:	46ab      	mov	fp, r5
    7800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7802:	2c00      	cmp	r4, #0
    7804:	d016      	beq.n	7834 <__ledf2+0x90>
    7806:	45cb      	cmp	fp, r9
    7808:	d017      	beq.n	783a <__ledf2+0x96>
    780a:	465b      	mov	r3, fp
    780c:	4259      	negs	r1, r3
    780e:	2301      	movs	r3, #1
    7810:	430b      	orrs	r3, r1
    7812:	e7ef      	b.n	77f4 <__ledf2+0x50>
    7814:	0031      	movs	r1, r6
    7816:	2302      	movs	r3, #2
    7818:	4301      	orrs	r1, r0
    781a:	d1eb      	bne.n	77f4 <__ledf2+0x50>
    781c:	e7d9      	b.n	77d2 <__ledf2+0x2e>
    781e:	0039      	movs	r1, r7
    7820:	2302      	movs	r3, #2
    7822:	4311      	orrs	r1, r2
    7824:	d1e6      	bne.n	77f4 <__ledf2+0x50>
    7826:	e7d7      	b.n	77d8 <__ledf2+0x34>
    7828:	433a      	orrs	r2, r7
    782a:	d1dd      	bne.n	77e8 <__ledf2+0x44>
    782c:	2300      	movs	r3, #0
    782e:	2800      	cmp	r0, #0
    7830:	d0e0      	beq.n	77f4 <__ledf2+0x50>
    7832:	e7ea      	b.n	780a <__ledf2+0x66>
    7834:	433a      	orrs	r2, r7
    7836:	d1e6      	bne.n	7806 <__ledf2+0x62>
    7838:	e7e7      	b.n	780a <__ledf2+0x66>
    783a:	42a5      	cmp	r5, r4
    783c:	dce5      	bgt.n	780a <__ledf2+0x66>
    783e:	db05      	blt.n	784c <__ledf2+0xa8>
    7840:	42be      	cmp	r6, r7
    7842:	d8e2      	bhi.n	780a <__ledf2+0x66>
    7844:	d007      	beq.n	7856 <__ledf2+0xb2>
    7846:	2300      	movs	r3, #0
    7848:	42be      	cmp	r6, r7
    784a:	d2d3      	bcs.n	77f4 <__ledf2+0x50>
    784c:	4659      	mov	r1, fp
    784e:	2301      	movs	r3, #1
    7850:	3901      	subs	r1, #1
    7852:	430b      	orrs	r3, r1
    7854:	e7ce      	b.n	77f4 <__ledf2+0x50>
    7856:	45c4      	cmp	ip, r8
    7858:	d8d7      	bhi.n	780a <__ledf2+0x66>
    785a:	2300      	movs	r3, #0
    785c:	45c4      	cmp	ip, r8
    785e:	d3f5      	bcc.n	784c <__ledf2+0xa8>
    7860:	e7c8      	b.n	77f4 <__ledf2+0x50>
    7862:	46c0      	nop			; (mov r8, r8)
    7864:	000007ff 	.word	0x000007ff

00007868 <__libc_init_array>:
    7868:	b570      	push	{r4, r5, r6, lr}
    786a:	4e0d      	ldr	r6, [pc, #52]	; (78a0 <__libc_init_array+0x38>)
    786c:	4d0d      	ldr	r5, [pc, #52]	; (78a4 <__libc_init_array+0x3c>)
    786e:	2400      	movs	r4, #0
    7870:	1bad      	subs	r5, r5, r6
    7872:	10ad      	asrs	r5, r5, #2
    7874:	d005      	beq.n	7882 <__libc_init_array+0x1a>
    7876:	00a3      	lsls	r3, r4, #2
    7878:	58f3      	ldr	r3, [r6, r3]
    787a:	3401      	adds	r4, #1
    787c:	4798      	blx	r3
    787e:	42a5      	cmp	r5, r4
    7880:	d1f9      	bne.n	7876 <__libc_init_array+0xe>
    7882:	f005 fc39 	bl	d0f8 <_init>
    7886:	4e08      	ldr	r6, [pc, #32]	; (78a8 <__libc_init_array+0x40>)
    7888:	4d08      	ldr	r5, [pc, #32]	; (78ac <__libc_init_array+0x44>)
    788a:	2400      	movs	r4, #0
    788c:	1bad      	subs	r5, r5, r6
    788e:	10ad      	asrs	r5, r5, #2
    7890:	d005      	beq.n	789e <__libc_init_array+0x36>
    7892:	00a3      	lsls	r3, r4, #2
    7894:	58f3      	ldr	r3, [r6, r3]
    7896:	3401      	adds	r4, #1
    7898:	4798      	blx	r3
    789a:	42a5      	cmp	r5, r4
    789c:	d1f9      	bne.n	7892 <__libc_init_array+0x2a>
    789e:	bd70      	pop	{r4, r5, r6, pc}
    78a0:	0000d104 	.word	0x0000d104
    78a4:	0000d104 	.word	0x0000d104
    78a8:	0000d104 	.word	0x0000d104
    78ac:	0000d10c 	.word	0x0000d10c

000078b0 <memcpy>:
    78b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b2:	0005      	movs	r5, r0
    78b4:	2a0f      	cmp	r2, #15
    78b6:	d92f      	bls.n	7918 <memcpy+0x68>
    78b8:	000b      	movs	r3, r1
    78ba:	4303      	orrs	r3, r0
    78bc:	079b      	lsls	r3, r3, #30
    78be:	d134      	bne.n	792a <memcpy+0x7a>
    78c0:	0016      	movs	r6, r2
    78c2:	000c      	movs	r4, r1
    78c4:	0003      	movs	r3, r0
    78c6:	3e10      	subs	r6, #16
    78c8:	0935      	lsrs	r5, r6, #4
    78ca:	3501      	adds	r5, #1
    78cc:	012d      	lsls	r5, r5, #4
    78ce:	1945      	adds	r5, r0, r5
    78d0:	6827      	ldr	r7, [r4, #0]
    78d2:	601f      	str	r7, [r3, #0]
    78d4:	6867      	ldr	r7, [r4, #4]
    78d6:	605f      	str	r7, [r3, #4]
    78d8:	68a7      	ldr	r7, [r4, #8]
    78da:	609f      	str	r7, [r3, #8]
    78dc:	68e7      	ldr	r7, [r4, #12]
    78de:	3410      	adds	r4, #16
    78e0:	60df      	str	r7, [r3, #12]
    78e2:	3310      	adds	r3, #16
    78e4:	429d      	cmp	r5, r3
    78e6:	d1f3      	bne.n	78d0 <memcpy+0x20>
    78e8:	230f      	movs	r3, #15
    78ea:	439e      	bics	r6, r3
    78ec:	3610      	adds	r6, #16
    78ee:	1985      	adds	r5, r0, r6
    78f0:	1989      	adds	r1, r1, r6
    78f2:	4013      	ands	r3, r2
    78f4:	2b03      	cmp	r3, #3
    78f6:	d91a      	bls.n	792e <memcpy+0x7e>
    78f8:	1f1e      	subs	r6, r3, #4
    78fa:	2300      	movs	r3, #0
    78fc:	08b4      	lsrs	r4, r6, #2
    78fe:	3401      	adds	r4, #1
    7900:	00a4      	lsls	r4, r4, #2
    7902:	58cf      	ldr	r7, [r1, r3]
    7904:	50ef      	str	r7, [r5, r3]
    7906:	3304      	adds	r3, #4
    7908:	42a3      	cmp	r3, r4
    790a:	d1fa      	bne.n	7902 <memcpy+0x52>
    790c:	2403      	movs	r4, #3
    790e:	43a6      	bics	r6, r4
    7910:	1d33      	adds	r3, r6, #4
    7912:	4022      	ands	r2, r4
    7914:	18c9      	adds	r1, r1, r3
    7916:	18ed      	adds	r5, r5, r3
    7918:	2a00      	cmp	r2, #0
    791a:	d005      	beq.n	7928 <memcpy+0x78>
    791c:	2300      	movs	r3, #0
    791e:	5ccc      	ldrb	r4, [r1, r3]
    7920:	54ec      	strb	r4, [r5, r3]
    7922:	3301      	adds	r3, #1
    7924:	4293      	cmp	r3, r2
    7926:	d1fa      	bne.n	791e <memcpy+0x6e>
    7928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    792a:	0005      	movs	r5, r0
    792c:	e7f6      	b.n	791c <memcpy+0x6c>
    792e:	001a      	movs	r2, r3
    7930:	e7f2      	b.n	7918 <memcpy+0x68>
    7932:	46c0      	nop			; (mov r8, r8)

00007934 <memset>:
    7934:	b5f0      	push	{r4, r5, r6, r7, lr}
    7936:	0783      	lsls	r3, r0, #30
    7938:	d043      	beq.n	79c2 <memset+0x8e>
    793a:	1e54      	subs	r4, r2, #1
    793c:	2a00      	cmp	r2, #0
    793e:	d03f      	beq.n	79c0 <memset+0x8c>
    7940:	b2ce      	uxtb	r6, r1
    7942:	0002      	movs	r2, r0
    7944:	2503      	movs	r5, #3
    7946:	e002      	b.n	794e <memset+0x1a>
    7948:	001a      	movs	r2, r3
    794a:	3c01      	subs	r4, #1
    794c:	d338      	bcc.n	79c0 <memset+0x8c>
    794e:	1c53      	adds	r3, r2, #1
    7950:	7016      	strb	r6, [r2, #0]
    7952:	422b      	tst	r3, r5
    7954:	d1f8      	bne.n	7948 <memset+0x14>
    7956:	2c03      	cmp	r4, #3
    7958:	d92a      	bls.n	79b0 <memset+0x7c>
    795a:	22ff      	movs	r2, #255	; 0xff
    795c:	400a      	ands	r2, r1
    795e:	0215      	lsls	r5, r2, #8
    7960:	4315      	orrs	r5, r2
    7962:	042a      	lsls	r2, r5, #16
    7964:	4315      	orrs	r5, r2
    7966:	2c0f      	cmp	r4, #15
    7968:	d914      	bls.n	7994 <memset+0x60>
    796a:	0027      	movs	r7, r4
    796c:	001a      	movs	r2, r3
    796e:	3f10      	subs	r7, #16
    7970:	093e      	lsrs	r6, r7, #4
    7972:	3601      	adds	r6, #1
    7974:	0136      	lsls	r6, r6, #4
    7976:	199e      	adds	r6, r3, r6
    7978:	6015      	str	r5, [r2, #0]
    797a:	6055      	str	r5, [r2, #4]
    797c:	6095      	str	r5, [r2, #8]
    797e:	60d5      	str	r5, [r2, #12]
    7980:	3210      	adds	r2, #16
    7982:	4296      	cmp	r6, r2
    7984:	d1f8      	bne.n	7978 <memset+0x44>
    7986:	220f      	movs	r2, #15
    7988:	4397      	bics	r7, r2
    798a:	3710      	adds	r7, #16
    798c:	19db      	adds	r3, r3, r7
    798e:	4014      	ands	r4, r2
    7990:	2c03      	cmp	r4, #3
    7992:	d90d      	bls.n	79b0 <memset+0x7c>
    7994:	001a      	movs	r2, r3
    7996:	1f27      	subs	r7, r4, #4
    7998:	08be      	lsrs	r6, r7, #2
    799a:	3601      	adds	r6, #1
    799c:	00b6      	lsls	r6, r6, #2
    799e:	199e      	adds	r6, r3, r6
    79a0:	c220      	stmia	r2!, {r5}
    79a2:	42b2      	cmp	r2, r6
    79a4:	d1fc      	bne.n	79a0 <memset+0x6c>
    79a6:	2203      	movs	r2, #3
    79a8:	4397      	bics	r7, r2
    79aa:	3704      	adds	r7, #4
    79ac:	19db      	adds	r3, r3, r7
    79ae:	4014      	ands	r4, r2
    79b0:	2c00      	cmp	r4, #0
    79b2:	d005      	beq.n	79c0 <memset+0x8c>
    79b4:	b2c9      	uxtb	r1, r1
    79b6:	191c      	adds	r4, r3, r4
    79b8:	7019      	strb	r1, [r3, #0]
    79ba:	3301      	adds	r3, #1
    79bc:	429c      	cmp	r4, r3
    79be:	d1fb      	bne.n	79b8 <memset+0x84>
    79c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79c2:	0014      	movs	r4, r2
    79c4:	0003      	movs	r3, r0
    79c6:	e7c6      	b.n	7956 <memset+0x22>

000079c8 <setbuf>:
    79c8:	424a      	negs	r2, r1
    79ca:	414a      	adcs	r2, r1
    79cc:	2380      	movs	r3, #128	; 0x80
    79ce:	b510      	push	{r4, lr}
    79d0:	0052      	lsls	r2, r2, #1
    79d2:	00db      	lsls	r3, r3, #3
    79d4:	f000 f802 	bl	79dc <setvbuf>
    79d8:	bd10      	pop	{r4, pc}
    79da:	46c0      	nop			; (mov r8, r8)

000079dc <setvbuf>:
    79dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79de:	4647      	mov	r7, r8
    79e0:	46ce      	mov	lr, r9
    79e2:	b580      	push	{r7, lr}
    79e4:	001f      	movs	r7, r3
    79e6:	4b63      	ldr	r3, [pc, #396]	; (7b74 <setvbuf+0x198>)
    79e8:	b083      	sub	sp, #12
    79ea:	681d      	ldr	r5, [r3, #0]
    79ec:	0004      	movs	r4, r0
    79ee:	4688      	mov	r8, r1
    79f0:	0016      	movs	r6, r2
    79f2:	2d00      	cmp	r5, #0
    79f4:	d002      	beq.n	79fc <setvbuf+0x20>
    79f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    79f8:	2b00      	cmp	r3, #0
    79fa:	d066      	beq.n	7aca <setvbuf+0xee>
    79fc:	2e02      	cmp	r6, #2
    79fe:	d005      	beq.n	7a0c <setvbuf+0x30>
    7a00:	2e01      	cmp	r6, #1
    7a02:	d900      	bls.n	7a06 <setvbuf+0x2a>
    7a04:	e0a1      	b.n	7b4a <setvbuf+0x16e>
    7a06:	2f00      	cmp	r7, #0
    7a08:	da00      	bge.n	7a0c <setvbuf+0x30>
    7a0a:	e09e      	b.n	7b4a <setvbuf+0x16e>
    7a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7a0e:	07db      	lsls	r3, r3, #31
    7a10:	d533      	bpl.n	7a7a <setvbuf+0x9e>
    7a12:	0021      	movs	r1, r4
    7a14:	0028      	movs	r0, r5
    7a16:	f002 fd33 	bl	a480 <_fflush_r>
    7a1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a1c:	2900      	cmp	r1, #0
    7a1e:	d008      	beq.n	7a32 <setvbuf+0x56>
    7a20:	0023      	movs	r3, r4
    7a22:	3340      	adds	r3, #64	; 0x40
    7a24:	4299      	cmp	r1, r3
    7a26:	d002      	beq.n	7a2e <setvbuf+0x52>
    7a28:	0028      	movs	r0, r5
    7a2a:	f002 fe2d 	bl	a688 <_free_r>
    7a2e:	2300      	movs	r3, #0
    7a30:	6323      	str	r3, [r4, #48]	; 0x30
    7a32:	2300      	movs	r3, #0
    7a34:	61a3      	str	r3, [r4, #24]
    7a36:	6063      	str	r3, [r4, #4]
    7a38:	220c      	movs	r2, #12
    7a3a:	5ea3      	ldrsh	r3, [r4, r2]
    7a3c:	061a      	lsls	r2, r3, #24
    7a3e:	d43d      	bmi.n	7abc <setvbuf+0xe0>
    7a40:	4a4d      	ldr	r2, [pc, #308]	; (7b78 <setvbuf+0x19c>)
    7a42:	4013      	ands	r3, r2
    7a44:	81a3      	strh	r3, [r4, #12]
    7a46:	2e02      	cmp	r6, #2
    7a48:	d01e      	beq.n	7a88 <setvbuf+0xac>
    7a4a:	ab01      	add	r3, sp, #4
    7a4c:	466a      	mov	r2, sp
    7a4e:	0021      	movs	r1, r4
    7a50:	0028      	movs	r0, r5
    7a52:	f002 ff33 	bl	a8bc <__swhatbuf_r>
    7a56:	89a3      	ldrh	r3, [r4, #12]
    7a58:	4318      	orrs	r0, r3
    7a5a:	81a0      	strh	r0, [r4, #12]
    7a5c:	2f00      	cmp	r7, #0
    7a5e:	d138      	bne.n	7ad2 <setvbuf+0xf6>
    7a60:	9f00      	ldr	r7, [sp, #0]
    7a62:	0038      	movs	r0, r7
    7a64:	f002 ff5a 	bl	a91c <malloc>
    7a68:	4680      	mov	r8, r0
    7a6a:	2800      	cmp	r0, #0
    7a6c:	d100      	bne.n	7a70 <setvbuf+0x94>
    7a6e:	e06f      	b.n	7b50 <setvbuf+0x174>
    7a70:	2280      	movs	r2, #128	; 0x80
    7a72:	89a3      	ldrh	r3, [r4, #12]
    7a74:	4313      	orrs	r3, r2
    7a76:	81a3      	strh	r3, [r4, #12]
    7a78:	e02e      	b.n	7ad8 <setvbuf+0xfc>
    7a7a:	89a3      	ldrh	r3, [r4, #12]
    7a7c:	059b      	lsls	r3, r3, #22
    7a7e:	d4c8      	bmi.n	7a12 <setvbuf+0x36>
    7a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a82:	f002 ff17 	bl	a8b4 <__retarget_lock_acquire_recursive>
    7a86:	e7c4      	b.n	7a12 <setvbuf+0x36>
    7a88:	2500      	movs	r5, #0
    7a8a:	2202      	movs	r2, #2
    7a8c:	4313      	orrs	r3, r2
    7a8e:	2200      	movs	r2, #0
    7a90:	60a2      	str	r2, [r4, #8]
    7a92:	0022      	movs	r2, r4
    7a94:	3243      	adds	r2, #67	; 0x43
    7a96:	6022      	str	r2, [r4, #0]
    7a98:	6122      	str	r2, [r4, #16]
    7a9a:	2201      	movs	r2, #1
    7a9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7a9e:	81a3      	strh	r3, [r4, #12]
    7aa0:	6162      	str	r2, [r4, #20]
    7aa2:	4211      	tst	r1, r2
    7aa4:	d104      	bne.n	7ab0 <setvbuf+0xd4>
    7aa6:	059b      	lsls	r3, r3, #22
    7aa8:	d402      	bmi.n	7ab0 <setvbuf+0xd4>
    7aaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7aac:	f002 ff04 	bl	a8b8 <__retarget_lock_release_recursive>
    7ab0:	0028      	movs	r0, r5
    7ab2:	b003      	add	sp, #12
    7ab4:	bc0c      	pop	{r2, r3}
    7ab6:	4690      	mov	r8, r2
    7ab8:	4699      	mov	r9, r3
    7aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7abc:	6921      	ldr	r1, [r4, #16]
    7abe:	0028      	movs	r0, r5
    7ac0:	f002 fde2 	bl	a688 <_free_r>
    7ac4:	220c      	movs	r2, #12
    7ac6:	5ea3      	ldrsh	r3, [r4, r2]
    7ac8:	e7ba      	b.n	7a40 <setvbuf+0x64>
    7aca:	0028      	movs	r0, r5
    7acc:	f002 fd32 	bl	a534 <__sinit>
    7ad0:	e794      	b.n	79fc <setvbuf+0x20>
    7ad2:	4643      	mov	r3, r8
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d0c4      	beq.n	7a62 <setvbuf+0x86>
    7ad8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7ada:	2b00      	cmp	r3, #0
    7adc:	d027      	beq.n	7b2e <setvbuf+0x152>
    7ade:	9b00      	ldr	r3, [sp, #0]
    7ae0:	429f      	cmp	r7, r3
    7ae2:	d02a      	beq.n	7b3a <setvbuf+0x15e>
    7ae4:	2380      	movs	r3, #128	; 0x80
    7ae6:	89a2      	ldrh	r2, [r4, #12]
    7ae8:	011b      	lsls	r3, r3, #4
    7aea:	4313      	orrs	r3, r2
    7aec:	b21b      	sxth	r3, r3
    7aee:	81a3      	strh	r3, [r4, #12]
    7af0:	2e01      	cmp	r6, #1
    7af2:	d026      	beq.n	7b42 <setvbuf+0x166>
    7af4:	4642      	mov	r2, r8
    7af6:	6022      	str	r2, [r4, #0]
    7af8:	6122      	str	r2, [r4, #16]
    7afa:	2208      	movs	r2, #8
    7afc:	b29b      	uxth	r3, r3
    7afe:	6167      	str	r7, [r4, #20]
    7b00:	401a      	ands	r2, r3
    7b02:	d00b      	beq.n	7b1c <setvbuf+0x140>
    7b04:	07da      	lsls	r2, r3, #31
    7b06:	d510      	bpl.n	7b2a <setvbuf+0x14e>
    7b08:	2200      	movs	r2, #0
    7b0a:	2501      	movs	r5, #1
    7b0c:	60a2      	str	r2, [r4, #8]
    7b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    7b10:	427f      	negs	r7, r7
    7b12:	61a7      	str	r7, [r4, #24]
    7b14:	4015      	ands	r5, r2
    7b16:	d0c6      	beq.n	7aa6 <setvbuf+0xca>
    7b18:	2500      	movs	r5, #0
    7b1a:	e7c9      	b.n	7ab0 <setvbuf+0xd4>
    7b1c:	60a2      	str	r2, [r4, #8]
    7b1e:	2501      	movs	r5, #1
    7b20:	6e62      	ldr	r2, [r4, #100]	; 0x64
    7b22:	4015      	ands	r5, r2
    7b24:	d0bf      	beq.n	7aa6 <setvbuf+0xca>
    7b26:	2500      	movs	r5, #0
    7b28:	e7c2      	b.n	7ab0 <setvbuf+0xd4>
    7b2a:	60a7      	str	r7, [r4, #8]
    7b2c:	e7f7      	b.n	7b1e <setvbuf+0x142>
    7b2e:	0028      	movs	r0, r5
    7b30:	f002 fd00 	bl	a534 <__sinit>
    7b34:	9b00      	ldr	r3, [sp, #0]
    7b36:	429f      	cmp	r7, r3
    7b38:	d1d4      	bne.n	7ae4 <setvbuf+0x108>
    7b3a:	220c      	movs	r2, #12
    7b3c:	5ea3      	ldrsh	r3, [r4, r2]
    7b3e:	2e01      	cmp	r6, #1
    7b40:	d1d8      	bne.n	7af4 <setvbuf+0x118>
    7b42:	2201      	movs	r2, #1
    7b44:	4313      	orrs	r3, r2
    7b46:	81a3      	strh	r3, [r4, #12]
    7b48:	e7d4      	b.n	7af4 <setvbuf+0x118>
    7b4a:	2501      	movs	r5, #1
    7b4c:	426d      	negs	r5, r5
    7b4e:	e7af      	b.n	7ab0 <setvbuf+0xd4>
    7b50:	9b00      	ldr	r3, [sp, #0]
    7b52:	4699      	mov	r9, r3
    7b54:	42bb      	cmp	r3, r7
    7b56:	d005      	beq.n	7b64 <setvbuf+0x188>
    7b58:	0018      	movs	r0, r3
    7b5a:	f002 fedf 	bl	a91c <malloc>
    7b5e:	4680      	mov	r8, r0
    7b60:	2800      	cmp	r0, #0
    7b62:	d104      	bne.n	7b6e <setvbuf+0x192>
    7b64:	2501      	movs	r5, #1
    7b66:	220c      	movs	r2, #12
    7b68:	5ea3      	ldrsh	r3, [r4, r2]
    7b6a:	426d      	negs	r5, r5
    7b6c:	e78d      	b.n	7a8a <setvbuf+0xae>
    7b6e:	464f      	mov	r7, r9
    7b70:	e77e      	b.n	7a70 <setvbuf+0x94>
    7b72:	46c0      	nop			; (mov r8, r8)
    7b74:	200000b4 	.word	0x200000b4
    7b78:	fffff35c 	.word	0xfffff35c

00007b7c <sprintf>:
    7b7c:	b40e      	push	{r1, r2, r3}
    7b7e:	b510      	push	{r4, lr}
    7b80:	b09d      	sub	sp, #116	; 0x74
    7b82:	a902      	add	r1, sp, #8
    7b84:	9002      	str	r0, [sp, #8]
    7b86:	6108      	str	r0, [r1, #16]
    7b88:	480b      	ldr	r0, [pc, #44]	; (7bb8 <sprintf+0x3c>)
    7b8a:	2482      	movs	r4, #130	; 0x82
    7b8c:	6088      	str	r0, [r1, #8]
    7b8e:	6148      	str	r0, [r1, #20]
    7b90:	2001      	movs	r0, #1
    7b92:	4240      	negs	r0, r0
    7b94:	ab1f      	add	r3, sp, #124	; 0x7c
    7b96:	81c8      	strh	r0, [r1, #14]
    7b98:	4808      	ldr	r0, [pc, #32]	; (7bbc <sprintf+0x40>)
    7b9a:	cb04      	ldmia	r3!, {r2}
    7b9c:	00a4      	lsls	r4, r4, #2
    7b9e:	6800      	ldr	r0, [r0, #0]
    7ba0:	9301      	str	r3, [sp, #4]
    7ba2:	818c      	strh	r4, [r1, #12]
    7ba4:	f000 f83e 	bl	7c24 <_svfprintf_r>
    7ba8:	2300      	movs	r3, #0
    7baa:	9a02      	ldr	r2, [sp, #8]
    7bac:	7013      	strb	r3, [r2, #0]
    7bae:	b01d      	add	sp, #116	; 0x74
    7bb0:	bc10      	pop	{r4}
    7bb2:	bc08      	pop	{r3}
    7bb4:	b003      	add	sp, #12
    7bb6:	4718      	bx	r3
    7bb8:	7fffffff 	.word	0x7fffffff
    7bbc:	200000b4 	.word	0x200000b4

00007bc0 <strlen>:
    7bc0:	b510      	push	{r4, lr}
    7bc2:	0783      	lsls	r3, r0, #30
    7bc4:	d025      	beq.n	7c12 <strlen+0x52>
    7bc6:	7803      	ldrb	r3, [r0, #0]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d024      	beq.n	7c16 <strlen+0x56>
    7bcc:	0003      	movs	r3, r0
    7bce:	2103      	movs	r1, #3
    7bd0:	e002      	b.n	7bd8 <strlen+0x18>
    7bd2:	781a      	ldrb	r2, [r3, #0]
    7bd4:	2a00      	cmp	r2, #0
    7bd6:	d01a      	beq.n	7c0e <strlen+0x4e>
    7bd8:	3301      	adds	r3, #1
    7bda:	420b      	tst	r3, r1
    7bdc:	d1f9      	bne.n	7bd2 <strlen+0x12>
    7bde:	6819      	ldr	r1, [r3, #0]
    7be0:	4a0e      	ldr	r2, [pc, #56]	; (7c1c <strlen+0x5c>)
    7be2:	4c0f      	ldr	r4, [pc, #60]	; (7c20 <strlen+0x60>)
    7be4:	188a      	adds	r2, r1, r2
    7be6:	438a      	bics	r2, r1
    7be8:	4222      	tst	r2, r4
    7bea:	d106      	bne.n	7bfa <strlen+0x3a>
    7bec:	3304      	adds	r3, #4
    7bee:	6819      	ldr	r1, [r3, #0]
    7bf0:	4a0a      	ldr	r2, [pc, #40]	; (7c1c <strlen+0x5c>)
    7bf2:	188a      	adds	r2, r1, r2
    7bf4:	438a      	bics	r2, r1
    7bf6:	4222      	tst	r2, r4
    7bf8:	d0f8      	beq.n	7bec <strlen+0x2c>
    7bfa:	001a      	movs	r2, r3
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d003      	beq.n	7c0a <strlen+0x4a>
    7c02:	3201      	adds	r2, #1
    7c04:	7811      	ldrb	r1, [r2, #0]
    7c06:	2900      	cmp	r1, #0
    7c08:	d1fb      	bne.n	7c02 <strlen+0x42>
    7c0a:	1a10      	subs	r0, r2, r0
    7c0c:	bd10      	pop	{r4, pc}
    7c0e:	1a18      	subs	r0, r3, r0
    7c10:	e7fc      	b.n	7c0c <strlen+0x4c>
    7c12:	0003      	movs	r3, r0
    7c14:	e7e3      	b.n	7bde <strlen+0x1e>
    7c16:	2000      	movs	r0, #0
    7c18:	e7f8      	b.n	7c0c <strlen+0x4c>
    7c1a:	46c0      	nop			; (mov r8, r8)
    7c1c:	fefefeff 	.word	0xfefefeff
    7c20:	80808080 	.word	0x80808080

00007c24 <_svfprintf_r>:
    7c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c26:	46de      	mov	lr, fp
    7c28:	4645      	mov	r5, r8
    7c2a:	4657      	mov	r7, sl
    7c2c:	464e      	mov	r6, r9
    7c2e:	b5e0      	push	{r5, r6, r7, lr}
    7c30:	b0c3      	sub	sp, #268	; 0x10c
    7c32:	000d      	movs	r5, r1
    7c34:	9106      	str	r1, [sp, #24]
    7c36:	0014      	movs	r4, r2
    7c38:	930f      	str	r3, [sp, #60]	; 0x3c
    7c3a:	9009      	str	r0, [sp, #36]	; 0x24
    7c3c:	f002 fe28 	bl	a890 <_localeconv_r>
    7c40:	6803      	ldr	r3, [r0, #0]
    7c42:	0018      	movs	r0, r3
    7c44:	9319      	str	r3, [sp, #100]	; 0x64
    7c46:	f7ff ffbb 	bl	7bc0 <strlen>
    7c4a:	9018      	str	r0, [sp, #96]	; 0x60
    7c4c:	89ab      	ldrh	r3, [r5, #12]
    7c4e:	061b      	lsls	r3, r3, #24
    7c50:	d505      	bpl.n	7c5e <_svfprintf_r+0x3a>
    7c52:	692b      	ldr	r3, [r5, #16]
    7c54:	9307      	str	r3, [sp, #28]
    7c56:	2b00      	cmp	r3, #0
    7c58:	d101      	bne.n	7c5e <_svfprintf_r+0x3a>
    7c5a:	f001 f863 	bl	8d24 <_svfprintf_r+0x1100>
    7c5e:	ab32      	add	r3, sp, #200	; 0xc8
    7c60:	9325      	str	r3, [sp, #148]	; 0x94
    7c62:	2300      	movs	r3, #0
    7c64:	46a3      	mov	fp, r4
    7c66:	af25      	add	r7, sp, #148	; 0x94
    7c68:	60bb      	str	r3, [r7, #8]
    7c6a:	607b      	str	r3, [r7, #4]
    7c6c:	9314      	str	r3, [sp, #80]	; 0x50
    7c6e:	9316      	str	r3, [sp, #88]	; 0x58
    7c70:	9315      	str	r3, [sp, #84]	; 0x54
    7c72:	ae32      	add	r6, sp, #200	; 0xc8
    7c74:	9317      	str	r3, [sp, #92]	; 0x5c
    7c76:	931a      	str	r3, [sp, #104]	; 0x68
    7c78:	930a      	str	r3, [sp, #40]	; 0x28
    7c7a:	465b      	mov	r3, fp
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	465c      	mov	r4, fp
    7c80:	2b00      	cmp	r3, #0
    7c82:	d01c      	beq.n	7cbe <_svfprintf_r+0x9a>
    7c84:	2b25      	cmp	r3, #37	; 0x25
    7c86:	d102      	bne.n	7c8e <_svfprintf_r+0x6a>
    7c88:	e019      	b.n	7cbe <_svfprintf_r+0x9a>
    7c8a:	2b25      	cmp	r3, #37	; 0x25
    7c8c:	d003      	beq.n	7c96 <_svfprintf_r+0x72>
    7c8e:	3401      	adds	r4, #1
    7c90:	7823      	ldrb	r3, [r4, #0]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d1f9      	bne.n	7c8a <_svfprintf_r+0x66>
    7c96:	465b      	mov	r3, fp
    7c98:	1ae5      	subs	r5, r4, r3
    7c9a:	d010      	beq.n	7cbe <_svfprintf_r+0x9a>
    7c9c:	465b      	mov	r3, fp
    7c9e:	6033      	str	r3, [r6, #0]
    7ca0:	68bb      	ldr	r3, [r7, #8]
    7ca2:	6075      	str	r5, [r6, #4]
    7ca4:	195b      	adds	r3, r3, r5
    7ca6:	60bb      	str	r3, [r7, #8]
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	3301      	adds	r3, #1
    7cac:	607b      	str	r3, [r7, #4]
    7cae:	2b07      	cmp	r3, #7
    7cb0:	dc2e      	bgt.n	7d10 <_svfprintf_r+0xec>
    7cb2:	3608      	adds	r6, #8
    7cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7cb6:	469c      	mov	ip, r3
    7cb8:	44ac      	add	ip, r5
    7cba:	4663      	mov	r3, ip
    7cbc:	930a      	str	r3, [sp, #40]	; 0x28
    7cbe:	7823      	ldrb	r3, [r4, #0]
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d02e      	beq.n	7d22 <_svfprintf_r+0xfe>
    7cc4:	1c63      	adds	r3, r4, #1
    7cc6:	469b      	mov	fp, r3
    7cc8:	2300      	movs	r3, #0
    7cca:	aa16      	add	r2, sp, #88	; 0x58
    7ccc:	77d3      	strb	r3, [r2, #31]
    7cce:	2201      	movs	r2, #1
    7cd0:	4252      	negs	r2, r2
    7cd2:	4692      	mov	sl, r2
    7cd4:	2200      	movs	r2, #0
    7cd6:	2100      	movs	r1, #0
    7cd8:	920b      	str	r2, [sp, #44]	; 0x2c
    7cda:	3220      	adds	r2, #32
    7cdc:	4691      	mov	r9, r2
    7cde:	3220      	adds	r2, #32
    7ce0:	7863      	ldrb	r3, [r4, #1]
    7ce2:	4688      	mov	r8, r1
    7ce4:	2000      	movs	r0, #0
    7ce6:	2400      	movs	r4, #0
    7ce8:	4694      	mov	ip, r2
    7cea:	4659      	mov	r1, fp
    7cec:	3101      	adds	r1, #1
    7cee:	001a      	movs	r2, r3
    7cf0:	3a20      	subs	r2, #32
    7cf2:	2a58      	cmp	r2, #88	; 0x58
    7cf4:	d900      	bls.n	7cf8 <_svfprintf_r+0xd4>
    7cf6:	e2fd      	b.n	82f4 <_svfprintf_r+0x6d0>
    7cf8:	4dd7      	ldr	r5, [pc, #860]	; (8058 <_svfprintf_r+0x434>)
    7cfa:	0092      	lsls	r2, r2, #2
    7cfc:	58aa      	ldr	r2, [r5, r2]
    7cfe:	4697      	mov	pc, r2
    7d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d02:	920f      	str	r2, [sp, #60]	; 0x3c
    7d04:	425b      	negs	r3, r3
    7d06:	930b      	str	r3, [sp, #44]	; 0x2c
    7d08:	2304      	movs	r3, #4
    7d0a:	431c      	orrs	r4, r3
    7d0c:	780b      	ldrb	r3, [r1, #0]
    7d0e:	e7ed      	b.n	7cec <_svfprintf_r+0xc8>
    7d10:	003a      	movs	r2, r7
    7d12:	9906      	ldr	r1, [sp, #24]
    7d14:	9809      	ldr	r0, [sp, #36]	; 0x24
    7d16:	f003 fec5 	bl	baa4 <__ssprint_r>
    7d1a:	2800      	cmp	r0, #0
    7d1c:	d109      	bne.n	7d32 <_svfprintf_r+0x10e>
    7d1e:	ae32      	add	r6, sp, #200	; 0xc8
    7d20:	e7c8      	b.n	7cb4 <_svfprintf_r+0x90>
    7d22:	68bb      	ldr	r3, [r7, #8]
    7d24:	2b00      	cmp	r3, #0
    7d26:	d004      	beq.n	7d32 <_svfprintf_r+0x10e>
    7d28:	003a      	movs	r2, r7
    7d2a:	9906      	ldr	r1, [sp, #24]
    7d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    7d2e:	f003 feb9 	bl	baa4 <__ssprint_r>
    7d32:	9b06      	ldr	r3, [sp, #24]
    7d34:	899b      	ldrh	r3, [r3, #12]
    7d36:	065b      	lsls	r3, r3, #25
    7d38:	d501      	bpl.n	7d3e <_svfprintf_r+0x11a>
    7d3a:	f001 f8ce 	bl	8eda <_svfprintf_r+0x12b6>
    7d3e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7d40:	b043      	add	sp, #268	; 0x10c
    7d42:	bc3c      	pop	{r2, r3, r4, r5}
    7d44:	4690      	mov	r8, r2
    7d46:	4699      	mov	r9, r3
    7d48:	46a2      	mov	sl, r4
    7d4a:	46ab      	mov	fp, r5
    7d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d4e:	2201      	movs	r2, #1
    7d50:	780b      	ldrb	r3, [r1, #0]
    7d52:	4690      	mov	r8, r2
    7d54:	202b      	movs	r0, #43	; 0x2b
    7d56:	e7c9      	b.n	7cec <_svfprintf_r+0xc8>
    7d58:	1c4b      	adds	r3, r1, #1
    7d5a:	469b      	mov	fp, r3
    7d5c:	780b      	ldrb	r3, [r1, #0]
    7d5e:	2b2a      	cmp	r3, #42	; 0x2a
    7d60:	d101      	bne.n	7d66 <_svfprintf_r+0x142>
    7d62:	f001 fa1b 	bl	919c <_svfprintf_r+0x1578>
    7d66:	001a      	movs	r2, r3
    7d68:	2100      	movs	r1, #0
    7d6a:	3a30      	subs	r2, #48	; 0x30
    7d6c:	468a      	mov	sl, r1
    7d6e:	4659      	mov	r1, fp
    7d70:	2a09      	cmp	r2, #9
    7d72:	d8bc      	bhi.n	7cee <_svfprintf_r+0xca>
    7d74:	0003      	movs	r3, r0
    7d76:	0011      	movs	r1, r2
    7d78:	4650      	mov	r0, sl
    7d7a:	465a      	mov	r2, fp
    7d7c:	469a      	mov	sl, r3
    7d7e:	46a3      	mov	fp, r4
    7d80:	0083      	lsls	r3, r0, #2
    7d82:	181b      	adds	r3, r3, r0
    7d84:	7814      	ldrb	r4, [r2, #0]
    7d86:	005b      	lsls	r3, r3, #1
    7d88:	1858      	adds	r0, r3, r1
    7d8a:	0021      	movs	r1, r4
    7d8c:	1c53      	adds	r3, r2, #1
    7d8e:	3930      	subs	r1, #48	; 0x30
    7d90:	001a      	movs	r2, r3
    7d92:	2909      	cmp	r1, #9
    7d94:	d9f4      	bls.n	7d80 <_svfprintf_r+0x15c>
    7d96:	4652      	mov	r2, sl
    7d98:	0019      	movs	r1, r3
    7d9a:	4682      	mov	sl, r0
    7d9c:	0023      	movs	r3, r4
    7d9e:	0010      	movs	r0, r2
    7da0:	465c      	mov	r4, fp
    7da2:	e7a4      	b.n	7cee <_svfprintf_r+0xca>
    7da4:	2380      	movs	r3, #128	; 0x80
    7da6:	431c      	orrs	r4, r3
    7da8:	780b      	ldrb	r3, [r1, #0]
    7daa:	e79f      	b.n	7cec <_svfprintf_r+0xc8>
    7dac:	468b      	mov	fp, r1
    7dae:	4641      	mov	r1, r8
    7db0:	9312      	str	r3, [sp, #72]	; 0x48
    7db2:	2900      	cmp	r1, #0
    7db4:	d001      	beq.n	7dba <_svfprintf_r+0x196>
    7db6:	f001 fa1f 	bl	91f8 <_svfprintf_r+0x15d4>
    7dba:	2310      	movs	r3, #16
    7dbc:	431c      	orrs	r4, r3
    7dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7dc0:	06a3      	lsls	r3, r4, #26
    7dc2:	d501      	bpl.n	7dc8 <_svfprintf_r+0x1a4>
    7dc4:	f000 fe88 	bl	8ad8 <_svfprintf_r+0xeb4>
    7dc8:	06e3      	lsls	r3, r4, #27
    7dca:	d501      	bpl.n	7dd0 <_svfprintf_r+0x1ac>
    7dcc:	f000 fd80 	bl	88d0 <_svfprintf_r+0xcac>
    7dd0:	0663      	lsls	r3, r4, #25
    7dd2:	d401      	bmi.n	7dd8 <_svfprintf_r+0x1b4>
    7dd4:	f000 fd7c 	bl	88d0 <_svfprintf_r+0xcac>
    7dd8:	2100      	movs	r1, #0
    7dda:	5e53      	ldrsh	r3, [r2, r1]
    7ddc:	930c      	str	r3, [sp, #48]	; 0x30
    7dde:	3204      	adds	r2, #4
    7de0:	17db      	asrs	r3, r3, #31
    7de2:	930d      	str	r3, [sp, #52]	; 0x34
    7de4:	920f      	str	r2, [sp, #60]	; 0x3c
    7de6:	d501      	bpl.n	7dec <_svfprintf_r+0x1c8>
    7de8:	f000 fe86 	bl	8af8 <_svfprintf_r+0xed4>
    7dec:	990c      	ldr	r1, [sp, #48]	; 0x30
    7dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7df0:	0008      	movs	r0, r1
    7df2:	ab16      	add	r3, sp, #88	; 0x58
    7df4:	7fdb      	ldrb	r3, [r3, #31]
    7df6:	4310      	orrs	r0, r2
    7df8:	4698      	mov	r8, r3
    7dfa:	0002      	movs	r2, r0
    7dfc:	2301      	movs	r3, #1
    7dfe:	4651      	mov	r1, sl
    7e00:	3101      	adds	r1, #1
    7e02:	d100      	bne.n	7e06 <_svfprintf_r+0x1e2>
    7e04:	e0ff      	b.n	8006 <_svfprintf_r+0x3e2>
    7e06:	2180      	movs	r1, #128	; 0x80
    7e08:	0020      	movs	r0, r4
    7e0a:	4388      	bics	r0, r1
    7e0c:	9008      	str	r0, [sp, #32]
    7e0e:	2a00      	cmp	r2, #0
    7e10:	d000      	beq.n	7e14 <_svfprintf_r+0x1f0>
    7e12:	e0fc      	b.n	800e <_svfprintf_r+0x3ea>
    7e14:	4652      	mov	r2, sl
    7e16:	2a00      	cmp	r2, #0
    7e18:	d001      	beq.n	7e1e <_svfprintf_r+0x1fa>
    7e1a:	f000 fc2c 	bl	8676 <_svfprintf_r+0xa52>
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d001      	beq.n	7e26 <_svfprintf_r+0x202>
    7e22:	f000 fd04 	bl	882e <_svfprintf_r+0xc0a>
    7e26:	2001      	movs	r0, #1
    7e28:	ab32      	add	r3, sp, #200	; 0xc8
    7e2a:	4020      	ands	r0, r4
    7e2c:	900e      	str	r0, [sp, #56]	; 0x38
    7e2e:	9311      	str	r3, [sp, #68]	; 0x44
    7e30:	d008      	beq.n	7e44 <_svfprintf_r+0x220>
    7e32:	2327      	movs	r3, #39	; 0x27
    7e34:	2130      	movs	r1, #48	; 0x30
    7e36:	aa28      	add	r2, sp, #160	; 0xa0
    7e38:	54d1      	strb	r1, [r2, r3]
    7e3a:	aa16      	add	r2, sp, #88	; 0x58
    7e3c:	4694      	mov	ip, r2
    7e3e:	3348      	adds	r3, #72	; 0x48
    7e40:	4463      	add	r3, ip
    7e42:	9311      	str	r3, [sp, #68]	; 0x44
    7e44:	4653      	mov	r3, sl
    7e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7e48:	9307      	str	r3, [sp, #28]
    7e4a:	4592      	cmp	sl, r2
    7e4c:	da00      	bge.n	7e50 <_svfprintf_r+0x22c>
    7e4e:	9207      	str	r2, [sp, #28]
    7e50:	2300      	movs	r3, #0
    7e52:	9313      	str	r3, [sp, #76]	; 0x4c
    7e54:	4643      	mov	r3, r8
    7e56:	2b00      	cmp	r3, #0
    7e58:	d002      	beq.n	7e60 <_svfprintf_r+0x23c>
    7e5a:	9b07      	ldr	r3, [sp, #28]
    7e5c:	3301      	adds	r3, #1
    7e5e:	9307      	str	r3, [sp, #28]
    7e60:	2302      	movs	r3, #2
    7e62:	9a08      	ldr	r2, [sp, #32]
    7e64:	401a      	ands	r2, r3
    7e66:	4691      	mov	r9, r2
    7e68:	d002      	beq.n	7e70 <_svfprintf_r+0x24c>
    7e6a:	9b07      	ldr	r3, [sp, #28]
    7e6c:	3302      	adds	r3, #2
    7e6e:	9307      	str	r3, [sp, #28]
    7e70:	2384      	movs	r3, #132	; 0x84
    7e72:	9a08      	ldr	r2, [sp, #32]
    7e74:	401a      	ands	r2, r3
    7e76:	9210      	str	r2, [sp, #64]	; 0x40
    7e78:	d000      	beq.n	7e7c <_svfprintf_r+0x258>
    7e7a:	e24d      	b.n	8318 <_svfprintf_r+0x6f4>
    7e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e7e:	9a07      	ldr	r2, [sp, #28]
    7e80:	1a9c      	subs	r4, r3, r2
    7e82:	2c00      	cmp	r4, #0
    7e84:	dc00      	bgt.n	7e88 <_svfprintf_r+0x264>
    7e86:	e247      	b.n	8318 <_svfprintf_r+0x6f4>
    7e88:	4974      	ldr	r1, [pc, #464]	; (805c <_svfprintf_r+0x438>)
    7e8a:	68ba      	ldr	r2, [r7, #8]
    7e8c:	687b      	ldr	r3, [r7, #4]
    7e8e:	4688      	mov	r8, r1
    7e90:	2c10      	cmp	r4, #16
    7e92:	dd1f      	ble.n	7ed4 <_svfprintf_r+0x2b0>
    7e94:	0031      	movs	r1, r6
    7e96:	2510      	movs	r5, #16
    7e98:	4646      	mov	r6, r8
    7e9a:	e003      	b.n	7ea4 <_svfprintf_r+0x280>
    7e9c:	3c10      	subs	r4, #16
    7e9e:	3108      	adds	r1, #8
    7ea0:	2c10      	cmp	r4, #16
    7ea2:	dd15      	ble.n	7ed0 <_svfprintf_r+0x2ac>
    7ea4:	3210      	adds	r2, #16
    7ea6:	3301      	adds	r3, #1
    7ea8:	600e      	str	r6, [r1, #0]
    7eaa:	604d      	str	r5, [r1, #4]
    7eac:	60ba      	str	r2, [r7, #8]
    7eae:	607b      	str	r3, [r7, #4]
    7eb0:	2b07      	cmp	r3, #7
    7eb2:	ddf3      	ble.n	7e9c <_svfprintf_r+0x278>
    7eb4:	003a      	movs	r2, r7
    7eb6:	9906      	ldr	r1, [sp, #24]
    7eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7eba:	f003 fdf3 	bl	baa4 <__ssprint_r>
    7ebe:	2800      	cmp	r0, #0
    7ec0:	d000      	beq.n	7ec4 <_svfprintf_r+0x2a0>
    7ec2:	e736      	b.n	7d32 <_svfprintf_r+0x10e>
    7ec4:	3c10      	subs	r4, #16
    7ec6:	68ba      	ldr	r2, [r7, #8]
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	a932      	add	r1, sp, #200	; 0xc8
    7ecc:	2c10      	cmp	r4, #16
    7ece:	dce9      	bgt.n	7ea4 <_svfprintf_r+0x280>
    7ed0:	46b0      	mov	r8, r6
    7ed2:	000e      	movs	r6, r1
    7ed4:	4641      	mov	r1, r8
    7ed6:	6074      	str	r4, [r6, #4]
    7ed8:	3301      	adds	r3, #1
    7eda:	18a4      	adds	r4, r4, r2
    7edc:	6031      	str	r1, [r6, #0]
    7ede:	60bc      	str	r4, [r7, #8]
    7ee0:	607b      	str	r3, [r7, #4]
    7ee2:	2b07      	cmp	r3, #7
    7ee4:	dd01      	ble.n	7eea <_svfprintf_r+0x2c6>
    7ee6:	f000 fca8 	bl	883a <_svfprintf_r+0xc16>
    7eea:	ab16      	add	r3, sp, #88	; 0x58
    7eec:	7fdb      	ldrb	r3, [r3, #31]
    7eee:	3608      	adds	r6, #8
    7ef0:	4698      	mov	r8, r3
    7ef2:	e212      	b.n	831a <_svfprintf_r+0x6f6>
    7ef4:	468b      	mov	fp, r1
    7ef6:	4641      	mov	r1, r8
    7ef8:	9312      	str	r3, [sp, #72]	; 0x48
    7efa:	2900      	cmp	r1, #0
    7efc:	d001      	beq.n	7f02 <_svfprintf_r+0x2de>
    7efe:	f001 f977 	bl	91f0 <_svfprintf_r+0x15cc>
    7f02:	2207      	movs	r2, #7
    7f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f06:	3307      	adds	r3, #7
    7f08:	4393      	bics	r3, r2
    7f0a:	3201      	adds	r2, #1
    7f0c:	4694      	mov	ip, r2
    7f0e:	449c      	add	ip, r3
    7f10:	4662      	mov	r2, ip
    7f12:	920f      	str	r2, [sp, #60]	; 0x3c
    7f14:	681a      	ldr	r2, [r3, #0]
    7f16:	9216      	str	r2, [sp, #88]	; 0x58
    7f18:	685b      	ldr	r3, [r3, #4]
    7f1a:	2201      	movs	r2, #1
    7f1c:	9315      	str	r3, [sp, #84]	; 0x54
    7f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7f20:	9d16      	ldr	r5, [sp, #88]	; 0x58
    7f22:	005b      	lsls	r3, r3, #1
    7f24:	085b      	lsrs	r3, r3, #1
    7f26:	4698      	mov	r8, r3
    7f28:	4252      	negs	r2, r2
    7f2a:	4b4d      	ldr	r3, [pc, #308]	; (8060 <_svfprintf_r+0x43c>)
    7f2c:	0028      	movs	r0, r5
    7f2e:	4641      	mov	r1, r8
    7f30:	f004 fbd4 	bl	c6dc <__aeabi_dcmpun>
    7f34:	2800      	cmp	r0, #0
    7f36:	d001      	beq.n	7f3c <_svfprintf_r+0x318>
    7f38:	f000 fdfd 	bl	8b36 <_svfprintf_r+0xf12>
    7f3c:	2201      	movs	r2, #1
    7f3e:	4b48      	ldr	r3, [pc, #288]	; (8060 <_svfprintf_r+0x43c>)
    7f40:	4252      	negs	r2, r2
    7f42:	0028      	movs	r0, r5
    7f44:	4641      	mov	r1, r8
    7f46:	f7ff fb27 	bl	7598 <__aeabi_dcmple>
    7f4a:	2800      	cmp	r0, #0
    7f4c:	d001      	beq.n	7f52 <_svfprintf_r+0x32e>
    7f4e:	f000 fdf2 	bl	8b36 <_svfprintf_r+0xf12>
    7f52:	2200      	movs	r2, #0
    7f54:	2300      	movs	r3, #0
    7f56:	9816      	ldr	r0, [sp, #88]	; 0x58
    7f58:	9915      	ldr	r1, [sp, #84]	; 0x54
    7f5a:	f7ff fb13 	bl	7584 <__aeabi_dcmplt>
    7f5e:	2800      	cmp	r0, #0
    7f60:	d001      	beq.n	7f66 <_svfprintf_r+0x342>
    7f62:	f001 f822 	bl	8faa <_svfprintf_r+0x1386>
    7f66:	ab16      	add	r3, sp, #88	; 0x58
    7f68:	7fdb      	ldrb	r3, [r3, #31]
    7f6a:	4698      	mov	r8, r3
    7f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7f6e:	2b47      	cmp	r3, #71	; 0x47
    7f70:	dd01      	ble.n	7f76 <_svfprintf_r+0x352>
    7f72:	f000 fec7 	bl	8d04 <_svfprintf_r+0x10e0>
    7f76:	4b3b      	ldr	r3, [pc, #236]	; (8064 <_svfprintf_r+0x440>)
    7f78:	9311      	str	r3, [sp, #68]	; 0x44
    7f7a:	2380      	movs	r3, #128	; 0x80
    7f7c:	439c      	bics	r4, r3
    7f7e:	3b7d      	subs	r3, #125	; 0x7d
    7f80:	9307      	str	r3, [sp, #28]
    7f82:	930e      	str	r3, [sp, #56]	; 0x38
    7f84:	2300      	movs	r3, #0
    7f86:	9408      	str	r4, [sp, #32]
    7f88:	469a      	mov	sl, r3
    7f8a:	9313      	str	r3, [sp, #76]	; 0x4c
    7f8c:	e762      	b.n	7e54 <_svfprintf_r+0x230>
    7f8e:	2200      	movs	r2, #0
    7f90:	3b30      	subs	r3, #48	; 0x30
    7f92:	0015      	movs	r5, r2
    7f94:	001a      	movs	r2, r3
    7f96:	0003      	movs	r3, r0
    7f98:	9407      	str	r4, [sp, #28]
    7f9a:	0008      	movs	r0, r1
    7f9c:	002c      	movs	r4, r5
    7f9e:	469b      	mov	fp, r3
    7fa0:	00a3      	lsls	r3, r4, #2
    7fa2:	191c      	adds	r4, r3, r4
    7fa4:	7803      	ldrb	r3, [r0, #0]
    7fa6:	0064      	lsls	r4, r4, #1
    7fa8:	1914      	adds	r4, r2, r4
    7faa:	001a      	movs	r2, r3
    7fac:	3101      	adds	r1, #1
    7fae:	3a30      	subs	r2, #48	; 0x30
    7fb0:	0008      	movs	r0, r1
    7fb2:	2a09      	cmp	r2, #9
    7fb4:	d9f4      	bls.n	7fa0 <_svfprintf_r+0x37c>
    7fb6:	940b      	str	r4, [sp, #44]	; 0x2c
    7fb8:	4658      	mov	r0, fp
    7fba:	9c07      	ldr	r4, [sp, #28]
    7fbc:	e697      	b.n	7cee <_svfprintf_r+0xca>
    7fbe:	2308      	movs	r3, #8
    7fc0:	431c      	orrs	r4, r3
    7fc2:	780b      	ldrb	r3, [r1, #0]
    7fc4:	e692      	b.n	7cec <_svfprintf_r+0xc8>
    7fc6:	9312      	str	r3, [sp, #72]	; 0x48
    7fc8:	2310      	movs	r3, #16
    7fca:	431c      	orrs	r4, r3
    7fcc:	468b      	mov	fp, r1
    7fce:	06a3      	lsls	r3, r4, #26
    7fd0:	d500      	bpl.n	7fd4 <_svfprintf_r+0x3b0>
    7fd2:	e17b      	b.n	82cc <_svfprintf_r+0x6a8>
    7fd4:	06e3      	lsls	r3, r4, #27
    7fd6:	d501      	bpl.n	7fdc <_svfprintf_r+0x3b8>
    7fd8:	f000 fc7e 	bl	88d8 <_svfprintf_r+0xcb4>
    7fdc:	0663      	lsls	r3, r4, #25
    7fde:	d401      	bmi.n	7fe4 <_svfprintf_r+0x3c0>
    7fe0:	f000 fc7a 	bl	88d8 <_svfprintf_r+0xcb4>
    7fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fe6:	881a      	ldrh	r2, [r3, #0]
    7fe8:	920c      	str	r2, [sp, #48]	; 0x30
    7fea:	2200      	movs	r2, #0
    7fec:	3304      	adds	r3, #4
    7fee:	930f      	str	r3, [sp, #60]	; 0x3c
    7ff0:	2300      	movs	r3, #0
    7ff2:	920d      	str	r2, [sp, #52]	; 0x34
    7ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7ff6:	2100      	movs	r1, #0
    7ff8:	a816      	add	r0, sp, #88	; 0x58
    7ffa:	77c1      	strb	r1, [r0, #31]
    7ffc:	4688      	mov	r8, r1
    7ffe:	4651      	mov	r1, sl
    8000:	3101      	adds	r1, #1
    8002:	d000      	beq.n	8006 <_svfprintf_r+0x3e2>
    8004:	e6ff      	b.n	7e06 <_svfprintf_r+0x1e2>
    8006:	2a00      	cmp	r2, #0
    8008:	d100      	bne.n	800c <_svfprintf_r+0x3e8>
    800a:	e335      	b.n	8678 <_svfprintf_r+0xa54>
    800c:	9408      	str	r4, [sp, #32]
    800e:	2b01      	cmp	r3, #1
    8010:	d100      	bne.n	8014 <_svfprintf_r+0x3f0>
    8012:	e3e5      	b.n	87e0 <_svfprintf_r+0xbbc>
    8014:	2b02      	cmp	r3, #2
    8016:	d000      	beq.n	801a <_svfprintf_r+0x3f6>
    8018:	e362      	b.n	86e0 <_svfprintf_r+0xabc>
    801a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    801c:	200f      	movs	r0, #15
    801e:	46a1      	mov	r9, r4
    8020:	46b4      	mov	ip, r6
    8022:	ab32      	add	r3, sp, #200	; 0xc8
    8024:	0019      	movs	r1, r3
    8026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    802a:	0004      	movs	r4, r0
    802c:	464d      	mov	r5, r9
    802e:	4014      	ands	r4, r2
    8030:	5d2c      	ldrb	r4, [r5, r4]
    8032:	071e      	lsls	r6, r3, #28
    8034:	0915      	lsrs	r5, r2, #4
    8036:	3901      	subs	r1, #1
    8038:	432e      	orrs	r6, r5
    803a:	700c      	strb	r4, [r1, #0]
    803c:	091c      	lsrs	r4, r3, #4
    803e:	0023      	movs	r3, r4
    8040:	0034      	movs	r4, r6
    8042:	0032      	movs	r2, r6
    8044:	431c      	orrs	r4, r3
    8046:	d1f0      	bne.n	802a <_svfprintf_r+0x406>
    8048:	920c      	str	r2, [sp, #48]	; 0x30
    804a:	930d      	str	r3, [sp, #52]	; 0x34
    804c:	ab32      	add	r3, sp, #200	; 0xc8
    804e:	1a5b      	subs	r3, r3, r1
    8050:	9111      	str	r1, [sp, #68]	; 0x44
    8052:	4666      	mov	r6, ip
    8054:	930e      	str	r3, [sp, #56]	; 0x38
    8056:	e6f5      	b.n	7e44 <_svfprintf_r+0x220>
    8058:	0000cd10 	.word	0x0000cd10
    805c:	0000ceb8 	.word	0x0000ceb8
    8060:	7fefffff 	.word	0x7fefffff
    8064:	0000ce74 	.word	0x0000ce74
    8068:	9312      	str	r3, [sp, #72]	; 0x48
    806a:	2310      	movs	r3, #16
    806c:	431c      	orrs	r4, r3
    806e:	468b      	mov	fp, r1
    8070:	06a3      	lsls	r3, r4, #26
    8072:	d500      	bpl.n	8076 <_svfprintf_r+0x452>
    8074:	e111      	b.n	829a <_svfprintf_r+0x676>
    8076:	06e3      	lsls	r3, r4, #27
    8078:	d501      	bpl.n	807e <_svfprintf_r+0x45a>
    807a:	f000 fc31 	bl	88e0 <_svfprintf_r+0xcbc>
    807e:	0663      	lsls	r3, r4, #25
    8080:	d401      	bmi.n	8086 <_svfprintf_r+0x462>
    8082:	f000 fc2d 	bl	88e0 <_svfprintf_r+0xcbc>
    8086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8088:	881a      	ldrh	r2, [r3, #0]
    808a:	920c      	str	r2, [sp, #48]	; 0x30
    808c:	2200      	movs	r2, #0
    808e:	3304      	adds	r3, #4
    8090:	920d      	str	r2, [sp, #52]	; 0x34
    8092:	930f      	str	r3, [sp, #60]	; 0x3c
    8094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8096:	2301      	movs	r3, #1
    8098:	e7ad      	b.n	7ff6 <_svfprintf_r+0x3d2>
    809a:	468b      	mov	fp, r1
    809c:	4641      	mov	r1, r8
    809e:	9312      	str	r3, [sp, #72]	; 0x48
    80a0:	2900      	cmp	r1, #0
    80a2:	d001      	beq.n	80a8 <_svfprintf_r+0x484>
    80a4:	f001 f890 	bl	91c8 <_svfprintf_r+0x15a4>
    80a8:	4bb8      	ldr	r3, [pc, #736]	; (838c <_svfprintf_r+0x768>)
    80aa:	9317      	str	r3, [sp, #92]	; 0x5c
    80ac:	06a3      	lsls	r3, r4, #26
    80ae:	d500      	bpl.n	80b2 <_svfprintf_r+0x48e>
    80b0:	e0ab      	b.n	820a <_svfprintf_r+0x5e6>
    80b2:	06e3      	lsls	r3, r4, #27
    80b4:	d501      	bpl.n	80ba <_svfprintf_r+0x496>
    80b6:	f000 fc07 	bl	88c8 <_svfprintf_r+0xca4>
    80ba:	0663      	lsls	r3, r4, #25
    80bc:	d401      	bmi.n	80c2 <_svfprintf_r+0x49e>
    80be:	f000 fc03 	bl	88c8 <_svfprintf_r+0xca4>
    80c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80c4:	881a      	ldrh	r2, [r3, #0]
    80c6:	920c      	str	r2, [sp, #48]	; 0x30
    80c8:	2200      	movs	r2, #0
    80ca:	3304      	adds	r3, #4
    80cc:	920d      	str	r2, [sp, #52]	; 0x34
    80ce:	930f      	str	r3, [sp, #60]	; 0x3c
    80d0:	07e3      	lsls	r3, r4, #31
    80d2:	d400      	bmi.n	80d6 <_svfprintf_r+0x4b2>
    80d4:	e0a9      	b.n	822a <_svfprintf_r+0x606>
    80d6:	990c      	ldr	r1, [sp, #48]	; 0x30
    80d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    80da:	000b      	movs	r3, r1
    80dc:	4313      	orrs	r3, r2
    80de:	001a      	movs	r2, r3
    80e0:	2302      	movs	r3, #2
    80e2:	2a00      	cmp	r2, #0
    80e4:	d100      	bne.n	80e8 <_svfprintf_r+0x4c4>
    80e6:	e786      	b.n	7ff6 <_svfprintf_r+0x3d2>
    80e8:	2030      	movs	r0, #48	; 0x30
    80ea:	a91e      	add	r1, sp, #120	; 0x78
    80ec:	7008      	strb	r0, [r1, #0]
    80ee:	2548      	movs	r5, #72	; 0x48
    80f0:	4668      	mov	r0, sp
    80f2:	1940      	adds	r0, r0, r5
    80f4:	7800      	ldrb	r0, [r0, #0]
    80f6:	431c      	orrs	r4, r3
    80f8:	7048      	strb	r0, [r1, #1]
    80fa:	e77c      	b.n	7ff6 <_svfprintf_r+0x3d2>
    80fc:	468b      	mov	fp, r1
    80fe:	4641      	mov	r1, r8
    8100:	2900      	cmp	r1, #0
    8102:	d001      	beq.n	8108 <_svfprintf_r+0x4e4>
    8104:	f001 f883 	bl	920e <_svfprintf_r+0x15ea>
    8108:	06a3      	lsls	r3, r4, #26
    810a:	d501      	bpl.n	8110 <_svfprintf_r+0x4ec>
    810c:	f000 fde9 	bl	8ce2 <_svfprintf_r+0x10be>
    8110:	06e3      	lsls	r3, r4, #27
    8112:	d501      	bpl.n	8118 <_svfprintf_r+0x4f4>
    8114:	f000 fd9b 	bl	8c4e <_svfprintf_r+0x102a>
    8118:	0663      	lsls	r3, r4, #25
    811a:	d401      	bmi.n	8120 <_svfprintf_r+0x4fc>
    811c:	f000 fd97 	bl	8c4e <_svfprintf_r+0x102a>
    8120:	4669      	mov	r1, sp
    8122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8124:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    8126:	681a      	ldr	r2, [r3, #0]
    8128:	3304      	adds	r3, #4
    812a:	9207      	str	r2, [sp, #28]
    812c:	8011      	strh	r1, [r2, #0]
    812e:	930f      	str	r3, [sp, #60]	; 0x3c
    8130:	e5a3      	b.n	7c7a <_svfprintf_r+0x56>
    8132:	464b      	mov	r3, r9
    8134:	431c      	orrs	r4, r3
    8136:	780b      	ldrb	r3, [r1, #0]
    8138:	e5d8      	b.n	7cec <_svfprintf_r+0xc8>
    813a:	9312      	str	r3, [sp, #72]	; 0x48
    813c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    813e:	468b      	mov	fp, r1
    8140:	1d1d      	adds	r5, r3, #4
    8142:	681b      	ldr	r3, [r3, #0]
    8144:	a916      	add	r1, sp, #88	; 0x58
    8146:	001a      	movs	r2, r3
    8148:	9311      	str	r3, [sp, #68]	; 0x44
    814a:	2300      	movs	r3, #0
    814c:	77cb      	strb	r3, [r1, #31]
    814e:	2a00      	cmp	r2, #0
    8150:	d101      	bne.n	8156 <_svfprintf_r+0x532>
    8152:	f000 fefb 	bl	8f4c <_svfprintf_r+0x1328>
    8156:	4653      	mov	r3, sl
    8158:	3301      	adds	r3, #1
    815a:	d101      	bne.n	8160 <_svfprintf_r+0x53c>
    815c:	f000 fe38 	bl	8dd0 <_svfprintf_r+0x11ac>
    8160:	4652      	mov	r2, sl
    8162:	2100      	movs	r1, #0
    8164:	9811      	ldr	r0, [sp, #68]	; 0x44
    8166:	f002 fe97 	bl	ae98 <memchr>
    816a:	2800      	cmp	r0, #0
    816c:	d101      	bne.n	8172 <_svfprintf_r+0x54e>
    816e:	f000 ff54 	bl	901a <_svfprintf_r+0x13f6>
    8172:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8174:	1ac3      	subs	r3, r0, r3
    8176:	001a      	movs	r2, r3
    8178:	930e      	str	r3, [sp, #56]	; 0x38
    817a:	43db      	mvns	r3, r3
    817c:	17db      	asrs	r3, r3, #31
    817e:	401a      	ands	r2, r3
    8180:	ab16      	add	r3, sp, #88	; 0x58
    8182:	7fdb      	ldrb	r3, [r3, #31]
    8184:	9207      	str	r2, [sp, #28]
    8186:	4698      	mov	r8, r3
    8188:	2300      	movs	r3, #0
    818a:	950f      	str	r5, [sp, #60]	; 0x3c
    818c:	9408      	str	r4, [sp, #32]
    818e:	469a      	mov	sl, r3
    8190:	9313      	str	r3, [sp, #76]	; 0x4c
    8192:	e65f      	b.n	7e54 <_svfprintf_r+0x230>
    8194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8196:	9312      	str	r3, [sp, #72]	; 0x48
    8198:	6813      	ldr	r3, [r2, #0]
    819a:	ad28      	add	r5, sp, #160	; 0xa0
    819c:	9307      	str	r3, [sp, #28]
    819e:	466b      	mov	r3, sp
    81a0:	7f1b      	ldrb	r3, [r3, #28]
    81a2:	468b      	mov	fp, r1
    81a4:	702b      	strb	r3, [r5, #0]
    81a6:	2300      	movs	r3, #0
    81a8:	a916      	add	r1, sp, #88	; 0x58
    81aa:	77cb      	strb	r3, [r1, #31]
    81ac:	0013      	movs	r3, r2
    81ae:	3304      	adds	r3, #4
    81b0:	930f      	str	r3, [sp, #60]	; 0x3c
    81b2:	2300      	movs	r3, #0
    81b4:	9408      	str	r4, [sp, #32]
    81b6:	4698      	mov	r8, r3
    81b8:	3301      	adds	r3, #1
    81ba:	9307      	str	r3, [sp, #28]
    81bc:	930e      	str	r3, [sp, #56]	; 0x38
    81be:	2300      	movs	r3, #0
    81c0:	9511      	str	r5, [sp, #68]	; 0x44
    81c2:	469a      	mov	sl, r3
    81c4:	9313      	str	r3, [sp, #76]	; 0x4c
    81c6:	e64b      	b.n	7e60 <_svfprintf_r+0x23c>
    81c8:	468b      	mov	fp, r1
    81ca:	4641      	mov	r1, r8
    81cc:	9312      	str	r3, [sp, #72]	; 0x48
    81ce:	2900      	cmp	r1, #0
    81d0:	d100      	bne.n	81d4 <_svfprintf_r+0x5b0>
    81d2:	e5f4      	b.n	7dbe <_svfprintf_r+0x19a>
    81d4:	ab16      	add	r3, sp, #88	; 0x58
    81d6:	77d8      	strb	r0, [r3, #31]
    81d8:	e5f1      	b.n	7dbe <_svfprintf_r+0x19a>
    81da:	4663      	mov	r3, ip
    81dc:	431c      	orrs	r4, r3
    81de:	780b      	ldrb	r3, [r1, #0]
    81e0:	e584      	b.n	7cec <_svfprintf_r+0xc8>
    81e2:	780b      	ldrb	r3, [r1, #0]
    81e4:	2b6c      	cmp	r3, #108	; 0x6c
    81e6:	d101      	bne.n	81ec <_svfprintf_r+0x5c8>
    81e8:	f000 fd86 	bl	8cf8 <_svfprintf_r+0x10d4>
    81ec:	2210      	movs	r2, #16
    81ee:	4314      	orrs	r4, r2
    81f0:	e57c      	b.n	7cec <_svfprintf_r+0xc8>
    81f2:	468b      	mov	fp, r1
    81f4:	4641      	mov	r1, r8
    81f6:	9312      	str	r3, [sp, #72]	; 0x48
    81f8:	2900      	cmp	r1, #0
    81fa:	d001      	beq.n	8200 <_svfprintf_r+0x5dc>
    81fc:	f000 ffe8 	bl	91d0 <_svfprintf_r+0x15ac>
    8200:	4b63      	ldr	r3, [pc, #396]	; (8390 <_svfprintf_r+0x76c>)
    8202:	9317      	str	r3, [sp, #92]	; 0x5c
    8204:	06a3      	lsls	r3, r4, #26
    8206:	d400      	bmi.n	820a <_svfprintf_r+0x5e6>
    8208:	e753      	b.n	80b2 <_svfprintf_r+0x48e>
    820a:	2207      	movs	r2, #7
    820c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    820e:	3307      	adds	r3, #7
    8210:	4393      	bics	r3, r2
    8212:	3201      	adds	r2, #1
    8214:	4694      	mov	ip, r2
    8216:	449c      	add	ip, r3
    8218:	4662      	mov	r2, ip
    821a:	920f      	str	r2, [sp, #60]	; 0x3c
    821c:	681a      	ldr	r2, [r3, #0]
    821e:	685b      	ldr	r3, [r3, #4]
    8220:	920c      	str	r2, [sp, #48]	; 0x30
    8222:	930d      	str	r3, [sp, #52]	; 0x34
    8224:	07e3      	lsls	r3, r4, #31
    8226:	d500      	bpl.n	822a <_svfprintf_r+0x606>
    8228:	e755      	b.n	80d6 <_svfprintf_r+0x4b2>
    822a:	990c      	ldr	r1, [sp, #48]	; 0x30
    822c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    822e:	0008      	movs	r0, r1
    8230:	4310      	orrs	r0, r2
    8232:	2302      	movs	r3, #2
    8234:	0002      	movs	r2, r0
    8236:	e6de      	b.n	7ff6 <_svfprintf_r+0x3d2>
    8238:	468b      	mov	fp, r1
    823a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    823c:	2230      	movs	r2, #48	; 0x30
    823e:	680b      	ldr	r3, [r1, #0]
    8240:	930c      	str	r3, [sp, #48]	; 0x30
    8242:	2300      	movs	r3, #0
    8244:	930d      	str	r3, [sp, #52]	; 0x34
    8246:	3302      	adds	r3, #2
    8248:	431c      	orrs	r4, r3
    824a:	ab1e      	add	r3, sp, #120	; 0x78
    824c:	701a      	strb	r2, [r3, #0]
    824e:	3248      	adds	r2, #72	; 0x48
    8250:	705a      	strb	r2, [r3, #1]
    8252:	000b      	movs	r3, r1
    8254:	3304      	adds	r3, #4
    8256:	930f      	str	r3, [sp, #60]	; 0x3c
    8258:	4b4d      	ldr	r3, [pc, #308]	; (8390 <_svfprintf_r+0x76c>)
    825a:	9212      	str	r2, [sp, #72]	; 0x48
    825c:	9317      	str	r3, [sp, #92]	; 0x5c
    825e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8260:	2302      	movs	r3, #2
    8262:	e6c8      	b.n	7ff6 <_svfprintf_r+0x3d2>
    8264:	2301      	movs	r3, #1
    8266:	431c      	orrs	r4, r3
    8268:	780b      	ldrb	r3, [r1, #0]
    826a:	e53f      	b.n	7cec <_svfprintf_r+0xc8>
    826c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    826e:	1d1a      	adds	r2, r3, #4
    8270:	681b      	ldr	r3, [r3, #0]
    8272:	930b      	str	r3, [sp, #44]	; 0x2c
    8274:	2b00      	cmp	r3, #0
    8276:	da00      	bge.n	827a <_svfprintf_r+0x656>
    8278:	e542      	b.n	7d00 <_svfprintf_r+0xdc>
    827a:	780b      	ldrb	r3, [r1, #0]
    827c:	920f      	str	r2, [sp, #60]	; 0x3c
    827e:	e535      	b.n	7cec <_svfprintf_r+0xc8>
    8280:	780b      	ldrb	r3, [r1, #0]
    8282:	2800      	cmp	r0, #0
    8284:	d000      	beq.n	8288 <_svfprintf_r+0x664>
    8286:	e531      	b.n	7cec <_svfprintf_r+0xc8>
    8288:	2201      	movs	r2, #1
    828a:	3020      	adds	r0, #32
    828c:	4690      	mov	r8, r2
    828e:	e52d      	b.n	7cec <_svfprintf_r+0xc8>
    8290:	468b      	mov	fp, r1
    8292:	9312      	str	r3, [sp, #72]	; 0x48
    8294:	06a3      	lsls	r3, r4, #26
    8296:	d400      	bmi.n	829a <_svfprintf_r+0x676>
    8298:	e6ed      	b.n	8076 <_svfprintf_r+0x452>
    829a:	2207      	movs	r2, #7
    829c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    829e:	3307      	adds	r3, #7
    82a0:	4393      	bics	r3, r2
    82a2:	3201      	adds	r2, #1
    82a4:	4694      	mov	ip, r2
    82a6:	449c      	add	ip, r3
    82a8:	4662      	mov	r2, ip
    82aa:	920f      	str	r2, [sp, #60]	; 0x3c
    82ac:	681a      	ldr	r2, [r3, #0]
    82ae:	685b      	ldr	r3, [r3, #4]
    82b0:	0011      	movs	r1, r2
    82b2:	001a      	movs	r2, r3
    82b4:	0008      	movs	r0, r1
    82b6:	4310      	orrs	r0, r2
    82b8:	910c      	str	r1, [sp, #48]	; 0x30
    82ba:	920d      	str	r2, [sp, #52]	; 0x34
    82bc:	2301      	movs	r3, #1
    82be:	0002      	movs	r2, r0
    82c0:	e699      	b.n	7ff6 <_svfprintf_r+0x3d2>
    82c2:	468b      	mov	fp, r1
    82c4:	9312      	str	r3, [sp, #72]	; 0x48
    82c6:	06a3      	lsls	r3, r4, #26
    82c8:	d400      	bmi.n	82cc <_svfprintf_r+0x6a8>
    82ca:	e683      	b.n	7fd4 <_svfprintf_r+0x3b0>
    82cc:	2207      	movs	r2, #7
    82ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82d0:	3307      	adds	r3, #7
    82d2:	4393      	bics	r3, r2
    82d4:	3201      	adds	r2, #1
    82d6:	4694      	mov	ip, r2
    82d8:	449c      	add	ip, r3
    82da:	4662      	mov	r2, ip
    82dc:	920f      	str	r2, [sp, #60]	; 0x3c
    82de:	681a      	ldr	r2, [r3, #0]
    82e0:	685b      	ldr	r3, [r3, #4]
    82e2:	0011      	movs	r1, r2
    82e4:	001a      	movs	r2, r3
    82e6:	0008      	movs	r0, r1
    82e8:	4310      	orrs	r0, r2
    82ea:	910c      	str	r1, [sp, #48]	; 0x30
    82ec:	920d      	str	r2, [sp, #52]	; 0x34
    82ee:	2300      	movs	r3, #0
    82f0:	0002      	movs	r2, r0
    82f2:	e680      	b.n	7ff6 <_svfprintf_r+0x3d2>
    82f4:	468b      	mov	fp, r1
    82f6:	4641      	mov	r1, r8
    82f8:	9312      	str	r3, [sp, #72]	; 0x48
    82fa:	2900      	cmp	r1, #0
    82fc:	d001      	beq.n	8302 <_svfprintf_r+0x6de>
    82fe:	f000 ff7f 	bl	9200 <_svfprintf_r+0x15dc>
    8302:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8304:	2b00      	cmp	r3, #0
    8306:	d100      	bne.n	830a <_svfprintf_r+0x6e6>
    8308:	e50b      	b.n	7d22 <_svfprintf_r+0xfe>
    830a:	ad28      	add	r5, sp, #160	; 0xa0
    830c:	702b      	strb	r3, [r5, #0]
    830e:	2300      	movs	r3, #0
    8310:	aa16      	add	r2, sp, #88	; 0x58
    8312:	77d3      	strb	r3, [r2, #31]
    8314:	9408      	str	r4, [sp, #32]
    8316:	e74e      	b.n	81b6 <_svfprintf_r+0x592>
    8318:	68bc      	ldr	r4, [r7, #8]
    831a:	4643      	mov	r3, r8
    831c:	2b00      	cmp	r3, #0
    831e:	d00f      	beq.n	8340 <_svfprintf_r+0x71c>
    8320:	aa16      	add	r2, sp, #88	; 0x58
    8322:	231f      	movs	r3, #31
    8324:	4694      	mov	ip, r2
    8326:	4463      	add	r3, ip
    8328:	6033      	str	r3, [r6, #0]
    832a:	2301      	movs	r3, #1
    832c:	6073      	str	r3, [r6, #4]
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	3401      	adds	r4, #1
    8332:	3301      	adds	r3, #1
    8334:	60bc      	str	r4, [r7, #8]
    8336:	607b      	str	r3, [r7, #4]
    8338:	2b07      	cmp	r3, #7
    833a:	dd00      	ble.n	833e <_svfprintf_r+0x71a>
    833c:	e1b3      	b.n	86a6 <_svfprintf_r+0xa82>
    833e:	3608      	adds	r6, #8
    8340:	464b      	mov	r3, r9
    8342:	2b00      	cmp	r3, #0
    8344:	d00c      	beq.n	8360 <_svfprintf_r+0x73c>
    8346:	ab1e      	add	r3, sp, #120	; 0x78
    8348:	6033      	str	r3, [r6, #0]
    834a:	2302      	movs	r3, #2
    834c:	6073      	str	r3, [r6, #4]
    834e:	687b      	ldr	r3, [r7, #4]
    8350:	3402      	adds	r4, #2
    8352:	3301      	adds	r3, #1
    8354:	60bc      	str	r4, [r7, #8]
    8356:	607b      	str	r3, [r7, #4]
    8358:	2b07      	cmp	r3, #7
    835a:	dd00      	ble.n	835e <_svfprintf_r+0x73a>
    835c:	e1af      	b.n	86be <_svfprintf_r+0xa9a>
    835e:	3608      	adds	r6, #8
    8360:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8362:	2b80      	cmp	r3, #128	; 0x80
    8364:	d100      	bne.n	8368 <_svfprintf_r+0x744>
    8366:	e120      	b.n	85aa <_svfprintf_r+0x986>
    8368:	4653      	mov	r3, sl
    836a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    836c:	1a9d      	subs	r5, r3, r2
    836e:	2d00      	cmp	r5, #0
    8370:	dd3c      	ble.n	83ec <_svfprintf_r+0x7c8>
    8372:	4a08      	ldr	r2, [pc, #32]	; (8394 <_svfprintf_r+0x770>)
    8374:	687b      	ldr	r3, [r7, #4]
    8376:	4691      	mov	r9, r2
    8378:	2d10      	cmp	r5, #16
    837a:	dd2c      	ble.n	83d6 <_svfprintf_r+0x7b2>
    837c:	2210      	movs	r2, #16
    837e:	0021      	movs	r1, r4
    8380:	4692      	mov	sl, r2
    8382:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8384:	0032      	movs	r2, r6
    8386:	002e      	movs	r6, r5
    8388:	464d      	mov	r5, r9
    838a:	e009      	b.n	83a0 <_svfprintf_r+0x77c>
    838c:	0000ce84 	.word	0x0000ce84
    8390:	0000ce98 	.word	0x0000ce98
    8394:	0000cec8 	.word	0x0000cec8
    8398:	3e10      	subs	r6, #16
    839a:	3208      	adds	r2, #8
    839c:	2e10      	cmp	r6, #16
    839e:	dd16      	ble.n	83ce <_svfprintf_r+0x7aa>
    83a0:	4650      	mov	r0, sl
    83a2:	3110      	adds	r1, #16
    83a4:	3301      	adds	r3, #1
    83a6:	6015      	str	r5, [r2, #0]
    83a8:	6050      	str	r0, [r2, #4]
    83aa:	60b9      	str	r1, [r7, #8]
    83ac:	607b      	str	r3, [r7, #4]
    83ae:	2b07      	cmp	r3, #7
    83b0:	ddf2      	ble.n	8398 <_svfprintf_r+0x774>
    83b2:	003a      	movs	r2, r7
    83b4:	9906      	ldr	r1, [sp, #24]
    83b6:	0020      	movs	r0, r4
    83b8:	f003 fb74 	bl	baa4 <__ssprint_r>
    83bc:	2800      	cmp	r0, #0
    83be:	d000      	beq.n	83c2 <_svfprintf_r+0x79e>
    83c0:	e4b7      	b.n	7d32 <_svfprintf_r+0x10e>
    83c2:	3e10      	subs	r6, #16
    83c4:	68b9      	ldr	r1, [r7, #8]
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	aa32      	add	r2, sp, #200	; 0xc8
    83ca:	2e10      	cmp	r6, #16
    83cc:	dce8      	bgt.n	83a0 <_svfprintf_r+0x77c>
    83ce:	46a9      	mov	r9, r5
    83d0:	000c      	movs	r4, r1
    83d2:	0035      	movs	r5, r6
    83d4:	0016      	movs	r6, r2
    83d6:	464a      	mov	r2, r9
    83d8:	1964      	adds	r4, r4, r5
    83da:	3301      	adds	r3, #1
    83dc:	6032      	str	r2, [r6, #0]
    83de:	6075      	str	r5, [r6, #4]
    83e0:	60bc      	str	r4, [r7, #8]
    83e2:	607b      	str	r3, [r7, #4]
    83e4:	2b07      	cmp	r3, #7
    83e6:	dd00      	ble.n	83ea <_svfprintf_r+0x7c6>
    83e8:	e151      	b.n	868e <_svfprintf_r+0xa6a>
    83ea:	3608      	adds	r6, #8
    83ec:	9b08      	ldr	r3, [sp, #32]
    83ee:	05db      	lsls	r3, r3, #23
    83f0:	d500      	bpl.n	83f4 <_svfprintf_r+0x7d0>
    83f2:	e0b6      	b.n	8562 <_svfprintf_r+0x93e>
    83f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    83f6:	6033      	str	r3, [r6, #0]
    83f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    83fa:	469c      	mov	ip, r3
    83fc:	6073      	str	r3, [r6, #4]
    83fe:	687b      	ldr	r3, [r7, #4]
    8400:	4464      	add	r4, ip
    8402:	3301      	adds	r3, #1
    8404:	60bc      	str	r4, [r7, #8]
    8406:	607b      	str	r3, [r7, #4]
    8408:	2b07      	cmp	r3, #7
    840a:	dd00      	ble.n	840e <_svfprintf_r+0x7ea>
    840c:	e09d      	b.n	854a <_svfprintf_r+0x926>
    840e:	3608      	adds	r6, #8
    8410:	9b08      	ldr	r3, [sp, #32]
    8412:	075b      	lsls	r3, r3, #29
    8414:	d541      	bpl.n	849a <_svfprintf_r+0x876>
    8416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8418:	9a07      	ldr	r2, [sp, #28]
    841a:	1a9d      	subs	r5, r3, r2
    841c:	2d00      	cmp	r5, #0
    841e:	dd3c      	ble.n	849a <_svfprintf_r+0x876>
    8420:	4ac4      	ldr	r2, [pc, #784]	; (8734 <_svfprintf_r+0xb10>)
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	4690      	mov	r8, r2
    8426:	2d10      	cmp	r5, #16
    8428:	dd26      	ble.n	8478 <_svfprintf_r+0x854>
    842a:	2210      	movs	r2, #16
    842c:	0021      	movs	r1, r4
    842e:	4691      	mov	r9, r2
    8430:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8432:	0032      	movs	r2, r6
    8434:	002e      	movs	r6, r5
    8436:	9d06      	ldr	r5, [sp, #24]
    8438:	e003      	b.n	8442 <_svfprintf_r+0x81e>
    843a:	3e10      	subs	r6, #16
    843c:	3208      	adds	r2, #8
    843e:	2e10      	cmp	r6, #16
    8440:	dd17      	ble.n	8472 <_svfprintf_r+0x84e>
    8442:	48bc      	ldr	r0, [pc, #752]	; (8734 <_svfprintf_r+0xb10>)
    8444:	3110      	adds	r1, #16
    8446:	6010      	str	r0, [r2, #0]
    8448:	4648      	mov	r0, r9
    844a:	3301      	adds	r3, #1
    844c:	6050      	str	r0, [r2, #4]
    844e:	60b9      	str	r1, [r7, #8]
    8450:	607b      	str	r3, [r7, #4]
    8452:	2b07      	cmp	r3, #7
    8454:	ddf1      	ble.n	843a <_svfprintf_r+0x816>
    8456:	003a      	movs	r2, r7
    8458:	0029      	movs	r1, r5
    845a:	0020      	movs	r0, r4
    845c:	f003 fb22 	bl	baa4 <__ssprint_r>
    8460:	2800      	cmp	r0, #0
    8462:	d000      	beq.n	8466 <_svfprintf_r+0x842>
    8464:	e465      	b.n	7d32 <_svfprintf_r+0x10e>
    8466:	3e10      	subs	r6, #16
    8468:	68b9      	ldr	r1, [r7, #8]
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	aa32      	add	r2, sp, #200	; 0xc8
    846e:	2e10      	cmp	r6, #16
    8470:	dce7      	bgt.n	8442 <_svfprintf_r+0x81e>
    8472:	0035      	movs	r5, r6
    8474:	000c      	movs	r4, r1
    8476:	0016      	movs	r6, r2
    8478:	4642      	mov	r2, r8
    847a:	1964      	adds	r4, r4, r5
    847c:	3301      	adds	r3, #1
    847e:	c624      	stmia	r6!, {r2, r5}
    8480:	60bc      	str	r4, [r7, #8]
    8482:	607b      	str	r3, [r7, #4]
    8484:	2b07      	cmp	r3, #7
    8486:	dd08      	ble.n	849a <_svfprintf_r+0x876>
    8488:	003a      	movs	r2, r7
    848a:	9906      	ldr	r1, [sp, #24]
    848c:	9809      	ldr	r0, [sp, #36]	; 0x24
    848e:	f003 fb09 	bl	baa4 <__ssprint_r>
    8492:	2800      	cmp	r0, #0
    8494:	d000      	beq.n	8498 <_svfprintf_r+0x874>
    8496:	e44c      	b.n	7d32 <_svfprintf_r+0x10e>
    8498:	68bc      	ldr	r4, [r7, #8]
    849a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    849c:	9907      	ldr	r1, [sp, #28]
    849e:	428b      	cmp	r3, r1
    84a0:	da00      	bge.n	84a4 <_svfprintf_r+0x880>
    84a2:	000b      	movs	r3, r1
    84a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    84a6:	4694      	mov	ip, r2
    84a8:	449c      	add	ip, r3
    84aa:	4663      	mov	r3, ip
    84ac:	930a      	str	r3, [sp, #40]	; 0x28
    84ae:	2c00      	cmp	r4, #0
    84b0:	d000      	beq.n	84b4 <_svfprintf_r+0x890>
    84b2:	e0d6      	b.n	8662 <_svfprintf_r+0xa3e>
    84b4:	2300      	movs	r3, #0
    84b6:	ae32      	add	r6, sp, #200	; 0xc8
    84b8:	607b      	str	r3, [r7, #4]
    84ba:	f7ff fbde 	bl	7c7a <_svfprintf_r+0x56>
    84be:	9b14      	ldr	r3, [sp, #80]	; 0x50
    84c0:	2b01      	cmp	r3, #1
    84c2:	dc00      	bgt.n	84c6 <_svfprintf_r+0x8a2>
    84c4:	e0ae      	b.n	8624 <_svfprintf_r+0xa00>
    84c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    84c8:	3401      	adds	r4, #1
    84ca:	6033      	str	r3, [r6, #0]
    84cc:	2301      	movs	r3, #1
    84ce:	6073      	str	r3, [r6, #4]
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	60bc      	str	r4, [r7, #8]
    84d4:	3301      	adds	r3, #1
    84d6:	607b      	str	r3, [r7, #4]
    84d8:	2b07      	cmp	r3, #7
    84da:	dd00      	ble.n	84de <_svfprintf_r+0x8ba>
    84dc:	e2df      	b.n	8a9e <_svfprintf_r+0xe7a>
    84de:	3608      	adds	r6, #8
    84e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
    84e2:	3301      	adds	r3, #1
    84e4:	6032      	str	r2, [r6, #0]
    84e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    84e8:	4698      	mov	r8, r3
    84ea:	4694      	mov	ip, r2
    84ec:	4464      	add	r4, ip
    84ee:	6072      	str	r2, [r6, #4]
    84f0:	60bc      	str	r4, [r7, #8]
    84f2:	607b      	str	r3, [r7, #4]
    84f4:	2b07      	cmp	r3, #7
    84f6:	dd00      	ble.n	84fa <_svfprintf_r+0x8d6>
    84f8:	e2de      	b.n	8ab8 <_svfprintf_r+0xe94>
    84fa:	3608      	adds	r6, #8
    84fc:	2200      	movs	r2, #0
    84fe:	2300      	movs	r3, #0
    8500:	9816      	ldr	r0, [sp, #88]	; 0x58
    8502:	9915      	ldr	r1, [sp, #84]	; 0x54
    8504:	f7ff f838 	bl	7578 <__aeabi_dcmpeq>
    8508:	2800      	cmp	r0, #0
    850a:	d000      	beq.n	850e <_svfprintf_r+0x8ea>
    850c:	e1a4      	b.n	8858 <_svfprintf_r+0xc34>
    850e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    8510:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8512:	3501      	adds	r5, #1
    8514:	3b01      	subs	r3, #1
    8516:	6035      	str	r5, [r6, #0]
    8518:	6073      	str	r3, [r6, #4]
    851a:	18e4      	adds	r4, r4, r3
    851c:	2301      	movs	r3, #1
    851e:	469c      	mov	ip, r3
    8520:	44e0      	add	r8, ip
    8522:	4643      	mov	r3, r8
    8524:	60bc      	str	r4, [r7, #8]
    8526:	607b      	str	r3, [r7, #4]
    8528:	2b07      	cmp	r3, #7
    852a:	dd00      	ble.n	852e <_svfprintf_r+0x90a>
    852c:	e08b      	b.n	8646 <_svfprintf_r+0xa22>
    852e:	3608      	adds	r6, #8
    8530:	ab21      	add	r3, sp, #132	; 0x84
    8532:	6033      	str	r3, [r6, #0]
    8534:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8536:	469c      	mov	ip, r3
    8538:	6073      	str	r3, [r6, #4]
    853a:	4643      	mov	r3, r8
    853c:	4464      	add	r4, ip
    853e:	3301      	adds	r3, #1
    8540:	60bc      	str	r4, [r7, #8]
    8542:	607b      	str	r3, [r7, #4]
    8544:	2b07      	cmp	r3, #7
    8546:	dc00      	bgt.n	854a <_svfprintf_r+0x926>
    8548:	e761      	b.n	840e <_svfprintf_r+0x7ea>
    854a:	003a      	movs	r2, r7
    854c:	9906      	ldr	r1, [sp, #24]
    854e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8550:	f003 faa8 	bl	baa4 <__ssprint_r>
    8554:	2800      	cmp	r0, #0
    8556:	d001      	beq.n	855c <_svfprintf_r+0x938>
    8558:	f7ff fbeb 	bl	7d32 <_svfprintf_r+0x10e>
    855c:	68bc      	ldr	r4, [r7, #8]
    855e:	ae32      	add	r6, sp, #200	; 0xc8
    8560:	e756      	b.n	8410 <_svfprintf_r+0x7ec>
    8562:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8564:	2b65      	cmp	r3, #101	; 0x65
    8566:	ddaa      	ble.n	84be <_svfprintf_r+0x89a>
    8568:	2200      	movs	r2, #0
    856a:	2300      	movs	r3, #0
    856c:	9816      	ldr	r0, [sp, #88]	; 0x58
    856e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8570:	f7ff f802 	bl	7578 <__aeabi_dcmpeq>
    8574:	2800      	cmp	r0, #0
    8576:	d100      	bne.n	857a <_svfprintf_r+0x956>
    8578:	e0e2      	b.n	8740 <_svfprintf_r+0xb1c>
    857a:	4b6f      	ldr	r3, [pc, #444]	; (8738 <_svfprintf_r+0xb14>)
    857c:	3401      	adds	r4, #1
    857e:	6033      	str	r3, [r6, #0]
    8580:	2301      	movs	r3, #1
    8582:	6073      	str	r3, [r6, #4]
    8584:	687b      	ldr	r3, [r7, #4]
    8586:	60bc      	str	r4, [r7, #8]
    8588:	3301      	adds	r3, #1
    858a:	607b      	str	r3, [r7, #4]
    858c:	2b07      	cmp	r3, #7
    858e:	dd00      	ble.n	8592 <_svfprintf_r+0x96e>
    8590:	e366      	b.n	8c60 <_svfprintf_r+0x103c>
    8592:	3608      	adds	r6, #8
    8594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8596:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8598:	4293      	cmp	r3, r2
    859a:	da00      	bge.n	859e <_svfprintf_r+0x97a>
    859c:	e1a4      	b.n	88e8 <_svfprintf_r+0xcc4>
    859e:	9b08      	ldr	r3, [sp, #32]
    85a0:	07db      	lsls	r3, r3, #31
    85a2:	d500      	bpl.n	85a6 <_svfprintf_r+0x982>
    85a4:	e1a0      	b.n	88e8 <_svfprintf_r+0xcc4>
    85a6:	68bc      	ldr	r4, [r7, #8]
    85a8:	e732      	b.n	8410 <_svfprintf_r+0x7ec>
    85aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85ac:	9a07      	ldr	r2, [sp, #28]
    85ae:	1a9d      	subs	r5, r3, r2
    85b0:	2d00      	cmp	r5, #0
    85b2:	dc00      	bgt.n	85b6 <_svfprintf_r+0x992>
    85b4:	e6d8      	b.n	8368 <_svfprintf_r+0x744>
    85b6:	4a61      	ldr	r2, [pc, #388]	; (873c <_svfprintf_r+0xb18>)
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	4691      	mov	r9, r2
    85bc:	2d10      	cmp	r5, #16
    85be:	dd25      	ble.n	860c <_svfprintf_r+0x9e8>
    85c0:	2210      	movs	r2, #16
    85c2:	0021      	movs	r1, r4
    85c4:	4690      	mov	r8, r2
    85c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    85c8:	0032      	movs	r2, r6
    85ca:	464e      	mov	r6, r9
    85cc:	e003      	b.n	85d6 <_svfprintf_r+0x9b2>
    85ce:	3d10      	subs	r5, #16
    85d0:	3208      	adds	r2, #8
    85d2:	2d10      	cmp	r5, #16
    85d4:	dd17      	ble.n	8606 <_svfprintf_r+0x9e2>
    85d6:	4640      	mov	r0, r8
    85d8:	3110      	adds	r1, #16
    85da:	3301      	adds	r3, #1
    85dc:	6016      	str	r6, [r2, #0]
    85de:	6050      	str	r0, [r2, #4]
    85e0:	60b9      	str	r1, [r7, #8]
    85e2:	607b      	str	r3, [r7, #4]
    85e4:	2b07      	cmp	r3, #7
    85e6:	ddf2      	ble.n	85ce <_svfprintf_r+0x9aa>
    85e8:	003a      	movs	r2, r7
    85ea:	9906      	ldr	r1, [sp, #24]
    85ec:	0020      	movs	r0, r4
    85ee:	f003 fa59 	bl	baa4 <__ssprint_r>
    85f2:	2800      	cmp	r0, #0
    85f4:	d001      	beq.n	85fa <_svfprintf_r+0x9d6>
    85f6:	f7ff fb9c 	bl	7d32 <_svfprintf_r+0x10e>
    85fa:	3d10      	subs	r5, #16
    85fc:	68b9      	ldr	r1, [r7, #8]
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	aa32      	add	r2, sp, #200	; 0xc8
    8602:	2d10      	cmp	r5, #16
    8604:	dce7      	bgt.n	85d6 <_svfprintf_r+0x9b2>
    8606:	46b1      	mov	r9, r6
    8608:	000c      	movs	r4, r1
    860a:	0016      	movs	r6, r2
    860c:	464a      	mov	r2, r9
    860e:	1964      	adds	r4, r4, r5
    8610:	3301      	adds	r3, #1
    8612:	6032      	str	r2, [r6, #0]
    8614:	6075      	str	r5, [r6, #4]
    8616:	60bc      	str	r4, [r7, #8]
    8618:	607b      	str	r3, [r7, #4]
    861a:	2b07      	cmp	r3, #7
    861c:	dd00      	ble.n	8620 <_svfprintf_r+0x9fc>
    861e:	e27e      	b.n	8b1e <_svfprintf_r+0xefa>
    8620:	3608      	adds	r6, #8
    8622:	e6a1      	b.n	8368 <_svfprintf_r+0x744>
    8624:	2301      	movs	r3, #1
    8626:	9a08      	ldr	r2, [sp, #32]
    8628:	4213      	tst	r3, r2
    862a:	d000      	beq.n	862e <_svfprintf_r+0xa0a>
    862c:	e74b      	b.n	84c6 <_svfprintf_r+0x8a2>
    862e:	6073      	str	r3, [r6, #4]
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8634:	3301      	adds	r3, #1
    8636:	3401      	adds	r4, #1
    8638:	6032      	str	r2, [r6, #0]
    863a:	60bc      	str	r4, [r7, #8]
    863c:	4698      	mov	r8, r3
    863e:	607b      	str	r3, [r7, #4]
    8640:	2b07      	cmp	r3, #7
    8642:	dc00      	bgt.n	8646 <_svfprintf_r+0xa22>
    8644:	e773      	b.n	852e <_svfprintf_r+0x90a>
    8646:	003a      	movs	r2, r7
    8648:	9906      	ldr	r1, [sp, #24]
    864a:	9809      	ldr	r0, [sp, #36]	; 0x24
    864c:	f003 fa2a 	bl	baa4 <__ssprint_r>
    8650:	2800      	cmp	r0, #0
    8652:	d001      	beq.n	8658 <_svfprintf_r+0xa34>
    8654:	f7ff fb6d 	bl	7d32 <_svfprintf_r+0x10e>
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	68bc      	ldr	r4, [r7, #8]
    865c:	4698      	mov	r8, r3
    865e:	ae32      	add	r6, sp, #200	; 0xc8
    8660:	e766      	b.n	8530 <_svfprintf_r+0x90c>
    8662:	003a      	movs	r2, r7
    8664:	9906      	ldr	r1, [sp, #24]
    8666:	9809      	ldr	r0, [sp, #36]	; 0x24
    8668:	f003 fa1c 	bl	baa4 <__ssprint_r>
    866c:	2800      	cmp	r0, #0
    866e:	d100      	bne.n	8672 <_svfprintf_r+0xa4e>
    8670:	e720      	b.n	84b4 <_svfprintf_r+0x890>
    8672:	f7ff fb5e 	bl	7d32 <_svfprintf_r+0x10e>
    8676:	9c08      	ldr	r4, [sp, #32]
    8678:	2b01      	cmp	r3, #1
    867a:	d100      	bne.n	867e <_svfprintf_r+0xa5a>
    867c:	e184      	b.n	8988 <_svfprintf_r+0xd64>
    867e:	2b02      	cmp	r3, #2
    8680:	d129      	bne.n	86d6 <_svfprintf_r+0xab2>
    8682:	9408      	str	r4, [sp, #32]
    8684:	2300      	movs	r3, #0
    8686:	2400      	movs	r4, #0
    8688:	930c      	str	r3, [sp, #48]	; 0x30
    868a:	940d      	str	r4, [sp, #52]	; 0x34
    868c:	e4c5      	b.n	801a <_svfprintf_r+0x3f6>
    868e:	003a      	movs	r2, r7
    8690:	9906      	ldr	r1, [sp, #24]
    8692:	9809      	ldr	r0, [sp, #36]	; 0x24
    8694:	f003 fa06 	bl	baa4 <__ssprint_r>
    8698:	2800      	cmp	r0, #0
    869a:	d001      	beq.n	86a0 <_svfprintf_r+0xa7c>
    869c:	f7ff fb49 	bl	7d32 <_svfprintf_r+0x10e>
    86a0:	68bc      	ldr	r4, [r7, #8]
    86a2:	ae32      	add	r6, sp, #200	; 0xc8
    86a4:	e6a2      	b.n	83ec <_svfprintf_r+0x7c8>
    86a6:	003a      	movs	r2, r7
    86a8:	9906      	ldr	r1, [sp, #24]
    86aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    86ac:	f003 f9fa 	bl	baa4 <__ssprint_r>
    86b0:	2800      	cmp	r0, #0
    86b2:	d001      	beq.n	86b8 <_svfprintf_r+0xa94>
    86b4:	f7ff fb3d 	bl	7d32 <_svfprintf_r+0x10e>
    86b8:	68bc      	ldr	r4, [r7, #8]
    86ba:	ae32      	add	r6, sp, #200	; 0xc8
    86bc:	e640      	b.n	8340 <_svfprintf_r+0x71c>
    86be:	003a      	movs	r2, r7
    86c0:	9906      	ldr	r1, [sp, #24]
    86c2:	9809      	ldr	r0, [sp, #36]	; 0x24
    86c4:	f003 f9ee 	bl	baa4 <__ssprint_r>
    86c8:	2800      	cmp	r0, #0
    86ca:	d001      	beq.n	86d0 <_svfprintf_r+0xaac>
    86cc:	f7ff fb31 	bl	7d32 <_svfprintf_r+0x10e>
    86d0:	68bc      	ldr	r4, [r7, #8]
    86d2:	ae32      	add	r6, sp, #200	; 0xc8
    86d4:	e644      	b.n	8360 <_svfprintf_r+0x73c>
    86d6:	9408      	str	r4, [sp, #32]
    86d8:	2300      	movs	r3, #0
    86da:	2400      	movs	r4, #0
    86dc:	930c      	str	r3, [sp, #48]	; 0x30
    86de:	940d      	str	r4, [sp, #52]	; 0x34
    86e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    86e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    86e4:	465b      	mov	r3, fp
    86e6:	aa32      	add	r2, sp, #200	; 0xc8
    86e8:	9307      	str	r3, [sp, #28]
    86ea:	4691      	mov	r9, r2
    86ec:	46b3      	mov	fp, r6
    86ee:	e000      	b.n	86f2 <_svfprintf_r+0xace>
    86f0:	46a1      	mov	r9, r4
    86f2:	074a      	lsls	r2, r1, #29
    86f4:	4694      	mov	ip, r2
    86f6:	464b      	mov	r3, r9
    86f8:	4665      	mov	r5, ip
    86fa:	1e5c      	subs	r4, r3, #1
    86fc:	08c6      	lsrs	r6, r0, #3
    86fe:	2307      	movs	r3, #7
    8700:	08ca      	lsrs	r2, r1, #3
    8702:	4335      	orrs	r5, r6
    8704:	0011      	movs	r1, r2
    8706:	002a      	movs	r2, r5
    8708:	4003      	ands	r3, r0
    870a:	3330      	adds	r3, #48	; 0x30
    870c:	7023      	strb	r3, [r4, #0]
    870e:	0028      	movs	r0, r5
    8710:	430a      	orrs	r2, r1
    8712:	d1ed      	bne.n	86f0 <_svfprintf_r+0xacc>
    8714:	900c      	str	r0, [sp, #48]	; 0x30
    8716:	910d      	str	r1, [sp, #52]	; 0x34
    8718:	9907      	ldr	r1, [sp, #28]
    871a:	465e      	mov	r6, fp
    871c:	468b      	mov	fp, r1
    871e:	9908      	ldr	r1, [sp, #32]
    8720:	464a      	mov	r2, r9
    8722:	9411      	str	r4, [sp, #68]	; 0x44
    8724:	07c9      	lsls	r1, r1, #31
    8726:	d500      	bpl.n	872a <_svfprintf_r+0xb06>
    8728:	e13d      	b.n	89a6 <_svfprintf_r+0xd82>
    872a:	ab32      	add	r3, sp, #200	; 0xc8
    872c:	1b1b      	subs	r3, r3, r4
    872e:	930e      	str	r3, [sp, #56]	; 0x38
    8730:	f7ff fb88 	bl	7e44 <_svfprintf_r+0x220>
    8734:	0000ceb8 	.word	0x0000ceb8
    8738:	0000ceb4 	.word	0x0000ceb4
    873c:	0000cec8 	.word	0x0000cec8
    8740:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8742:	2800      	cmp	r0, #0
    8744:	dc00      	bgt.n	8748 <_svfprintf_r+0xb24>
    8746:	e296      	b.n	8c76 <_svfprintf_r+0x1052>
    8748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    874a:	9914      	ldr	r1, [sp, #80]	; 0x50
    874c:	0013      	movs	r3, r2
    874e:	4690      	mov	r8, r2
    8750:	428b      	cmp	r3, r1
    8752:	dd00      	ble.n	8756 <_svfprintf_r+0xb32>
    8754:	4688      	mov	r8, r1
    8756:	4643      	mov	r3, r8
    8758:	2b00      	cmp	r3, #0
    875a:	dd0c      	ble.n	8776 <_svfprintf_r+0xb52>
    875c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    875e:	4444      	add	r4, r8
    8760:	6033      	str	r3, [r6, #0]
    8762:	4643      	mov	r3, r8
    8764:	6073      	str	r3, [r6, #4]
    8766:	687b      	ldr	r3, [r7, #4]
    8768:	60bc      	str	r4, [r7, #8]
    876a:	3301      	adds	r3, #1
    876c:	607b      	str	r3, [r7, #4]
    876e:	2b07      	cmp	r3, #7
    8770:	dd00      	ble.n	8774 <_svfprintf_r+0xb50>
    8772:	e3b7      	b.n	8ee4 <_svfprintf_r+0x12c0>
    8774:	3608      	adds	r6, #8
    8776:	4643      	mov	r3, r8
    8778:	43db      	mvns	r3, r3
    877a:	4642      	mov	r2, r8
    877c:	17db      	asrs	r3, r3, #31
    877e:	4013      	ands	r3, r2
    8780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8782:	1ad3      	subs	r3, r2, r3
    8784:	4698      	mov	r8, r3
    8786:	2b00      	cmp	r3, #0
    8788:	dc00      	bgt.n	878c <_svfprintf_r+0xb68>
    878a:	e128      	b.n	89de <_svfprintf_r+0xdba>
    878c:	2b10      	cmp	r3, #16
    878e:	dc01      	bgt.n	8794 <_svfprintf_r+0xb70>
    8790:	f000 fce7 	bl	9162 <_svfprintf_r+0x153e>
    8794:	4acf      	ldr	r2, [pc, #828]	; (8ad4 <_svfprintf_r+0xeb0>)
    8796:	0021      	movs	r1, r4
    8798:	4691      	mov	r9, r2
    879a:	2210      	movs	r2, #16
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	4692      	mov	sl, r2
    87a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    87a2:	0032      	movs	r2, r6
    87a4:	464c      	mov	r4, r9
    87a6:	4646      	mov	r6, r8
    87a8:	e004      	b.n	87b4 <_svfprintf_r+0xb90>
    87aa:	3208      	adds	r2, #8
    87ac:	3e10      	subs	r6, #16
    87ae:	2e10      	cmp	r6, #16
    87b0:	dc00      	bgt.n	87b4 <_svfprintf_r+0xb90>
    87b2:	e104      	b.n	89be <_svfprintf_r+0xd9a>
    87b4:	4650      	mov	r0, sl
    87b6:	3110      	adds	r1, #16
    87b8:	3301      	adds	r3, #1
    87ba:	6014      	str	r4, [r2, #0]
    87bc:	6050      	str	r0, [r2, #4]
    87be:	60b9      	str	r1, [r7, #8]
    87c0:	607b      	str	r3, [r7, #4]
    87c2:	2b07      	cmp	r3, #7
    87c4:	ddf1      	ble.n	87aa <_svfprintf_r+0xb86>
    87c6:	003a      	movs	r2, r7
    87c8:	9906      	ldr	r1, [sp, #24]
    87ca:	0028      	movs	r0, r5
    87cc:	f003 f96a 	bl	baa4 <__ssprint_r>
    87d0:	2800      	cmp	r0, #0
    87d2:	d001      	beq.n	87d8 <_svfprintf_r+0xbb4>
    87d4:	f7ff faad 	bl	7d32 <_svfprintf_r+0x10e>
    87d8:	68b9      	ldr	r1, [r7, #8]
    87da:	687b      	ldr	r3, [r7, #4]
    87dc:	aa32      	add	r2, sp, #200	; 0xc8
    87de:	e7e5      	b.n	87ac <_svfprintf_r+0xb88>
    87e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87e2:	2b00      	cmp	r3, #0
    87e4:	d100      	bne.n	87e8 <_svfprintf_r+0xbc4>
    87e6:	e0ca      	b.n	897e <_svfprintf_r+0xd5a>
    87e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    87ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    87ec:	ab32      	add	r3, sp, #200	; 0xc8
    87ee:	46b1      	mov	r9, r6
    87f0:	001e      	movs	r6, r3
    87f2:	0020      	movs	r0, r4
    87f4:	0029      	movs	r1, r5
    87f6:	220a      	movs	r2, #10
    87f8:	2300      	movs	r3, #0
    87fa:	f7fd f8cf 	bl	599c <__aeabi_uldivmod>
    87fe:	3e01      	subs	r6, #1
    8800:	3230      	adds	r2, #48	; 0x30
    8802:	7032      	strb	r2, [r6, #0]
    8804:	2300      	movs	r3, #0
    8806:	0020      	movs	r0, r4
    8808:	0029      	movs	r1, r5
    880a:	220a      	movs	r2, #10
    880c:	f7fd f8c6 	bl	599c <__aeabi_uldivmod>
    8810:	0003      	movs	r3, r0
    8812:	0004      	movs	r4, r0
    8814:	000d      	movs	r5, r1
    8816:	430b      	orrs	r3, r1
    8818:	d1eb      	bne.n	87f2 <_svfprintf_r+0xbce>
    881a:	0032      	movs	r2, r6
    881c:	ab32      	add	r3, sp, #200	; 0xc8
    881e:	1a9b      	subs	r3, r3, r2
    8820:	9611      	str	r6, [sp, #68]	; 0x44
    8822:	940c      	str	r4, [sp, #48]	; 0x30
    8824:	950d      	str	r5, [sp, #52]	; 0x34
    8826:	464e      	mov	r6, r9
    8828:	930e      	str	r3, [sp, #56]	; 0x38
    882a:	f7ff fb0b 	bl	7e44 <_svfprintf_r+0x220>
    882e:	2300      	movs	r3, #0
    8830:	930e      	str	r3, [sp, #56]	; 0x38
    8832:	ab32      	add	r3, sp, #200	; 0xc8
    8834:	9311      	str	r3, [sp, #68]	; 0x44
    8836:	f7ff fb05 	bl	7e44 <_svfprintf_r+0x220>
    883a:	003a      	movs	r2, r7
    883c:	9906      	ldr	r1, [sp, #24]
    883e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8840:	f003 f930 	bl	baa4 <__ssprint_r>
    8844:	2800      	cmp	r0, #0
    8846:	d001      	beq.n	884c <_svfprintf_r+0xc28>
    8848:	f7ff fa73 	bl	7d32 <_svfprintf_r+0x10e>
    884c:	ab16      	add	r3, sp, #88	; 0x58
    884e:	7fdb      	ldrb	r3, [r3, #31]
    8850:	68bc      	ldr	r4, [r7, #8]
    8852:	4698      	mov	r8, r3
    8854:	ae32      	add	r6, sp, #200	; 0xc8
    8856:	e560      	b.n	831a <_svfprintf_r+0x6f6>
    8858:	9b14      	ldr	r3, [sp, #80]	; 0x50
    885a:	1e5d      	subs	r5, r3, #1
    885c:	2d00      	cmp	r5, #0
    885e:	dc00      	bgt.n	8862 <_svfprintf_r+0xc3e>
    8860:	e666      	b.n	8530 <_svfprintf_r+0x90c>
    8862:	4b9c      	ldr	r3, [pc, #624]	; (8ad4 <_svfprintf_r+0xeb0>)
    8864:	4699      	mov	r9, r3
    8866:	2d10      	cmp	r5, #16
    8868:	dd29      	ble.n	88be <_svfprintf_r+0xc9a>
    886a:	2310      	movs	r3, #16
    886c:	0032      	movs	r2, r6
    886e:	469a      	mov	sl, r3
    8870:	002e      	movs	r6, r5
    8872:	0021      	movs	r1, r4
    8874:	4643      	mov	r3, r8
    8876:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8878:	464d      	mov	r5, r9
    887a:	e003      	b.n	8884 <_svfprintf_r+0xc60>
    887c:	3e10      	subs	r6, #16
    887e:	3208      	adds	r2, #8
    8880:	2e10      	cmp	r6, #16
    8882:	dd17      	ble.n	88b4 <_svfprintf_r+0xc90>
    8884:	4650      	mov	r0, sl
    8886:	3110      	adds	r1, #16
    8888:	3301      	adds	r3, #1
    888a:	6015      	str	r5, [r2, #0]
    888c:	6050      	str	r0, [r2, #4]
    888e:	60b9      	str	r1, [r7, #8]
    8890:	607b      	str	r3, [r7, #4]
    8892:	2b07      	cmp	r3, #7
    8894:	ddf2      	ble.n	887c <_svfprintf_r+0xc58>
    8896:	003a      	movs	r2, r7
    8898:	9906      	ldr	r1, [sp, #24]
    889a:	0020      	movs	r0, r4
    889c:	f003 f902 	bl	baa4 <__ssprint_r>
    88a0:	2800      	cmp	r0, #0
    88a2:	d001      	beq.n	88a8 <_svfprintf_r+0xc84>
    88a4:	f7ff fa45 	bl	7d32 <_svfprintf_r+0x10e>
    88a8:	3e10      	subs	r6, #16
    88aa:	68b9      	ldr	r1, [r7, #8]
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	aa32      	add	r2, sp, #200	; 0xc8
    88b0:	2e10      	cmp	r6, #16
    88b2:	dce7      	bgt.n	8884 <_svfprintf_r+0xc60>
    88b4:	46a9      	mov	r9, r5
    88b6:	000c      	movs	r4, r1
    88b8:	0035      	movs	r5, r6
    88ba:	4698      	mov	r8, r3
    88bc:	0016      	movs	r6, r2
    88be:	464b      	mov	r3, r9
    88c0:	6075      	str	r5, [r6, #4]
    88c2:	6033      	str	r3, [r6, #0]
    88c4:	1964      	adds	r4, r4, r5
    88c6:	e629      	b.n	851c <_svfprintf_r+0x8f8>
    88c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88ca:	681a      	ldr	r2, [r3, #0]
    88cc:	f7ff fbfb 	bl	80c6 <_svfprintf_r+0x4a2>
    88d0:	6813      	ldr	r3, [r2, #0]
    88d2:	9307      	str	r3, [sp, #28]
    88d4:	f7ff fa82 	bl	7ddc <_svfprintf_r+0x1b8>
    88d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88da:	681a      	ldr	r2, [r3, #0]
    88dc:	f7ff fb84 	bl	7fe8 <_svfprintf_r+0x3c4>
    88e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88e2:	681a      	ldr	r2, [r3, #0]
    88e4:	f7ff fbd1 	bl	808a <_svfprintf_r+0x466>
    88e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    88ea:	68ba      	ldr	r2, [r7, #8]
    88ec:	6033      	str	r3, [r6, #0]
    88ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
    88f0:	469c      	mov	ip, r3
    88f2:	6073      	str	r3, [r6, #4]
    88f4:	687b      	ldr	r3, [r7, #4]
    88f6:	4462      	add	r2, ip
    88f8:	3301      	adds	r3, #1
    88fa:	0014      	movs	r4, r2
    88fc:	60ba      	str	r2, [r7, #8]
    88fe:	607b      	str	r3, [r7, #4]
    8900:	2b07      	cmp	r3, #7
    8902:	dd00      	ble.n	8906 <_svfprintf_r+0xce2>
    8904:	e202      	b.n	8d0c <_svfprintf_r+0x10e8>
    8906:	3608      	adds	r6, #8
    8908:	9b14      	ldr	r3, [sp, #80]	; 0x50
    890a:	1e5d      	subs	r5, r3, #1
    890c:	2d00      	cmp	r5, #0
    890e:	dc00      	bgt.n	8912 <_svfprintf_r+0xcee>
    8910:	e57e      	b.n	8410 <_svfprintf_r+0x7ec>
    8912:	4a70      	ldr	r2, [pc, #448]	; (8ad4 <_svfprintf_r+0xeb0>)
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	4691      	mov	r9, r2
    8918:	2d10      	cmp	r5, #16
    891a:	dd25      	ble.n	8968 <_svfprintf_r+0xd44>
    891c:	2210      	movs	r2, #16
    891e:	0021      	movs	r1, r4
    8920:	4690      	mov	r8, r2
    8922:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8924:	0032      	movs	r2, r6
    8926:	002e      	movs	r6, r5
    8928:	464d      	mov	r5, r9
    892a:	e003      	b.n	8934 <_svfprintf_r+0xd10>
    892c:	3208      	adds	r2, #8
    892e:	3e10      	subs	r6, #16
    8930:	2e10      	cmp	r6, #16
    8932:	dd15      	ble.n	8960 <_svfprintf_r+0xd3c>
    8934:	4640      	mov	r0, r8
    8936:	3110      	adds	r1, #16
    8938:	3301      	adds	r3, #1
    893a:	6015      	str	r5, [r2, #0]
    893c:	6050      	str	r0, [r2, #4]
    893e:	60b9      	str	r1, [r7, #8]
    8940:	607b      	str	r3, [r7, #4]
    8942:	2b07      	cmp	r3, #7
    8944:	ddf2      	ble.n	892c <_svfprintf_r+0xd08>
    8946:	003a      	movs	r2, r7
    8948:	9906      	ldr	r1, [sp, #24]
    894a:	0020      	movs	r0, r4
    894c:	f003 f8aa 	bl	baa4 <__ssprint_r>
    8950:	2800      	cmp	r0, #0
    8952:	d001      	beq.n	8958 <_svfprintf_r+0xd34>
    8954:	f7ff f9ed 	bl	7d32 <_svfprintf_r+0x10e>
    8958:	68b9      	ldr	r1, [r7, #8]
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	aa32      	add	r2, sp, #200	; 0xc8
    895e:	e7e6      	b.n	892e <_svfprintf_r+0xd0a>
    8960:	46a9      	mov	r9, r5
    8962:	000c      	movs	r4, r1
    8964:	0035      	movs	r5, r6
    8966:	0016      	movs	r6, r2
    8968:	464a      	mov	r2, r9
    896a:	1964      	adds	r4, r4, r5
    896c:	3301      	adds	r3, #1
    896e:	6032      	str	r2, [r6, #0]
    8970:	6075      	str	r5, [r6, #4]
    8972:	60bc      	str	r4, [r7, #8]
    8974:	607b      	str	r3, [r7, #4]
    8976:	2b07      	cmp	r3, #7
    8978:	dc00      	bgt.n	897c <_svfprintf_r+0xd58>
    897a:	e548      	b.n	840e <_svfprintf_r+0x7ea>
    897c:	e5e5      	b.n	854a <_svfprintf_r+0x926>
    897e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8980:	2b09      	cmp	r3, #9
    8982:	d900      	bls.n	8986 <_svfprintf_r+0xd62>
    8984:	e730      	b.n	87e8 <_svfprintf_r+0xbc4>
    8986:	9c08      	ldr	r4, [sp, #32]
    8988:	2227      	movs	r2, #39	; 0x27
    898a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    898c:	a928      	add	r1, sp, #160	; 0xa0
    898e:	3330      	adds	r3, #48	; 0x30
    8990:	548b      	strb	r3, [r1, r2]
    8992:	2301      	movs	r3, #1
    8994:	aa16      	add	r2, sp, #88	; 0x58
    8996:	4694      	mov	ip, r2
    8998:	930e      	str	r3, [sp, #56]	; 0x38
    899a:	336e      	adds	r3, #110	; 0x6e
    899c:	4463      	add	r3, ip
    899e:	9408      	str	r4, [sp, #32]
    89a0:	9311      	str	r3, [sp, #68]	; 0x44
    89a2:	f7ff fa4f 	bl	7e44 <_svfprintf_r+0x220>
    89a6:	2b30      	cmp	r3, #48	; 0x30
    89a8:	d100      	bne.n	89ac <_svfprintf_r+0xd88>
    89aa:	e20b      	b.n	8dc4 <_svfprintf_r+0x11a0>
    89ac:	2330      	movs	r3, #48	; 0x30
    89ae:	3a02      	subs	r2, #2
    89b0:	7013      	strb	r3, [r2, #0]
    89b2:	ab32      	add	r3, sp, #200	; 0xc8
    89b4:	1a9b      	subs	r3, r3, r2
    89b6:	930e      	str	r3, [sp, #56]	; 0x38
    89b8:	9211      	str	r2, [sp, #68]	; 0x44
    89ba:	f7ff fa43 	bl	7e44 <_svfprintf_r+0x220>
    89be:	46b0      	mov	r8, r6
    89c0:	46a1      	mov	r9, r4
    89c2:	0016      	movs	r6, r2
    89c4:	000c      	movs	r4, r1
    89c6:	464a      	mov	r2, r9
    89c8:	6032      	str	r2, [r6, #0]
    89ca:	4642      	mov	r2, r8
    89cc:	4444      	add	r4, r8
    89ce:	3301      	adds	r3, #1
    89d0:	6072      	str	r2, [r6, #4]
    89d2:	60bc      	str	r4, [r7, #8]
    89d4:	607b      	str	r3, [r7, #4]
    89d6:	2b07      	cmp	r3, #7
    89d8:	dd00      	ble.n	89dc <_svfprintf_r+0xdb8>
    89da:	e29c      	b.n	8f16 <_svfprintf_r+0x12f2>
    89dc:	3608      	adds	r6, #8
    89de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    89e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    89e2:	4293      	cmp	r3, r2
    89e4:	db4c      	blt.n	8a80 <_svfprintf_r+0xe5c>
    89e6:	9a08      	ldr	r2, [sp, #32]
    89e8:	07d2      	lsls	r2, r2, #31
    89ea:	d449      	bmi.n	8a80 <_svfprintf_r+0xe5c>
    89ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    89ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
    89f0:	1ad3      	subs	r3, r2, r3
    89f2:	1a52      	subs	r2, r2, r1
    89f4:	4690      	mov	r8, r2
    89f6:	429a      	cmp	r2, r3
    89f8:	dd00      	ble.n	89fc <_svfprintf_r+0xdd8>
    89fa:	4698      	mov	r8, r3
    89fc:	4642      	mov	r2, r8
    89fe:	2a00      	cmp	r2, #0
    8a00:	dd0f      	ble.n	8a22 <_svfprintf_r+0xdfe>
    8a02:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8a04:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8a06:	468c      	mov	ip, r1
    8a08:	4462      	add	r2, ip
    8a0a:	6032      	str	r2, [r6, #0]
    8a0c:	4642      	mov	r2, r8
    8a0e:	6072      	str	r2, [r6, #4]
    8a10:	687a      	ldr	r2, [r7, #4]
    8a12:	4444      	add	r4, r8
    8a14:	3201      	adds	r2, #1
    8a16:	60bc      	str	r4, [r7, #8]
    8a18:	607a      	str	r2, [r7, #4]
    8a1a:	2a07      	cmp	r2, #7
    8a1c:	dd00      	ble.n	8a20 <_svfprintf_r+0xdfc>
    8a1e:	e286      	b.n	8f2e <_svfprintf_r+0x130a>
    8a20:	3608      	adds	r6, #8
    8a22:	4642      	mov	r2, r8
    8a24:	43d5      	mvns	r5, r2
    8a26:	17ed      	asrs	r5, r5, #31
    8a28:	4015      	ands	r5, r2
    8a2a:	1b5d      	subs	r5, r3, r5
    8a2c:	2d00      	cmp	r5, #0
    8a2e:	dc00      	bgt.n	8a32 <_svfprintf_r+0xe0e>
    8a30:	e4ee      	b.n	8410 <_svfprintf_r+0x7ec>
    8a32:	4a28      	ldr	r2, [pc, #160]	; (8ad4 <_svfprintf_r+0xeb0>)
    8a34:	687b      	ldr	r3, [r7, #4]
    8a36:	4691      	mov	r9, r2
    8a38:	2d10      	cmp	r5, #16
    8a3a:	dd95      	ble.n	8968 <_svfprintf_r+0xd44>
    8a3c:	2210      	movs	r2, #16
    8a3e:	0021      	movs	r1, r4
    8a40:	4690      	mov	r8, r2
    8a42:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8a44:	0032      	movs	r2, r6
    8a46:	002e      	movs	r6, r5
    8a48:	464d      	mov	r5, r9
    8a4a:	e003      	b.n	8a54 <_svfprintf_r+0xe30>
    8a4c:	3208      	adds	r2, #8
    8a4e:	3e10      	subs	r6, #16
    8a50:	2e10      	cmp	r6, #16
    8a52:	dd85      	ble.n	8960 <_svfprintf_r+0xd3c>
    8a54:	4640      	mov	r0, r8
    8a56:	3110      	adds	r1, #16
    8a58:	3301      	adds	r3, #1
    8a5a:	6015      	str	r5, [r2, #0]
    8a5c:	6050      	str	r0, [r2, #4]
    8a5e:	60b9      	str	r1, [r7, #8]
    8a60:	607b      	str	r3, [r7, #4]
    8a62:	2b07      	cmp	r3, #7
    8a64:	ddf2      	ble.n	8a4c <_svfprintf_r+0xe28>
    8a66:	003a      	movs	r2, r7
    8a68:	9906      	ldr	r1, [sp, #24]
    8a6a:	0020      	movs	r0, r4
    8a6c:	f003 f81a 	bl	baa4 <__ssprint_r>
    8a70:	2800      	cmp	r0, #0
    8a72:	d001      	beq.n	8a78 <_svfprintf_r+0xe54>
    8a74:	f7ff f95d 	bl	7d32 <_svfprintf_r+0x10e>
    8a78:	68b9      	ldr	r1, [r7, #8]
    8a7a:	687b      	ldr	r3, [r7, #4]
    8a7c:	aa32      	add	r2, sp, #200	; 0xc8
    8a7e:	e7e6      	b.n	8a4e <_svfprintf_r+0xe2a>
    8a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8a82:	6032      	str	r2, [r6, #0]
    8a84:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8a86:	4694      	mov	ip, r2
    8a88:	6072      	str	r2, [r6, #4]
    8a8a:	687a      	ldr	r2, [r7, #4]
    8a8c:	4464      	add	r4, ip
    8a8e:	3201      	adds	r2, #1
    8a90:	60bc      	str	r4, [r7, #8]
    8a92:	607a      	str	r2, [r7, #4]
    8a94:	2a07      	cmp	r2, #7
    8a96:	dd00      	ble.n	8a9a <_svfprintf_r+0xe76>
    8a98:	e230      	b.n	8efc <_svfprintf_r+0x12d8>
    8a9a:	3608      	adds	r6, #8
    8a9c:	e7a6      	b.n	89ec <_svfprintf_r+0xdc8>
    8a9e:	003a      	movs	r2, r7
    8aa0:	9906      	ldr	r1, [sp, #24]
    8aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8aa4:	f002 fffe 	bl	baa4 <__ssprint_r>
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d001      	beq.n	8ab0 <_svfprintf_r+0xe8c>
    8aac:	f7ff f941 	bl	7d32 <_svfprintf_r+0x10e>
    8ab0:	68bc      	ldr	r4, [r7, #8]
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	ae32      	add	r6, sp, #200	; 0xc8
    8ab6:	e513      	b.n	84e0 <_svfprintf_r+0x8bc>
    8ab8:	003a      	movs	r2, r7
    8aba:	9906      	ldr	r1, [sp, #24]
    8abc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8abe:	f002 fff1 	bl	baa4 <__ssprint_r>
    8ac2:	2800      	cmp	r0, #0
    8ac4:	d001      	beq.n	8aca <_svfprintf_r+0xea6>
    8ac6:	f7ff f934 	bl	7d32 <_svfprintf_r+0x10e>
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	68bc      	ldr	r4, [r7, #8]
    8ace:	4698      	mov	r8, r3
    8ad0:	ae32      	add	r6, sp, #200	; 0xc8
    8ad2:	e513      	b.n	84fc <_svfprintf_r+0x8d8>
    8ad4:	0000cec8 	.word	0x0000cec8
    8ad8:	2307      	movs	r3, #7
    8ada:	3207      	adds	r2, #7
    8adc:	439a      	bics	r2, r3
    8ade:	3301      	adds	r3, #1
    8ae0:	469c      	mov	ip, r3
    8ae2:	4494      	add	ip, r2
    8ae4:	4663      	mov	r3, ip
    8ae6:	930f      	str	r3, [sp, #60]	; 0x3c
    8ae8:	6853      	ldr	r3, [r2, #4]
    8aea:	6812      	ldr	r2, [r2, #0]
    8aec:	930d      	str	r3, [sp, #52]	; 0x34
    8aee:	920c      	str	r2, [sp, #48]	; 0x30
    8af0:	2b00      	cmp	r3, #0
    8af2:	db01      	blt.n	8af8 <_svfprintf_r+0xed4>
    8af4:	f7ff f97a 	bl	7dec <_svfprintf_r+0x1c8>
    8af8:	980c      	ldr	r0, [sp, #48]	; 0x30
    8afa:	990d      	ldr	r1, [sp, #52]	; 0x34
    8afc:	2300      	movs	r3, #0
    8afe:	4242      	negs	r2, r0
    8b00:	418b      	sbcs	r3, r1
    8b02:	0011      	movs	r1, r2
    8b04:	001a      	movs	r2, r3
    8b06:	232d      	movs	r3, #45	; 0x2d
    8b08:	a816      	add	r0, sp, #88	; 0x58
    8b0a:	77c3      	strb	r3, [r0, #31]
    8b0c:	0008      	movs	r0, r1
    8b0e:	4310      	orrs	r0, r2
    8b10:	910c      	str	r1, [sp, #48]	; 0x30
    8b12:	920d      	str	r2, [sp, #52]	; 0x34
    8b14:	4698      	mov	r8, r3
    8b16:	0002      	movs	r2, r0
    8b18:	3b2c      	subs	r3, #44	; 0x2c
    8b1a:	f7ff f970 	bl	7dfe <_svfprintf_r+0x1da>
    8b1e:	003a      	movs	r2, r7
    8b20:	9906      	ldr	r1, [sp, #24]
    8b22:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b24:	f002 ffbe 	bl	baa4 <__ssprint_r>
    8b28:	2800      	cmp	r0, #0
    8b2a:	d001      	beq.n	8b30 <_svfprintf_r+0xf0c>
    8b2c:	f7ff f901 	bl	7d32 <_svfprintf_r+0x10e>
    8b30:	68bc      	ldr	r4, [r7, #8]
    8b32:	ae32      	add	r6, sp, #200	; 0xc8
    8b34:	e418      	b.n	8368 <_svfprintf_r+0x744>
    8b36:	9916      	ldr	r1, [sp, #88]	; 0x58
    8b38:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8b3a:	000a      	movs	r2, r1
    8b3c:	0008      	movs	r0, r1
    8b3e:	002b      	movs	r3, r5
    8b40:	0029      	movs	r1, r5
    8b42:	f003 fdcb 	bl	c6dc <__aeabi_dcmpun>
    8b46:	2800      	cmp	r0, #0
    8b48:	d000      	beq.n	8b4c <_svfprintf_r+0xf28>
    8b4a:	e2e6      	b.n	911a <_svfprintf_r+0x14f6>
    8b4c:	4653      	mov	r3, sl
    8b4e:	3301      	adds	r3, #1
    8b50:	d100      	bne.n	8b54 <_svfprintf_r+0xf30>
    8b52:	e20d      	b.n	8f70 <_svfprintf_r+0x134c>
    8b54:	2320      	movs	r3, #32
    8b56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8b58:	439a      	bics	r2, r3
    8b5a:	920e      	str	r2, [sp, #56]	; 0x38
    8b5c:	2a47      	cmp	r2, #71	; 0x47
    8b5e:	d100      	bne.n	8b62 <_svfprintf_r+0xf3e>
    8b60:	e11c      	b.n	8d9c <_svfprintf_r+0x1178>
    8b62:	2380      	movs	r3, #128	; 0x80
    8b64:	005b      	lsls	r3, r3, #1
    8b66:	4323      	orrs	r3, r4
    8b68:	9308      	str	r3, [sp, #32]
    8b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	da00      	bge.n	8b72 <_svfprintf_r+0xf4e>
    8b70:	e221      	b.n	8fb6 <_svfprintf_r+0x1392>
    8b72:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8b74:	9307      	str	r3, [sp, #28]
    8b76:	2300      	movs	r3, #0
    8b78:	4691      	mov	r9, r2
    8b7a:	9310      	str	r3, [sp, #64]	; 0x40
    8b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b7e:	2b66      	cmp	r3, #102	; 0x66
    8b80:	d100      	bne.n	8b84 <_svfprintf_r+0xf60>
    8b82:	e1fc      	b.n	8f7e <_svfprintf_r+0x135a>
    8b84:	2b46      	cmp	r3, #70	; 0x46
    8b86:	d100      	bne.n	8b8a <_svfprintf_r+0xf66>
    8b88:	e0db      	b.n	8d42 <_svfprintf_r+0x111e>
    8b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b8e:	3a45      	subs	r2, #69	; 0x45
    8b90:	0013      	movs	r3, r2
    8b92:	4259      	negs	r1, r3
    8b94:	4159      	adcs	r1, r3
    8b96:	ab20      	add	r3, sp, #128	; 0x80
    8b98:	000d      	movs	r5, r1
    8b9a:	9303      	str	r3, [sp, #12]
    8b9c:	ab1f      	add	r3, sp, #124	; 0x7c
    8b9e:	9302      	str	r3, [sp, #8]
    8ba0:	2302      	movs	r3, #2
    8ba2:	aa23      	add	r2, sp, #140	; 0x8c
    8ba4:	4455      	add	r5, sl
    8ba6:	921b      	str	r2, [sp, #108]	; 0x6c
    8ba8:	9204      	str	r2, [sp, #16]
    8baa:	9300      	str	r3, [sp, #0]
    8bac:	9501      	str	r5, [sp, #4]
    8bae:	9b07      	ldr	r3, [sp, #28]
    8bb0:	464a      	mov	r2, r9
    8bb2:	f000 fbf9 	bl	93a8 <_dtoa_r>
    8bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8bb8:	9011      	str	r0, [sp, #68]	; 0x44
    8bba:	2b67      	cmp	r3, #103	; 0x67
    8bbc:	d000      	beq.n	8bc0 <_svfprintf_r+0xf9c>
    8bbe:	e239      	b.n	9034 <_svfprintf_r+0x1410>
    8bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bc2:	4698      	mov	r8, r3
    8bc4:	44a8      	add	r8, r5
    8bc6:	07e3      	lsls	r3, r4, #31
    8bc8:	d400      	bmi.n	8bcc <_svfprintf_r+0xfa8>
    8bca:	e28b      	b.n	90e4 <_svfprintf_r+0x14c0>
    8bcc:	2300      	movs	r3, #0
    8bce:	2200      	movs	r2, #0
    8bd0:	4648      	mov	r0, r9
    8bd2:	9907      	ldr	r1, [sp, #28]
    8bd4:	f7fe fcd0 	bl	7578 <__aeabi_dcmpeq>
    8bd8:	4643      	mov	r3, r8
    8bda:	2800      	cmp	r0, #0
    8bdc:	d10a      	bne.n	8bf4 <_svfprintf_r+0xfd0>
    8bde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8be0:	4543      	cmp	r3, r8
    8be2:	d207      	bcs.n	8bf4 <_svfprintf_r+0xfd0>
    8be4:	2130      	movs	r1, #48	; 0x30
    8be6:	4640      	mov	r0, r8
    8be8:	1c5a      	adds	r2, r3, #1
    8bea:	9223      	str	r2, [sp, #140]	; 0x8c
    8bec:	7019      	strb	r1, [r3, #0]
    8bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8bf0:	4298      	cmp	r0, r3
    8bf2:	d8f9      	bhi.n	8be8 <_svfprintf_r+0xfc4>
    8bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8bf6:	1a9b      	subs	r3, r3, r2
    8bf8:	9314      	str	r3, [sp, #80]	; 0x50
    8bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bfc:	2b47      	cmp	r3, #71	; 0x47
    8bfe:	d100      	bne.n	8c02 <_svfprintf_r+0xfde>
    8c00:	e0f6      	b.n	8df0 <_svfprintf_r+0x11cc>
    8c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c04:	2b65      	cmp	r3, #101	; 0x65
    8c06:	dc00      	bgt.n	8c0a <_svfprintf_r+0xfe6>
    8c08:	e226      	b.n	9058 <_svfprintf_r+0x1434>
    8c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c0c:	2b66      	cmp	r3, #102	; 0x66
    8c0e:	d100      	bne.n	8c12 <_svfprintf_r+0xfee>
    8c10:	e1f4      	b.n	8ffc <_svfprintf_r+0x13d8>
    8c12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8c14:	9313      	str	r3, [sp, #76]	; 0x4c
    8c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8c1a:	0019      	movs	r1, r3
    8c1c:	4291      	cmp	r1, r2
    8c1e:	dd00      	ble.n	8c22 <_svfprintf_r+0xffe>
    8c20:	e1d4      	b.n	8fcc <_svfprintf_r+0x13a8>
    8c22:	07e3      	lsls	r3, r4, #31
    8c24:	d500      	bpl.n	8c28 <_svfprintf_r+0x1004>
    8c26:	e249      	b.n	90bc <_svfprintf_r+0x1498>
    8c28:	43d3      	mvns	r3, r2
    8c2a:	17db      	asrs	r3, r3, #31
    8c2c:	0011      	movs	r1, r2
    8c2e:	401a      	ands	r2, r3
    8c30:	2367      	movs	r3, #103	; 0x67
    8c32:	9207      	str	r2, [sp, #28]
    8c34:	910e      	str	r1, [sp, #56]	; 0x38
    8c36:	9312      	str	r3, [sp, #72]	; 0x48
    8c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d000      	beq.n	8c40 <_svfprintf_r+0x101c>
    8c3e:	e0cf      	b.n	8de0 <_svfprintf_r+0x11bc>
    8c40:	ab16      	add	r3, sp, #88	; 0x58
    8c42:	7fdb      	ldrb	r3, [r3, #31]
    8c44:	4698      	mov	r8, r3
    8c46:	2300      	movs	r3, #0
    8c48:	469a      	mov	sl, r3
    8c4a:	f7ff f903 	bl	7e54 <_svfprintf_r+0x230>
    8c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8c50:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c52:	6813      	ldr	r3, [r2, #0]
    8c54:	6019      	str	r1, [r3, #0]
    8c56:	0013      	movs	r3, r2
    8c58:	3304      	adds	r3, #4
    8c5a:	930f      	str	r3, [sp, #60]	; 0x3c
    8c5c:	f7ff f80d 	bl	7c7a <_svfprintf_r+0x56>
    8c60:	003a      	movs	r2, r7
    8c62:	9906      	ldr	r1, [sp, #24]
    8c64:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c66:	f002 ff1d 	bl	baa4 <__ssprint_r>
    8c6a:	2800      	cmp	r0, #0
    8c6c:	d001      	beq.n	8c72 <_svfprintf_r+0x104e>
    8c6e:	f7ff f860 	bl	7d32 <_svfprintf_r+0x10e>
    8c72:	ae32      	add	r6, sp, #200	; 0xc8
    8c74:	e48e      	b.n	8594 <_svfprintf_r+0x970>
    8c76:	4bde      	ldr	r3, [pc, #888]	; (8ff0 <_svfprintf_r+0x13cc>)
    8c78:	3401      	adds	r4, #1
    8c7a:	6033      	str	r3, [r6, #0]
    8c7c:	2301      	movs	r3, #1
    8c7e:	6073      	str	r3, [r6, #4]
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	60bc      	str	r4, [r7, #8]
    8c84:	3301      	adds	r3, #1
    8c86:	607b      	str	r3, [r7, #4]
    8c88:	2b07      	cmp	r3, #7
    8c8a:	dc7a      	bgt.n	8d82 <_svfprintf_r+0x115e>
    8c8c:	3608      	adds	r6, #8
    8c8e:	2800      	cmp	r0, #0
    8c90:	d107      	bne.n	8ca2 <_svfprintf_r+0x107e>
    8c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8c94:	2b00      	cmp	r3, #0
    8c96:	d104      	bne.n	8ca2 <_svfprintf_r+0x107e>
    8c98:	9b08      	ldr	r3, [sp, #32]
    8c9a:	07db      	lsls	r3, r3, #31
    8c9c:	d401      	bmi.n	8ca2 <_svfprintf_r+0x107e>
    8c9e:	f7ff fbb7 	bl	8410 <_svfprintf_r+0x7ec>
    8ca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ca4:	6033      	str	r3, [r6, #0]
    8ca6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8ca8:	1919      	adds	r1, r3, r4
    8caa:	6073      	str	r3, [r6, #4]
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	60b9      	str	r1, [r7, #8]
    8cb0:	3301      	adds	r3, #1
    8cb2:	607b      	str	r3, [r7, #4]
    8cb4:	2b07      	cmp	r3, #7
    8cb6:	dd00      	ble.n	8cba <_svfprintf_r+0x1096>
    8cb8:	e1f2      	b.n	90a0 <_svfprintf_r+0x147c>
    8cba:	0032      	movs	r2, r6
    8cbc:	3208      	adds	r2, #8
    8cbe:	2800      	cmp	r0, #0
    8cc0:	da00      	bge.n	8cc4 <_svfprintf_r+0x10a0>
    8cc2:	e1cc      	b.n	905e <_svfprintf_r+0x143a>
    8cc4:	9811      	ldr	r0, [sp, #68]	; 0x44
    8cc6:	3301      	adds	r3, #1
    8cc8:	6010      	str	r0, [r2, #0]
    8cca:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ccc:	607b      	str	r3, [r7, #4]
    8cce:	1844      	adds	r4, r0, r1
    8cd0:	6050      	str	r0, [r2, #4]
    8cd2:	60bc      	str	r4, [r7, #8]
    8cd4:	2b07      	cmp	r3, #7
    8cd6:	dd00      	ble.n	8cda <_svfprintf_r+0x10b6>
    8cd8:	e437      	b.n	854a <_svfprintf_r+0x926>
    8cda:	3208      	adds	r2, #8
    8cdc:	0016      	movs	r6, r2
    8cde:	f7ff fb97 	bl	8410 <_svfprintf_r+0x7ec>
    8ce2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8ce6:	680b      	ldr	r3, [r1, #0]
    8ce8:	601a      	str	r2, [r3, #0]
    8cea:	17d2      	asrs	r2, r2, #31
    8cec:	605a      	str	r2, [r3, #4]
    8cee:	000b      	movs	r3, r1
    8cf0:	3304      	adds	r3, #4
    8cf2:	930f      	str	r3, [sp, #60]	; 0x3c
    8cf4:	f7fe ffc1 	bl	7c7a <_svfprintf_r+0x56>
    8cf8:	464b      	mov	r3, r9
    8cfa:	3101      	adds	r1, #1
    8cfc:	431c      	orrs	r4, r3
    8cfe:	780b      	ldrb	r3, [r1, #0]
    8d00:	f7fe fff4 	bl	7cec <_svfprintf_r+0xc8>
    8d04:	4bbb      	ldr	r3, [pc, #748]	; (8ff4 <_svfprintf_r+0x13d0>)
    8d06:	9311      	str	r3, [sp, #68]	; 0x44
    8d08:	f7ff f937 	bl	7f7a <_svfprintf_r+0x356>
    8d0c:	003a      	movs	r2, r7
    8d0e:	9906      	ldr	r1, [sp, #24]
    8d10:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d12:	f002 fec7 	bl	baa4 <__ssprint_r>
    8d16:	2800      	cmp	r0, #0
    8d18:	d001      	beq.n	8d1e <_svfprintf_r+0x10fa>
    8d1a:	f7ff f80a 	bl	7d32 <_svfprintf_r+0x10e>
    8d1e:	68bc      	ldr	r4, [r7, #8]
    8d20:	ae32      	add	r6, sp, #200	; 0xc8
    8d22:	e5f1      	b.n	8908 <_svfprintf_r+0xce4>
    8d24:	2140      	movs	r1, #64	; 0x40
    8d26:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d28:	f001 fe02 	bl	a930 <_malloc_r>
    8d2c:	9b06      	ldr	r3, [sp, #24]
    8d2e:	6018      	str	r0, [r3, #0]
    8d30:	6118      	str	r0, [r3, #16]
    8d32:	2800      	cmp	r0, #0
    8d34:	d100      	bne.n	8d38 <_svfprintf_r+0x1114>
    8d36:	e24f      	b.n	91d8 <_svfprintf_r+0x15b4>
    8d38:	2340      	movs	r3, #64	; 0x40
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	6153      	str	r3, [r2, #20]
    8d3e:	f7fe ff8e 	bl	7c5e <_svfprintf_r+0x3a>
    8d42:	ab23      	add	r3, sp, #140	; 0x8c
    8d44:	931b      	str	r3, [sp, #108]	; 0x6c
    8d46:	9304      	str	r3, [sp, #16]
    8d48:	ab20      	add	r3, sp, #128	; 0x80
    8d4a:	9303      	str	r3, [sp, #12]
    8d4c:	ab1f      	add	r3, sp, #124	; 0x7c
    8d4e:	9302      	str	r3, [sp, #8]
    8d50:	4653      	mov	r3, sl
    8d52:	9301      	str	r3, [sp, #4]
    8d54:	2303      	movs	r3, #3
    8d56:	464a      	mov	r2, r9
    8d58:	9300      	str	r3, [sp, #0]
    8d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d5c:	9b07      	ldr	r3, [sp, #28]
    8d5e:	f000 fb23 	bl	93a8 <_dtoa_r>
    8d62:	4655      	mov	r5, sl
    8d64:	9011      	str	r0, [sp, #68]	; 0x44
    8d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d68:	4698      	mov	r8, r3
    8d6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d6c:	44a8      	add	r8, r5
    8d6e:	2b46      	cmp	r3, #70	; 0x46
    8d70:	d000      	beq.n	8d74 <_svfprintf_r+0x1150>
    8d72:	e72b      	b.n	8bcc <_svfprintf_r+0xfa8>
    8d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	2b30      	cmp	r3, #48	; 0x30
    8d7a:	d016      	beq.n	8daa <_svfprintf_r+0x1186>
    8d7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d7e:	4498      	add	r8, r3
    8d80:	e724      	b.n	8bcc <_svfprintf_r+0xfa8>
    8d82:	003a      	movs	r2, r7
    8d84:	9906      	ldr	r1, [sp, #24]
    8d86:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d88:	f002 fe8c 	bl	baa4 <__ssprint_r>
    8d8c:	2800      	cmp	r0, #0
    8d8e:	d001      	beq.n	8d94 <_svfprintf_r+0x1170>
    8d90:	f7fe ffcf 	bl	7d32 <_svfprintf_r+0x10e>
    8d94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d96:	68bc      	ldr	r4, [r7, #8]
    8d98:	ae32      	add	r6, sp, #200	; 0xc8
    8d9a:	e778      	b.n	8c8e <_svfprintf_r+0x106a>
    8d9c:	4653      	mov	r3, sl
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d000      	beq.n	8da4 <_svfprintf_r+0x1180>
    8da2:	e6de      	b.n	8b62 <_svfprintf_r+0xf3e>
    8da4:	3301      	adds	r3, #1
    8da6:	469a      	mov	sl, r3
    8da8:	e6db      	b.n	8b62 <_svfprintf_r+0xf3e>
    8daa:	2200      	movs	r2, #0
    8dac:	2300      	movs	r3, #0
    8dae:	4648      	mov	r0, r9
    8db0:	9907      	ldr	r1, [sp, #28]
    8db2:	f7fe fbe1 	bl	7578 <__aeabi_dcmpeq>
    8db6:	2800      	cmp	r0, #0
    8db8:	d1e0      	bne.n	8d7c <_svfprintf_r+0x1158>
    8dba:	2301      	movs	r3, #1
    8dbc:	1b5b      	subs	r3, r3, r5
    8dbe:	931f      	str	r3, [sp, #124]	; 0x7c
    8dc0:	4498      	add	r8, r3
    8dc2:	e703      	b.n	8bcc <_svfprintf_r+0xfa8>
    8dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8dc6:	ab32      	add	r3, sp, #200	; 0xc8
    8dc8:	1a9b      	subs	r3, r3, r2
    8dca:	930e      	str	r3, [sp, #56]	; 0x38
    8dcc:	f7ff f83a 	bl	7e44 <_svfprintf_r+0x220>
    8dd0:	9811      	ldr	r0, [sp, #68]	; 0x44
    8dd2:	f7fe fef5 	bl	7bc0 <strlen>
    8dd6:	0002      	movs	r2, r0
    8dd8:	900e      	str	r0, [sp, #56]	; 0x38
    8dda:	0003      	movs	r3, r0
    8ddc:	f7ff f9cd 	bl	817a <_svfprintf_r+0x556>
    8de0:	232d      	movs	r3, #45	; 0x2d
    8de2:	aa16      	add	r2, sp, #88	; 0x58
    8de4:	77d3      	strb	r3, [r2, #31]
    8de6:	4698      	mov	r8, r3
    8de8:	2300      	movs	r3, #0
    8dea:	469a      	mov	sl, r3
    8dec:	f7ff f835 	bl	7e5a <_svfprintf_r+0x236>
    8df0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df2:	9313      	str	r3, [sp, #76]	; 0x4c
    8df4:	1cda      	adds	r2, r3, #3
    8df6:	db02      	blt.n	8dfe <_svfprintf_r+0x11da>
    8df8:	459a      	cmp	sl, r3
    8dfa:	db00      	blt.n	8dfe <_svfprintf_r+0x11da>
    8dfc:	e70b      	b.n	8c16 <_svfprintf_r+0xff2>
    8dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e00:	3b02      	subs	r3, #2
    8e02:	9312      	str	r3, [sp, #72]	; 0x48
    8e04:	222c      	movs	r2, #44	; 0x2c
    8e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8e08:	2148      	movs	r1, #72	; 0x48
    8e0a:	1e5d      	subs	r5, r3, #1
    8e0c:	ab16      	add	r3, sp, #88	; 0x58
    8e0e:	189b      	adds	r3, r3, r2
    8e10:	466a      	mov	r2, sp
    8e12:	1852      	adds	r2, r2, r1
    8e14:	7812      	ldrb	r2, [r2, #0]
    8e16:	951f      	str	r5, [sp, #124]	; 0x7c
    8e18:	701a      	strb	r2, [r3, #0]
    8e1a:	2d00      	cmp	r5, #0
    8e1c:	da00      	bge.n	8e20 <_svfprintf_r+0x11fc>
    8e1e:	e1a4      	b.n	916a <_svfprintf_r+0x1546>
    8e20:	212d      	movs	r1, #45	; 0x2d
    8e22:	232b      	movs	r3, #43	; 0x2b
    8e24:	aa16      	add	r2, sp, #88	; 0x58
    8e26:	1852      	adds	r2, r2, r1
    8e28:	7013      	strb	r3, [r2, #0]
    8e2a:	2d09      	cmp	r5, #9
    8e2c:	dc00      	bgt.n	8e30 <_svfprintf_r+0x120c>
    8e2e:	e14c      	b.n	90ca <_svfprintf_r+0x14a6>
    8e30:	aa16      	add	r2, sp, #88	; 0x58
    8e32:	233b      	movs	r3, #59	; 0x3b
    8e34:	4694      	mov	ip, r2
    8e36:	4463      	add	r3, ip
    8e38:	469a      	mov	sl, r3
    8e3a:	46b1      	mov	r9, r6
    8e3c:	46a0      	mov	r8, r4
    8e3e:	4656      	mov	r6, sl
    8e40:	e000      	b.n	8e44 <_svfprintf_r+0x1220>
    8e42:	0026      	movs	r6, r4
    8e44:	0028      	movs	r0, r5
    8e46:	210a      	movs	r1, #10
    8e48:	f003 f934 	bl	c0b4 <__aeabi_idivmod>
    8e4c:	1e74      	subs	r4, r6, #1
    8e4e:	3130      	adds	r1, #48	; 0x30
    8e50:	7021      	strb	r1, [r4, #0]
    8e52:	0028      	movs	r0, r5
    8e54:	210a      	movs	r1, #10
    8e56:	f003 f847 	bl	bee8 <__divsi3>
    8e5a:	0005      	movs	r5, r0
    8e5c:	2809      	cmp	r0, #9
    8e5e:	dcf0      	bgt.n	8e42 <_svfprintf_r+0x121e>
    8e60:	0023      	movs	r3, r4
    8e62:	4644      	mov	r4, r8
    8e64:	46b0      	mov	r8, r6
    8e66:	464e      	mov	r6, r9
    8e68:	4699      	mov	r9, r3
    8e6a:	0003      	movs	r3, r0
    8e6c:	3330      	adds	r3, #48	; 0x30
    8e6e:	b2d8      	uxtb	r0, r3
    8e70:	4643      	mov	r3, r8
    8e72:	3b02      	subs	r3, #2
    8e74:	7018      	strb	r0, [r3, #0]
    8e76:	459a      	cmp	sl, r3
    8e78:	d800      	bhi.n	8e7c <_svfprintf_r+0x1258>
    8e7a:	e1b4      	b.n	91e6 <_svfprintf_r+0x15c2>
    8e7c:	4642      	mov	r2, r8
    8e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8e80:	4645      	mov	r5, r8
    8e82:	1a99      	subs	r1, r3, r2
    8e84:	2301      	movs	r3, #1
    8e86:	3107      	adds	r1, #7
    8e88:	425b      	negs	r3, r3
    8e8a:	e001      	b.n	8e90 <_svfprintf_r+0x126c>
    8e8c:	5ce8      	ldrb	r0, [r5, r3]
    8e8e:	3301      	adds	r3, #1
    8e90:	aa21      	add	r2, sp, #132	; 0x84
    8e92:	18d2      	adds	r2, r2, r3
    8e94:	70d0      	strb	r0, [r2, #3]
    8e96:	428b      	cmp	r3, r1
    8e98:	d1f8      	bne.n	8e8c <_svfprintf_r+0x1268>
    8e9a:	a916      	add	r1, sp, #88	; 0x58
    8e9c:	468c      	mov	ip, r1
    8e9e:	222e      	movs	r2, #46	; 0x2e
    8ea0:	464b      	mov	r3, r9
    8ea2:	4462      	add	r2, ip
    8ea4:	4694      	mov	ip, r2
    8ea6:	1afb      	subs	r3, r7, r3
    8ea8:	4463      	add	r3, ip
    8eaa:	aa21      	add	r2, sp, #132	; 0x84
    8eac:	9914      	ldr	r1, [sp, #80]	; 0x50
    8eae:	1a9b      	subs	r3, r3, r2
    8eb0:	469c      	mov	ip, r3
    8eb2:	000a      	movs	r2, r1
    8eb4:	4462      	add	r2, ip
    8eb6:	931a      	str	r3, [sp, #104]	; 0x68
    8eb8:	920e      	str	r2, [sp, #56]	; 0x38
    8eba:	2901      	cmp	r1, #1
    8ebc:	dc00      	bgt.n	8ec0 <_svfprintf_r+0x129c>
    8ebe:	e145      	b.n	914c <_svfprintf_r+0x1528>
    8ec0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ec4:	4694      	mov	ip, r2
    8ec6:	4463      	add	r3, ip
    8ec8:	001a      	movs	r2, r3
    8eca:	930e      	str	r3, [sp, #56]	; 0x38
    8ecc:	43db      	mvns	r3, r3
    8ece:	17db      	asrs	r3, r3, #31
    8ed0:	401a      	ands	r2, r3
    8ed2:	2300      	movs	r3, #0
    8ed4:	9207      	str	r2, [sp, #28]
    8ed6:	9313      	str	r3, [sp, #76]	; 0x4c
    8ed8:	e6ae      	b.n	8c38 <_svfprintf_r+0x1014>
    8eda:	2301      	movs	r3, #1
    8edc:	425b      	negs	r3, r3
    8ede:	930a      	str	r3, [sp, #40]	; 0x28
    8ee0:	f7fe ff2d 	bl	7d3e <_svfprintf_r+0x11a>
    8ee4:	003a      	movs	r2, r7
    8ee6:	9906      	ldr	r1, [sp, #24]
    8ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8eea:	f002 fddb 	bl	baa4 <__ssprint_r>
    8eee:	2800      	cmp	r0, #0
    8ef0:	d001      	beq.n	8ef6 <_svfprintf_r+0x12d2>
    8ef2:	f7fe ff1e 	bl	7d32 <_svfprintf_r+0x10e>
    8ef6:	68bc      	ldr	r4, [r7, #8]
    8ef8:	ae32      	add	r6, sp, #200	; 0xc8
    8efa:	e43c      	b.n	8776 <_svfprintf_r+0xb52>
    8efc:	003a      	movs	r2, r7
    8efe:	9906      	ldr	r1, [sp, #24]
    8f00:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f02:	f002 fdcf 	bl	baa4 <__ssprint_r>
    8f06:	2800      	cmp	r0, #0
    8f08:	d001      	beq.n	8f0e <_svfprintf_r+0x12ea>
    8f0a:	f7fe ff12 	bl	7d32 <_svfprintf_r+0x10e>
    8f0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8f10:	68bc      	ldr	r4, [r7, #8]
    8f12:	ae32      	add	r6, sp, #200	; 0xc8
    8f14:	e56a      	b.n	89ec <_svfprintf_r+0xdc8>
    8f16:	003a      	movs	r2, r7
    8f18:	9906      	ldr	r1, [sp, #24]
    8f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f1c:	f002 fdc2 	bl	baa4 <__ssprint_r>
    8f20:	2800      	cmp	r0, #0
    8f22:	d001      	beq.n	8f28 <_svfprintf_r+0x1304>
    8f24:	f7fe ff05 	bl	7d32 <_svfprintf_r+0x10e>
    8f28:	68bc      	ldr	r4, [r7, #8]
    8f2a:	ae32      	add	r6, sp, #200	; 0xc8
    8f2c:	e557      	b.n	89de <_svfprintf_r+0xdba>
    8f2e:	003a      	movs	r2, r7
    8f30:	9906      	ldr	r1, [sp, #24]
    8f32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f34:	f002 fdb6 	bl	baa4 <__ssprint_r>
    8f38:	2800      	cmp	r0, #0
    8f3a:	d001      	beq.n	8f40 <_svfprintf_r+0x131c>
    8f3c:	f7fe fef9 	bl	7d32 <_svfprintf_r+0x10e>
    8f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8f42:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f44:	68bc      	ldr	r4, [r7, #8]
    8f46:	1a9b      	subs	r3, r3, r2
    8f48:	ae32      	add	r6, sp, #200	; 0xc8
    8f4a:	e56a      	b.n	8a22 <_svfprintf_r+0xdfe>
    8f4c:	4653      	mov	r3, sl
    8f4e:	9307      	str	r3, [sp, #28]
    8f50:	2b06      	cmp	r3, #6
    8f52:	d901      	bls.n	8f58 <_svfprintf_r+0x1334>
    8f54:	2306      	movs	r3, #6
    8f56:	9307      	str	r3, [sp, #28]
    8f58:	9b07      	ldr	r3, [sp, #28]
    8f5a:	950f      	str	r5, [sp, #60]	; 0x3c
    8f5c:	930e      	str	r3, [sp, #56]	; 0x38
    8f5e:	2300      	movs	r3, #0
    8f60:	4698      	mov	r8, r3
    8f62:	469a      	mov	sl, r3
    8f64:	9313      	str	r3, [sp, #76]	; 0x4c
    8f66:	4b24      	ldr	r3, [pc, #144]	; (8ff8 <_svfprintf_r+0x13d4>)
    8f68:	9408      	str	r4, [sp, #32]
    8f6a:	9311      	str	r3, [sp, #68]	; 0x44
    8f6c:	f7fe ff78 	bl	7e60 <_svfprintf_r+0x23c>
    8f70:	2320      	movs	r3, #32
    8f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8f74:	439a      	bics	r2, r3
    8f76:	3b1a      	subs	r3, #26
    8f78:	920e      	str	r2, [sp, #56]	; 0x38
    8f7a:	469a      	mov	sl, r3
    8f7c:	e5f1      	b.n	8b62 <_svfprintf_r+0xf3e>
    8f7e:	ab23      	add	r3, sp, #140	; 0x8c
    8f80:	931b      	str	r3, [sp, #108]	; 0x6c
    8f82:	9304      	str	r3, [sp, #16]
    8f84:	ab20      	add	r3, sp, #128	; 0x80
    8f86:	9303      	str	r3, [sp, #12]
    8f88:	ab1f      	add	r3, sp, #124	; 0x7c
    8f8a:	9302      	str	r3, [sp, #8]
    8f8c:	4653      	mov	r3, sl
    8f8e:	9301      	str	r3, [sp, #4]
    8f90:	2303      	movs	r3, #3
    8f92:	464a      	mov	r2, r9
    8f94:	9300      	str	r3, [sp, #0]
    8f96:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f98:	9b07      	ldr	r3, [sp, #28]
    8f9a:	f000 fa05 	bl	93a8 <_dtoa_r>
    8f9e:	0003      	movs	r3, r0
    8fa0:	4453      	add	r3, sl
    8fa2:	9011      	str	r0, [sp, #68]	; 0x44
    8fa4:	4698      	mov	r8, r3
    8fa6:	4655      	mov	r5, sl
    8fa8:	e6e4      	b.n	8d74 <_svfprintf_r+0x1150>
    8faa:	232d      	movs	r3, #45	; 0x2d
    8fac:	aa16      	add	r2, sp, #88	; 0x58
    8fae:	77d3      	strb	r3, [r2, #31]
    8fb0:	4698      	mov	r8, r3
    8fb2:	f7fe ffdb 	bl	7f6c <_svfprintf_r+0x348>
    8fb6:	2280      	movs	r2, #128	; 0x80
    8fb8:	0612      	lsls	r2, r2, #24
    8fba:	4694      	mov	ip, r2
    8fbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8fbe:	4699      	mov	r9, r3
    8fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8fc2:	4463      	add	r3, ip
    8fc4:	9307      	str	r3, [sp, #28]
    8fc6:	232d      	movs	r3, #45	; 0x2d
    8fc8:	9310      	str	r3, [sp, #64]	; 0x40
    8fca:	e5d7      	b.n	8b7c <_svfprintf_r+0xf58>
    8fcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8fd0:	4694      	mov	ip, r2
    8fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8fd4:	4463      	add	r3, ip
    8fd6:	930e      	str	r3, [sp, #56]	; 0x38
    8fd8:	2a00      	cmp	r2, #0
    8fda:	dc00      	bgt.n	8fde <_svfprintf_r+0x13ba>
    8fdc:	e0ce      	b.n	917c <_svfprintf_r+0x1558>
    8fde:	001a      	movs	r2, r3
    8fe0:	43db      	mvns	r3, r3
    8fe2:	17db      	asrs	r3, r3, #31
    8fe4:	401a      	ands	r2, r3
    8fe6:	2367      	movs	r3, #103	; 0x67
    8fe8:	9207      	str	r2, [sp, #28]
    8fea:	9312      	str	r3, [sp, #72]	; 0x48
    8fec:	e624      	b.n	8c38 <_svfprintf_r+0x1014>
    8fee:	46c0      	nop			; (mov r8, r8)
    8ff0:	0000ceb4 	.word	0x0000ceb4
    8ff4:	0000ce78 	.word	0x0000ce78
    8ff8:	0000ceac 	.word	0x0000ceac
    8ffc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8ffe:	9313      	str	r3, [sp, #76]	; 0x4c
    9000:	2b00      	cmp	r3, #0
    9002:	dc00      	bgt.n	9006 <_svfprintf_r+0x13e2>
    9004:	e0d5      	b.n	91b2 <_svfprintf_r+0x158e>
    9006:	4652      	mov	r2, sl
    9008:	2a00      	cmp	r2, #0
    900a:	d000      	beq.n	900e <_svfprintf_r+0x13ea>
    900c:	e092      	b.n	9134 <_svfprintf_r+0x1510>
    900e:	07e2      	lsls	r2, r4, #31
    9010:	d500      	bpl.n	9014 <_svfprintf_r+0x13f0>
    9012:	e08f      	b.n	9134 <_svfprintf_r+0x1510>
    9014:	9307      	str	r3, [sp, #28]
    9016:	930e      	str	r3, [sp, #56]	; 0x38
    9018:	e60e      	b.n	8c38 <_svfprintf_r+0x1014>
    901a:	ab16      	add	r3, sp, #88	; 0x58
    901c:	7fdb      	ldrb	r3, [r3, #31]
    901e:	950f      	str	r5, [sp, #60]	; 0x3c
    9020:	4698      	mov	r8, r3
    9022:	4653      	mov	r3, sl
    9024:	9307      	str	r3, [sp, #28]
    9026:	930e      	str	r3, [sp, #56]	; 0x38
    9028:	2300      	movs	r3, #0
    902a:	9408      	str	r4, [sp, #32]
    902c:	469a      	mov	sl, r3
    902e:	9313      	str	r3, [sp, #76]	; 0x4c
    9030:	f7fe ff10 	bl	7e54 <_svfprintf_r+0x230>
    9034:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9036:	4698      	mov	r8, r3
    9038:	9b12      	ldr	r3, [sp, #72]	; 0x48
    903a:	44a8      	add	r8, r5
    903c:	2b47      	cmp	r3, #71	; 0x47
    903e:	d000      	beq.n	9042 <_svfprintf_r+0x141e>
    9040:	e5c4      	b.n	8bcc <_svfprintf_r+0xfa8>
    9042:	07e3      	lsls	r3, r4, #31
    9044:	d500      	bpl.n	9048 <_svfprintf_r+0x1424>
    9046:	e68e      	b.n	8d66 <_svfprintf_r+0x1142>
    9048:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    904a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    904c:	1a9b      	subs	r3, r3, r2
    904e:	9314      	str	r3, [sp, #80]	; 0x50
    9050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9052:	2b47      	cmp	r3, #71	; 0x47
    9054:	d100      	bne.n	9058 <_svfprintf_r+0x1434>
    9056:	e6cb      	b.n	8df0 <_svfprintf_r+0x11cc>
    9058:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    905a:	9313      	str	r3, [sp, #76]	; 0x4c
    905c:	e6d2      	b.n	8e04 <_svfprintf_r+0x11e0>
    905e:	4244      	negs	r4, r0
    9060:	3010      	adds	r0, #16
    9062:	db00      	blt.n	9066 <_svfprintf_r+0x1442>
    9064:	e0d0      	b.n	9208 <_svfprintf_r+0x15e4>
    9066:	486e      	ldr	r0, [pc, #440]	; (9220 <_svfprintf_r+0x15fc>)
    9068:	2610      	movs	r6, #16
    906a:	0005      	movs	r5, r0
    906c:	e003      	b.n	9076 <_svfprintf_r+0x1452>
    906e:	3208      	adds	r2, #8
    9070:	3c10      	subs	r4, #16
    9072:	2c10      	cmp	r4, #16
    9074:	dd38      	ble.n	90e8 <_svfprintf_r+0x14c4>
    9076:	3110      	adds	r1, #16
    9078:	3301      	adds	r3, #1
    907a:	6015      	str	r5, [r2, #0]
    907c:	6056      	str	r6, [r2, #4]
    907e:	60b9      	str	r1, [r7, #8]
    9080:	607b      	str	r3, [r7, #4]
    9082:	2b07      	cmp	r3, #7
    9084:	ddf3      	ble.n	906e <_svfprintf_r+0x144a>
    9086:	003a      	movs	r2, r7
    9088:	9906      	ldr	r1, [sp, #24]
    908a:	9809      	ldr	r0, [sp, #36]	; 0x24
    908c:	f002 fd0a 	bl	baa4 <__ssprint_r>
    9090:	2800      	cmp	r0, #0
    9092:	d001      	beq.n	9098 <_svfprintf_r+0x1474>
    9094:	f7fe fe4d 	bl	7d32 <_svfprintf_r+0x10e>
    9098:	68b9      	ldr	r1, [r7, #8]
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	aa32      	add	r2, sp, #200	; 0xc8
    909e:	e7e7      	b.n	9070 <_svfprintf_r+0x144c>
    90a0:	003a      	movs	r2, r7
    90a2:	9906      	ldr	r1, [sp, #24]
    90a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    90a6:	f002 fcfd 	bl	baa4 <__ssprint_r>
    90aa:	2800      	cmp	r0, #0
    90ac:	d001      	beq.n	90b2 <_svfprintf_r+0x148e>
    90ae:	f7fe fe40 	bl	7d32 <_svfprintf_r+0x10e>
    90b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    90b4:	68b9      	ldr	r1, [r7, #8]
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	aa32      	add	r2, sp, #200	; 0xc8
    90ba:	e600      	b.n	8cbe <_svfprintf_r+0x109a>
    90bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    90be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    90c0:	4694      	mov	ip, r2
    90c2:	4463      	add	r3, ip
    90c4:	001a      	movs	r2, r3
    90c6:	930e      	str	r3, [sp, #56]	; 0x38
    90c8:	e78a      	b.n	8fe0 <_svfprintf_r+0x13bc>
    90ca:	212e      	movs	r1, #46	; 0x2e
    90cc:	2330      	movs	r3, #48	; 0x30
    90ce:	aa16      	add	r2, sp, #88	; 0x58
    90d0:	1852      	adds	r2, r2, r1
    90d2:	7013      	strb	r3, [r2, #0]
    90d4:	002b      	movs	r3, r5
    90d6:	aa16      	add	r2, sp, #88	; 0x58
    90d8:	3101      	adds	r1, #1
    90da:	3330      	adds	r3, #48	; 0x30
    90dc:	1852      	adds	r2, r2, r1
    90de:	7013      	strb	r3, [r2, #0]
    90e0:	ab22      	add	r3, sp, #136	; 0x88
    90e2:	e6e2      	b.n	8eaa <_svfprintf_r+0x1286>
    90e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    90e6:	e585      	b.n	8bf4 <_svfprintf_r+0xfd0>
    90e8:	46a9      	mov	r9, r5
    90ea:	4648      	mov	r0, r9
    90ec:	1909      	adds	r1, r1, r4
    90ee:	3301      	adds	r3, #1
    90f0:	6010      	str	r0, [r2, #0]
    90f2:	6054      	str	r4, [r2, #4]
    90f4:	60b9      	str	r1, [r7, #8]
    90f6:	3208      	adds	r2, #8
    90f8:	607b      	str	r3, [r7, #4]
    90fa:	2b07      	cmp	r3, #7
    90fc:	dc00      	bgt.n	9100 <_svfprintf_r+0x14dc>
    90fe:	e5e1      	b.n	8cc4 <_svfprintf_r+0x10a0>
    9100:	003a      	movs	r2, r7
    9102:	9906      	ldr	r1, [sp, #24]
    9104:	9809      	ldr	r0, [sp, #36]	; 0x24
    9106:	f002 fccd 	bl	baa4 <__ssprint_r>
    910a:	2800      	cmp	r0, #0
    910c:	d001      	beq.n	9112 <_svfprintf_r+0x14ee>
    910e:	f7fe fe10 	bl	7d32 <_svfprintf_r+0x10e>
    9112:	68b9      	ldr	r1, [r7, #8]
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	aa32      	add	r2, sp, #200	; 0xc8
    9118:	e5d4      	b.n	8cc4 <_svfprintf_r+0x10a0>
    911a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    911c:	2b00      	cmp	r3, #0
    911e:	db38      	blt.n	9192 <_svfprintf_r+0x156e>
    9120:	ab16      	add	r3, sp, #88	; 0x58
    9122:	7fdb      	ldrb	r3, [r3, #31]
    9124:	4698      	mov	r8, r3
    9126:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9128:	2b47      	cmp	r3, #71	; 0x47
    912a:	dc2e      	bgt.n	918a <_svfprintf_r+0x1566>
    912c:	4b3d      	ldr	r3, [pc, #244]	; (9224 <_svfprintf_r+0x1600>)
    912e:	9311      	str	r3, [sp, #68]	; 0x44
    9130:	f7fe ff23 	bl	7f7a <_svfprintf_r+0x356>
    9134:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9138:	4694      	mov	ip, r2
    913a:	4463      	add	r3, ip
    913c:	4453      	add	r3, sl
    913e:	001a      	movs	r2, r3
    9140:	930e      	str	r3, [sp, #56]	; 0x38
    9142:	43db      	mvns	r3, r3
    9144:	17db      	asrs	r3, r3, #31
    9146:	401a      	ands	r2, r3
    9148:	9207      	str	r2, [sp, #28]
    914a:	e575      	b.n	8c38 <_svfprintf_r+0x1014>
    914c:	2301      	movs	r3, #1
    914e:	4023      	ands	r3, r4
    9150:	9313      	str	r3, [sp, #76]	; 0x4c
    9152:	d000      	beq.n	9156 <_svfprintf_r+0x1532>
    9154:	e6b4      	b.n	8ec0 <_svfprintf_r+0x129c>
    9156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9158:	43d3      	mvns	r3, r2
    915a:	17db      	asrs	r3, r3, #31
    915c:	401a      	ands	r2, r3
    915e:	9207      	str	r2, [sp, #28]
    9160:	e56a      	b.n	8c38 <_svfprintf_r+0x1014>
    9162:	4a2f      	ldr	r2, [pc, #188]	; (9220 <_svfprintf_r+0x15fc>)
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	4691      	mov	r9, r2
    9168:	e42d      	b.n	89c6 <_svfprintf_r+0xda2>
    916a:	2301      	movs	r3, #1
    916c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    916e:	391b      	subs	r1, #27
    9170:	1a9d      	subs	r5, r3, r2
    9172:	aa16      	add	r2, sp, #88	; 0x58
    9174:	332c      	adds	r3, #44	; 0x2c
    9176:	1852      	adds	r2, r2, r1
    9178:	7013      	strb	r3, [r2, #0]
    917a:	e656      	b.n	8e2a <_svfprintf_r+0x1206>
    917c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    917e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9180:	1a98      	subs	r0, r3, r2
    9182:	1c43      	adds	r3, r0, #1
    9184:	001a      	movs	r2, r3
    9186:	930e      	str	r3, [sp, #56]	; 0x38
    9188:	e72a      	b.n	8fe0 <_svfprintf_r+0x13bc>
    918a:	4b27      	ldr	r3, [pc, #156]	; (9228 <_svfprintf_r+0x1604>)
    918c:	9311      	str	r3, [sp, #68]	; 0x44
    918e:	f7fe fef4 	bl	7f7a <_svfprintf_r+0x356>
    9192:	232d      	movs	r3, #45	; 0x2d
    9194:	aa16      	add	r2, sp, #88	; 0x58
    9196:	77d3      	strb	r3, [r2, #31]
    9198:	4698      	mov	r8, r3
    919a:	e7c4      	b.n	9126 <_svfprintf_r+0x1502>
    919c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    919e:	1d1a      	adds	r2, r3, #4
    91a0:	681b      	ldr	r3, [r3, #0]
    91a2:	469a      	mov	sl, r3
    91a4:	2b00      	cmp	r3, #0
    91a6:	db36      	blt.n	9216 <_svfprintf_r+0x15f2>
    91a8:	784b      	ldrb	r3, [r1, #1]
    91aa:	920f      	str	r2, [sp, #60]	; 0x3c
    91ac:	4659      	mov	r1, fp
    91ae:	f7fe fd9d 	bl	7cec <_svfprintf_r+0xc8>
    91b2:	4653      	mov	r3, sl
    91b4:	2b00      	cmp	r3, #0
    91b6:	d101      	bne.n	91bc <_svfprintf_r+0x1598>
    91b8:	07e3      	lsls	r3, r4, #31
    91ba:	d503      	bpl.n	91c4 <_svfprintf_r+0x15a0>
    91bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    91be:	1c58      	adds	r0, r3, #1
    91c0:	0003      	movs	r3, r0
    91c2:	e7bb      	b.n	913c <_svfprintf_r+0x1518>
    91c4:	2301      	movs	r3, #1
    91c6:	e725      	b.n	9014 <_svfprintf_r+0x13f0>
    91c8:	ab16      	add	r3, sp, #88	; 0x58
    91ca:	77d8      	strb	r0, [r3, #31]
    91cc:	f7fe ff6c 	bl	80a8 <_svfprintf_r+0x484>
    91d0:	ab16      	add	r3, sp, #88	; 0x58
    91d2:	77d8      	strb	r0, [r3, #31]
    91d4:	f7ff f814 	bl	8200 <_svfprintf_r+0x5dc>
    91d8:	230c      	movs	r3, #12
    91da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    91dc:	6013      	str	r3, [r2, #0]
    91de:	3b0d      	subs	r3, #13
    91e0:	930a      	str	r3, [sp, #40]	; 0x28
    91e2:	f7fe fdac 	bl	7d3e <_svfprintf_r+0x11a>
    91e6:	aa16      	add	r2, sp, #88	; 0x58
    91e8:	232e      	movs	r3, #46	; 0x2e
    91ea:	4694      	mov	ip, r2
    91ec:	4463      	add	r3, ip
    91ee:	e65c      	b.n	8eaa <_svfprintf_r+0x1286>
    91f0:	ab16      	add	r3, sp, #88	; 0x58
    91f2:	77d8      	strb	r0, [r3, #31]
    91f4:	f7fe fe85 	bl	7f02 <_svfprintf_r+0x2de>
    91f8:	ab16      	add	r3, sp, #88	; 0x58
    91fa:	77d8      	strb	r0, [r3, #31]
    91fc:	f7fe fddd 	bl	7dba <_svfprintf_r+0x196>
    9200:	ab16      	add	r3, sp, #88	; 0x58
    9202:	77d8      	strb	r0, [r3, #31]
    9204:	f7ff f87d 	bl	8302 <_svfprintf_r+0x6de>
    9208:	4805      	ldr	r0, [pc, #20]	; (9220 <_svfprintf_r+0x15fc>)
    920a:	4681      	mov	r9, r0
    920c:	e76d      	b.n	90ea <_svfprintf_r+0x14c6>
    920e:	ab16      	add	r3, sp, #88	; 0x58
    9210:	77d8      	strb	r0, [r3, #31]
    9212:	f7fe ff79 	bl	8108 <_svfprintf_r+0x4e4>
    9216:	2301      	movs	r3, #1
    9218:	425b      	negs	r3, r3
    921a:	469a      	mov	sl, r3
    921c:	e7c4      	b.n	91a8 <_svfprintf_r+0x1584>
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	0000cec8 	.word	0x0000cec8
    9224:	0000ce7c 	.word	0x0000ce7c
    9228:	0000ce80 	.word	0x0000ce80

0000922c <register_fini>:
    922c:	4b03      	ldr	r3, [pc, #12]	; (923c <register_fini+0x10>)
    922e:	b510      	push	{r4, lr}
    9230:	2b00      	cmp	r3, #0
    9232:	d002      	beq.n	923a <register_fini+0xe>
    9234:	4802      	ldr	r0, [pc, #8]	; (9240 <register_fini+0x14>)
    9236:	f000 f805 	bl	9244 <atexit>
    923a:	bd10      	pop	{r4, pc}
    923c:	00000000 	.word	0x00000000
    9240:	0000a5b5 	.word	0x0000a5b5

00009244 <atexit>:
    9244:	b510      	push	{r4, lr}
    9246:	0001      	movs	r1, r0
    9248:	2300      	movs	r3, #0
    924a:	2200      	movs	r2, #0
    924c:	2000      	movs	r0, #0
    924e:	f002 fccd 	bl	bbec <__register_exitproc>
    9252:	bd10      	pop	{r4, pc}

00009254 <quorem>:
    9254:	b5f0      	push	{r4, r5, r6, r7, lr}
    9256:	4645      	mov	r5, r8
    9258:	4680      	mov	r8, r0
    925a:	46de      	mov	lr, fp
    925c:	4657      	mov	r7, sl
    925e:	464e      	mov	r6, r9
    9260:	4642      	mov	r2, r8
    9262:	b5e0      	push	{r5, r6, r7, lr}
    9264:	690c      	ldr	r4, [r1, #16]
    9266:	6912      	ldr	r2, [r2, #16]
    9268:	b085      	sub	sp, #20
    926a:	000b      	movs	r3, r1
    926c:	9102      	str	r1, [sp, #8]
    926e:	2000      	movs	r0, #0
    9270:	4294      	cmp	r4, r2
    9272:	dd00      	ble.n	9276 <quorem+0x22>
    9274:	e090      	b.n	9398 <quorem+0x144>
    9276:	2214      	movs	r2, #20
    9278:	4694      	mov	ip, r2
    927a:	4463      	add	r3, ip
    927c:	4699      	mov	r9, r3
    927e:	464a      	mov	r2, r9
    9280:	3c01      	subs	r4, #1
    9282:	00a3      	lsls	r3, r4, #2
    9284:	18d6      	adds	r6, r2, r3
    9286:	2214      	movs	r2, #20
    9288:	4442      	add	r2, r8
    928a:	4693      	mov	fp, r2
    928c:	449b      	add	fp, r3
    928e:	6833      	ldr	r3, [r6, #0]
    9290:	0015      	movs	r5, r2
    9292:	1c59      	adds	r1, r3, #1
    9294:	465b      	mov	r3, fp
    9296:	6818      	ldr	r0, [r3, #0]
    9298:	9201      	str	r2, [sp, #4]
    929a:	f7fc faf3 	bl	5884 <__udivsi3>
    929e:	1e03      	subs	r3, r0, #0
    92a0:	9000      	str	r0, [sp, #0]
    92a2:	d042      	beq.n	932a <quorem+0xd6>
    92a4:	0029      	movs	r1, r5
    92a6:	2700      	movs	r7, #0
    92a8:	464d      	mov	r5, r9
    92aa:	2000      	movs	r0, #0
    92ac:	46b1      	mov	r9, r6
    92ae:	46a2      	mov	sl, r4
    92b0:	003e      	movs	r6, r7
    92b2:	0004      	movs	r4, r0
    92b4:	469c      	mov	ip, r3
    92b6:	002f      	movs	r7, r5
    92b8:	0008      	movs	r0, r1
    92ba:	9503      	str	r5, [sp, #12]
    92bc:	4663      	mov	r3, ip
    92be:	cf04      	ldmia	r7!, {r2}
    92c0:	0415      	lsls	r5, r2, #16
    92c2:	0c2d      	lsrs	r5, r5, #16
    92c4:	435d      	muls	r5, r3
    92c6:	0c12      	lsrs	r2, r2, #16
    92c8:	435a      	muls	r2, r3
    92ca:	19ad      	adds	r5, r5, r6
    92cc:	0c2b      	lsrs	r3, r5, #16
    92ce:	18d2      	adds	r2, r2, r3
    92d0:	6803      	ldr	r3, [r0, #0]
    92d2:	042d      	lsls	r5, r5, #16
    92d4:	0419      	lsls	r1, r3, #16
    92d6:	0c09      	lsrs	r1, r1, #16
    92d8:	1909      	adds	r1, r1, r4
    92da:	0c16      	lsrs	r6, r2, #16
    92dc:	0c2d      	lsrs	r5, r5, #16
    92de:	0412      	lsls	r2, r2, #16
    92e0:	1b49      	subs	r1, r1, r5
    92e2:	0c12      	lsrs	r2, r2, #16
    92e4:	0c1b      	lsrs	r3, r3, #16
    92e6:	1a9b      	subs	r3, r3, r2
    92e8:	140a      	asrs	r2, r1, #16
    92ea:	189b      	adds	r3, r3, r2
    92ec:	0409      	lsls	r1, r1, #16
    92ee:	141c      	asrs	r4, r3, #16
    92f0:	0c09      	lsrs	r1, r1, #16
    92f2:	041b      	lsls	r3, r3, #16
    92f4:	4319      	orrs	r1, r3
    92f6:	c002      	stmia	r0!, {r1}
    92f8:	45b9      	cmp	r9, r7
    92fa:	d2df      	bcs.n	92bc <quorem+0x68>
    92fc:	9b03      	ldr	r3, [sp, #12]
    92fe:	464e      	mov	r6, r9
    9300:	4699      	mov	r9, r3
    9302:	465b      	mov	r3, fp
    9304:	681b      	ldr	r3, [r3, #0]
    9306:	4654      	mov	r4, sl
    9308:	2b00      	cmp	r3, #0
    930a:	d10e      	bne.n	932a <quorem+0xd6>
    930c:	465b      	mov	r3, fp
    930e:	9a01      	ldr	r2, [sp, #4]
    9310:	3b04      	subs	r3, #4
    9312:	429a      	cmp	r2, r3
    9314:	d304      	bcc.n	9320 <quorem+0xcc>
    9316:	e006      	b.n	9326 <quorem+0xd2>
    9318:	3b04      	subs	r3, #4
    931a:	3c01      	subs	r4, #1
    931c:	429a      	cmp	r2, r3
    931e:	d202      	bcs.n	9326 <quorem+0xd2>
    9320:	6819      	ldr	r1, [r3, #0]
    9322:	2900      	cmp	r1, #0
    9324:	d0f8      	beq.n	9318 <quorem+0xc4>
    9326:	4643      	mov	r3, r8
    9328:	611c      	str	r4, [r3, #16]
    932a:	9902      	ldr	r1, [sp, #8]
    932c:	4640      	mov	r0, r8
    932e:	f002 f887 	bl	b440 <__mcmp>
    9332:	2800      	cmp	r0, #0
    9334:	db2f      	blt.n	9396 <quorem+0x142>
    9336:	464f      	mov	r7, r9
    9338:	2000      	movs	r0, #0
    933a:	9b00      	ldr	r3, [sp, #0]
    933c:	9d01      	ldr	r5, [sp, #4]
    933e:	3301      	adds	r3, #1
    9340:	9300      	str	r3, [sp, #0]
    9342:	682b      	ldr	r3, [r5, #0]
    9344:	cf02      	ldmia	r7!, {r1}
    9346:	041a      	lsls	r2, r3, #16
    9348:	0c12      	lsrs	r2, r2, #16
    934a:	1810      	adds	r0, r2, r0
    934c:	040a      	lsls	r2, r1, #16
    934e:	0c12      	lsrs	r2, r2, #16
    9350:	1a82      	subs	r2, r0, r2
    9352:	0c09      	lsrs	r1, r1, #16
    9354:	0c1b      	lsrs	r3, r3, #16
    9356:	1a5b      	subs	r3, r3, r1
    9358:	1411      	asrs	r1, r2, #16
    935a:	185b      	adds	r3, r3, r1
    935c:	0412      	lsls	r2, r2, #16
    935e:	1418      	asrs	r0, r3, #16
    9360:	0c12      	lsrs	r2, r2, #16
    9362:	041b      	lsls	r3, r3, #16
    9364:	4313      	orrs	r3, r2
    9366:	c508      	stmia	r5!, {r3}
    9368:	42be      	cmp	r6, r7
    936a:	d2ea      	bcs.n	9342 <quorem+0xee>
    936c:	9901      	ldr	r1, [sp, #4]
    936e:	00a3      	lsls	r3, r4, #2
    9370:	468c      	mov	ip, r1
    9372:	4463      	add	r3, ip
    9374:	681a      	ldr	r2, [r3, #0]
    9376:	2a00      	cmp	r2, #0
    9378:	d10d      	bne.n	9396 <quorem+0x142>
    937a:	3b04      	subs	r3, #4
    937c:	000a      	movs	r2, r1
    937e:	4299      	cmp	r1, r3
    9380:	d304      	bcc.n	938c <quorem+0x138>
    9382:	e006      	b.n	9392 <quorem+0x13e>
    9384:	3b04      	subs	r3, #4
    9386:	3c01      	subs	r4, #1
    9388:	429a      	cmp	r2, r3
    938a:	d202      	bcs.n	9392 <quorem+0x13e>
    938c:	6819      	ldr	r1, [r3, #0]
    938e:	2900      	cmp	r1, #0
    9390:	d0f8      	beq.n	9384 <quorem+0x130>
    9392:	4643      	mov	r3, r8
    9394:	611c      	str	r4, [r3, #16]
    9396:	9800      	ldr	r0, [sp, #0]
    9398:	b005      	add	sp, #20
    939a:	bc3c      	pop	{r2, r3, r4, r5}
    939c:	4690      	mov	r8, r2
    939e:	4699      	mov	r9, r3
    93a0:	46a2      	mov	sl, r4
    93a2:	46ab      	mov	fp, r5
    93a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93a6:	46c0      	nop			; (mov r8, r8)

000093a8 <_dtoa_r>:
    93a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93aa:	4657      	mov	r7, sl
    93ac:	464e      	mov	r6, r9
    93ae:	4645      	mov	r5, r8
    93b0:	46de      	mov	lr, fp
    93b2:	b5e0      	push	{r5, r6, r7, lr}
    93b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    93b6:	b099      	sub	sp, #100	; 0x64
    93b8:	4682      	mov	sl, r0
    93ba:	001d      	movs	r5, r3
    93bc:	0016      	movs	r6, r2
    93be:	001f      	movs	r7, r3
    93c0:	2900      	cmp	r1, #0
    93c2:	d009      	beq.n	93d8 <_dtoa_r+0x30>
    93c4:	2301      	movs	r3, #1
    93c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    93c8:	4093      	lsls	r3, r2
    93ca:	604a      	str	r2, [r1, #4]
    93cc:	608b      	str	r3, [r1, #8]
    93ce:	f001 fe2b 	bl	b028 <_Bfree>
    93d2:	2300      	movs	r3, #0
    93d4:	4652      	mov	r2, sl
    93d6:	6413      	str	r3, [r2, #64]	; 0x40
    93d8:	46b8      	mov	r8, r7
    93da:	2f00      	cmp	r7, #0
    93dc:	db37      	blt.n	944e <_dtoa_r+0xa6>
    93de:	2300      	movs	r3, #0
    93e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    93e2:	6013      	str	r3, [r2, #0]
    93e4:	4642      	mov	r2, r8
    93e6:	4bd6      	ldr	r3, [pc, #856]	; (9740 <_dtoa_r+0x398>)
    93e8:	401a      	ands	r2, r3
    93ea:	429a      	cmp	r2, r3
    93ec:	d018      	beq.n	9420 <_dtoa_r+0x78>
    93ee:	2200      	movs	r2, #0
    93f0:	2300      	movs	r3, #0
    93f2:	0030      	movs	r0, r6
    93f4:	0039      	movs	r1, r7
    93f6:	f7fe f8bf 	bl	7578 <__aeabi_dcmpeq>
    93fa:	2800      	cmp	r0, #0
    93fc:	d02f      	beq.n	945e <_dtoa_r+0xb6>
    93fe:	2301      	movs	r3, #1
    9400:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9402:	6013      	str	r3, [r2, #0]
    9404:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9406:	2b00      	cmp	r3, #0
    9408:	d100      	bne.n	940c <_dtoa_r+0x64>
    940a:	e22a      	b.n	9862 <_dtoa_r+0x4ba>
    940c:	48cd      	ldr	r0, [pc, #820]	; (9744 <_dtoa_r+0x39c>)
    940e:	6018      	str	r0, [r3, #0]
    9410:	3801      	subs	r0, #1
    9412:	b019      	add	sp, #100	; 0x64
    9414:	bc3c      	pop	{r2, r3, r4, r5}
    9416:	4690      	mov	r8, r2
    9418:	4699      	mov	r9, r3
    941a:	46a2      	mov	sl, r4
    941c:	46ab      	mov	fp, r5
    941e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9420:	4bc9      	ldr	r3, [pc, #804]	; (9748 <_dtoa_r+0x3a0>)
    9422:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9424:	6013      	str	r3, [r2, #0]
    9426:	2e00      	cmp	r6, #0
    9428:	d10b      	bne.n	9442 <_dtoa_r+0x9a>
    942a:	4643      	mov	r3, r8
    942c:	0318      	lsls	r0, r3, #12
    942e:	d108      	bne.n	9442 <_dtoa_r+0x9a>
    9430:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9432:	48c6      	ldr	r0, [pc, #792]	; (974c <_dtoa_r+0x3a4>)
    9434:	2b00      	cmp	r3, #0
    9436:	d0ec      	beq.n	9412 <_dtoa_r+0x6a>
    9438:	0003      	movs	r3, r0
    943a:	3308      	adds	r3, #8
    943c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    943e:	6013      	str	r3, [r2, #0]
    9440:	e7e7      	b.n	9412 <_dtoa_r+0x6a>
    9442:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9444:	48c2      	ldr	r0, [pc, #776]	; (9750 <_dtoa_r+0x3a8>)
    9446:	2b00      	cmp	r3, #0
    9448:	d0e3      	beq.n	9412 <_dtoa_r+0x6a>
    944a:	1cc3      	adds	r3, r0, #3
    944c:	e7f6      	b.n	943c <_dtoa_r+0x94>
    944e:	2301      	movs	r3, #1
    9450:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9452:	0068      	lsls	r0, r5, #1
    9454:	6013      	str	r3, [r2, #0]
    9456:	0843      	lsrs	r3, r0, #1
    9458:	4698      	mov	r8, r3
    945a:	001f      	movs	r7, r3
    945c:	e7c2      	b.n	93e4 <_dtoa_r+0x3c>
    945e:	ab16      	add	r3, sp, #88	; 0x58
    9460:	9301      	str	r3, [sp, #4]
    9462:	ab17      	add	r3, sp, #92	; 0x5c
    9464:	9300      	str	r3, [sp, #0]
    9466:	0032      	movs	r2, r6
    9468:	003b      	movs	r3, r7
    946a:	4650      	mov	r0, sl
    946c:	f002 f89e 	bl	b5ac <__d2b>
    9470:	4643      	mov	r3, r8
    9472:	4683      	mov	fp, r0
    9474:	0d1a      	lsrs	r2, r3, #20
    9476:	d100      	bne.n	947a <_dtoa_r+0xd2>
    9478:	e1d6      	b.n	9828 <_dtoa_r+0x480>
    947a:	033b      	lsls	r3, r7, #12
    947c:	4cb5      	ldr	r4, [pc, #724]	; (9754 <_dtoa_r+0x3ac>)
    947e:	0b1b      	lsrs	r3, r3, #12
    9480:	431c      	orrs	r4, r3
    9482:	4bb5      	ldr	r3, [pc, #724]	; (9758 <_dtoa_r+0x3b0>)
    9484:	0030      	movs	r0, r6
    9486:	4698      	mov	r8, r3
    9488:	9b16      	ldr	r3, [sp, #88]	; 0x58
    948a:	0021      	movs	r1, r4
    948c:	4699      	mov	r9, r3
    948e:	2300      	movs	r3, #0
    9490:	4490      	add	r8, r2
    9492:	930f      	str	r3, [sp, #60]	; 0x3c
    9494:	2200      	movs	r2, #0
    9496:	4bb1      	ldr	r3, [pc, #708]	; (975c <_dtoa_r+0x3b4>)
    9498:	f7fd fc48 	bl	6d2c <__aeabi_dsub>
    949c:	4ab0      	ldr	r2, [pc, #704]	; (9760 <_dtoa_r+0x3b8>)
    949e:	4bb1      	ldr	r3, [pc, #708]	; (9764 <_dtoa_r+0x3bc>)
    94a0:	f7fd f9c4 	bl	682c <__aeabi_dmul>
    94a4:	4ab0      	ldr	r2, [pc, #704]	; (9768 <_dtoa_r+0x3c0>)
    94a6:	4bb1      	ldr	r3, [pc, #708]	; (976c <_dtoa_r+0x3c4>)
    94a8:	f002 fe08 	bl	c0bc <__aeabi_dadd>
    94ac:	0004      	movs	r4, r0
    94ae:	4640      	mov	r0, r8
    94b0:	000d      	movs	r5, r1
    94b2:	f7fd ff85 	bl	73c0 <__aeabi_i2d>
    94b6:	4aae      	ldr	r2, [pc, #696]	; (9770 <_dtoa_r+0x3c8>)
    94b8:	4bae      	ldr	r3, [pc, #696]	; (9774 <_dtoa_r+0x3cc>)
    94ba:	f7fd f9b7 	bl	682c <__aeabi_dmul>
    94be:	0002      	movs	r2, r0
    94c0:	000b      	movs	r3, r1
    94c2:	0020      	movs	r0, r4
    94c4:	0029      	movs	r1, r5
    94c6:	f002 fdf9 	bl	c0bc <__aeabi_dadd>
    94ca:	0004      	movs	r4, r0
    94cc:	000d      	movs	r5, r1
    94ce:	f7fd ff43 	bl	7358 <__aeabi_d2iz>
    94d2:	2200      	movs	r2, #0
    94d4:	9003      	str	r0, [sp, #12]
    94d6:	2300      	movs	r3, #0
    94d8:	0020      	movs	r0, r4
    94da:	0029      	movs	r1, r5
    94dc:	f7fe f852 	bl	7584 <__aeabi_dcmplt>
    94e0:	2800      	cmp	r0, #0
    94e2:	d000      	beq.n	94e6 <_dtoa_r+0x13e>
    94e4:	e2b1      	b.n	9a4a <_dtoa_r+0x6a2>
    94e6:	2301      	movs	r3, #1
    94e8:	9c03      	ldr	r4, [sp, #12]
    94ea:	930c      	str	r3, [sp, #48]	; 0x30
    94ec:	2c16      	cmp	r4, #22
    94ee:	d810      	bhi.n	9512 <_dtoa_r+0x16a>
    94f0:	49a1      	ldr	r1, [pc, #644]	; (9778 <_dtoa_r+0x3d0>)
    94f2:	00e3      	lsls	r3, r4, #3
    94f4:	18c9      	adds	r1, r1, r3
    94f6:	0032      	movs	r2, r6
    94f8:	6808      	ldr	r0, [r1, #0]
    94fa:	6849      	ldr	r1, [r1, #4]
    94fc:	003b      	movs	r3, r7
    94fe:	f7fe f855 	bl	75ac <__aeabi_dcmpgt>
    9502:	2800      	cmp	r0, #0
    9504:	d100      	bne.n	9508 <_dtoa_r+0x160>
    9506:	e31d      	b.n	9b44 <_dtoa_r+0x79c>
    9508:	0023      	movs	r3, r4
    950a:	3b01      	subs	r3, #1
    950c:	9303      	str	r3, [sp, #12]
    950e:	2300      	movs	r3, #0
    9510:	930c      	str	r3, [sp, #48]	; 0x30
    9512:	464b      	mov	r3, r9
    9514:	4642      	mov	r2, r8
    9516:	1a9a      	subs	r2, r3, r2
    9518:	2300      	movs	r3, #0
    951a:	9306      	str	r3, [sp, #24]
    951c:	0013      	movs	r3, r2
    951e:	3b01      	subs	r3, #1
    9520:	9304      	str	r3, [sp, #16]
    9522:	d500      	bpl.n	9526 <_dtoa_r+0x17e>
    9524:	e2a1      	b.n	9a6a <_dtoa_r+0x6c2>
    9526:	9b03      	ldr	r3, [sp, #12]
    9528:	2b00      	cmp	r3, #0
    952a:	da00      	bge.n	952e <_dtoa_r+0x186>
    952c:	e284      	b.n	9a38 <_dtoa_r+0x690>
    952e:	469c      	mov	ip, r3
    9530:	930d      	str	r3, [sp, #52]	; 0x34
    9532:	2300      	movs	r3, #0
    9534:	9a04      	ldr	r2, [sp, #16]
    9536:	4699      	mov	r9, r3
    9538:	0011      	movs	r1, r2
    953a:	4461      	add	r1, ip
    953c:	9104      	str	r1, [sp, #16]
    953e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9540:	2b09      	cmp	r3, #9
    9542:	d900      	bls.n	9546 <_dtoa_r+0x19e>
    9544:	e18f      	b.n	9866 <_dtoa_r+0x4be>
    9546:	2401      	movs	r4, #1
    9548:	2b05      	cmp	r3, #5
    954a:	dd02      	ble.n	9552 <_dtoa_r+0x1aa>
    954c:	2400      	movs	r4, #0
    954e:	3b04      	subs	r3, #4
    9550:	9322      	str	r3, [sp, #136]	; 0x88
    9552:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9554:	2b03      	cmp	r3, #3
    9556:	d101      	bne.n	955c <_dtoa_r+0x1b4>
    9558:	f000 fcce 	bl	9ef8 <_dtoa_r+0xb50>
    955c:	dc01      	bgt.n	9562 <_dtoa_r+0x1ba>
    955e:	f000 fc92 	bl	9e86 <_dtoa_r+0xade>
    9562:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9564:	2b04      	cmp	r3, #4
    9566:	d101      	bne.n	956c <_dtoa_r+0x1c4>
    9568:	f000 fc40 	bl	9dec <_dtoa_r+0xa44>
    956c:	2301      	movs	r3, #1
    956e:	930b      	str	r3, [sp, #44]	; 0x2c
    9570:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9572:	2b05      	cmp	r3, #5
    9574:	d001      	beq.n	957a <_dtoa_r+0x1d2>
    9576:	f000 fc8b 	bl	9e90 <_dtoa_r+0xae8>
    957a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    957c:	9b03      	ldr	r3, [sp, #12]
    957e:	4694      	mov	ip, r2
    9580:	4463      	add	r3, ip
    9582:	930e      	str	r3, [sp, #56]	; 0x38
    9584:	3301      	adds	r3, #1
    9586:	9307      	str	r3, [sp, #28]
    9588:	1e1d      	subs	r5, r3, #0
    958a:	dc01      	bgt.n	9590 <_dtoa_r+0x1e8>
    958c:	f000 fd49 	bl	a022 <_dtoa_r+0xc7a>
    9590:	9b07      	ldr	r3, [sp, #28]
    9592:	4698      	mov	r8, r3
    9594:	2300      	movs	r3, #0
    9596:	4652      	mov	r2, sl
    9598:	2100      	movs	r1, #0
    959a:	6453      	str	r3, [r2, #68]	; 0x44
    959c:	2d17      	cmp	r5, #23
    959e:	d90a      	bls.n	95b6 <_dtoa_r+0x20e>
    95a0:	2201      	movs	r2, #1
    95a2:	3304      	adds	r3, #4
    95a4:	005b      	lsls	r3, r3, #1
    95a6:	0018      	movs	r0, r3
    95a8:	3014      	adds	r0, #20
    95aa:	0011      	movs	r1, r2
    95ac:	3201      	adds	r2, #1
    95ae:	4285      	cmp	r5, r0
    95b0:	d2f8      	bcs.n	95a4 <_dtoa_r+0x1fc>
    95b2:	4653      	mov	r3, sl
    95b4:	6459      	str	r1, [r3, #68]	; 0x44
    95b6:	4650      	mov	r0, sl
    95b8:	f001 fd0e 	bl	afd8 <_Balloc>
    95bc:	4653      	mov	r3, sl
    95be:	6418      	str	r0, [r3, #64]	; 0x40
    95c0:	4643      	mov	r3, r8
    95c2:	900a      	str	r0, [sp, #40]	; 0x28
    95c4:	2b0e      	cmp	r3, #14
    95c6:	d900      	bls.n	95ca <_dtoa_r+0x222>
    95c8:	e161      	b.n	988e <_dtoa_r+0x4e6>
    95ca:	2c00      	cmp	r4, #0
    95cc:	d100      	bne.n	95d0 <_dtoa_r+0x228>
    95ce:	e15e      	b.n	988e <_dtoa_r+0x4e6>
    95d0:	9610      	str	r6, [sp, #64]	; 0x40
    95d2:	9711      	str	r7, [sp, #68]	; 0x44
    95d4:	9e03      	ldr	r6, [sp, #12]
    95d6:	2e00      	cmp	r6, #0
    95d8:	dc01      	bgt.n	95de <_dtoa_r+0x236>
    95da:	f000 fd25 	bl	a028 <_dtoa_r+0xc80>
    95de:	0032      	movs	r2, r6
    95e0:	210f      	movs	r1, #15
    95e2:	4b65      	ldr	r3, [pc, #404]	; (9778 <_dtoa_r+0x3d0>)
    95e4:	400a      	ands	r2, r1
    95e6:	00d2      	lsls	r2, r2, #3
    95e8:	189b      	adds	r3, r3, r2
    95ea:	1136      	asrs	r6, r6, #4
    95ec:	681c      	ldr	r4, [r3, #0]
    95ee:	685d      	ldr	r5, [r3, #4]
    95f0:	06f3      	lsls	r3, r6, #27
    95f2:	d401      	bmi.n	95f8 <_dtoa_r+0x250>
    95f4:	f000 fcca 	bl	9f8c <_dtoa_r+0xbe4>
    95f8:	4b60      	ldr	r3, [pc, #384]	; (977c <_dtoa_r+0x3d4>)
    95fa:	400e      	ands	r6, r1
    95fc:	6a1a      	ldr	r2, [r3, #32]
    95fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9600:	9810      	ldr	r0, [sp, #64]	; 0x40
    9602:	9911      	ldr	r1, [sp, #68]	; 0x44
    9604:	f7fc fdde 	bl	61c4 <__aeabi_ddiv>
    9608:	2303      	movs	r3, #3
    960a:	4698      	mov	r8, r3
    960c:	9008      	str	r0, [sp, #32]
    960e:	9109      	str	r1, [sp, #36]	; 0x24
    9610:	2e00      	cmp	r6, #0
    9612:	d011      	beq.n	9638 <_dtoa_r+0x290>
    9614:	4f59      	ldr	r7, [pc, #356]	; (977c <_dtoa_r+0x3d4>)
    9616:	2301      	movs	r3, #1
    9618:	4233      	tst	r3, r6
    961a:	d009      	beq.n	9630 <_dtoa_r+0x288>
    961c:	469c      	mov	ip, r3
    961e:	683a      	ldr	r2, [r7, #0]
    9620:	687b      	ldr	r3, [r7, #4]
    9622:	0020      	movs	r0, r4
    9624:	0029      	movs	r1, r5
    9626:	44e0      	add	r8, ip
    9628:	f7fd f900 	bl	682c <__aeabi_dmul>
    962c:	0004      	movs	r4, r0
    962e:	000d      	movs	r5, r1
    9630:	1076      	asrs	r6, r6, #1
    9632:	3708      	adds	r7, #8
    9634:	2e00      	cmp	r6, #0
    9636:	d1ee      	bne.n	9616 <_dtoa_r+0x26e>
    9638:	0022      	movs	r2, r4
    963a:	9808      	ldr	r0, [sp, #32]
    963c:	9909      	ldr	r1, [sp, #36]	; 0x24
    963e:	002b      	movs	r3, r5
    9640:	f7fc fdc0 	bl	61c4 <__aeabi_ddiv>
    9644:	0006      	movs	r6, r0
    9646:	000f      	movs	r7, r1
    9648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    964a:	2b00      	cmp	r3, #0
    964c:	d009      	beq.n	9662 <_dtoa_r+0x2ba>
    964e:	2200      	movs	r2, #0
    9650:	4b40      	ldr	r3, [pc, #256]	; (9754 <_dtoa_r+0x3ac>)
    9652:	0030      	movs	r0, r6
    9654:	0039      	movs	r1, r7
    9656:	f7fd ff95 	bl	7584 <__aeabi_dcmplt>
    965a:	2800      	cmp	r0, #0
    965c:	d001      	beq.n	9662 <_dtoa_r+0x2ba>
    965e:	f000 fdc2 	bl	a1e6 <_dtoa_r+0xe3e>
    9662:	4640      	mov	r0, r8
    9664:	f7fd feac 	bl	73c0 <__aeabi_i2d>
    9668:	0032      	movs	r2, r6
    966a:	003b      	movs	r3, r7
    966c:	f7fd f8de 	bl	682c <__aeabi_dmul>
    9670:	2200      	movs	r2, #0
    9672:	4b43      	ldr	r3, [pc, #268]	; (9780 <_dtoa_r+0x3d8>)
    9674:	f002 fd22 	bl	c0bc <__aeabi_dadd>
    9678:	4a42      	ldr	r2, [pc, #264]	; (9784 <_dtoa_r+0x3dc>)
    967a:	000b      	movs	r3, r1
    967c:	4694      	mov	ip, r2
    967e:	4463      	add	r3, ip
    9680:	9008      	str	r0, [sp, #32]
    9682:	9109      	str	r1, [sp, #36]	; 0x24
    9684:	9309      	str	r3, [sp, #36]	; 0x24
    9686:	9b07      	ldr	r3, [sp, #28]
    9688:	2b00      	cmp	r3, #0
    968a:	d101      	bne.n	9690 <_dtoa_r+0x2e8>
    968c:	f000 fc50 	bl	9f30 <_dtoa_r+0xb88>
    9690:	9b03      	ldr	r3, [sp, #12]
    9692:	9313      	str	r3, [sp, #76]	; 0x4c
    9694:	9b07      	ldr	r3, [sp, #28]
    9696:	9312      	str	r3, [sp, #72]	; 0x48
    9698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    969a:	2b00      	cmp	r3, #0
    969c:	d101      	bne.n	96a2 <_dtoa_r+0x2fa>
    969e:	f000 fd1d 	bl	a0dc <_dtoa_r+0xd34>
    96a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    96a4:	2000      	movs	r0, #0
    96a6:	1e5a      	subs	r2, r3, #1
    96a8:	4b33      	ldr	r3, [pc, #204]	; (9778 <_dtoa_r+0x3d0>)
    96aa:	00d2      	lsls	r2, r2, #3
    96ac:	189b      	adds	r3, r3, r2
    96ae:	681a      	ldr	r2, [r3, #0]
    96b0:	685b      	ldr	r3, [r3, #4]
    96b2:	4935      	ldr	r1, [pc, #212]	; (9788 <_dtoa_r+0x3e0>)
    96b4:	f7fc fd86 	bl	61c4 <__aeabi_ddiv>
    96b8:	9a08      	ldr	r2, [sp, #32]
    96ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96bc:	f7fd fb36 	bl	6d2c <__aeabi_dsub>
    96c0:	9008      	str	r0, [sp, #32]
    96c2:	9109      	str	r1, [sp, #36]	; 0x24
    96c4:	0039      	movs	r1, r7
    96c6:	0030      	movs	r0, r6
    96c8:	f7fd fe46 	bl	7358 <__aeabi_d2iz>
    96cc:	0004      	movs	r4, r0
    96ce:	f7fd fe77 	bl	73c0 <__aeabi_i2d>
    96d2:	0002      	movs	r2, r0
    96d4:	000b      	movs	r3, r1
    96d6:	0030      	movs	r0, r6
    96d8:	0039      	movs	r1, r7
    96da:	f7fd fb27 	bl	6d2c <__aeabi_dsub>
    96de:	0005      	movs	r5, r0
    96e0:	000e      	movs	r6, r1
    96e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96e4:	3430      	adds	r4, #48	; 0x30
    96e6:	1c51      	adds	r1, r2, #1
    96e8:	b2e7      	uxtb	r7, r4
    96ea:	9114      	str	r1, [sp, #80]	; 0x50
    96ec:	7017      	strb	r7, [r2, #0]
    96ee:	0033      	movs	r3, r6
    96f0:	9808      	ldr	r0, [sp, #32]
    96f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    96f4:	002a      	movs	r2, r5
    96f6:	f7fd ff59 	bl	75ac <__aeabi_dcmpgt>
    96fa:	2800      	cmp	r0, #0
    96fc:	d001      	beq.n	9702 <_dtoa_r+0x35a>
    96fe:	f000 fdfe 	bl	a2fe <_dtoa_r+0xf56>
    9702:	002a      	movs	r2, r5
    9704:	0033      	movs	r3, r6
    9706:	2000      	movs	r0, #0
    9708:	4912      	ldr	r1, [pc, #72]	; (9754 <_dtoa_r+0x3ac>)
    970a:	f7fd fb0f 	bl	6d2c <__aeabi_dsub>
    970e:	0002      	movs	r2, r0
    9710:	000b      	movs	r3, r1
    9712:	9808      	ldr	r0, [sp, #32]
    9714:	9909      	ldr	r1, [sp, #36]	; 0x24
    9716:	f7fd ff49 	bl	75ac <__aeabi_dcmpgt>
    971a:	2800      	cmp	r0, #0
    971c:	d001      	beq.n	9722 <_dtoa_r+0x37a>
    971e:	f000 fde7 	bl	a2f0 <_dtoa_r+0xf48>
    9722:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9724:	2b01      	cmp	r3, #1
    9726:	d101      	bne.n	972c <_dtoa_r+0x384>
    9728:	f000 fc78 	bl	a01c <_dtoa_r+0xc74>
    972c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    972e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9730:	4694      	mov	ip, r2
    9732:	4463      	add	r3, ip
    9734:	4698      	mov	r8, r3
    9736:	464b      	mov	r3, r9
    9738:	9312      	str	r3, [sp, #72]	; 0x48
    973a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    973c:	4699      	mov	r9, r3
    973e:	e038      	b.n	97b2 <_dtoa_r+0x40a>
    9740:	7ff00000 	.word	0x7ff00000
    9744:	0000ceb5 	.word	0x0000ceb5
    9748:	0000270f 	.word	0x0000270f
    974c:	0000ced8 	.word	0x0000ced8
    9750:	0000cee4 	.word	0x0000cee4
    9754:	3ff00000 	.word	0x3ff00000
    9758:	fffffc01 	.word	0xfffffc01
    975c:	3ff80000 	.word	0x3ff80000
    9760:	636f4361 	.word	0x636f4361
    9764:	3fd287a7 	.word	0x3fd287a7
    9768:	8b60c8b3 	.word	0x8b60c8b3
    976c:	3fc68a28 	.word	0x3fc68a28
    9770:	509f79fb 	.word	0x509f79fb
    9774:	3fd34413 	.word	0x3fd34413
    9778:	0000cf10 	.word	0x0000cf10
    977c:	0000cee8 	.word	0x0000cee8
    9780:	401c0000 	.word	0x401c0000
    9784:	fcc00000 	.word	0xfcc00000
    9788:	3fe00000 	.word	0x3fe00000
    978c:	002a      	movs	r2, r5
    978e:	0033      	movs	r3, r6
    9790:	2000      	movs	r0, #0
    9792:	49b9      	ldr	r1, [pc, #740]	; (9a78 <_dtoa_r+0x6d0>)
    9794:	f7fd faca 	bl	6d2c <__aeabi_dsub>
    9798:	9a08      	ldr	r2, [sp, #32]
    979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    979c:	f7fd fef2 	bl	7584 <__aeabi_dcmplt>
    97a0:	2800      	cmp	r0, #0
    97a2:	d001      	beq.n	97a8 <_dtoa_r+0x400>
    97a4:	f000 fd74 	bl	a290 <_dtoa_r+0xee8>
    97a8:	46a1      	mov	r9, r4
    97aa:	4544      	cmp	r4, r8
    97ac:	d101      	bne.n	97b2 <_dtoa_r+0x40a>
    97ae:	f000 fc33 	bl	a018 <_dtoa_r+0xc70>
    97b2:	9808      	ldr	r0, [sp, #32]
    97b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    97b6:	2200      	movs	r2, #0
    97b8:	4bb0      	ldr	r3, [pc, #704]	; (9a7c <_dtoa_r+0x6d4>)
    97ba:	f7fd f837 	bl	682c <__aeabi_dmul>
    97be:	2200      	movs	r2, #0
    97c0:	4bae      	ldr	r3, [pc, #696]	; (9a7c <_dtoa_r+0x6d4>)
    97c2:	9008      	str	r0, [sp, #32]
    97c4:	9109      	str	r1, [sp, #36]	; 0x24
    97c6:	0028      	movs	r0, r5
    97c8:	0031      	movs	r1, r6
    97ca:	f7fd f82f 	bl	682c <__aeabi_dmul>
    97ce:	000d      	movs	r5, r1
    97d0:	0004      	movs	r4, r0
    97d2:	f7fd fdc1 	bl	7358 <__aeabi_d2iz>
    97d6:	0007      	movs	r7, r0
    97d8:	f7fd fdf2 	bl	73c0 <__aeabi_i2d>
    97dc:	0002      	movs	r2, r0
    97de:	000b      	movs	r3, r1
    97e0:	0020      	movs	r0, r4
    97e2:	0029      	movs	r1, r5
    97e4:	f7fd faa2 	bl	6d2c <__aeabi_dsub>
    97e8:	464b      	mov	r3, r9
    97ea:	3730      	adds	r7, #48	; 0x30
    97ec:	b2ff      	uxtb	r7, r7
    97ee:	1c5c      	adds	r4, r3, #1
    97f0:	701f      	strb	r7, [r3, #0]
    97f2:	9a08      	ldr	r2, [sp, #32]
    97f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97f6:	0005      	movs	r5, r0
    97f8:	000e      	movs	r6, r1
    97fa:	f7fd fec3 	bl	7584 <__aeabi_dcmplt>
    97fe:	2800      	cmp	r0, #0
    9800:	d0c4      	beq.n	978c <_dtoa_r+0x3e4>
    9802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9804:	9303      	str	r3, [sp, #12]
    9806:	4659      	mov	r1, fp
    9808:	4650      	mov	r0, sl
    980a:	f001 fc0d 	bl	b028 <_Bfree>
    980e:	2300      	movs	r3, #0
    9810:	7023      	strb	r3, [r4, #0]
    9812:	9b03      	ldr	r3, [sp, #12]
    9814:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9816:	3301      	adds	r3, #1
    9818:	6013      	str	r3, [r2, #0]
    981a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    981c:	2b00      	cmp	r3, #0
    981e:	d100      	bne.n	9822 <_dtoa_r+0x47a>
    9820:	e3a8      	b.n	9f74 <_dtoa_r+0xbcc>
    9822:	601c      	str	r4, [r3, #0]
    9824:	980a      	ldr	r0, [sp, #40]	; 0x28
    9826:	e5f4      	b.n	9412 <_dtoa_r+0x6a>
    9828:	9b16      	ldr	r3, [sp, #88]	; 0x58
    982a:	4699      	mov	r9, r3
    982c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    982e:	444b      	add	r3, r9
    9830:	001c      	movs	r4, r3
    9832:	4b93      	ldr	r3, [pc, #588]	; (9a80 <_dtoa_r+0x6d8>)
    9834:	18e3      	adds	r3, r4, r3
    9836:	2b20      	cmp	r3, #32
    9838:	dc00      	bgt.n	983c <_dtoa_r+0x494>
    983a:	e17e      	b.n	9b3a <_dtoa_r+0x792>
    983c:	0031      	movs	r1, r6
    983e:	4a91      	ldr	r2, [pc, #580]	; (9a84 <_dtoa_r+0x6dc>)
    9840:	4640      	mov	r0, r8
    9842:	18a2      	adds	r2, r4, r2
    9844:	40d1      	lsrs	r1, r2
    9846:	000a      	movs	r2, r1
    9848:	2140      	movs	r1, #64	; 0x40
    984a:	1acb      	subs	r3, r1, r3
    984c:	4098      	lsls	r0, r3
    984e:	4310      	orrs	r0, r2
    9850:	f7fd fdf8 	bl	7444 <__aeabi_ui2d>
    9854:	1e63      	subs	r3, r4, #1
    9856:	4698      	mov	r8, r3
    9858:	2301      	movs	r3, #1
    985a:	4d8b      	ldr	r5, [pc, #556]	; (9a88 <_dtoa_r+0x6e0>)
    985c:	930f      	str	r3, [sp, #60]	; 0x3c
    985e:	1949      	adds	r1, r1, r5
    9860:	e618      	b.n	9494 <_dtoa_r+0xec>
    9862:	488a      	ldr	r0, [pc, #552]	; (9a8c <_dtoa_r+0x6e4>)
    9864:	e5d5      	b.n	9412 <_dtoa_r+0x6a>
    9866:	2300      	movs	r3, #0
    9868:	4652      	mov	r2, sl
    986a:	2100      	movs	r1, #0
    986c:	6453      	str	r3, [r2, #68]	; 0x44
    986e:	4650      	mov	r0, sl
    9870:	f001 fbb2 	bl	afd8 <_Balloc>
    9874:	4653      	mov	r3, sl
    9876:	6418      	str	r0, [r3, #64]	; 0x40
    9878:	2301      	movs	r3, #1
    987a:	425b      	negs	r3, r3
    987c:	9307      	str	r3, [sp, #28]
    987e:	930e      	str	r3, [sp, #56]	; 0x38
    9880:	3302      	adds	r3, #2
    9882:	2200      	movs	r2, #0
    9884:	930b      	str	r3, [sp, #44]	; 0x2c
    9886:	2300      	movs	r3, #0
    9888:	900a      	str	r0, [sp, #40]	; 0x28
    988a:	9223      	str	r2, [sp, #140]	; 0x8c
    988c:	9322      	str	r3, [sp, #136]	; 0x88
    988e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9890:	2b00      	cmp	r3, #0
    9892:	da00      	bge.n	9896 <_dtoa_r+0x4ee>
    9894:	e0ab      	b.n	99ee <_dtoa_r+0x646>
    9896:	9a03      	ldr	r2, [sp, #12]
    9898:	2a0e      	cmp	r2, #14
    989a:	dd00      	ble.n	989e <_dtoa_r+0x4f6>
    989c:	e0a7      	b.n	99ee <_dtoa_r+0x646>
    989e:	4b7c      	ldr	r3, [pc, #496]	; (9a90 <_dtoa_r+0x6e8>)
    98a0:	00d2      	lsls	r2, r2, #3
    98a2:	189b      	adds	r3, r3, r2
    98a4:	685c      	ldr	r4, [r3, #4]
    98a6:	681b      	ldr	r3, [r3, #0]
    98a8:	9304      	str	r3, [sp, #16]
    98aa:	9405      	str	r4, [sp, #20]
    98ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    98ae:	2b00      	cmp	r3, #0
    98b0:	da00      	bge.n	98b4 <_dtoa_r+0x50c>
    98b2:	e2a7      	b.n	9e04 <_dtoa_r+0xa5c>
    98b4:	9c04      	ldr	r4, [sp, #16]
    98b6:	9d05      	ldr	r5, [sp, #20]
    98b8:	0030      	movs	r0, r6
    98ba:	0022      	movs	r2, r4
    98bc:	002b      	movs	r3, r5
    98be:	0039      	movs	r1, r7
    98c0:	f7fc fc80 	bl	61c4 <__aeabi_ddiv>
    98c4:	f7fd fd48 	bl	7358 <__aeabi_d2iz>
    98c8:	4680      	mov	r8, r0
    98ca:	f7fd fd79 	bl	73c0 <__aeabi_i2d>
    98ce:	0022      	movs	r2, r4
    98d0:	002b      	movs	r3, r5
    98d2:	f7fc ffab 	bl	682c <__aeabi_dmul>
    98d6:	0002      	movs	r2, r0
    98d8:	000b      	movs	r3, r1
    98da:	0030      	movs	r0, r6
    98dc:	0039      	movs	r1, r7
    98de:	f7fd fa25 	bl	6d2c <__aeabi_dsub>
    98e2:	4643      	mov	r3, r8
    98e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    98e6:	3330      	adds	r3, #48	; 0x30
    98e8:	7013      	strb	r3, [r2, #0]
    98ea:	9b07      	ldr	r3, [sp, #28]
    98ec:	0006      	movs	r6, r0
    98ee:	000f      	movs	r7, r1
    98f0:	1c54      	adds	r4, r2, #1
    98f2:	2b01      	cmp	r3, #1
    98f4:	d04e      	beq.n	9994 <_dtoa_r+0x5ec>
    98f6:	2200      	movs	r2, #0
    98f8:	4b60      	ldr	r3, [pc, #384]	; (9a7c <_dtoa_r+0x6d4>)
    98fa:	f7fc ff97 	bl	682c <__aeabi_dmul>
    98fe:	2200      	movs	r2, #0
    9900:	2300      	movs	r3, #0
    9902:	0006      	movs	r6, r0
    9904:	000f      	movs	r7, r1
    9906:	f7fd fe37 	bl	7578 <__aeabi_dcmpeq>
    990a:	2800      	cmp	r0, #0
    990c:	d000      	beq.n	9910 <_dtoa_r+0x568>
    990e:	e77a      	b.n	9806 <_dtoa_r+0x45e>
    9910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9912:	9a07      	ldr	r2, [sp, #28]
    9914:	1c9d      	adds	r5, r3, #2
    9916:	469c      	mov	ip, r3
    9918:	465b      	mov	r3, fp
    991a:	9306      	str	r3, [sp, #24]
    991c:	4653      	mov	r3, sl
    991e:	4462      	add	r2, ip
    9920:	46aa      	mov	sl, r5
    9922:	9c04      	ldr	r4, [sp, #16]
    9924:	9d05      	ldr	r5, [sp, #20]
    9926:	4691      	mov	r9, r2
    9928:	9307      	str	r3, [sp, #28]
    992a:	e00f      	b.n	994c <_dtoa_r+0x5a4>
    992c:	2200      	movs	r2, #0
    992e:	4b53      	ldr	r3, [pc, #332]	; (9a7c <_dtoa_r+0x6d4>)
    9930:	f7fc ff7c 	bl	682c <__aeabi_dmul>
    9934:	2301      	movs	r3, #1
    9936:	469c      	mov	ip, r3
    9938:	2200      	movs	r2, #0
    993a:	2300      	movs	r3, #0
    993c:	0006      	movs	r6, r0
    993e:	000f      	movs	r7, r1
    9940:	44e2      	add	sl, ip
    9942:	f7fd fe19 	bl	7578 <__aeabi_dcmpeq>
    9946:	2800      	cmp	r0, #0
    9948:	d000      	beq.n	994c <_dtoa_r+0x5a4>
    994a:	e2d9      	b.n	9f00 <_dtoa_r+0xb58>
    994c:	0022      	movs	r2, r4
    994e:	002b      	movs	r3, r5
    9950:	0030      	movs	r0, r6
    9952:	0039      	movs	r1, r7
    9954:	f7fc fc36 	bl	61c4 <__aeabi_ddiv>
    9958:	f7fd fcfe 	bl	7358 <__aeabi_d2iz>
    995c:	4680      	mov	r8, r0
    995e:	f7fd fd2f 	bl	73c0 <__aeabi_i2d>
    9962:	0022      	movs	r2, r4
    9964:	002b      	movs	r3, r5
    9966:	f7fc ff61 	bl	682c <__aeabi_dmul>
    996a:	0002      	movs	r2, r0
    996c:	000b      	movs	r3, r1
    996e:	0030      	movs	r0, r6
    9970:	0039      	movs	r1, r7
    9972:	f7fd f9db 	bl	6d2c <__aeabi_dsub>
    9976:	4653      	mov	r3, sl
    9978:	4642      	mov	r2, r8
    997a:	3b01      	subs	r3, #1
    997c:	3230      	adds	r2, #48	; 0x30
    997e:	0006      	movs	r6, r0
    9980:	000f      	movs	r7, r1
    9982:	46d3      	mov	fp, sl
    9984:	701a      	strb	r2, [r3, #0]
    9986:	45d1      	cmp	r9, sl
    9988:	d1d0      	bne.n	992c <_dtoa_r+0x584>
    998a:	9b06      	ldr	r3, [sp, #24]
    998c:	4654      	mov	r4, sl
    998e:	469b      	mov	fp, r3
    9990:	9b07      	ldr	r3, [sp, #28]
    9992:	469a      	mov	sl, r3
    9994:	0032      	movs	r2, r6
    9996:	003b      	movs	r3, r7
    9998:	0030      	movs	r0, r6
    999a:	0039      	movs	r1, r7
    999c:	f002 fb8e 	bl	c0bc <__aeabi_dadd>
    99a0:	0006      	movs	r6, r0
    99a2:	000f      	movs	r7, r1
    99a4:	0002      	movs	r2, r0
    99a6:	000b      	movs	r3, r1
    99a8:	9804      	ldr	r0, [sp, #16]
    99aa:	9905      	ldr	r1, [sp, #20]
    99ac:	f7fd fdea 	bl	7584 <__aeabi_dcmplt>
    99b0:	2800      	cmp	r0, #0
    99b2:	d10c      	bne.n	99ce <_dtoa_r+0x626>
    99b4:	9804      	ldr	r0, [sp, #16]
    99b6:	9905      	ldr	r1, [sp, #20]
    99b8:	0032      	movs	r2, r6
    99ba:	003b      	movs	r3, r7
    99bc:	f7fd fddc 	bl	7578 <__aeabi_dcmpeq>
    99c0:	2800      	cmp	r0, #0
    99c2:	d100      	bne.n	99c6 <_dtoa_r+0x61e>
    99c4:	e71f      	b.n	9806 <_dtoa_r+0x45e>
    99c6:	4643      	mov	r3, r8
    99c8:	07db      	lsls	r3, r3, #31
    99ca:	d400      	bmi.n	99ce <_dtoa_r+0x626>
    99cc:	e71b      	b.n	9806 <_dtoa_r+0x45e>
    99ce:	1e65      	subs	r5, r4, #1
    99d0:	782f      	ldrb	r7, [r5, #0]
    99d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99d4:	e006      	b.n	99e4 <_dtoa_r+0x63c>
    99d6:	429d      	cmp	r5, r3
    99d8:	d100      	bne.n	99dc <_dtoa_r+0x634>
    99da:	e351      	b.n	a080 <_dtoa_r+0xcd8>
    99dc:	3c02      	subs	r4, #2
    99de:	7827      	ldrb	r7, [r4, #0]
    99e0:	002c      	movs	r4, r5
    99e2:	3d01      	subs	r5, #1
    99e4:	2f39      	cmp	r7, #57	; 0x39
    99e6:	d0f6      	beq.n	99d6 <_dtoa_r+0x62e>
    99e8:	3701      	adds	r7, #1
    99ea:	702f      	strb	r7, [r5, #0]
    99ec:	e70b      	b.n	9806 <_dtoa_r+0x45e>
    99ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    99f0:	2a00      	cmp	r2, #0
    99f2:	d04f      	beq.n	9a94 <_dtoa_r+0x6ec>
    99f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    99f6:	2a01      	cmp	r2, #1
    99f8:	dc00      	bgt.n	99fc <_dtoa_r+0x654>
    99fa:	e22c      	b.n	9e56 <_dtoa_r+0xaae>
    99fc:	9b07      	ldr	r3, [sp, #28]
    99fe:	1e5c      	subs	r4, r3, #1
    9a00:	464b      	mov	r3, r9
    9a02:	45a1      	cmp	r9, r4
    9a04:	da00      	bge.n	9a08 <_dtoa_r+0x660>
    9a06:	e2b8      	b.n	9f7a <_dtoa_r+0xbd2>
    9a08:	1b1c      	subs	r4, r3, r4
    9a0a:	9b07      	ldr	r3, [sp, #28]
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	da00      	bge.n	9a12 <_dtoa_r+0x66a>
    9a10:	e3d4      	b.n	a1bc <_dtoa_r+0xe14>
    9a12:	9b06      	ldr	r3, [sp, #24]
    9a14:	9308      	str	r3, [sp, #32]
    9a16:	9b07      	ldr	r3, [sp, #28]
    9a18:	9a06      	ldr	r2, [sp, #24]
    9a1a:	2101      	movs	r1, #1
    9a1c:	4694      	mov	ip, r2
    9a1e:	449c      	add	ip, r3
    9a20:	4662      	mov	r2, ip
    9a22:	9206      	str	r2, [sp, #24]
    9a24:	9a04      	ldr	r2, [sp, #16]
    9a26:	4650      	mov	r0, sl
    9a28:	4694      	mov	ip, r2
    9a2a:	449c      	add	ip, r3
    9a2c:	4663      	mov	r3, ip
    9a2e:	9304      	str	r3, [sp, #16]
    9a30:	f001 fb92 	bl	b158 <__i2b>
    9a34:	4680      	mov	r8, r0
    9a36:	e032      	b.n	9a9e <_dtoa_r+0x6f6>
    9a38:	9a06      	ldr	r2, [sp, #24]
    9a3a:	9b03      	ldr	r3, [sp, #12]
    9a3c:	1ad2      	subs	r2, r2, r3
    9a3e:	425b      	negs	r3, r3
    9a40:	4699      	mov	r9, r3
    9a42:	2300      	movs	r3, #0
    9a44:	9206      	str	r2, [sp, #24]
    9a46:	930d      	str	r3, [sp, #52]	; 0x34
    9a48:	e579      	b.n	953e <_dtoa_r+0x196>
    9a4a:	9803      	ldr	r0, [sp, #12]
    9a4c:	f7fd fcb8 	bl	73c0 <__aeabi_i2d>
    9a50:	000b      	movs	r3, r1
    9a52:	0002      	movs	r2, r0
    9a54:	0029      	movs	r1, r5
    9a56:	0020      	movs	r0, r4
    9a58:	f7fd fd8e 	bl	7578 <__aeabi_dcmpeq>
    9a5c:	0002      	movs	r2, r0
    9a5e:	4250      	negs	r0, r2
    9a60:	4150      	adcs	r0, r2
    9a62:	9b03      	ldr	r3, [sp, #12]
    9a64:	1a1b      	subs	r3, r3, r0
    9a66:	9303      	str	r3, [sp, #12]
    9a68:	e53d      	b.n	94e6 <_dtoa_r+0x13e>
    9a6a:	2301      	movs	r3, #1
    9a6c:	1a9b      	subs	r3, r3, r2
    9a6e:	9306      	str	r3, [sp, #24]
    9a70:	2300      	movs	r3, #0
    9a72:	9304      	str	r3, [sp, #16]
    9a74:	e557      	b.n	9526 <_dtoa_r+0x17e>
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	3ff00000 	.word	0x3ff00000
    9a7c:	40240000 	.word	0x40240000
    9a80:	00000432 	.word	0x00000432
    9a84:	00000412 	.word	0x00000412
    9a88:	fe100000 	.word	0xfe100000
    9a8c:	0000ceb4 	.word	0x0000ceb4
    9a90:	0000cf10 	.word	0x0000cf10
    9a94:	9b06      	ldr	r3, [sp, #24]
    9a96:	464c      	mov	r4, r9
    9a98:	9308      	str	r3, [sp, #32]
    9a9a:	2300      	movs	r3, #0
    9a9c:	4698      	mov	r8, r3
    9a9e:	9908      	ldr	r1, [sp, #32]
    9aa0:	1e0b      	subs	r3, r1, #0
    9aa2:	dd0e      	ble.n	9ac2 <_dtoa_r+0x71a>
    9aa4:	9a04      	ldr	r2, [sp, #16]
    9aa6:	2a00      	cmp	r2, #0
    9aa8:	dd0b      	ble.n	9ac2 <_dtoa_r+0x71a>
    9aaa:	4293      	cmp	r3, r2
    9aac:	dd00      	ble.n	9ab0 <_dtoa_r+0x708>
    9aae:	e187      	b.n	9dc0 <_dtoa_r+0xa18>
    9ab0:	9a06      	ldr	r2, [sp, #24]
    9ab2:	1ad2      	subs	r2, r2, r3
    9ab4:	9206      	str	r2, [sp, #24]
    9ab6:	9a08      	ldr	r2, [sp, #32]
    9ab8:	1ad2      	subs	r2, r2, r3
    9aba:	9208      	str	r2, [sp, #32]
    9abc:	9a04      	ldr	r2, [sp, #16]
    9abe:	1ad3      	subs	r3, r2, r3
    9ac0:	9304      	str	r3, [sp, #16]
    9ac2:	464b      	mov	r3, r9
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d01a      	beq.n	9afe <_dtoa_r+0x756>
    9ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9aca:	2b00      	cmp	r3, #0
    9acc:	d100      	bne.n	9ad0 <_dtoa_r+0x728>
    9ace:	e1bb      	b.n	9e48 <_dtoa_r+0xaa0>
    9ad0:	2c00      	cmp	r4, #0
    9ad2:	dd10      	ble.n	9af6 <_dtoa_r+0x74e>
    9ad4:	4641      	mov	r1, r8
    9ad6:	0022      	movs	r2, r4
    9ad8:	4650      	mov	r0, sl
    9ada:	f001 fbf1 	bl	b2c0 <__pow5mult>
    9ade:	465a      	mov	r2, fp
    9ae0:	0001      	movs	r1, r0
    9ae2:	4680      	mov	r8, r0
    9ae4:	4650      	mov	r0, sl
    9ae6:	f001 fb41 	bl	b16c <__multiply>
    9aea:	0005      	movs	r5, r0
    9aec:	4659      	mov	r1, fp
    9aee:	4650      	mov	r0, sl
    9af0:	f001 fa9a 	bl	b028 <_Bfree>
    9af4:	46ab      	mov	fp, r5
    9af6:	464b      	mov	r3, r9
    9af8:	1b1a      	subs	r2, r3, r4
    9afa:	d000      	beq.n	9afe <_dtoa_r+0x756>
    9afc:	e1a5      	b.n	9e4a <_dtoa_r+0xaa2>
    9afe:	2101      	movs	r1, #1
    9b00:	4650      	mov	r0, sl
    9b02:	f001 fb29 	bl	b158 <__i2b>
    9b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9b08:	4681      	mov	r9, r0
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	dd1d      	ble.n	9b4a <_dtoa_r+0x7a2>
    9b0e:	001a      	movs	r2, r3
    9b10:	0001      	movs	r1, r0
    9b12:	4650      	mov	r0, sl
    9b14:	f001 fbd4 	bl	b2c0 <__pow5mult>
    9b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b1a:	4681      	mov	r9, r0
    9b1c:	2b01      	cmp	r3, #1
    9b1e:	dc00      	bgt.n	9b22 <_dtoa_r+0x77a>
    9b20:	e150      	b.n	9dc4 <_dtoa_r+0xa1c>
    9b22:	2400      	movs	r4, #0
    9b24:	464b      	mov	r3, r9
    9b26:	691b      	ldr	r3, [r3, #16]
    9b28:	3303      	adds	r3, #3
    9b2a:	009b      	lsls	r3, r3, #2
    9b2c:	444b      	add	r3, r9
    9b2e:	6858      	ldr	r0, [r3, #4]
    9b30:	f001 faca 	bl	b0c8 <__hi0bits>
    9b34:	2320      	movs	r3, #32
    9b36:	1a1b      	subs	r3, r3, r0
    9b38:	e010      	b.n	9b5c <_dtoa_r+0x7b4>
    9b3a:	2220      	movs	r2, #32
    9b3c:	0030      	movs	r0, r6
    9b3e:	1ad3      	subs	r3, r2, r3
    9b40:	4098      	lsls	r0, r3
    9b42:	e685      	b.n	9850 <_dtoa_r+0x4a8>
    9b44:	2300      	movs	r3, #0
    9b46:	930c      	str	r3, [sp, #48]	; 0x30
    9b48:	e4e3      	b.n	9512 <_dtoa_r+0x16a>
    9b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9b4c:	2400      	movs	r4, #0
    9b4e:	2b01      	cmp	r3, #1
    9b50:	dc00      	bgt.n	9b54 <_dtoa_r+0x7ac>
    9b52:	e18b      	b.n	9e6c <_dtoa_r+0xac4>
    9b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9b56:	2301      	movs	r3, #1
    9b58:	2a00      	cmp	r2, #0
    9b5a:	d1e3      	bne.n	9b24 <_dtoa_r+0x77c>
    9b5c:	9904      	ldr	r1, [sp, #16]
    9b5e:	201f      	movs	r0, #31
    9b60:	468c      	mov	ip, r1
    9b62:	4463      	add	r3, ip
    9b64:	4018      	ands	r0, r3
    9b66:	d100      	bne.n	9b6a <_dtoa_r+0x7c2>
    9b68:	e0ae      	b.n	9cc8 <_dtoa_r+0x920>
    9b6a:	2320      	movs	r3, #32
    9b6c:	1a1b      	subs	r3, r3, r0
    9b6e:	2b04      	cmp	r3, #4
    9b70:	dc00      	bgt.n	9b74 <_dtoa_r+0x7cc>
    9b72:	e3cc      	b.n	a30e <_dtoa_r+0xf66>
    9b74:	231c      	movs	r3, #28
    9b76:	1a18      	subs	r0, r3, r0
    9b78:	9b06      	ldr	r3, [sp, #24]
    9b7a:	469c      	mov	ip, r3
    9b7c:	4484      	add	ip, r0
    9b7e:	4663      	mov	r3, ip
    9b80:	9306      	str	r3, [sp, #24]
    9b82:	9b08      	ldr	r3, [sp, #32]
    9b84:	469c      	mov	ip, r3
    9b86:	4484      	add	ip, r0
    9b88:	4663      	mov	r3, ip
    9b8a:	468c      	mov	ip, r1
    9b8c:	4484      	add	ip, r0
    9b8e:	9308      	str	r3, [sp, #32]
    9b90:	4663      	mov	r3, ip
    9b92:	9304      	str	r3, [sp, #16]
    9b94:	9b06      	ldr	r3, [sp, #24]
    9b96:	2b00      	cmp	r3, #0
    9b98:	dd05      	ble.n	9ba6 <_dtoa_r+0x7fe>
    9b9a:	4659      	mov	r1, fp
    9b9c:	001a      	movs	r2, r3
    9b9e:	4650      	mov	r0, sl
    9ba0:	f001 fbee 	bl	b380 <__lshift>
    9ba4:	4683      	mov	fp, r0
    9ba6:	9b04      	ldr	r3, [sp, #16]
    9ba8:	2b00      	cmp	r3, #0
    9baa:	dd05      	ble.n	9bb8 <_dtoa_r+0x810>
    9bac:	4649      	mov	r1, r9
    9bae:	001a      	movs	r2, r3
    9bb0:	4650      	mov	r0, sl
    9bb2:	f001 fbe5 	bl	b380 <__lshift>
    9bb6:	4681      	mov	r9, r0
    9bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d000      	beq.n	9bc0 <_dtoa_r+0x818>
    9bbe:	e094      	b.n	9cea <_dtoa_r+0x942>
    9bc0:	9b07      	ldr	r3, [sp, #28]
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	dc00      	bgt.n	9bc8 <_dtoa_r+0x820>
    9bc6:	e175      	b.n	9eb4 <_dtoa_r+0xb0c>
    9bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d100      	bne.n	9bd0 <_dtoa_r+0x828>
    9bce:	e0a6      	b.n	9d1e <_dtoa_r+0x976>
    9bd0:	9b08      	ldr	r3, [sp, #32]
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	dd05      	ble.n	9be2 <_dtoa_r+0x83a>
    9bd6:	4641      	mov	r1, r8
    9bd8:	001a      	movs	r2, r3
    9bda:	4650      	mov	r0, sl
    9bdc:	f001 fbd0 	bl	b380 <__lshift>
    9be0:	4680      	mov	r8, r0
    9be2:	4643      	mov	r3, r8
    9be4:	930c      	str	r3, [sp, #48]	; 0x30
    9be6:	2c00      	cmp	r4, #0
    9be8:	d000      	beq.n	9bec <_dtoa_r+0x844>
    9bea:	e250      	b.n	a08e <_dtoa_r+0xce6>
    9bec:	9c07      	ldr	r4, [sp, #28]
    9bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9bf0:	3c01      	subs	r4, #1
    9bf2:	0023      	movs	r3, r4
    9bf4:	4694      	mov	ip, r2
    9bf6:	4463      	add	r3, ip
    9bf8:	9308      	str	r3, [sp, #32]
    9bfa:	2301      	movs	r3, #1
    9bfc:	4033      	ands	r3, r6
    9bfe:	9307      	str	r3, [sp, #28]
    9c00:	464b      	mov	r3, r9
    9c02:	9306      	str	r3, [sp, #24]
    9c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c06:	4657      	mov	r7, sl
    9c08:	4645      	mov	r5, r8
    9c0a:	465e      	mov	r6, fp
    9c0c:	4692      	mov	sl, r2
    9c0e:	4698      	mov	r8, r3
    9c10:	9b06      	ldr	r3, [sp, #24]
    9c12:	0030      	movs	r0, r6
    9c14:	0019      	movs	r1, r3
    9c16:	4699      	mov	r9, r3
    9c18:	f7ff fb1c 	bl	9254 <quorem>
    9c1c:	0003      	movs	r3, r0
    9c1e:	900b      	str	r0, [sp, #44]	; 0x2c
    9c20:	3330      	adds	r3, #48	; 0x30
    9c22:	0029      	movs	r1, r5
    9c24:	0030      	movs	r0, r6
    9c26:	9304      	str	r3, [sp, #16]
    9c28:	f001 fc0a 	bl	b440 <__mcmp>
    9c2c:	4649      	mov	r1, r9
    9c2e:	0004      	movs	r4, r0
    9c30:	4642      	mov	r2, r8
    9c32:	0038      	movs	r0, r7
    9c34:	f001 fc1e 	bl	b474 <__mdiff>
    9c38:	68c3      	ldr	r3, [r0, #12]
    9c3a:	4681      	mov	r9, r0
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d000      	beq.n	9c42 <_dtoa_r+0x89a>
    9c40:	e11e      	b.n	9e80 <_dtoa_r+0xad8>
    9c42:	0001      	movs	r1, r0
    9c44:	0030      	movs	r0, r6
    9c46:	f001 fbfb 	bl	b440 <__mcmp>
    9c4a:	4683      	mov	fp, r0
    9c4c:	4649      	mov	r1, r9
    9c4e:	0038      	movs	r0, r7
    9c50:	f001 f9ea 	bl	b028 <_Bfree>
    9c54:	465b      	mov	r3, fp
    9c56:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9c58:	4313      	orrs	r3, r2
    9c5a:	d103      	bne.n	9c64 <_dtoa_r+0x8bc>
    9c5c:	9b07      	ldr	r3, [sp, #28]
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d100      	bne.n	9c64 <_dtoa_r+0x8bc>
    9c62:	e306      	b.n	a272 <_dtoa_r+0xeca>
    9c64:	2c00      	cmp	r4, #0
    9c66:	da00      	bge.n	9c6a <_dtoa_r+0x8c2>
    9c68:	e1a8      	b.n	9fbc <_dtoa_r+0xc14>
    9c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c6c:	431c      	orrs	r4, r3
    9c6e:	d103      	bne.n	9c78 <_dtoa_r+0x8d0>
    9c70:	9b07      	ldr	r3, [sp, #28]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d100      	bne.n	9c78 <_dtoa_r+0x8d0>
    9c76:	e1a1      	b.n	9fbc <_dtoa_r+0xc14>
    9c78:	465b      	mov	r3, fp
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	dd00      	ble.n	9c80 <_dtoa_r+0x8d8>
    9c7e:	e282      	b.n	a186 <_dtoa_r+0xdde>
    9c80:	4669      	mov	r1, sp
    9c82:	4652      	mov	r2, sl
    9c84:	4653      	mov	r3, sl
    9c86:	7c09      	ldrb	r1, [r1, #16]
    9c88:	1c5c      	adds	r4, r3, #1
    9c8a:	7011      	strb	r1, [r2, #0]
    9c8c:	9a08      	ldr	r2, [sp, #32]
    9c8e:	4552      	cmp	r2, sl
    9c90:	d100      	bne.n	9c94 <_dtoa_r+0x8ec>
    9c92:	e28a      	b.n	a1aa <_dtoa_r+0xe02>
    9c94:	0031      	movs	r1, r6
    9c96:	2300      	movs	r3, #0
    9c98:	220a      	movs	r2, #10
    9c9a:	0038      	movs	r0, r7
    9c9c:	f001 f9ce 	bl	b03c <__multadd>
    9ca0:	2300      	movs	r3, #0
    9ca2:	0006      	movs	r6, r0
    9ca4:	220a      	movs	r2, #10
    9ca6:	0029      	movs	r1, r5
    9ca8:	0038      	movs	r0, r7
    9caa:	4545      	cmp	r5, r8
    9cac:	d100      	bne.n	9cb0 <_dtoa_r+0x908>
    9cae:	e0e1      	b.n	9e74 <_dtoa_r+0xacc>
    9cb0:	f001 f9c4 	bl	b03c <__multadd>
    9cb4:	4641      	mov	r1, r8
    9cb6:	0005      	movs	r5, r0
    9cb8:	2300      	movs	r3, #0
    9cba:	220a      	movs	r2, #10
    9cbc:	0038      	movs	r0, r7
    9cbe:	f001 f9bd 	bl	b03c <__multadd>
    9cc2:	46a2      	mov	sl, r4
    9cc4:	4680      	mov	r8, r0
    9cc6:	e7a3      	b.n	9c10 <_dtoa_r+0x868>
    9cc8:	201c      	movs	r0, #28
    9cca:	9b06      	ldr	r3, [sp, #24]
    9ccc:	469c      	mov	ip, r3
    9cce:	4484      	add	ip, r0
    9cd0:	4663      	mov	r3, ip
    9cd2:	9306      	str	r3, [sp, #24]
    9cd4:	9b08      	ldr	r3, [sp, #32]
    9cd6:	469c      	mov	ip, r3
    9cd8:	4484      	add	ip, r0
    9cda:	4663      	mov	r3, ip
    9cdc:	9308      	str	r3, [sp, #32]
    9cde:	9b04      	ldr	r3, [sp, #16]
    9ce0:	469c      	mov	ip, r3
    9ce2:	4484      	add	ip, r0
    9ce4:	4663      	mov	r3, ip
    9ce6:	9304      	str	r3, [sp, #16]
    9ce8:	e754      	b.n	9b94 <_dtoa_r+0x7ec>
    9cea:	4649      	mov	r1, r9
    9cec:	4658      	mov	r0, fp
    9cee:	f001 fba7 	bl	b440 <__mcmp>
    9cf2:	2800      	cmp	r0, #0
    9cf4:	db00      	blt.n	9cf8 <_dtoa_r+0x950>
    9cf6:	e763      	b.n	9bc0 <_dtoa_r+0x818>
    9cf8:	9b03      	ldr	r3, [sp, #12]
    9cfa:	4659      	mov	r1, fp
    9cfc:	3b01      	subs	r3, #1
    9cfe:	9303      	str	r3, [sp, #12]
    9d00:	220a      	movs	r2, #10
    9d02:	2300      	movs	r3, #0
    9d04:	4650      	mov	r0, sl
    9d06:	f001 f999 	bl	b03c <__multadd>
    9d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9d0c:	4683      	mov	fp, r0
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d000      	beq.n	9d14 <_dtoa_r+0x96c>
    9d12:	e2ca      	b.n	a2aa <_dtoa_r+0xf02>
    9d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d16:	2b00      	cmp	r3, #0
    9d18:	dc00      	bgt.n	9d1c <_dtoa_r+0x974>
    9d1a:	e2d8      	b.n	a2ce <_dtoa_r+0xf26>
    9d1c:	9307      	str	r3, [sp, #28]
    9d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d20:	465d      	mov	r5, fp
    9d22:	2400      	movs	r4, #0
    9d24:	9f07      	ldr	r7, [sp, #28]
    9d26:	469b      	mov	fp, r3
    9d28:	e006      	b.n	9d38 <_dtoa_r+0x990>
    9d2a:	0029      	movs	r1, r5
    9d2c:	2300      	movs	r3, #0
    9d2e:	220a      	movs	r2, #10
    9d30:	4650      	mov	r0, sl
    9d32:	f001 f983 	bl	b03c <__multadd>
    9d36:	0005      	movs	r5, r0
    9d38:	4649      	mov	r1, r9
    9d3a:	0028      	movs	r0, r5
    9d3c:	f7ff fa8a 	bl	9254 <quorem>
    9d40:	465b      	mov	r3, fp
    9d42:	3030      	adds	r0, #48	; 0x30
    9d44:	5518      	strb	r0, [r3, r4]
    9d46:	3401      	adds	r4, #1
    9d48:	42bc      	cmp	r4, r7
    9d4a:	dbee      	blt.n	9d2a <_dtoa_r+0x982>
    9d4c:	46ab      	mov	fp, r5
    9d4e:	0006      	movs	r6, r0
    9d50:	9c07      	ldr	r4, [sp, #28]
    9d52:	2c00      	cmp	r4, #0
    9d54:	dc00      	bgt.n	9d58 <_dtoa_r+0x9b0>
    9d56:	e237      	b.n	a1c8 <_dtoa_r+0xe20>
    9d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d5a:	2700      	movs	r7, #0
    9d5c:	469c      	mov	ip, r3
    9d5e:	4464      	add	r4, ip
    9d60:	4659      	mov	r1, fp
    9d62:	2201      	movs	r2, #1
    9d64:	4650      	mov	r0, sl
    9d66:	f001 fb0b 	bl	b380 <__lshift>
    9d6a:	4649      	mov	r1, r9
    9d6c:	4683      	mov	fp, r0
    9d6e:	f001 fb67 	bl	b440 <__mcmp>
    9d72:	2800      	cmp	r0, #0
    9d74:	dc00      	bgt.n	9d78 <_dtoa_r+0x9d0>
    9d76:	e144      	b.n	a002 <_dtoa_r+0xc5a>
    9d78:	1e65      	subs	r5, r4, #1
    9d7a:	782b      	ldrb	r3, [r5, #0]
    9d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9d7e:	e006      	b.n	9d8e <_dtoa_r+0x9e6>
    9d80:	4295      	cmp	r5, r2
    9d82:	d100      	bne.n	9d86 <_dtoa_r+0x9de>
    9d84:	e0b1      	b.n	9eea <_dtoa_r+0xb42>
    9d86:	3c02      	subs	r4, #2
    9d88:	7823      	ldrb	r3, [r4, #0]
    9d8a:	002c      	movs	r4, r5
    9d8c:	3d01      	subs	r5, #1
    9d8e:	2b39      	cmp	r3, #57	; 0x39
    9d90:	d0f6      	beq.n	9d80 <_dtoa_r+0x9d8>
    9d92:	3301      	adds	r3, #1
    9d94:	702b      	strb	r3, [r5, #0]
    9d96:	4649      	mov	r1, r9
    9d98:	4650      	mov	r0, sl
    9d9a:	f001 f945 	bl	b028 <_Bfree>
    9d9e:	4643      	mov	r3, r8
    9da0:	2b00      	cmp	r3, #0
    9da2:	d100      	bne.n	9da6 <_dtoa_r+0x9fe>
    9da4:	e52f      	b.n	9806 <_dtoa_r+0x45e>
    9da6:	2f00      	cmp	r7, #0
    9da8:	d005      	beq.n	9db6 <_dtoa_r+0xa0e>
    9daa:	4547      	cmp	r7, r8
    9dac:	d003      	beq.n	9db6 <_dtoa_r+0xa0e>
    9dae:	0039      	movs	r1, r7
    9db0:	4650      	mov	r0, sl
    9db2:	f001 f939 	bl	b028 <_Bfree>
    9db6:	4641      	mov	r1, r8
    9db8:	4650      	mov	r0, sl
    9dba:	f001 f935 	bl	b028 <_Bfree>
    9dbe:	e522      	b.n	9806 <_dtoa_r+0x45e>
    9dc0:	0013      	movs	r3, r2
    9dc2:	e675      	b.n	9ab0 <_dtoa_r+0x708>
    9dc4:	2e00      	cmp	r6, #0
    9dc6:	d000      	beq.n	9dca <_dtoa_r+0xa22>
    9dc8:	e6ab      	b.n	9b22 <_dtoa_r+0x77a>
    9dca:	033b      	lsls	r3, r7, #12
    9dcc:	2400      	movs	r4, #0
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d000      	beq.n	9dd4 <_dtoa_r+0xa2c>
    9dd2:	e6bf      	b.n	9b54 <_dtoa_r+0x7ac>
    9dd4:	4bba      	ldr	r3, [pc, #744]	; (a0c0 <_dtoa_r+0xd18>)
    9dd6:	423b      	tst	r3, r7
    9dd8:	d100      	bne.n	9ddc <_dtoa_r+0xa34>
    9dda:	e6bb      	b.n	9b54 <_dtoa_r+0x7ac>
    9ddc:	9b06      	ldr	r3, [sp, #24]
    9dde:	3401      	adds	r4, #1
    9de0:	3301      	adds	r3, #1
    9de2:	9306      	str	r3, [sp, #24]
    9de4:	9b04      	ldr	r3, [sp, #16]
    9de6:	3301      	adds	r3, #1
    9de8:	9304      	str	r3, [sp, #16]
    9dea:	e6b3      	b.n	9b54 <_dtoa_r+0x7ac>
    9dec:	2301      	movs	r3, #1
    9dee:	930b      	str	r3, [sp, #44]	; 0x2c
    9df0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9df2:	2b00      	cmp	r3, #0
    9df4:	dc00      	bgt.n	9df8 <_dtoa_r+0xa50>
    9df6:	e0d1      	b.n	9f9c <_dtoa_r+0xbf4>
    9df8:	001d      	movs	r5, r3
    9dfa:	4698      	mov	r8, r3
    9dfc:	930e      	str	r3, [sp, #56]	; 0x38
    9dfe:	9307      	str	r3, [sp, #28]
    9e00:	f7ff fbc8 	bl	9594 <_dtoa_r+0x1ec>
    9e04:	9b07      	ldr	r3, [sp, #28]
    9e06:	2b00      	cmp	r3, #0
    9e08:	dd00      	ble.n	9e0c <_dtoa_r+0xa64>
    9e0a:	e553      	b.n	98b4 <_dtoa_r+0x50c>
    9e0c:	d000      	beq.n	9e10 <_dtoa_r+0xa68>
    9e0e:	e0ad      	b.n	9f6c <_dtoa_r+0xbc4>
    9e10:	9804      	ldr	r0, [sp, #16]
    9e12:	9905      	ldr	r1, [sp, #20]
    9e14:	2200      	movs	r2, #0
    9e16:	4bab      	ldr	r3, [pc, #684]	; (a0c4 <_dtoa_r+0xd1c>)
    9e18:	f7fc fd08 	bl	682c <__aeabi_dmul>
    9e1c:	003b      	movs	r3, r7
    9e1e:	0032      	movs	r2, r6
    9e20:	f7fd fbce 	bl	75c0 <__aeabi_dcmpge>
    9e24:	2300      	movs	r3, #0
    9e26:	4699      	mov	r9, r3
    9e28:	4698      	mov	r8, r3
    9e2a:	2800      	cmp	r0, #0
    9e2c:	d055      	beq.n	9eda <_dtoa_r+0xb32>
    9e2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9e32:	43db      	mvns	r3, r3
    9e34:	9303      	str	r3, [sp, #12]
    9e36:	4649      	mov	r1, r9
    9e38:	4650      	mov	r0, sl
    9e3a:	f001 f8f5 	bl	b028 <_Bfree>
    9e3e:	4643      	mov	r3, r8
    9e40:	2b00      	cmp	r3, #0
    9e42:	d100      	bne.n	9e46 <_dtoa_r+0xa9e>
    9e44:	e4df      	b.n	9806 <_dtoa_r+0x45e>
    9e46:	e7b6      	b.n	9db6 <_dtoa_r+0xa0e>
    9e48:	464a      	mov	r2, r9
    9e4a:	4659      	mov	r1, fp
    9e4c:	4650      	mov	r0, sl
    9e4e:	f001 fa37 	bl	b2c0 <__pow5mult>
    9e52:	4683      	mov	fp, r0
    9e54:	e653      	b.n	9afe <_dtoa_r+0x756>
    9e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9e58:	2a00      	cmp	r2, #0
    9e5a:	d100      	bne.n	9e5e <_dtoa_r+0xab6>
    9e5c:	e1b6      	b.n	a1cc <_dtoa_r+0xe24>
    9e5e:	4a9a      	ldr	r2, [pc, #616]	; (a0c8 <_dtoa_r+0xd20>)
    9e60:	464c      	mov	r4, r9
    9e62:	4694      	mov	ip, r2
    9e64:	9a06      	ldr	r2, [sp, #24]
    9e66:	4463      	add	r3, ip
    9e68:	9208      	str	r2, [sp, #32]
    9e6a:	e5d5      	b.n	9a18 <_dtoa_r+0x670>
    9e6c:	2e00      	cmp	r6, #0
    9e6e:	d000      	beq.n	9e72 <_dtoa_r+0xaca>
    9e70:	e670      	b.n	9b54 <_dtoa_r+0x7ac>
    9e72:	e7aa      	b.n	9dca <_dtoa_r+0xa22>
    9e74:	f001 f8e2 	bl	b03c <__multadd>
    9e78:	46a2      	mov	sl, r4
    9e7a:	0005      	movs	r5, r0
    9e7c:	4680      	mov	r8, r0
    9e7e:	e6c7      	b.n	9c10 <_dtoa_r+0x868>
    9e80:	2301      	movs	r3, #1
    9e82:	469b      	mov	fp, r3
    9e84:	e6e2      	b.n	9c4c <_dtoa_r+0x8a4>
    9e86:	2300      	movs	r3, #0
    9e88:	930b      	str	r3, [sp, #44]	; 0x2c
    9e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9e8c:	2b02      	cmp	r3, #2
    9e8e:	d0af      	beq.n	9df0 <_dtoa_r+0xa48>
    9e90:	2400      	movs	r4, #0
    9e92:	4653      	mov	r3, sl
    9e94:	0021      	movs	r1, r4
    9e96:	645c      	str	r4, [r3, #68]	; 0x44
    9e98:	4650      	mov	r0, sl
    9e9a:	f001 f89d 	bl	afd8 <_Balloc>
    9e9e:	4653      	mov	r3, sl
    9ea0:	6418      	str	r0, [r3, #64]	; 0x40
    9ea2:	2301      	movs	r3, #1
    9ea4:	425b      	negs	r3, r3
    9ea6:	9307      	str	r3, [sp, #28]
    9ea8:	930e      	str	r3, [sp, #56]	; 0x38
    9eaa:	3302      	adds	r3, #2
    9eac:	900a      	str	r0, [sp, #40]	; 0x28
    9eae:	9423      	str	r4, [sp, #140]	; 0x8c
    9eb0:	930b      	str	r3, [sp, #44]	; 0x2c
    9eb2:	e4ec      	b.n	988e <_dtoa_r+0x4e6>
    9eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9eb6:	2b02      	cmp	r3, #2
    9eb8:	dc00      	bgt.n	9ebc <_dtoa_r+0xb14>
    9eba:	e685      	b.n	9bc8 <_dtoa_r+0x820>
    9ebc:	9b07      	ldr	r3, [sp, #28]
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	d1b5      	bne.n	9e2e <_dtoa_r+0xa86>
    9ec2:	4649      	mov	r1, r9
    9ec4:	2205      	movs	r2, #5
    9ec6:	4650      	mov	r0, sl
    9ec8:	f001 f8b8 	bl	b03c <__multadd>
    9ecc:	4681      	mov	r9, r0
    9ece:	0001      	movs	r1, r0
    9ed0:	4658      	mov	r0, fp
    9ed2:	f001 fab5 	bl	b440 <__mcmp>
    9ed6:	2800      	cmp	r0, #0
    9ed8:	dda9      	ble.n	9e2e <_dtoa_r+0xa86>
    9eda:	2331      	movs	r3, #49	; 0x31
    9edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ede:	7013      	strb	r3, [r2, #0]
    9ee0:	9b03      	ldr	r3, [sp, #12]
    9ee2:	1c54      	adds	r4, r2, #1
    9ee4:	3301      	adds	r3, #1
    9ee6:	9303      	str	r3, [sp, #12]
    9ee8:	e7a5      	b.n	9e36 <_dtoa_r+0xa8e>
    9eea:	9b03      	ldr	r3, [sp, #12]
    9eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9eee:	3301      	adds	r3, #1
    9ef0:	9303      	str	r3, [sp, #12]
    9ef2:	2331      	movs	r3, #49	; 0x31
    9ef4:	7013      	strb	r3, [r2, #0]
    9ef6:	e74e      	b.n	9d96 <_dtoa_r+0x9ee>
    9ef8:	2300      	movs	r3, #0
    9efa:	930b      	str	r3, [sp, #44]	; 0x2c
    9efc:	f7ff fb3d 	bl	957a <_dtoa_r+0x1d2>
    9f00:	9b06      	ldr	r3, [sp, #24]
    9f02:	465c      	mov	r4, fp
    9f04:	469b      	mov	fp, r3
    9f06:	9b07      	ldr	r3, [sp, #28]
    9f08:	469a      	mov	sl, r3
    9f0a:	e47c      	b.n	9806 <_dtoa_r+0x45e>
    9f0c:	4640      	mov	r0, r8
    9f0e:	f7fd fa57 	bl	73c0 <__aeabi_i2d>
    9f12:	0032      	movs	r2, r6
    9f14:	003b      	movs	r3, r7
    9f16:	f7fc fc89 	bl	682c <__aeabi_dmul>
    9f1a:	2200      	movs	r2, #0
    9f1c:	4b6b      	ldr	r3, [pc, #428]	; (a0cc <_dtoa_r+0xd24>)
    9f1e:	f002 f8cd 	bl	c0bc <__aeabi_dadd>
    9f22:	4a6b      	ldr	r2, [pc, #428]	; (a0d0 <_dtoa_r+0xd28>)
    9f24:	000b      	movs	r3, r1
    9f26:	4694      	mov	ip, r2
    9f28:	4463      	add	r3, ip
    9f2a:	9008      	str	r0, [sp, #32]
    9f2c:	9109      	str	r1, [sp, #36]	; 0x24
    9f2e:	9309      	str	r3, [sp, #36]	; 0x24
    9f30:	2200      	movs	r2, #0
    9f32:	4b64      	ldr	r3, [pc, #400]	; (a0c4 <_dtoa_r+0xd1c>)
    9f34:	0030      	movs	r0, r6
    9f36:	0039      	movs	r1, r7
    9f38:	f7fc fef8 	bl	6d2c <__aeabi_dsub>
    9f3c:	9e08      	ldr	r6, [sp, #32]
    9f3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9f40:	0032      	movs	r2, r6
    9f42:	003b      	movs	r3, r7
    9f44:	0004      	movs	r4, r0
    9f46:	000d      	movs	r5, r1
    9f48:	f7fd fb30 	bl	75ac <__aeabi_dcmpgt>
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d000      	beq.n	9f52 <_dtoa_r+0xbaa>
    9f50:	e0b2      	b.n	a0b8 <_dtoa_r+0xd10>
    9f52:	2080      	movs	r0, #128	; 0x80
    9f54:	0600      	lsls	r0, r0, #24
    9f56:	4684      	mov	ip, r0
    9f58:	0039      	movs	r1, r7
    9f5a:	4461      	add	r1, ip
    9f5c:	000b      	movs	r3, r1
    9f5e:	0032      	movs	r2, r6
    9f60:	0020      	movs	r0, r4
    9f62:	0029      	movs	r1, r5
    9f64:	f7fd fb0e 	bl	7584 <__aeabi_dcmplt>
    9f68:	2800      	cmp	r0, #0
    9f6a:	d057      	beq.n	a01c <_dtoa_r+0xc74>
    9f6c:	2300      	movs	r3, #0
    9f6e:	4699      	mov	r9, r3
    9f70:	4698      	mov	r8, r3
    9f72:	e75c      	b.n	9e2e <_dtoa_r+0xa86>
    9f74:	980a      	ldr	r0, [sp, #40]	; 0x28
    9f76:	f7ff fa4c 	bl	9412 <_dtoa_r+0x6a>
    9f7a:	1ae2      	subs	r2, r4, r3
    9f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9f7e:	46a1      	mov	r9, r4
    9f80:	469c      	mov	ip, r3
    9f82:	4494      	add	ip, r2
    9f84:	4663      	mov	r3, ip
    9f86:	2400      	movs	r4, #0
    9f88:	930d      	str	r3, [sp, #52]	; 0x34
    9f8a:	e53e      	b.n	9a0a <_dtoa_r+0x662>
    9f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9f90:	9208      	str	r2, [sp, #32]
    9f92:	9309      	str	r3, [sp, #36]	; 0x24
    9f94:	2302      	movs	r3, #2
    9f96:	4698      	mov	r8, r3
    9f98:	f7ff fb3a 	bl	9610 <_dtoa_r+0x268>
    9f9c:	2300      	movs	r3, #0
    9f9e:	4652      	mov	r2, sl
    9fa0:	2100      	movs	r1, #0
    9fa2:	6453      	str	r3, [r2, #68]	; 0x44
    9fa4:	4650      	mov	r0, sl
    9fa6:	f001 f817 	bl	afd8 <_Balloc>
    9faa:	4653      	mov	r3, sl
    9fac:	6418      	str	r0, [r3, #64]	; 0x40
    9fae:	2301      	movs	r3, #1
    9fb0:	900a      	str	r0, [sp, #40]	; 0x28
    9fb2:	9307      	str	r3, [sp, #28]
    9fb4:	9323      	str	r3, [sp, #140]	; 0x8c
    9fb6:	930e      	str	r3, [sp, #56]	; 0x38
    9fb8:	f7ff fb07 	bl	95ca <_dtoa_r+0x222>
    9fbc:	4643      	mov	r3, r8
    9fbe:	930c      	str	r3, [sp, #48]	; 0x30
    9fc0:	465b      	mov	r3, fp
    9fc2:	9a06      	ldr	r2, [sp, #24]
    9fc4:	46a8      	mov	r8, r5
    9fc6:	46b3      	mov	fp, r6
    9fc8:	4655      	mov	r5, sl
    9fca:	9e04      	ldr	r6, [sp, #16]
    9fcc:	4691      	mov	r9, r2
    9fce:	46ba      	mov	sl, r7
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	dd10      	ble.n	9ff6 <_dtoa_r+0xc4e>
    9fd4:	4659      	mov	r1, fp
    9fd6:	2201      	movs	r2, #1
    9fd8:	0038      	movs	r0, r7
    9fda:	f001 f9d1 	bl	b380 <__lshift>
    9fde:	4649      	mov	r1, r9
    9fe0:	4683      	mov	fp, r0
    9fe2:	f001 fa2d 	bl	b440 <__mcmp>
    9fe6:	2800      	cmp	r0, #0
    9fe8:	dc00      	bgt.n	9fec <_dtoa_r+0xc44>
    9fea:	e157      	b.n	a29c <_dtoa_r+0xef4>
    9fec:	2e39      	cmp	r6, #57	; 0x39
    9fee:	d100      	bne.n	9ff2 <_dtoa_r+0xc4a>
    9ff0:	e122      	b.n	a238 <_dtoa_r+0xe90>
    9ff2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9ff4:	3631      	adds	r6, #49	; 0x31
    9ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ff8:	4647      	mov	r7, r8
    9ffa:	1c6c      	adds	r4, r5, #1
    9ffc:	702e      	strb	r6, [r5, #0]
    9ffe:	4698      	mov	r8, r3
    a000:	e6c9      	b.n	9d96 <_dtoa_r+0x9ee>
    a002:	2800      	cmp	r0, #0
    a004:	d103      	bne.n	a00e <_dtoa_r+0xc66>
    a006:	07f3      	lsls	r3, r6, #31
    a008:	d501      	bpl.n	a00e <_dtoa_r+0xc66>
    a00a:	e6b5      	b.n	9d78 <_dtoa_r+0x9d0>
    a00c:	001c      	movs	r4, r3
    a00e:	1e63      	subs	r3, r4, #1
    a010:	781a      	ldrb	r2, [r3, #0]
    a012:	2a30      	cmp	r2, #48	; 0x30
    a014:	d0fa      	beq.n	a00c <_dtoa_r+0xc64>
    a016:	e6be      	b.n	9d96 <_dtoa_r+0x9ee>
    a018:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a01a:	4699      	mov	r9, r3
    a01c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    a01e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a020:	e435      	b.n	988e <_dtoa_r+0x4e6>
    a022:	2501      	movs	r5, #1
    a024:	f7ff fab4 	bl	9590 <_dtoa_r+0x1e8>
    a028:	9b03      	ldr	r3, [sp, #12]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d100      	bne.n	a030 <_dtoa_r+0xc88>
    a02e:	e0d4      	b.n	a1da <_dtoa_r+0xe32>
    a030:	9810      	ldr	r0, [sp, #64]	; 0x40
    a032:	9911      	ldr	r1, [sp, #68]	; 0x44
    a034:	425c      	negs	r4, r3
    a036:	230f      	movs	r3, #15
    a038:	4a26      	ldr	r2, [pc, #152]	; (a0d4 <_dtoa_r+0xd2c>)
    a03a:	4023      	ands	r3, r4
    a03c:	00db      	lsls	r3, r3, #3
    a03e:	18d3      	adds	r3, r2, r3
    a040:	681a      	ldr	r2, [r3, #0]
    a042:	685b      	ldr	r3, [r3, #4]
    a044:	f7fc fbf2 	bl	682c <__aeabi_dmul>
    a048:	1124      	asrs	r4, r4, #4
    a04a:	0006      	movs	r6, r0
    a04c:	000f      	movs	r7, r1
    a04e:	2c00      	cmp	r4, #0
    a050:	d100      	bne.n	a054 <_dtoa_r+0xcac>
    a052:	e149      	b.n	a2e8 <_dtoa_r+0xf40>
    a054:	2302      	movs	r3, #2
    a056:	4698      	mov	r8, r3
    a058:	4d1f      	ldr	r5, [pc, #124]	; (a0d8 <_dtoa_r+0xd30>)
    a05a:	2301      	movs	r3, #1
    a05c:	4223      	tst	r3, r4
    a05e:	d009      	beq.n	a074 <_dtoa_r+0xccc>
    a060:	469c      	mov	ip, r3
    a062:	682a      	ldr	r2, [r5, #0]
    a064:	686b      	ldr	r3, [r5, #4]
    a066:	0030      	movs	r0, r6
    a068:	0039      	movs	r1, r7
    a06a:	44e0      	add	r8, ip
    a06c:	f7fc fbde 	bl	682c <__aeabi_dmul>
    a070:	0006      	movs	r6, r0
    a072:	000f      	movs	r7, r1
    a074:	1064      	asrs	r4, r4, #1
    a076:	3508      	adds	r5, #8
    a078:	2c00      	cmp	r4, #0
    a07a:	d1ee      	bne.n	a05a <_dtoa_r+0xcb2>
    a07c:	f7ff fae4 	bl	9648 <_dtoa_r+0x2a0>
    a080:	9b03      	ldr	r3, [sp, #12]
    a082:	2730      	movs	r7, #48	; 0x30
    a084:	3301      	adds	r3, #1
    a086:	9303      	str	r3, [sp, #12]
    a088:	2330      	movs	r3, #48	; 0x30
    a08a:	702b      	strb	r3, [r5, #0]
    a08c:	e4ac      	b.n	99e8 <_dtoa_r+0x640>
    a08e:	6859      	ldr	r1, [r3, #4]
    a090:	4650      	mov	r0, sl
    a092:	f000 ffa1 	bl	afd8 <_Balloc>
    a096:	4643      	mov	r3, r8
    a098:	4641      	mov	r1, r8
    a09a:	0004      	movs	r4, r0
    a09c:	691b      	ldr	r3, [r3, #16]
    a09e:	310c      	adds	r1, #12
    a0a0:	1c9a      	adds	r2, r3, #2
    a0a2:	0092      	lsls	r2, r2, #2
    a0a4:	300c      	adds	r0, #12
    a0a6:	f7fd fc03 	bl	78b0 <memcpy>
    a0aa:	2201      	movs	r2, #1
    a0ac:	0021      	movs	r1, r4
    a0ae:	4650      	mov	r0, sl
    a0b0:	f001 f966 	bl	b380 <__lshift>
    a0b4:	900c      	str	r0, [sp, #48]	; 0x30
    a0b6:	e599      	b.n	9bec <_dtoa_r+0x844>
    a0b8:	2300      	movs	r3, #0
    a0ba:	4699      	mov	r9, r3
    a0bc:	4698      	mov	r8, r3
    a0be:	e70c      	b.n	9eda <_dtoa_r+0xb32>
    a0c0:	7ff00000 	.word	0x7ff00000
    a0c4:	40140000 	.word	0x40140000
    a0c8:	00000433 	.word	0x00000433
    a0cc:	401c0000 	.word	0x401c0000
    a0d0:	fcc00000 	.word	0xfcc00000
    a0d4:	0000cf10 	.word	0x0000cf10
    a0d8:	0000cee8 	.word	0x0000cee8
    a0dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0de:	498f      	ldr	r1, [pc, #572]	; (a31c <_dtoa_r+0xf74>)
    a0e0:	3b01      	subs	r3, #1
    a0e2:	00db      	lsls	r3, r3, #3
    a0e4:	18c9      	adds	r1, r1, r3
    a0e6:	6808      	ldr	r0, [r1, #0]
    a0e8:	6849      	ldr	r1, [r1, #4]
    a0ea:	9a08      	ldr	r2, [sp, #32]
    a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0ee:	f7fc fb9d 	bl	682c <__aeabi_dmul>
    a0f2:	9014      	str	r0, [sp, #80]	; 0x50
    a0f4:	9115      	str	r1, [sp, #84]	; 0x54
    a0f6:	0039      	movs	r1, r7
    a0f8:	0030      	movs	r0, r6
    a0fa:	f7fd f92d 	bl	7358 <__aeabi_d2iz>
    a0fe:	0005      	movs	r5, r0
    a100:	f7fd f95e 	bl	73c0 <__aeabi_i2d>
    a104:	0002      	movs	r2, r0
    a106:	000b      	movs	r3, r1
    a108:	0030      	movs	r0, r6
    a10a:	0039      	movs	r1, r7
    a10c:	f7fc fe0e 	bl	6d2c <__aeabi_dsub>
    a110:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a112:	9008      	str	r0, [sp, #32]
    a114:	9109      	str	r1, [sp, #36]	; 0x24
    a116:	990a      	ldr	r1, [sp, #40]	; 0x28
    a118:	001a      	movs	r2, r3
    a11a:	468c      	mov	ip, r1
    a11c:	3530      	adds	r5, #48	; 0x30
    a11e:	4462      	add	r2, ip
    a120:	1c4c      	adds	r4, r1, #1
    a122:	700d      	strb	r5, [r1, #0]
    a124:	4690      	mov	r8, r2
    a126:	2b01      	cmp	r3, #1
    a128:	d01b      	beq.n	a162 <_dtoa_r+0xdba>
    a12a:	9808      	ldr	r0, [sp, #32]
    a12c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a12e:	0025      	movs	r5, r4
    a130:	2200      	movs	r2, #0
    a132:	4b7b      	ldr	r3, [pc, #492]	; (a320 <_dtoa_r+0xf78>)
    a134:	f7fc fb7a 	bl	682c <__aeabi_dmul>
    a138:	000f      	movs	r7, r1
    a13a:	0006      	movs	r6, r0
    a13c:	f7fd f90c 	bl	7358 <__aeabi_d2iz>
    a140:	0004      	movs	r4, r0
    a142:	f7fd f93d 	bl	73c0 <__aeabi_i2d>
    a146:	3430      	adds	r4, #48	; 0x30
    a148:	0002      	movs	r2, r0
    a14a:	000b      	movs	r3, r1
    a14c:	0030      	movs	r0, r6
    a14e:	0039      	movs	r1, r7
    a150:	f7fc fdec 	bl	6d2c <__aeabi_dsub>
    a154:	702c      	strb	r4, [r5, #0]
    a156:	3501      	adds	r5, #1
    a158:	45a8      	cmp	r8, r5
    a15a:	d1e9      	bne.n	a130 <_dtoa_r+0xd88>
    a15c:	4644      	mov	r4, r8
    a15e:	9008      	str	r0, [sp, #32]
    a160:	9109      	str	r1, [sp, #36]	; 0x24
    a162:	9814      	ldr	r0, [sp, #80]	; 0x50
    a164:	9915      	ldr	r1, [sp, #84]	; 0x54
    a166:	2200      	movs	r2, #0
    a168:	4b6e      	ldr	r3, [pc, #440]	; (a324 <_dtoa_r+0xf7c>)
    a16a:	f001 ffa7 	bl	c0bc <__aeabi_dadd>
    a16e:	9a08      	ldr	r2, [sp, #32]
    a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a172:	f7fd fa07 	bl	7584 <__aeabi_dcmplt>
    a176:	2800      	cmp	r0, #0
    a178:	d067      	beq.n	a24a <_dtoa_r+0xea2>
    a17a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a17c:	1e65      	subs	r5, r4, #1
    a17e:	9303      	str	r3, [sp, #12]
    a180:	782f      	ldrb	r7, [r5, #0]
    a182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a184:	e42e      	b.n	99e4 <_dtoa_r+0x63c>
    a186:	4643      	mov	r3, r8
    a188:	46b3      	mov	fp, r6
    a18a:	930c      	str	r3, [sp, #48]	; 0x30
    a18c:	9e04      	ldr	r6, [sp, #16]
    a18e:	9b06      	ldr	r3, [sp, #24]
    a190:	46a8      	mov	r8, r5
    a192:	4699      	mov	r9, r3
    a194:	4655      	mov	r5, sl
    a196:	46ba      	mov	sl, r7
    a198:	2e39      	cmp	r6, #57	; 0x39
    a19a:	d04d      	beq.n	a238 <_dtoa_r+0xe90>
    a19c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a19e:	3601      	adds	r6, #1
    a1a0:	4647      	mov	r7, r8
    a1a2:	1c6c      	adds	r4, r5, #1
    a1a4:	702e      	strb	r6, [r5, #0]
    a1a6:	4698      	mov	r8, r3
    a1a8:	e5f5      	b.n	9d96 <_dtoa_r+0x9ee>
    a1aa:	4642      	mov	r2, r8
    a1ac:	9b06      	ldr	r3, [sp, #24]
    a1ae:	46b3      	mov	fp, r6
    a1b0:	46ba      	mov	sl, r7
    a1b2:	9e04      	ldr	r6, [sp, #16]
    a1b4:	4699      	mov	r9, r3
    a1b6:	002f      	movs	r7, r5
    a1b8:	4690      	mov	r8, r2
    a1ba:	e5d1      	b.n	9d60 <_dtoa_r+0x9b8>
    a1bc:	9b06      	ldr	r3, [sp, #24]
    a1be:	9a07      	ldr	r2, [sp, #28]
    a1c0:	1a9b      	subs	r3, r3, r2
    a1c2:	9308      	str	r3, [sp, #32]
    a1c4:	2300      	movs	r3, #0
    a1c6:	e427      	b.n	9a18 <_dtoa_r+0x670>
    a1c8:	2401      	movs	r4, #1
    a1ca:	e5c5      	b.n	9d58 <_dtoa_r+0x9b0>
    a1cc:	2336      	movs	r3, #54	; 0x36
    a1ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a1d0:	464c      	mov	r4, r9
    a1d2:	1a9b      	subs	r3, r3, r2
    a1d4:	9a06      	ldr	r2, [sp, #24]
    a1d6:	9208      	str	r2, [sp, #32]
    a1d8:	e41e      	b.n	9a18 <_dtoa_r+0x670>
    a1da:	2302      	movs	r3, #2
    a1dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    a1de:	9f11      	ldr	r7, [sp, #68]	; 0x44
    a1e0:	4698      	mov	r8, r3
    a1e2:	f7ff fa31 	bl	9648 <_dtoa_r+0x2a0>
    a1e6:	9b07      	ldr	r3, [sp, #28]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d100      	bne.n	a1ee <_dtoa_r+0xe46>
    a1ec:	e68e      	b.n	9f0c <_dtoa_r+0xb64>
    a1ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a1f0:	2c00      	cmp	r4, #0
    a1f2:	dc00      	bgt.n	a1f6 <_dtoa_r+0xe4e>
    a1f4:	e712      	b.n	a01c <_dtoa_r+0xc74>
    a1f6:	9b03      	ldr	r3, [sp, #12]
    a1f8:	2200      	movs	r2, #0
    a1fa:	3b01      	subs	r3, #1
    a1fc:	9313      	str	r3, [sp, #76]	; 0x4c
    a1fe:	0030      	movs	r0, r6
    a200:	4b47      	ldr	r3, [pc, #284]	; (a320 <_dtoa_r+0xf78>)
    a202:	0039      	movs	r1, r7
    a204:	f7fc fb12 	bl	682c <__aeabi_dmul>
    a208:	0006      	movs	r6, r0
    a20a:	4640      	mov	r0, r8
    a20c:	000f      	movs	r7, r1
    a20e:	3001      	adds	r0, #1
    a210:	f7fd f8d6 	bl	73c0 <__aeabi_i2d>
    a214:	0032      	movs	r2, r6
    a216:	003b      	movs	r3, r7
    a218:	f7fc fb08 	bl	682c <__aeabi_dmul>
    a21c:	2200      	movs	r2, #0
    a21e:	4b42      	ldr	r3, [pc, #264]	; (a328 <_dtoa_r+0xf80>)
    a220:	f001 ff4c 	bl	c0bc <__aeabi_dadd>
    a224:	4a41      	ldr	r2, [pc, #260]	; (a32c <_dtoa_r+0xf84>)
    a226:	000b      	movs	r3, r1
    a228:	4694      	mov	ip, r2
    a22a:	4463      	add	r3, ip
    a22c:	9008      	str	r0, [sp, #32]
    a22e:	9109      	str	r1, [sp, #36]	; 0x24
    a230:	9412      	str	r4, [sp, #72]	; 0x48
    a232:	9309      	str	r3, [sp, #36]	; 0x24
    a234:	f7ff fa30 	bl	9698 <_dtoa_r+0x2f0>
    a238:	2339      	movs	r3, #57	; 0x39
    a23a:	702b      	strb	r3, [r5, #0]
    a23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a23e:	4647      	mov	r7, r8
    a240:	1c6c      	adds	r4, r5, #1
    a242:	4698      	mov	r8, r3
    a244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a246:	2339      	movs	r3, #57	; 0x39
    a248:	e5a1      	b.n	9d8e <_dtoa_r+0x9e6>
    a24a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a24e:	2000      	movs	r0, #0
    a250:	4934      	ldr	r1, [pc, #208]	; (a324 <_dtoa_r+0xf7c>)
    a252:	f7fc fd6b 	bl	6d2c <__aeabi_dsub>
    a256:	9a08      	ldr	r2, [sp, #32]
    a258:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a25a:	f7fd f9a7 	bl	75ac <__aeabi_dcmpgt>
    a25e:	2800      	cmp	r0, #0
    a260:	d101      	bne.n	a266 <_dtoa_r+0xebe>
    a262:	e6db      	b.n	a01c <_dtoa_r+0xc74>
    a264:	001c      	movs	r4, r3
    a266:	1e63      	subs	r3, r4, #1
    a268:	781a      	ldrb	r2, [r3, #0]
    a26a:	2a30      	cmp	r2, #48	; 0x30
    a26c:	d0fa      	beq.n	a264 <_dtoa_r+0xebc>
    a26e:	f7ff fac8 	bl	9802 <_dtoa_r+0x45a>
    a272:	4643      	mov	r3, r8
    a274:	46b3      	mov	fp, r6
    a276:	930c      	str	r3, [sp, #48]	; 0x30
    a278:	9e04      	ldr	r6, [sp, #16]
    a27a:	9b06      	ldr	r3, [sp, #24]
    a27c:	46a8      	mov	r8, r5
    a27e:	4699      	mov	r9, r3
    a280:	4655      	mov	r5, sl
    a282:	46ba      	mov	sl, r7
    a284:	2e39      	cmp	r6, #57	; 0x39
    a286:	d0d7      	beq.n	a238 <_dtoa_r+0xe90>
    a288:	2c00      	cmp	r4, #0
    a28a:	dd00      	ble.n	a28e <_dtoa_r+0xee6>
    a28c:	e6b1      	b.n	9ff2 <_dtoa_r+0xc4a>
    a28e:	e6b2      	b.n	9ff6 <_dtoa_r+0xc4e>
    a290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a292:	464d      	mov	r5, r9
    a294:	9203      	str	r2, [sp, #12]
    a296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a298:	f7ff fba4 	bl	99e4 <_dtoa_r+0x63c>
    a29c:	2800      	cmp	r0, #0
    a29e:	d000      	beq.n	a2a2 <_dtoa_r+0xefa>
    a2a0:	e6a9      	b.n	9ff6 <_dtoa_r+0xc4e>
    a2a2:	07f3      	lsls	r3, r6, #31
    a2a4:	d400      	bmi.n	a2a8 <_dtoa_r+0xf00>
    a2a6:	e6a6      	b.n	9ff6 <_dtoa_r+0xc4e>
    a2a8:	e6a0      	b.n	9fec <_dtoa_r+0xc44>
    a2aa:	2300      	movs	r3, #0
    a2ac:	4641      	mov	r1, r8
    a2ae:	220a      	movs	r2, #10
    a2b0:	4650      	mov	r0, sl
    a2b2:	f000 fec3 	bl	b03c <__multadd>
    a2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2b8:	4680      	mov	r8, r0
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	dd01      	ble.n	a2c2 <_dtoa_r+0xf1a>
    a2be:	9307      	str	r3, [sp, #28]
    a2c0:	e486      	b.n	9bd0 <_dtoa_r+0x828>
    a2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a2c4:	2b02      	cmp	r3, #2
    a2c6:	dc1f      	bgt.n	a308 <_dtoa_r+0xf60>
    a2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ca:	9307      	str	r3, [sp, #28]
    a2cc:	e480      	b.n	9bd0 <_dtoa_r+0x828>
    a2ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a2d0:	2b02      	cmp	r3, #2
    a2d2:	dc19      	bgt.n	a308 <_dtoa_r+0xf60>
    a2d4:	4649      	mov	r1, r9
    a2d6:	f7fe ffbd 	bl	9254 <quorem>
    a2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2dc:	3030      	adds	r0, #48	; 0x30
    a2de:	7018      	strb	r0, [r3, #0]
    a2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2e2:	0006      	movs	r6, r0
    a2e4:	9307      	str	r3, [sp, #28]
    a2e6:	e533      	b.n	9d50 <_dtoa_r+0x9a8>
    a2e8:	2302      	movs	r3, #2
    a2ea:	4698      	mov	r8, r3
    a2ec:	f7ff f9ac 	bl	9648 <_dtoa_r+0x2a0>
    a2f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a2f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    a2f4:	9303      	str	r3, [sp, #12]
    a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2f8:	001d      	movs	r5, r3
    a2fa:	f7ff fb73 	bl	99e4 <_dtoa_r+0x63c>
    a2fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a300:	9c14      	ldr	r4, [sp, #80]	; 0x50
    a302:	9303      	str	r3, [sp, #12]
    a304:	f7ff fa7f 	bl	9806 <_dtoa_r+0x45e>
    a308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a30a:	9307      	str	r3, [sp, #28]
    a30c:	e5d6      	b.n	9ebc <_dtoa_r+0xb14>
    a30e:	2b04      	cmp	r3, #4
    a310:	d100      	bne.n	a314 <_dtoa_r+0xf6c>
    a312:	e43f      	b.n	9b94 <_dtoa_r+0x7ec>
    a314:	233c      	movs	r3, #60	; 0x3c
    a316:	1a18      	subs	r0, r3, r0
    a318:	e4d7      	b.n	9cca <_dtoa_r+0x922>
    a31a:	46c0      	nop			; (mov r8, r8)
    a31c:	0000cf10 	.word	0x0000cf10
    a320:	40240000 	.word	0x40240000
    a324:	3fe00000 	.word	0x3fe00000
    a328:	401c0000 	.word	0x401c0000
    a32c:	fcc00000 	.word	0xfcc00000

0000a330 <__sflush_r>:
    a330:	b5f0      	push	{r4, r5, r6, r7, lr}
    a332:	46c6      	mov	lr, r8
    a334:	b500      	push	{lr}
    a336:	230c      	movs	r3, #12
    a338:	5eca      	ldrsh	r2, [r1, r3]
    a33a:	4680      	mov	r8, r0
    a33c:	b293      	uxth	r3, r2
    a33e:	000c      	movs	r4, r1
    a340:	0719      	lsls	r1, r3, #28
    a342:	d440      	bmi.n	a3c6 <__sflush_r+0x96>
    a344:	2380      	movs	r3, #128	; 0x80
    a346:	011b      	lsls	r3, r3, #4
    a348:	4313      	orrs	r3, r2
    a34a:	6862      	ldr	r2, [r4, #4]
    a34c:	81a3      	strh	r3, [r4, #12]
    a34e:	2a00      	cmp	r2, #0
    a350:	dc00      	bgt.n	a354 <__sflush_r+0x24>
    a352:	e070      	b.n	a436 <__sflush_r+0x106>
    a354:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a356:	2e00      	cmp	r6, #0
    a358:	d031      	beq.n	a3be <__sflush_r+0x8e>
    a35a:	4642      	mov	r2, r8
    a35c:	4641      	mov	r1, r8
    a35e:	6815      	ldr	r5, [r2, #0]
    a360:	2200      	movs	r2, #0
    a362:	b29b      	uxth	r3, r3
    a364:	600a      	str	r2, [r1, #0]
    a366:	04da      	lsls	r2, r3, #19
    a368:	d400      	bmi.n	a36c <__sflush_r+0x3c>
    a36a:	e069      	b.n	a440 <__sflush_r+0x110>
    a36c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    a36e:	075b      	lsls	r3, r3, #29
    a370:	d506      	bpl.n	a380 <__sflush_r+0x50>
    a372:	6863      	ldr	r3, [r4, #4]
    a374:	1ad2      	subs	r2, r2, r3
    a376:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a378:	2b00      	cmp	r3, #0
    a37a:	d001      	beq.n	a380 <__sflush_r+0x50>
    a37c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a37e:	1ad2      	subs	r2, r2, r3
    a380:	2300      	movs	r3, #0
    a382:	69e1      	ldr	r1, [r4, #28]
    a384:	4640      	mov	r0, r8
    a386:	47b0      	blx	r6
    a388:	1c43      	adds	r3, r0, #1
    a38a:	d03d      	beq.n	a408 <__sflush_r+0xd8>
    a38c:	89a3      	ldrh	r3, [r4, #12]
    a38e:	4a3a      	ldr	r2, [pc, #232]	; (a478 <__sflush_r+0x148>)
    a390:	4013      	ands	r3, r2
    a392:	2200      	movs	r2, #0
    a394:	6062      	str	r2, [r4, #4]
    a396:	6922      	ldr	r2, [r4, #16]
    a398:	b21b      	sxth	r3, r3
    a39a:	81a3      	strh	r3, [r4, #12]
    a39c:	6022      	str	r2, [r4, #0]
    a39e:	04db      	lsls	r3, r3, #19
    a3a0:	d447      	bmi.n	a432 <__sflush_r+0x102>
    a3a2:	4643      	mov	r3, r8
    a3a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a3a6:	601d      	str	r5, [r3, #0]
    a3a8:	2900      	cmp	r1, #0
    a3aa:	d008      	beq.n	a3be <__sflush_r+0x8e>
    a3ac:	0023      	movs	r3, r4
    a3ae:	3340      	adds	r3, #64	; 0x40
    a3b0:	4299      	cmp	r1, r3
    a3b2:	d002      	beq.n	a3ba <__sflush_r+0x8a>
    a3b4:	4640      	mov	r0, r8
    a3b6:	f000 f967 	bl	a688 <_free_r>
    a3ba:	2300      	movs	r3, #0
    a3bc:	6323      	str	r3, [r4, #48]	; 0x30
    a3be:	2000      	movs	r0, #0
    a3c0:	bc04      	pop	{r2}
    a3c2:	4690      	mov	r8, r2
    a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3c6:	6926      	ldr	r6, [r4, #16]
    a3c8:	2e00      	cmp	r6, #0
    a3ca:	d0f8      	beq.n	a3be <__sflush_r+0x8e>
    a3cc:	6822      	ldr	r2, [r4, #0]
    a3ce:	6026      	str	r6, [r4, #0]
    a3d0:	1b95      	subs	r5, r2, r6
    a3d2:	2200      	movs	r2, #0
    a3d4:	079b      	lsls	r3, r3, #30
    a3d6:	d100      	bne.n	a3da <__sflush_r+0xaa>
    a3d8:	6962      	ldr	r2, [r4, #20]
    a3da:	60a2      	str	r2, [r4, #8]
    a3dc:	2d00      	cmp	r5, #0
    a3de:	dc04      	bgt.n	a3ea <__sflush_r+0xba>
    a3e0:	e7ed      	b.n	a3be <__sflush_r+0x8e>
    a3e2:	1836      	adds	r6, r6, r0
    a3e4:	1a2d      	subs	r5, r5, r0
    a3e6:	2d00      	cmp	r5, #0
    a3e8:	dde9      	ble.n	a3be <__sflush_r+0x8e>
    a3ea:	002b      	movs	r3, r5
    a3ec:	0032      	movs	r2, r6
    a3ee:	69e1      	ldr	r1, [r4, #28]
    a3f0:	4640      	mov	r0, r8
    a3f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a3f4:	47b8      	blx	r7
    a3f6:	2800      	cmp	r0, #0
    a3f8:	dcf3      	bgt.n	a3e2 <__sflush_r+0xb2>
    a3fa:	2240      	movs	r2, #64	; 0x40
    a3fc:	2001      	movs	r0, #1
    a3fe:	89a3      	ldrh	r3, [r4, #12]
    a400:	4240      	negs	r0, r0
    a402:	4313      	orrs	r3, r2
    a404:	81a3      	strh	r3, [r4, #12]
    a406:	e7db      	b.n	a3c0 <__sflush_r+0x90>
    a408:	4643      	mov	r3, r8
    a40a:	6819      	ldr	r1, [r3, #0]
    a40c:	291d      	cmp	r1, #29
    a40e:	d8f4      	bhi.n	a3fa <__sflush_r+0xca>
    a410:	4b1a      	ldr	r3, [pc, #104]	; (a47c <__sflush_r+0x14c>)
    a412:	2201      	movs	r2, #1
    a414:	40cb      	lsrs	r3, r1
    a416:	439a      	bics	r2, r3
    a418:	d1ef      	bne.n	a3fa <__sflush_r+0xca>
    a41a:	89a3      	ldrh	r3, [r4, #12]
    a41c:	4e16      	ldr	r6, [pc, #88]	; (a478 <__sflush_r+0x148>)
    a41e:	6062      	str	r2, [r4, #4]
    a420:	4033      	ands	r3, r6
    a422:	6922      	ldr	r2, [r4, #16]
    a424:	b21b      	sxth	r3, r3
    a426:	81a3      	strh	r3, [r4, #12]
    a428:	6022      	str	r2, [r4, #0]
    a42a:	04db      	lsls	r3, r3, #19
    a42c:	d5b9      	bpl.n	a3a2 <__sflush_r+0x72>
    a42e:	2900      	cmp	r1, #0
    a430:	d1b7      	bne.n	a3a2 <__sflush_r+0x72>
    a432:	6520      	str	r0, [r4, #80]	; 0x50
    a434:	e7b5      	b.n	a3a2 <__sflush_r+0x72>
    a436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a438:	2a00      	cmp	r2, #0
    a43a:	dd00      	ble.n	a43e <__sflush_r+0x10e>
    a43c:	e78a      	b.n	a354 <__sflush_r+0x24>
    a43e:	e7be      	b.n	a3be <__sflush_r+0x8e>
    a440:	2200      	movs	r2, #0
    a442:	2301      	movs	r3, #1
    a444:	69e1      	ldr	r1, [r4, #28]
    a446:	4640      	mov	r0, r8
    a448:	47b0      	blx	r6
    a44a:	0002      	movs	r2, r0
    a44c:	1c43      	adds	r3, r0, #1
    a44e:	d002      	beq.n	a456 <__sflush_r+0x126>
    a450:	89a3      	ldrh	r3, [r4, #12]
    a452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a454:	e78b      	b.n	a36e <__sflush_r+0x3e>
    a456:	4643      	mov	r3, r8
    a458:	681b      	ldr	r3, [r3, #0]
    a45a:	2b00      	cmp	r3, #0
    a45c:	d0f8      	beq.n	a450 <__sflush_r+0x120>
    a45e:	2b1d      	cmp	r3, #29
    a460:	d001      	beq.n	a466 <__sflush_r+0x136>
    a462:	2b16      	cmp	r3, #22
    a464:	d103      	bne.n	a46e <__sflush_r+0x13e>
    a466:	4643      	mov	r3, r8
    a468:	2000      	movs	r0, #0
    a46a:	601d      	str	r5, [r3, #0]
    a46c:	e7a8      	b.n	a3c0 <__sflush_r+0x90>
    a46e:	2140      	movs	r1, #64	; 0x40
    a470:	89a3      	ldrh	r3, [r4, #12]
    a472:	430b      	orrs	r3, r1
    a474:	81a3      	strh	r3, [r4, #12]
    a476:	e7a3      	b.n	a3c0 <__sflush_r+0x90>
    a478:	fffff7ff 	.word	0xfffff7ff
    a47c:	20400001 	.word	0x20400001

0000a480 <_fflush_r>:
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	0005      	movs	r5, r0
    a484:	000c      	movs	r4, r1
    a486:	2800      	cmp	r0, #0
    a488:	d002      	beq.n	a490 <_fflush_r+0x10>
    a48a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a48c:	2b00      	cmp	r3, #0
    a48e:	d016      	beq.n	a4be <_fflush_r+0x3e>
    a490:	220c      	movs	r2, #12
    a492:	5ea3      	ldrsh	r3, [r4, r2]
    a494:	2600      	movs	r6, #0
    a496:	2b00      	cmp	r3, #0
    a498:	d00f      	beq.n	a4ba <_fflush_r+0x3a>
    a49a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a49c:	07d2      	lsls	r2, r2, #31
    a49e:	d401      	bmi.n	a4a4 <_fflush_r+0x24>
    a4a0:	059b      	lsls	r3, r3, #22
    a4a2:	d513      	bpl.n	a4cc <_fflush_r+0x4c>
    a4a4:	0021      	movs	r1, r4
    a4a6:	0028      	movs	r0, r5
    a4a8:	f7ff ff42 	bl	a330 <__sflush_r>
    a4ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a4ae:	0006      	movs	r6, r0
    a4b0:	07db      	lsls	r3, r3, #31
    a4b2:	d402      	bmi.n	a4ba <_fflush_r+0x3a>
    a4b4:	89a3      	ldrh	r3, [r4, #12]
    a4b6:	059b      	lsls	r3, r3, #22
    a4b8:	d504      	bpl.n	a4c4 <_fflush_r+0x44>
    a4ba:	0030      	movs	r0, r6
    a4bc:	bd70      	pop	{r4, r5, r6, pc}
    a4be:	f000 f839 	bl	a534 <__sinit>
    a4c2:	e7e5      	b.n	a490 <_fflush_r+0x10>
    a4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a4c6:	f000 f9f7 	bl	a8b8 <__retarget_lock_release_recursive>
    a4ca:	e7f6      	b.n	a4ba <_fflush_r+0x3a>
    a4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a4ce:	f000 f9f1 	bl	a8b4 <__retarget_lock_acquire_recursive>
    a4d2:	e7e7      	b.n	a4a4 <_fflush_r+0x24>

0000a4d4 <_cleanup_r>:
    a4d4:	b510      	push	{r4, lr}
    a4d6:	4902      	ldr	r1, [pc, #8]	; (a4e0 <_cleanup_r+0xc>)
    a4d8:	f000 f9b4 	bl	a844 <_fwalk_reent>
    a4dc:	bd10      	pop	{r4, pc}
    a4de:	46c0      	nop			; (mov r8, r8)
    a4e0:	0000bd5d 	.word	0x0000bd5d

0000a4e4 <std.isra.0>:
    a4e4:	2300      	movs	r3, #0
    a4e6:	b510      	push	{r4, lr}
    a4e8:	0004      	movs	r4, r0
    a4ea:	6003      	str	r3, [r0, #0]
    a4ec:	6043      	str	r3, [r0, #4]
    a4ee:	6083      	str	r3, [r0, #8]
    a4f0:	8181      	strh	r1, [r0, #12]
    a4f2:	6643      	str	r3, [r0, #100]	; 0x64
    a4f4:	81c2      	strh	r2, [r0, #14]
    a4f6:	6103      	str	r3, [r0, #16]
    a4f8:	6143      	str	r3, [r0, #20]
    a4fa:	6183      	str	r3, [r0, #24]
    a4fc:	2208      	movs	r2, #8
    a4fe:	2100      	movs	r1, #0
    a500:	305c      	adds	r0, #92	; 0x5c
    a502:	f7fd fa17 	bl	7934 <memset>
    a506:	0020      	movs	r0, r4
    a508:	4b06      	ldr	r3, [pc, #24]	; (a524 <std.isra.0+0x40>)
    a50a:	61e4      	str	r4, [r4, #28]
    a50c:	6223      	str	r3, [r4, #32]
    a50e:	4b06      	ldr	r3, [pc, #24]	; (a528 <std.isra.0+0x44>)
    a510:	3058      	adds	r0, #88	; 0x58
    a512:	6263      	str	r3, [r4, #36]	; 0x24
    a514:	4b05      	ldr	r3, [pc, #20]	; (a52c <std.isra.0+0x48>)
    a516:	62a3      	str	r3, [r4, #40]	; 0x28
    a518:	4b05      	ldr	r3, [pc, #20]	; (a530 <std.isra.0+0x4c>)
    a51a:	62e3      	str	r3, [r4, #44]	; 0x2c
    a51c:	f000 f9c6 	bl	a8ac <__retarget_lock_init_recursive>
    a520:	bd10      	pop	{r4, pc}
    a522:	46c0      	nop			; (mov r8, r8)
    a524:	0000ba09 	.word	0x0000ba09
    a528:	0000ba31 	.word	0x0000ba31
    a52c:	0000ba6d 	.word	0x0000ba6d
    a530:	0000ba99 	.word	0x0000ba99

0000a534 <__sinit>:
    a534:	b570      	push	{r4, r5, r6, lr}
    a536:	0004      	movs	r4, r0
    a538:	4d14      	ldr	r5, [pc, #80]	; (a58c <__sinit+0x58>)
    a53a:	0028      	movs	r0, r5
    a53c:	f000 f9ba 	bl	a8b4 <__retarget_lock_acquire_recursive>
    a540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a542:	2b00      	cmp	r3, #0
    a544:	d11d      	bne.n	a582 <__sinit+0x4e>
    a546:	4a12      	ldr	r2, [pc, #72]	; (a590 <__sinit+0x5c>)
    a548:	2104      	movs	r1, #4
    a54a:	63e2      	str	r2, [r4, #60]	; 0x3c
    a54c:	22b8      	movs	r2, #184	; 0xb8
    a54e:	0092      	lsls	r2, r2, #2
    a550:	50a3      	str	r3, [r4, r2]
    a552:	23b9      	movs	r3, #185	; 0xb9
    a554:	2203      	movs	r2, #3
    a556:	009b      	lsls	r3, r3, #2
    a558:	50e2      	str	r2, [r4, r3]
    a55a:	3308      	adds	r3, #8
    a55c:	18e2      	adds	r2, r4, r3
    a55e:	3b04      	subs	r3, #4
    a560:	50e2      	str	r2, [r4, r3]
    a562:	6860      	ldr	r0, [r4, #4]
    a564:	2200      	movs	r2, #0
    a566:	f7ff ffbd 	bl	a4e4 <std.isra.0>
    a56a:	2201      	movs	r2, #1
    a56c:	2109      	movs	r1, #9
    a56e:	68a0      	ldr	r0, [r4, #8]
    a570:	f7ff ffb8 	bl	a4e4 <std.isra.0>
    a574:	2202      	movs	r2, #2
    a576:	2112      	movs	r1, #18
    a578:	68e0      	ldr	r0, [r4, #12]
    a57a:	f7ff ffb3 	bl	a4e4 <std.isra.0>
    a57e:	2301      	movs	r3, #1
    a580:	63a3      	str	r3, [r4, #56]	; 0x38
    a582:	0028      	movs	r0, r5
    a584:	f000 f998 	bl	a8b8 <__retarget_lock_release_recursive>
    a588:	bd70      	pop	{r4, r5, r6, pc}
    a58a:	46c0      	nop			; (mov r8, r8)
    a58c:	200016f8 	.word	0x200016f8
    a590:	0000a4d5 	.word	0x0000a4d5

0000a594 <__sfp_lock_acquire>:
    a594:	b510      	push	{r4, lr}
    a596:	4802      	ldr	r0, [pc, #8]	; (a5a0 <__sfp_lock_acquire+0xc>)
    a598:	f000 f98c 	bl	a8b4 <__retarget_lock_acquire_recursive>
    a59c:	bd10      	pop	{r4, pc}
    a59e:	46c0      	nop			; (mov r8, r8)
    a5a0:	2000170c 	.word	0x2000170c

0000a5a4 <__sfp_lock_release>:
    a5a4:	b510      	push	{r4, lr}
    a5a6:	4802      	ldr	r0, [pc, #8]	; (a5b0 <__sfp_lock_release+0xc>)
    a5a8:	f000 f986 	bl	a8b8 <__retarget_lock_release_recursive>
    a5ac:	bd10      	pop	{r4, pc}
    a5ae:	46c0      	nop			; (mov r8, r8)
    a5b0:	2000170c 	.word	0x2000170c

0000a5b4 <__libc_fini_array>:
    a5b4:	b570      	push	{r4, r5, r6, lr}
    a5b6:	4b09      	ldr	r3, [pc, #36]	; (a5dc <__libc_fini_array+0x28>)
    a5b8:	4c09      	ldr	r4, [pc, #36]	; (a5e0 <__libc_fini_array+0x2c>)
    a5ba:	1ae4      	subs	r4, r4, r3
    a5bc:	10a4      	asrs	r4, r4, #2
    a5be:	d009      	beq.n	a5d4 <__libc_fini_array+0x20>
    a5c0:	4a08      	ldr	r2, [pc, #32]	; (a5e4 <__libc_fini_array+0x30>)
    a5c2:	18a5      	adds	r5, r4, r2
    a5c4:	00ad      	lsls	r5, r5, #2
    a5c6:	18ed      	adds	r5, r5, r3
    a5c8:	682b      	ldr	r3, [r5, #0]
    a5ca:	3c01      	subs	r4, #1
    a5cc:	4798      	blx	r3
    a5ce:	3d04      	subs	r5, #4
    a5d0:	2c00      	cmp	r4, #0
    a5d2:	d1f9      	bne.n	a5c8 <__libc_fini_array+0x14>
    a5d4:	f002 fd9a 	bl	d10c <_fini>
    a5d8:	bd70      	pop	{r4, r5, r6, pc}
    a5da:	46c0      	nop			; (mov r8, r8)
    a5dc:	0000d118 	.word	0x0000d118
    a5e0:	0000d11c 	.word	0x0000d11c
    a5e4:	3fffffff 	.word	0x3fffffff

0000a5e8 <_malloc_trim_r>:
    a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5ea:	000c      	movs	r4, r1
    a5ec:	0006      	movs	r6, r0
    a5ee:	f000 fce3 	bl	afb8 <__malloc_lock>
    a5f2:	4f20      	ldr	r7, [pc, #128]	; (a674 <_malloc_trim_r+0x8c>)
    a5f4:	68bb      	ldr	r3, [r7, #8]
    a5f6:	685d      	ldr	r5, [r3, #4]
    a5f8:	2303      	movs	r3, #3
    a5fa:	439d      	bics	r5, r3
    a5fc:	4b1e      	ldr	r3, [pc, #120]	; (a678 <_malloc_trim_r+0x90>)
    a5fe:	1b2c      	subs	r4, r5, r4
    a600:	469c      	mov	ip, r3
    a602:	4464      	add	r4, ip
    a604:	0b24      	lsrs	r4, r4, #12
    a606:	4b1d      	ldr	r3, [pc, #116]	; (a67c <_malloc_trim_r+0x94>)
    a608:	3c01      	subs	r4, #1
    a60a:	0324      	lsls	r4, r4, #12
    a60c:	429c      	cmp	r4, r3
    a60e:	dd07      	ble.n	a620 <_malloc_trim_r+0x38>
    a610:	2100      	movs	r1, #0
    a612:	0030      	movs	r0, r6
    a614:	f001 f9e6 	bl	b9e4 <_sbrk_r>
    a618:	68bb      	ldr	r3, [r7, #8]
    a61a:	195b      	adds	r3, r3, r5
    a61c:	4298      	cmp	r0, r3
    a61e:	d004      	beq.n	a62a <_malloc_trim_r+0x42>
    a620:	0030      	movs	r0, r6
    a622:	f000 fcd1 	bl	afc8 <__malloc_unlock>
    a626:	2000      	movs	r0, #0
    a628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a62a:	4261      	negs	r1, r4
    a62c:	0030      	movs	r0, r6
    a62e:	f001 f9d9 	bl	b9e4 <_sbrk_r>
    a632:	1c43      	adds	r3, r0, #1
    a634:	d00d      	beq.n	a652 <_malloc_trim_r+0x6a>
    a636:	2201      	movs	r2, #1
    a638:	68bb      	ldr	r3, [r7, #8]
    a63a:	1b2d      	subs	r5, r5, r4
    a63c:	4315      	orrs	r5, r2
    a63e:	605d      	str	r5, [r3, #4]
    a640:	4b0f      	ldr	r3, [pc, #60]	; (a680 <_malloc_trim_r+0x98>)
    a642:	0030      	movs	r0, r6
    a644:	681a      	ldr	r2, [r3, #0]
    a646:	1b14      	subs	r4, r2, r4
    a648:	601c      	str	r4, [r3, #0]
    a64a:	f000 fcbd 	bl	afc8 <__malloc_unlock>
    a64e:	2001      	movs	r0, #1
    a650:	e7ea      	b.n	a628 <_malloc_trim_r+0x40>
    a652:	2100      	movs	r1, #0
    a654:	0030      	movs	r0, r6
    a656:	f001 f9c5 	bl	b9e4 <_sbrk_r>
    a65a:	68ba      	ldr	r2, [r7, #8]
    a65c:	1a83      	subs	r3, r0, r2
    a65e:	2b0f      	cmp	r3, #15
    a660:	ddde      	ble.n	a620 <_malloc_trim_r+0x38>
    a662:	4908      	ldr	r1, [pc, #32]	; (a684 <_malloc_trim_r+0x9c>)
    a664:	6809      	ldr	r1, [r1, #0]
    a666:	1a40      	subs	r0, r0, r1
    a668:	4905      	ldr	r1, [pc, #20]	; (a680 <_malloc_trim_r+0x98>)
    a66a:	6008      	str	r0, [r1, #0]
    a66c:	2101      	movs	r1, #1
    a66e:	430b      	orrs	r3, r1
    a670:	6053      	str	r3, [r2, #4]
    a672:	e7d5      	b.n	a620 <_malloc_trim_r+0x38>
    a674:	200004e4 	.word	0x200004e4
    a678:	00000fef 	.word	0x00000fef
    a67c:	00000fff 	.word	0x00000fff
    a680:	2000148c 	.word	0x2000148c
    a684:	200008ec 	.word	0x200008ec

0000a688 <_free_r>:
    a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a68a:	0004      	movs	r4, r0
    a68c:	1e0d      	subs	r5, r1, #0
    a68e:	d03c      	beq.n	a70a <_free_r+0x82>
    a690:	f000 fc92 	bl	afb8 <__malloc_lock>
    a694:	0029      	movs	r1, r5
    a696:	3908      	subs	r1, #8
    a698:	6848      	ldr	r0, [r1, #4]
    a69a:	2301      	movs	r3, #1
    a69c:	0005      	movs	r5, r0
    a69e:	2603      	movs	r6, #3
    a6a0:	439d      	bics	r5, r3
    a6a2:	194a      	adds	r2, r1, r5
    a6a4:	469c      	mov	ip, r3
    a6a6:	4f61      	ldr	r7, [pc, #388]	; (a82c <_free_r+0x1a4>)
    a6a8:	6853      	ldr	r3, [r2, #4]
    a6aa:	43b3      	bics	r3, r6
    a6ac:	68be      	ldr	r6, [r7, #8]
    a6ae:	42b2      	cmp	r2, r6
    a6b0:	d056      	beq.n	a760 <_free_r+0xd8>
    a6b2:	4666      	mov	r6, ip
    a6b4:	6053      	str	r3, [r2, #4]
    a6b6:	4206      	tst	r6, r0
    a6b8:	d10a      	bne.n	a6d0 <_free_r+0x48>
    a6ba:	003e      	movs	r6, r7
    a6bc:	6808      	ldr	r0, [r1, #0]
    a6be:	3608      	adds	r6, #8
    a6c0:	1a09      	subs	r1, r1, r0
    a6c2:	182d      	adds	r5, r5, r0
    a6c4:	6888      	ldr	r0, [r1, #8]
    a6c6:	42b0      	cmp	r0, r6
    a6c8:	d065      	beq.n	a796 <_free_r+0x10e>
    a6ca:	68ce      	ldr	r6, [r1, #12]
    a6cc:	60c6      	str	r6, [r0, #12]
    a6ce:	60b0      	str	r0, [r6, #8]
    a6d0:	2001      	movs	r0, #1
    a6d2:	18d6      	adds	r6, r2, r3
    a6d4:	6876      	ldr	r6, [r6, #4]
    a6d6:	4206      	tst	r6, r0
    a6d8:	d033      	beq.n	a742 <_free_r+0xba>
    a6da:	4b55      	ldr	r3, [pc, #340]	; (a830 <_free_r+0x1a8>)
    a6dc:	4328      	orrs	r0, r5
    a6de:	6048      	str	r0, [r1, #4]
    a6e0:	514d      	str	r5, [r1, r5]
    a6e2:	429d      	cmp	r5, r3
    a6e4:	d812      	bhi.n	a70c <_free_r+0x84>
    a6e6:	08ed      	lsrs	r5, r5, #3
    a6e8:	3bff      	subs	r3, #255	; 0xff
    a6ea:	10aa      	asrs	r2, r5, #2
    a6ec:	3bff      	subs	r3, #255	; 0xff
    a6ee:	4093      	lsls	r3, r2
    a6f0:	687a      	ldr	r2, [r7, #4]
    a6f2:	00ed      	lsls	r5, r5, #3
    a6f4:	4313      	orrs	r3, r2
    a6f6:	607b      	str	r3, [r7, #4]
    a6f8:	19ef      	adds	r7, r5, r7
    a6fa:	68bb      	ldr	r3, [r7, #8]
    a6fc:	60cf      	str	r7, [r1, #12]
    a6fe:	608b      	str	r3, [r1, #8]
    a700:	60b9      	str	r1, [r7, #8]
    a702:	60d9      	str	r1, [r3, #12]
    a704:	0020      	movs	r0, r4
    a706:	f000 fc5f 	bl	afc8 <__malloc_unlock>
    a70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a70c:	0a68      	lsrs	r0, r5, #9
    a70e:	2804      	cmp	r0, #4
    a710:	d850      	bhi.n	a7b4 <_free_r+0x12c>
    a712:	09a8      	lsrs	r0, r5, #6
    a714:	0002      	movs	r2, r0
    a716:	3039      	adds	r0, #57	; 0x39
    a718:	3238      	adds	r2, #56	; 0x38
    a71a:	00c0      	lsls	r0, r0, #3
    a71c:	1838      	adds	r0, r7, r0
    a71e:	3808      	subs	r0, #8
    a720:	6883      	ldr	r3, [r0, #8]
    a722:	2603      	movs	r6, #3
    a724:	4298      	cmp	r0, r3
    a726:	d04c      	beq.n	a7c2 <_free_r+0x13a>
    a728:	685a      	ldr	r2, [r3, #4]
    a72a:	43b2      	bics	r2, r6
    a72c:	4295      	cmp	r5, r2
    a72e:	d230      	bcs.n	a792 <_free_r+0x10a>
    a730:	689b      	ldr	r3, [r3, #8]
    a732:	4298      	cmp	r0, r3
    a734:	d1f8      	bne.n	a728 <_free_r+0xa0>
    a736:	68c3      	ldr	r3, [r0, #12]
    a738:	60cb      	str	r3, [r1, #12]
    a73a:	6088      	str	r0, [r1, #8]
    a73c:	6099      	str	r1, [r3, #8]
    a73e:	60c1      	str	r1, [r0, #12]
    a740:	e7e0      	b.n	a704 <_free_r+0x7c>
    a742:	18ed      	adds	r5, r5, r3
    a744:	4e3b      	ldr	r6, [pc, #236]	; (a834 <_free_r+0x1ac>)
    a746:	6893      	ldr	r3, [r2, #8]
    a748:	42b3      	cmp	r3, r6
    a74a:	d042      	beq.n	a7d2 <_free_r+0x14a>
    a74c:	68d2      	ldr	r2, [r2, #12]
    a74e:	4328      	orrs	r0, r5
    a750:	60da      	str	r2, [r3, #12]
    a752:	6093      	str	r3, [r2, #8]
    a754:	4b36      	ldr	r3, [pc, #216]	; (a830 <_free_r+0x1a8>)
    a756:	6048      	str	r0, [r1, #4]
    a758:	514d      	str	r5, [r1, r5]
    a75a:	429d      	cmp	r5, r3
    a75c:	d8d6      	bhi.n	a70c <_free_r+0x84>
    a75e:	e7c2      	b.n	a6e6 <_free_r+0x5e>
    a760:	4662      	mov	r2, ip
    a762:	18eb      	adds	r3, r5, r3
    a764:	4202      	tst	r2, r0
    a766:	d106      	bne.n	a776 <_free_r+0xee>
    a768:	680a      	ldr	r2, [r1, #0]
    a76a:	1a89      	subs	r1, r1, r2
    a76c:	6888      	ldr	r0, [r1, #8]
    a76e:	189b      	adds	r3, r3, r2
    a770:	68ca      	ldr	r2, [r1, #12]
    a772:	60c2      	str	r2, [r0, #12]
    a774:	6090      	str	r0, [r2, #8]
    a776:	2201      	movs	r2, #1
    a778:	431a      	orrs	r2, r3
    a77a:	604a      	str	r2, [r1, #4]
    a77c:	4a2e      	ldr	r2, [pc, #184]	; (a838 <_free_r+0x1b0>)
    a77e:	60b9      	str	r1, [r7, #8]
    a780:	6812      	ldr	r2, [r2, #0]
    a782:	4293      	cmp	r3, r2
    a784:	d3be      	bcc.n	a704 <_free_r+0x7c>
    a786:	4b2d      	ldr	r3, [pc, #180]	; (a83c <_free_r+0x1b4>)
    a788:	0020      	movs	r0, r4
    a78a:	6819      	ldr	r1, [r3, #0]
    a78c:	f7ff ff2c 	bl	a5e8 <_malloc_trim_r>
    a790:	e7b8      	b.n	a704 <_free_r+0x7c>
    a792:	0018      	movs	r0, r3
    a794:	e7cf      	b.n	a736 <_free_r+0xae>
    a796:	4666      	mov	r6, ip
    a798:	18d0      	adds	r0, r2, r3
    a79a:	6840      	ldr	r0, [r0, #4]
    a79c:	4230      	tst	r0, r6
    a79e:	d13f      	bne.n	a820 <_free_r+0x198>
    a7a0:	6890      	ldr	r0, [r2, #8]
    a7a2:	195d      	adds	r5, r3, r5
    a7a4:	68d3      	ldr	r3, [r2, #12]
    a7a6:	60c3      	str	r3, [r0, #12]
    a7a8:	6098      	str	r0, [r3, #8]
    a7aa:	4663      	mov	r3, ip
    a7ac:	432b      	orrs	r3, r5
    a7ae:	604b      	str	r3, [r1, #4]
    a7b0:	514d      	str	r5, [r1, r5]
    a7b2:	e7a7      	b.n	a704 <_free_r+0x7c>
    a7b4:	2814      	cmp	r0, #20
    a7b6:	d814      	bhi.n	a7e2 <_free_r+0x15a>
    a7b8:	0002      	movs	r2, r0
    a7ba:	305c      	adds	r0, #92	; 0x5c
    a7bc:	325b      	adds	r2, #91	; 0x5b
    a7be:	00c0      	lsls	r0, r0, #3
    a7c0:	e7ac      	b.n	a71c <_free_r+0x94>
    a7c2:	2301      	movs	r3, #1
    a7c4:	1092      	asrs	r2, r2, #2
    a7c6:	4093      	lsls	r3, r2
    a7c8:	687a      	ldr	r2, [r7, #4]
    a7ca:	4313      	orrs	r3, r2
    a7cc:	607b      	str	r3, [r7, #4]
    a7ce:	0003      	movs	r3, r0
    a7d0:	e7b2      	b.n	a738 <_free_r+0xb0>
    a7d2:	4328      	orrs	r0, r5
    a7d4:	60d9      	str	r1, [r3, #12]
    a7d6:	6099      	str	r1, [r3, #8]
    a7d8:	60cb      	str	r3, [r1, #12]
    a7da:	608b      	str	r3, [r1, #8]
    a7dc:	6048      	str	r0, [r1, #4]
    a7de:	514d      	str	r5, [r1, r5]
    a7e0:	e790      	b.n	a704 <_free_r+0x7c>
    a7e2:	2854      	cmp	r0, #84	; 0x54
    a7e4:	d805      	bhi.n	a7f2 <_free_r+0x16a>
    a7e6:	0b28      	lsrs	r0, r5, #12
    a7e8:	0002      	movs	r2, r0
    a7ea:	306f      	adds	r0, #111	; 0x6f
    a7ec:	326e      	adds	r2, #110	; 0x6e
    a7ee:	00c0      	lsls	r0, r0, #3
    a7f0:	e794      	b.n	a71c <_free_r+0x94>
    a7f2:	22aa      	movs	r2, #170	; 0xaa
    a7f4:	0052      	lsls	r2, r2, #1
    a7f6:	4290      	cmp	r0, r2
    a7f8:	d805      	bhi.n	a806 <_free_r+0x17e>
    a7fa:	0be8      	lsrs	r0, r5, #15
    a7fc:	0002      	movs	r2, r0
    a7fe:	3078      	adds	r0, #120	; 0x78
    a800:	3277      	adds	r2, #119	; 0x77
    a802:	00c0      	lsls	r0, r0, #3
    a804:	e78a      	b.n	a71c <_free_r+0x94>
    a806:	4a0e      	ldr	r2, [pc, #56]	; (a840 <_free_r+0x1b8>)
    a808:	4290      	cmp	r0, r2
    a80a:	d805      	bhi.n	a818 <_free_r+0x190>
    a80c:	0ca8      	lsrs	r0, r5, #18
    a80e:	0002      	movs	r2, r0
    a810:	307d      	adds	r0, #125	; 0x7d
    a812:	327c      	adds	r2, #124	; 0x7c
    a814:	00c0      	lsls	r0, r0, #3
    a816:	e781      	b.n	a71c <_free_r+0x94>
    a818:	20fe      	movs	r0, #254	; 0xfe
    a81a:	227e      	movs	r2, #126	; 0x7e
    a81c:	0080      	lsls	r0, r0, #2
    a81e:	e77d      	b.n	a71c <_free_r+0x94>
    a820:	4663      	mov	r3, ip
    a822:	432b      	orrs	r3, r5
    a824:	604b      	str	r3, [r1, #4]
    a826:	6015      	str	r5, [r2, #0]
    a828:	e76c      	b.n	a704 <_free_r+0x7c>
    a82a:	46c0      	nop			; (mov r8, r8)
    a82c:	200004e4 	.word	0x200004e4
    a830:	000001ff 	.word	0x000001ff
    a834:	200004ec 	.word	0x200004ec
    a838:	200008f0 	.word	0x200008f0
    a83c:	200014bc 	.word	0x200014bc
    a840:	00000554 	.word	0x00000554

0000a844 <_fwalk_reent>:
    a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a846:	4647      	mov	r7, r8
    a848:	46ce      	mov	lr, r9
    a84a:	b580      	push	{r7, lr}
    a84c:	27b8      	movs	r7, #184	; 0xb8
    a84e:	4680      	mov	r8, r0
    a850:	00bf      	lsls	r7, r7, #2
    a852:	4447      	add	r7, r8
    a854:	4689      	mov	r9, r1
    a856:	2600      	movs	r6, #0
    a858:	2f00      	cmp	r7, #0
    a85a:	d014      	beq.n	a886 <_fwalk_reent+0x42>
    a85c:	687b      	ldr	r3, [r7, #4]
    a85e:	68bc      	ldr	r4, [r7, #8]
    a860:	1e5d      	subs	r5, r3, #1
    a862:	d40d      	bmi.n	a880 <_fwalk_reent+0x3c>
    a864:	89a3      	ldrh	r3, [r4, #12]
    a866:	2b01      	cmp	r3, #1
    a868:	d907      	bls.n	a87a <_fwalk_reent+0x36>
    a86a:	220e      	movs	r2, #14
    a86c:	5ea3      	ldrsh	r3, [r4, r2]
    a86e:	3301      	adds	r3, #1
    a870:	d003      	beq.n	a87a <_fwalk_reent+0x36>
    a872:	0021      	movs	r1, r4
    a874:	4640      	mov	r0, r8
    a876:	47c8      	blx	r9
    a878:	4306      	orrs	r6, r0
    a87a:	3468      	adds	r4, #104	; 0x68
    a87c:	3d01      	subs	r5, #1
    a87e:	d2f1      	bcs.n	a864 <_fwalk_reent+0x20>
    a880:	683f      	ldr	r7, [r7, #0]
    a882:	2f00      	cmp	r7, #0
    a884:	d1ea      	bne.n	a85c <_fwalk_reent+0x18>
    a886:	0030      	movs	r0, r6
    a888:	bc0c      	pop	{r2, r3}
    a88a:	4690      	mov	r8, r2
    a88c:	4699      	mov	r9, r3
    a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a890 <_localeconv_r>:
    a890:	4b04      	ldr	r3, [pc, #16]	; (a8a4 <_localeconv_r+0x14>)
    a892:	681b      	ldr	r3, [r3, #0]
    a894:	6b58      	ldr	r0, [r3, #52]	; 0x34
    a896:	2800      	cmp	r0, #0
    a898:	d001      	beq.n	a89e <_localeconv_r+0xe>
    a89a:	30f0      	adds	r0, #240	; 0xf0
    a89c:	4770      	bx	lr
    a89e:	4802      	ldr	r0, [pc, #8]	; (a8a8 <_localeconv_r+0x18>)
    a8a0:	e7fb      	b.n	a89a <_localeconv_r+0xa>
    a8a2:	46c0      	nop			; (mov r8, r8)
    a8a4:	200000b4 	.word	0x200000b4
    a8a8:	200008f4 	.word	0x200008f4

0000a8ac <__retarget_lock_init_recursive>:
    a8ac:	4770      	bx	lr
    a8ae:	46c0      	nop			; (mov r8, r8)

0000a8b0 <__retarget_lock_close_recursive>:
    a8b0:	4770      	bx	lr
    a8b2:	46c0      	nop			; (mov r8, r8)

0000a8b4 <__retarget_lock_acquire_recursive>:
    a8b4:	4770      	bx	lr
    a8b6:	46c0      	nop			; (mov r8, r8)

0000a8b8 <__retarget_lock_release_recursive>:
    a8b8:	4770      	bx	lr
    a8ba:	46c0      	nop			; (mov r8, r8)

0000a8bc <__swhatbuf_r>:
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	000c      	movs	r4, r1
    a8c0:	001e      	movs	r6, r3
    a8c2:	230e      	movs	r3, #14
    a8c4:	5ec9      	ldrsh	r1, [r1, r3]
    a8c6:	b090      	sub	sp, #64	; 0x40
    a8c8:	0015      	movs	r5, r2
    a8ca:	2900      	cmp	r1, #0
    a8cc:	db15      	blt.n	a8fa <__swhatbuf_r+0x3e>
    a8ce:	aa01      	add	r2, sp, #4
    a8d0:	f001 faaa 	bl	be28 <_fstat_r>
    a8d4:	2800      	cmp	r0, #0
    a8d6:	db10      	blt.n	a8fa <__swhatbuf_r+0x3e>
    a8d8:	22f0      	movs	r2, #240	; 0xf0
    a8da:	9b02      	ldr	r3, [sp, #8]
    a8dc:	0212      	lsls	r2, r2, #8
    a8de:	4013      	ands	r3, r2
    a8e0:	4a0d      	ldr	r2, [pc, #52]	; (a918 <__swhatbuf_r+0x5c>)
    a8e2:	2080      	movs	r0, #128	; 0x80
    a8e4:	4694      	mov	ip, r2
    a8e6:	4463      	add	r3, ip
    a8e8:	425a      	negs	r2, r3
    a8ea:	4153      	adcs	r3, r2
    a8ec:	6033      	str	r3, [r6, #0]
    a8ee:	2380      	movs	r3, #128	; 0x80
    a8f0:	00db      	lsls	r3, r3, #3
    a8f2:	602b      	str	r3, [r5, #0]
    a8f4:	0100      	lsls	r0, r0, #4
    a8f6:	b010      	add	sp, #64	; 0x40
    a8f8:	bd70      	pop	{r4, r5, r6, pc}
    a8fa:	2300      	movs	r3, #0
    a8fc:	6033      	str	r3, [r6, #0]
    a8fe:	89a3      	ldrh	r3, [r4, #12]
    a900:	061b      	lsls	r3, r3, #24
    a902:	d503      	bpl.n	a90c <__swhatbuf_r+0x50>
    a904:	2340      	movs	r3, #64	; 0x40
    a906:	2000      	movs	r0, #0
    a908:	602b      	str	r3, [r5, #0]
    a90a:	e7f4      	b.n	a8f6 <__swhatbuf_r+0x3a>
    a90c:	2380      	movs	r3, #128	; 0x80
    a90e:	00db      	lsls	r3, r3, #3
    a910:	602b      	str	r3, [r5, #0]
    a912:	2000      	movs	r0, #0
    a914:	e7ef      	b.n	a8f6 <__swhatbuf_r+0x3a>
    a916:	46c0      	nop			; (mov r8, r8)
    a918:	ffffe000 	.word	0xffffe000

0000a91c <malloc>:
    a91c:	b510      	push	{r4, lr}
    a91e:	4b03      	ldr	r3, [pc, #12]	; (a92c <malloc+0x10>)
    a920:	0001      	movs	r1, r0
    a922:	6818      	ldr	r0, [r3, #0]
    a924:	f000 f804 	bl	a930 <_malloc_r>
    a928:	bd10      	pop	{r4, pc}
    a92a:	46c0      	nop			; (mov r8, r8)
    a92c:	200000b4 	.word	0x200000b4

0000a930 <_malloc_r>:
    a930:	b5f0      	push	{r4, r5, r6, r7, lr}
    a932:	4657      	mov	r7, sl
    a934:	4645      	mov	r5, r8
    a936:	46de      	mov	lr, fp
    a938:	464e      	mov	r6, r9
    a93a:	b5e0      	push	{r5, r6, r7, lr}
    a93c:	000d      	movs	r5, r1
    a93e:	350b      	adds	r5, #11
    a940:	b083      	sub	sp, #12
    a942:	0007      	movs	r7, r0
    a944:	2d16      	cmp	r5, #22
    a946:	d800      	bhi.n	a94a <_malloc_r+0x1a>
    a948:	e09f      	b.n	aa8a <_malloc_r+0x15a>
    a94a:	2307      	movs	r3, #7
    a94c:	439d      	bics	r5, r3
    a94e:	d500      	bpl.n	a952 <_malloc_r+0x22>
    a950:	e0c4      	b.n	aadc <_malloc_r+0x1ac>
    a952:	42a9      	cmp	r1, r5
    a954:	d900      	bls.n	a958 <_malloc_r+0x28>
    a956:	e0c1      	b.n	aadc <_malloc_r+0x1ac>
    a958:	f000 fb2e 	bl	afb8 <__malloc_lock>
    a95c:	23f8      	movs	r3, #248	; 0xf8
    a95e:	33ff      	adds	r3, #255	; 0xff
    a960:	429d      	cmp	r5, r3
    a962:	d800      	bhi.n	a966 <_malloc_r+0x36>
    a964:	e28f      	b.n	ae86 <_malloc_r+0x556>
    a966:	0a68      	lsrs	r0, r5, #9
    a968:	d100      	bne.n	a96c <_malloc_r+0x3c>
    a96a:	e0bb      	b.n	aae4 <_malloc_r+0x1b4>
    a96c:	2804      	cmp	r0, #4
    a96e:	d900      	bls.n	a972 <_malloc_r+0x42>
    a970:	e162      	b.n	ac38 <_malloc_r+0x308>
    a972:	2338      	movs	r3, #56	; 0x38
    a974:	4698      	mov	r8, r3
    a976:	09a8      	lsrs	r0, r5, #6
    a978:	4480      	add	r8, r0
    a97a:	3039      	adds	r0, #57	; 0x39
    a97c:	00c1      	lsls	r1, r0, #3
    a97e:	4ed2      	ldr	r6, [pc, #840]	; (acc8 <_malloc_r+0x398>)
    a980:	1871      	adds	r1, r6, r1
    a982:	3908      	subs	r1, #8
    a984:	68cc      	ldr	r4, [r1, #12]
    a986:	42a1      	cmp	r1, r4
    a988:	d019      	beq.n	a9be <_malloc_r+0x8e>
    a98a:	2303      	movs	r3, #3
    a98c:	6862      	ldr	r2, [r4, #4]
    a98e:	439a      	bics	r2, r3
    a990:	0013      	movs	r3, r2
    a992:	1b52      	subs	r2, r2, r5
    a994:	2a0f      	cmp	r2, #15
    a996:	dd00      	ble.n	a99a <_malloc_r+0x6a>
    a998:	e0aa      	b.n	aaf0 <_malloc_r+0x1c0>
    a99a:	2a00      	cmp	r2, #0
    a99c:	db00      	blt.n	a9a0 <_malloc_r+0x70>
    a99e:	e088      	b.n	aab2 <_malloc_r+0x182>
    a9a0:	2303      	movs	r3, #3
    a9a2:	469c      	mov	ip, r3
    a9a4:	e008      	b.n	a9b8 <_malloc_r+0x88>
    a9a6:	4662      	mov	r2, ip
    a9a8:	6863      	ldr	r3, [r4, #4]
    a9aa:	4393      	bics	r3, r2
    a9ac:	1b5a      	subs	r2, r3, r5
    a9ae:	2a0f      	cmp	r2, #15
    a9b0:	dd00      	ble.n	a9b4 <_malloc_r+0x84>
    a9b2:	e09d      	b.n	aaf0 <_malloc_r+0x1c0>
    a9b4:	2a00      	cmp	r2, #0
    a9b6:	da7c      	bge.n	aab2 <_malloc_r+0x182>
    a9b8:	68e4      	ldr	r4, [r4, #12]
    a9ba:	42a1      	cmp	r1, r4
    a9bc:	d1f3      	bne.n	a9a6 <_malloc_r+0x76>
    a9be:	0032      	movs	r2, r6
    a9c0:	6934      	ldr	r4, [r6, #16]
    a9c2:	3208      	adds	r2, #8
    a9c4:	4294      	cmp	r4, r2
    a9c6:	d100      	bne.n	a9ca <_malloc_r+0x9a>
    a9c8:	e190      	b.n	acec <_malloc_r+0x3bc>
    a9ca:	2303      	movs	r3, #3
    a9cc:	6861      	ldr	r1, [r4, #4]
    a9ce:	4399      	bics	r1, r3
    a9d0:	4689      	mov	r9, r1
    a9d2:	1b49      	subs	r1, r1, r5
    a9d4:	290f      	cmp	r1, #15
    a9d6:	dd00      	ble.n	a9da <_malloc_r+0xaa>
    a9d8:	e162      	b.n	aca0 <_malloc_r+0x370>
    a9da:	6172      	str	r2, [r6, #20]
    a9dc:	6132      	str	r2, [r6, #16]
    a9de:	2900      	cmp	r1, #0
    a9e0:	db00      	blt.n	a9e4 <_malloc_r+0xb4>
    a9e2:	e087      	b.n	aaf4 <_malloc_r+0x1c4>
    a9e4:	4ab9      	ldr	r2, [pc, #740]	; (accc <_malloc_r+0x39c>)
    a9e6:	464b      	mov	r3, r9
    a9e8:	4591      	cmp	r9, r2
    a9ea:	d900      	bls.n	a9ee <_malloc_r+0xbe>
    a9ec:	e130      	b.n	ac50 <_malloc_r+0x320>
    a9ee:	08db      	lsrs	r3, r3, #3
    a9f0:	3aff      	subs	r2, #255	; 0xff
    a9f2:	1099      	asrs	r1, r3, #2
    a9f4:	3aff      	subs	r2, #255	; 0xff
    a9f6:	408a      	lsls	r2, r1
    a9f8:	00db      	lsls	r3, r3, #3
    a9fa:	6871      	ldr	r1, [r6, #4]
    a9fc:	199b      	adds	r3, r3, r6
    a9fe:	430a      	orrs	r2, r1
    aa00:	6899      	ldr	r1, [r3, #8]
    aa02:	6072      	str	r2, [r6, #4]
    aa04:	60e3      	str	r3, [r4, #12]
    aa06:	60a1      	str	r1, [r4, #8]
    aa08:	609c      	str	r4, [r3, #8]
    aa0a:	0013      	movs	r3, r2
    aa0c:	60cc      	str	r4, [r1, #12]
    aa0e:	2101      	movs	r1, #1
    aa10:	1082      	asrs	r2, r0, #2
    aa12:	4091      	lsls	r1, r2
    aa14:	4299      	cmp	r1, r3
    aa16:	d86f      	bhi.n	aaf8 <_malloc_r+0x1c8>
    aa18:	420b      	tst	r3, r1
    aa1a:	d105      	bne.n	aa28 <_malloc_r+0xf8>
    aa1c:	2203      	movs	r2, #3
    aa1e:	4390      	bics	r0, r2
    aa20:	0049      	lsls	r1, r1, #1
    aa22:	3004      	adds	r0, #4
    aa24:	420b      	tst	r3, r1
    aa26:	d0fb      	beq.n	aa20 <_malloc_r+0xf0>
    aa28:	2303      	movs	r3, #3
    aa2a:	4698      	mov	r8, r3
    aa2c:	00c3      	lsls	r3, r0, #3
    aa2e:	4699      	mov	r9, r3
    aa30:	44b1      	add	r9, r6
    aa32:	46cc      	mov	ip, r9
    aa34:	4682      	mov	sl, r0
    aa36:	4663      	mov	r3, ip
    aa38:	68dc      	ldr	r4, [r3, #12]
    aa3a:	45a4      	cmp	ip, r4
    aa3c:	d107      	bne.n	aa4e <_malloc_r+0x11e>
    aa3e:	e157      	b.n	acf0 <_malloc_r+0x3c0>
    aa40:	2a00      	cmp	r2, #0
    aa42:	db00      	blt.n	aa46 <_malloc_r+0x116>
    aa44:	e166      	b.n	ad14 <_malloc_r+0x3e4>
    aa46:	68e4      	ldr	r4, [r4, #12]
    aa48:	45a4      	cmp	ip, r4
    aa4a:	d100      	bne.n	aa4e <_malloc_r+0x11e>
    aa4c:	e150      	b.n	acf0 <_malloc_r+0x3c0>
    aa4e:	4642      	mov	r2, r8
    aa50:	6863      	ldr	r3, [r4, #4]
    aa52:	4393      	bics	r3, r2
    aa54:	1b5a      	subs	r2, r3, r5
    aa56:	2a0f      	cmp	r2, #15
    aa58:	ddf2      	ble.n	aa40 <_malloc_r+0x110>
    aa5a:	2001      	movs	r0, #1
    aa5c:	4680      	mov	r8, r0
    aa5e:	1961      	adds	r1, r4, r5
    aa60:	4305      	orrs	r5, r0
    aa62:	6065      	str	r5, [r4, #4]
    aa64:	68a0      	ldr	r0, [r4, #8]
    aa66:	68e5      	ldr	r5, [r4, #12]
    aa68:	3608      	adds	r6, #8
    aa6a:	60c5      	str	r5, [r0, #12]
    aa6c:	60a8      	str	r0, [r5, #8]
    aa6e:	4640      	mov	r0, r8
    aa70:	60f1      	str	r1, [r6, #12]
    aa72:	60b1      	str	r1, [r6, #8]
    aa74:	4310      	orrs	r0, r2
    aa76:	6048      	str	r0, [r1, #4]
    aa78:	60ce      	str	r6, [r1, #12]
    aa7a:	608e      	str	r6, [r1, #8]
    aa7c:	0038      	movs	r0, r7
    aa7e:	50e2      	str	r2, [r4, r3]
    aa80:	f000 faa2 	bl	afc8 <__malloc_unlock>
    aa84:	0020      	movs	r0, r4
    aa86:	3008      	adds	r0, #8
    aa88:	e021      	b.n	aace <_malloc_r+0x19e>
    aa8a:	2910      	cmp	r1, #16
    aa8c:	d826      	bhi.n	aadc <_malloc_r+0x1ac>
    aa8e:	0038      	movs	r0, r7
    aa90:	f000 fa92 	bl	afb8 <__malloc_lock>
    aa94:	2510      	movs	r5, #16
    aa96:	2318      	movs	r3, #24
    aa98:	2002      	movs	r0, #2
    aa9a:	4e8b      	ldr	r6, [pc, #556]	; (acc8 <_malloc_r+0x398>)
    aa9c:	18f3      	adds	r3, r6, r3
    aa9e:	001a      	movs	r2, r3
    aaa0:	685c      	ldr	r4, [r3, #4]
    aaa2:	3a08      	subs	r2, #8
    aaa4:	4294      	cmp	r4, r2
    aaa6:	d100      	bne.n	aaaa <_malloc_r+0x17a>
    aaa8:	e12e      	b.n	ad08 <_malloc_r+0x3d8>
    aaaa:	2303      	movs	r3, #3
    aaac:	6862      	ldr	r2, [r4, #4]
    aaae:	439a      	bics	r2, r3
    aab0:	0013      	movs	r3, r2
    aab2:	68e2      	ldr	r2, [r4, #12]
    aab4:	68a1      	ldr	r1, [r4, #8]
    aab6:	60ca      	str	r2, [r1, #12]
    aab8:	6091      	str	r1, [r2, #8]
    aaba:	2201      	movs	r2, #1
    aabc:	18e3      	adds	r3, r4, r3
    aabe:	6859      	ldr	r1, [r3, #4]
    aac0:	0038      	movs	r0, r7
    aac2:	430a      	orrs	r2, r1
    aac4:	605a      	str	r2, [r3, #4]
    aac6:	f000 fa7f 	bl	afc8 <__malloc_unlock>
    aaca:	0020      	movs	r0, r4
    aacc:	3008      	adds	r0, #8
    aace:	b003      	add	sp, #12
    aad0:	bc3c      	pop	{r2, r3, r4, r5}
    aad2:	4690      	mov	r8, r2
    aad4:	4699      	mov	r9, r3
    aad6:	46a2      	mov	sl, r4
    aad8:	46ab      	mov	fp, r5
    aada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aadc:	230c      	movs	r3, #12
    aade:	2000      	movs	r0, #0
    aae0:	603b      	str	r3, [r7, #0]
    aae2:	e7f4      	b.n	aace <_malloc_r+0x19e>
    aae4:	2180      	movs	r1, #128	; 0x80
    aae6:	233f      	movs	r3, #63	; 0x3f
    aae8:	2040      	movs	r0, #64	; 0x40
    aaea:	0089      	lsls	r1, r1, #2
    aaec:	4698      	mov	r8, r3
    aaee:	e746      	b.n	a97e <_malloc_r+0x4e>
    aaf0:	4640      	mov	r0, r8
    aaf2:	e764      	b.n	a9be <_malloc_r+0x8e>
    aaf4:	464b      	mov	r3, r9
    aaf6:	e7e0      	b.n	aaba <_malloc_r+0x18a>
    aaf8:	2303      	movs	r3, #3
    aafa:	68b4      	ldr	r4, [r6, #8]
    aafc:	6862      	ldr	r2, [r4, #4]
    aafe:	439a      	bics	r2, r3
    ab00:	4690      	mov	r8, r2
    ab02:	42aa      	cmp	r2, r5
    ab04:	d303      	bcc.n	ab0e <_malloc_r+0x1de>
    ab06:	1b53      	subs	r3, r2, r5
    ab08:	2b0f      	cmp	r3, #15
    ab0a:	dd00      	ble.n	ab0e <_malloc_r+0x1de>
    ab0c:	e086      	b.n	ac1c <_malloc_r+0x2ec>
    ab0e:	0023      	movs	r3, r4
    ab10:	4443      	add	r3, r8
    ab12:	4a6f      	ldr	r2, [pc, #444]	; (acd0 <_malloc_r+0x3a0>)
    ab14:	9301      	str	r3, [sp, #4]
    ab16:	4b6f      	ldr	r3, [pc, #444]	; (acd4 <_malloc_r+0x3a4>)
    ab18:	4693      	mov	fp, r2
    ab1a:	681b      	ldr	r3, [r3, #0]
    ab1c:	6812      	ldr	r2, [r2, #0]
    ab1e:	18eb      	adds	r3, r5, r3
    ab20:	3201      	adds	r2, #1
    ab22:	d100      	bne.n	ab26 <_malloc_r+0x1f6>
    ab24:	e168      	b.n	adf8 <_malloc_r+0x4c8>
    ab26:	4a6c      	ldr	r2, [pc, #432]	; (acd8 <_malloc_r+0x3a8>)
    ab28:	4694      	mov	ip, r2
    ab2a:	4463      	add	r3, ip
    ab2c:	0b1b      	lsrs	r3, r3, #12
    ab2e:	031b      	lsls	r3, r3, #12
    ab30:	9300      	str	r3, [sp, #0]
    ab32:	9900      	ldr	r1, [sp, #0]
    ab34:	0038      	movs	r0, r7
    ab36:	f000 ff55 	bl	b9e4 <_sbrk_r>
    ab3a:	0003      	movs	r3, r0
    ab3c:	4681      	mov	r9, r0
    ab3e:	3301      	adds	r3, #1
    ab40:	d061      	beq.n	ac06 <_malloc_r+0x2d6>
    ab42:	9b01      	ldr	r3, [sp, #4]
    ab44:	4283      	cmp	r3, r0
    ab46:	d900      	bls.n	ab4a <_malloc_r+0x21a>
    ab48:	e0ff      	b.n	ad4a <_malloc_r+0x41a>
    ab4a:	4b64      	ldr	r3, [pc, #400]	; (acdc <_malloc_r+0x3ac>)
    ab4c:	9a00      	ldr	r2, [sp, #0]
    ab4e:	469a      	mov	sl, r3
    ab50:	681b      	ldr	r3, [r3, #0]
    ab52:	469c      	mov	ip, r3
    ab54:	4653      	mov	r3, sl
    ab56:	4462      	add	r2, ip
    ab58:	601a      	str	r2, [r3, #0]
    ab5a:	9b01      	ldr	r3, [sp, #4]
    ab5c:	0011      	movs	r1, r2
    ab5e:	4283      	cmp	r3, r0
    ab60:	d100      	bne.n	ab64 <_malloc_r+0x234>
    ab62:	e155      	b.n	ae10 <_malloc_r+0x4e0>
    ab64:	465b      	mov	r3, fp
    ab66:	681b      	ldr	r3, [r3, #0]
    ab68:	3301      	adds	r3, #1
    ab6a:	d100      	bne.n	ab6e <_malloc_r+0x23e>
    ab6c:	e16c      	b.n	ae48 <_malloc_r+0x518>
    ab6e:	464b      	mov	r3, r9
    ab70:	9a01      	ldr	r2, [sp, #4]
    ab72:	1a9b      	subs	r3, r3, r2
    ab74:	1859      	adds	r1, r3, r1
    ab76:	4653      	mov	r3, sl
    ab78:	6019      	str	r1, [r3, #0]
    ab7a:	2307      	movs	r3, #7
    ab7c:	464a      	mov	r2, r9
    ab7e:	4013      	ands	r3, r2
    ab80:	d100      	bne.n	ab84 <_malloc_r+0x254>
    ab82:	e124      	b.n	adce <_malloc_r+0x49e>
    ab84:	2108      	movs	r1, #8
    ab86:	4689      	mov	r9, r1
    ab88:	4955      	ldr	r1, [pc, #340]	; (ace0 <_malloc_r+0x3b0>)
    ab8a:	1ad2      	subs	r2, r2, r3
    ab8c:	4491      	add	r9, r2
    ab8e:	1acb      	subs	r3, r1, r3
    ab90:	9a00      	ldr	r2, [sp, #0]
    ab92:	0038      	movs	r0, r7
    ab94:	444a      	add	r2, r9
    ab96:	0511      	lsls	r1, r2, #20
    ab98:	0d09      	lsrs	r1, r1, #20
    ab9a:	1a5b      	subs	r3, r3, r1
    ab9c:	0019      	movs	r1, r3
    ab9e:	469b      	mov	fp, r3
    aba0:	f000 ff20 	bl	b9e4 <_sbrk_r>
    aba4:	1c43      	adds	r3, r0, #1
    aba6:	d100      	bne.n	abaa <_malloc_r+0x27a>
    aba8:	e142      	b.n	ae30 <_malloc_r+0x500>
    abaa:	464b      	mov	r3, r9
    abac:	1ac0      	subs	r0, r0, r3
    abae:	2301      	movs	r3, #1
    abb0:	4458      	add	r0, fp
    abb2:	4318      	orrs	r0, r3
    abb4:	4653      	mov	r3, sl
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	445b      	add	r3, fp
    abba:	0019      	movs	r1, r3
    abbc:	4653      	mov	r3, sl
    abbe:	6019      	str	r1, [r3, #0]
    abc0:	464b      	mov	r3, r9
    abc2:	60b3      	str	r3, [r6, #8]
    abc4:	6058      	str	r0, [r3, #4]
    abc6:	42b4      	cmp	r4, r6
    abc8:	d013      	beq.n	abf2 <_malloc_r+0x2c2>
    abca:	4643      	mov	r3, r8
    abcc:	2b0f      	cmp	r3, #15
    abce:	d800      	bhi.n	abd2 <_malloc_r+0x2a2>
    abd0:	e0e8      	b.n	ada4 <_malloc_r+0x474>
    abd2:	4643      	mov	r3, r8
    abd4:	2207      	movs	r2, #7
    abd6:	6860      	ldr	r0, [r4, #4]
    abd8:	3b0c      	subs	r3, #12
    abda:	4393      	bics	r3, r2
    abdc:	3a06      	subs	r2, #6
    abde:	4002      	ands	r2, r0
    abe0:	2005      	movs	r0, #5
    abe2:	431a      	orrs	r2, r3
    abe4:	6062      	str	r2, [r4, #4]
    abe6:	18e2      	adds	r2, r4, r3
    abe8:	6050      	str	r0, [r2, #4]
    abea:	6090      	str	r0, [r2, #8]
    abec:	2b0f      	cmp	r3, #15
    abee:	d900      	bls.n	abf2 <_malloc_r+0x2c2>
    abf0:	e122      	b.n	ae38 <_malloc_r+0x508>
    abf2:	4b3c      	ldr	r3, [pc, #240]	; (ace4 <_malloc_r+0x3b4>)
    abf4:	681a      	ldr	r2, [r3, #0]
    abf6:	4291      	cmp	r1, r2
    abf8:	d900      	bls.n	abfc <_malloc_r+0x2cc>
    abfa:	6019      	str	r1, [r3, #0]
    abfc:	4b3a      	ldr	r3, [pc, #232]	; (ace8 <_malloc_r+0x3b8>)
    abfe:	681a      	ldr	r2, [r3, #0]
    ac00:	4291      	cmp	r1, r2
    ac02:	d900      	bls.n	ac06 <_malloc_r+0x2d6>
    ac04:	6019      	str	r1, [r3, #0]
    ac06:	2303      	movs	r3, #3
    ac08:	68b4      	ldr	r4, [r6, #8]
    ac0a:	6862      	ldr	r2, [r4, #4]
    ac0c:	439a      	bics	r2, r3
    ac0e:	1b53      	subs	r3, r2, r5
    ac10:	4295      	cmp	r5, r2
    ac12:	d900      	bls.n	ac16 <_malloc_r+0x2e6>
    ac14:	e0c9      	b.n	adaa <_malloc_r+0x47a>
    ac16:	2b0f      	cmp	r3, #15
    ac18:	dc00      	bgt.n	ac1c <_malloc_r+0x2ec>
    ac1a:	e0c6      	b.n	adaa <_malloc_r+0x47a>
    ac1c:	2201      	movs	r2, #1
    ac1e:	0029      	movs	r1, r5
    ac20:	4313      	orrs	r3, r2
    ac22:	4311      	orrs	r1, r2
    ac24:	1965      	adds	r5, r4, r5
    ac26:	6061      	str	r1, [r4, #4]
    ac28:	0038      	movs	r0, r7
    ac2a:	60b5      	str	r5, [r6, #8]
    ac2c:	606b      	str	r3, [r5, #4]
    ac2e:	f000 f9cb 	bl	afc8 <__malloc_unlock>
    ac32:	0020      	movs	r0, r4
    ac34:	3008      	adds	r0, #8
    ac36:	e74a      	b.n	aace <_malloc_r+0x19e>
    ac38:	2814      	cmp	r0, #20
    ac3a:	d97a      	bls.n	ad32 <_malloc_r+0x402>
    ac3c:	2854      	cmp	r0, #84	; 0x54
    ac3e:	d900      	bls.n	ac42 <_malloc_r+0x312>
    ac40:	e0ba      	b.n	adb8 <_malloc_r+0x488>
    ac42:	236e      	movs	r3, #110	; 0x6e
    ac44:	4698      	mov	r8, r3
    ac46:	0b28      	lsrs	r0, r5, #12
    ac48:	4480      	add	r8, r0
    ac4a:	306f      	adds	r0, #111	; 0x6f
    ac4c:	00c1      	lsls	r1, r0, #3
    ac4e:	e696      	b.n	a97e <_malloc_r+0x4e>
    ac50:	0a5a      	lsrs	r2, r3, #9
    ac52:	2a04      	cmp	r2, #4
    ac54:	d973      	bls.n	ad3e <_malloc_r+0x40e>
    ac56:	2a14      	cmp	r2, #20
    ac58:	d900      	bls.n	ac5c <_malloc_r+0x32c>
    ac5a:	e0d0      	b.n	adfe <_malloc_r+0x4ce>
    ac5c:	0011      	movs	r1, r2
    ac5e:	325c      	adds	r2, #92	; 0x5c
    ac60:	315b      	adds	r1, #91	; 0x5b
    ac62:	00d2      	lsls	r2, r2, #3
    ac64:	2308      	movs	r3, #8
    ac66:	425b      	negs	r3, r3
    ac68:	469c      	mov	ip, r3
    ac6a:	18b2      	adds	r2, r6, r2
    ac6c:	4494      	add	ip, r2
    ac6e:	4663      	mov	r3, ip
    ac70:	689a      	ldr	r2, [r3, #8]
    ac72:	2303      	movs	r3, #3
    ac74:	4698      	mov	r8, r3
    ac76:	4594      	cmp	ip, r2
    ac78:	d100      	bne.n	ac7c <_malloc_r+0x34c>
    ac7a:	e0ab      	b.n	add4 <_malloc_r+0x4a4>
    ac7c:	4643      	mov	r3, r8
    ac7e:	6851      	ldr	r1, [r2, #4]
    ac80:	4399      	bics	r1, r3
    ac82:	4589      	cmp	r9, r1
    ac84:	d300      	bcc.n	ac88 <_malloc_r+0x358>
    ac86:	e095      	b.n	adb4 <_malloc_r+0x484>
    ac88:	6892      	ldr	r2, [r2, #8]
    ac8a:	4594      	cmp	ip, r2
    ac8c:	d1f6      	bne.n	ac7c <_malloc_r+0x34c>
    ac8e:	4663      	mov	r3, ip
    ac90:	68da      	ldr	r2, [r3, #12]
    ac92:	6873      	ldr	r3, [r6, #4]
    ac94:	4661      	mov	r1, ip
    ac96:	60e2      	str	r2, [r4, #12]
    ac98:	60a1      	str	r1, [r4, #8]
    ac9a:	6094      	str	r4, [r2, #8]
    ac9c:	60cc      	str	r4, [r1, #12]
    ac9e:	e6b6      	b.n	aa0e <_malloc_r+0xde>
    aca0:	2301      	movs	r3, #1
    aca2:	1960      	adds	r0, r4, r5
    aca4:	431d      	orrs	r5, r3
    aca6:	6065      	str	r5, [r4, #4]
    aca8:	6170      	str	r0, [r6, #20]
    acaa:	6130      	str	r0, [r6, #16]
    acac:	60c2      	str	r2, [r0, #12]
    acae:	6082      	str	r2, [r0, #8]
    acb0:	001a      	movs	r2, r3
    acb2:	464b      	mov	r3, r9
    acb4:	430a      	orrs	r2, r1
    acb6:	6042      	str	r2, [r0, #4]
    acb8:	0038      	movs	r0, r7
    acba:	50e1      	str	r1, [r4, r3]
    acbc:	f000 f984 	bl	afc8 <__malloc_unlock>
    acc0:	0020      	movs	r0, r4
    acc2:	3008      	adds	r0, #8
    acc4:	e703      	b.n	aace <_malloc_r+0x19e>
    acc6:	46c0      	nop			; (mov r8, r8)
    acc8:	200004e4 	.word	0x200004e4
    accc:	000001ff 	.word	0x000001ff
    acd0:	200008ec 	.word	0x200008ec
    acd4:	200014bc 	.word	0x200014bc
    acd8:	0000100f 	.word	0x0000100f
    acdc:	2000148c 	.word	0x2000148c
    ace0:	00001008 	.word	0x00001008
    ace4:	200014b4 	.word	0x200014b4
    ace8:	200014b8 	.word	0x200014b8
    acec:	6873      	ldr	r3, [r6, #4]
    acee:	e68e      	b.n	aa0e <_malloc_r+0xde>
    acf0:	2308      	movs	r3, #8
    acf2:	469b      	mov	fp, r3
    acf4:	3b07      	subs	r3, #7
    acf6:	44dc      	add	ip, fp
    acf8:	469b      	mov	fp, r3
    acfa:	44da      	add	sl, fp
    acfc:	4643      	mov	r3, r8
    acfe:	4652      	mov	r2, sl
    ad00:	4213      	tst	r3, r2
    ad02:	d000      	beq.n	ad06 <_malloc_r+0x3d6>
    ad04:	e697      	b.n	aa36 <_malloc_r+0x106>
    ad06:	e037      	b.n	ad78 <_malloc_r+0x448>
    ad08:	68dc      	ldr	r4, [r3, #12]
    ad0a:	3002      	adds	r0, #2
    ad0c:	42a3      	cmp	r3, r4
    ad0e:	d100      	bne.n	ad12 <_malloc_r+0x3e2>
    ad10:	e655      	b.n	a9be <_malloc_r+0x8e>
    ad12:	e6ca      	b.n	aaaa <_malloc_r+0x17a>
    ad14:	2201      	movs	r2, #1
    ad16:	18e3      	adds	r3, r4, r3
    ad18:	6859      	ldr	r1, [r3, #4]
    ad1a:	0038      	movs	r0, r7
    ad1c:	430a      	orrs	r2, r1
    ad1e:	605a      	str	r2, [r3, #4]
    ad20:	68e3      	ldr	r3, [r4, #12]
    ad22:	68a2      	ldr	r2, [r4, #8]
    ad24:	60d3      	str	r3, [r2, #12]
    ad26:	609a      	str	r2, [r3, #8]
    ad28:	f000 f94e 	bl	afc8 <__malloc_unlock>
    ad2c:	0020      	movs	r0, r4
    ad2e:	3008      	adds	r0, #8
    ad30:	e6cd      	b.n	aace <_malloc_r+0x19e>
    ad32:	235b      	movs	r3, #91	; 0x5b
    ad34:	4698      	mov	r8, r3
    ad36:	4480      	add	r8, r0
    ad38:	305c      	adds	r0, #92	; 0x5c
    ad3a:	00c1      	lsls	r1, r0, #3
    ad3c:	e61f      	b.n	a97e <_malloc_r+0x4e>
    ad3e:	099a      	lsrs	r2, r3, #6
    ad40:	0011      	movs	r1, r2
    ad42:	3239      	adds	r2, #57	; 0x39
    ad44:	3138      	adds	r1, #56	; 0x38
    ad46:	00d2      	lsls	r2, r2, #3
    ad48:	e78c      	b.n	ac64 <_malloc_r+0x334>
    ad4a:	42b4      	cmp	r4, r6
    ad4c:	d000      	beq.n	ad50 <_malloc_r+0x420>
    ad4e:	e75a      	b.n	ac06 <_malloc_r+0x2d6>
    ad50:	4b4f      	ldr	r3, [pc, #316]	; (ae90 <_malloc_r+0x560>)
    ad52:	9a00      	ldr	r2, [sp, #0]
    ad54:	469a      	mov	sl, r3
    ad56:	681b      	ldr	r3, [r3, #0]
    ad58:	469c      	mov	ip, r3
    ad5a:	4653      	mov	r3, sl
    ad5c:	4462      	add	r2, ip
    ad5e:	0011      	movs	r1, r2
    ad60:	601a      	str	r2, [r3, #0]
    ad62:	e6ff      	b.n	ab64 <_malloc_r+0x234>
    ad64:	2308      	movs	r3, #8
    ad66:	425b      	negs	r3, r3
    ad68:	469c      	mov	ip, r3
    ad6a:	44e1      	add	r9, ip
    ad6c:	464b      	mov	r3, r9
    ad6e:	689b      	ldr	r3, [r3, #8]
    ad70:	3801      	subs	r0, #1
    ad72:	4599      	cmp	r9, r3
    ad74:	d000      	beq.n	ad78 <_malloc_r+0x448>
    ad76:	e084      	b.n	ae82 <_malloc_r+0x552>
    ad78:	4643      	mov	r3, r8
    ad7a:	4203      	tst	r3, r0
    ad7c:	d1f2      	bne.n	ad64 <_malloc_r+0x434>
    ad7e:	6873      	ldr	r3, [r6, #4]
    ad80:	438b      	bics	r3, r1
    ad82:	6073      	str	r3, [r6, #4]
    ad84:	0049      	lsls	r1, r1, #1
    ad86:	4299      	cmp	r1, r3
    ad88:	d900      	bls.n	ad8c <_malloc_r+0x45c>
    ad8a:	e6b5      	b.n	aaf8 <_malloc_r+0x1c8>
    ad8c:	2900      	cmp	r1, #0
    ad8e:	d100      	bne.n	ad92 <_malloc_r+0x462>
    ad90:	e6b2      	b.n	aaf8 <_malloc_r+0x1c8>
    ad92:	4650      	mov	r0, sl
    ad94:	420b      	tst	r3, r1
    ad96:	d000      	beq.n	ad9a <_malloc_r+0x46a>
    ad98:	e648      	b.n	aa2c <_malloc_r+0xfc>
    ad9a:	0049      	lsls	r1, r1, #1
    ad9c:	3004      	adds	r0, #4
    ad9e:	420b      	tst	r3, r1
    ada0:	d0fb      	beq.n	ad9a <_malloc_r+0x46a>
    ada2:	e643      	b.n	aa2c <_malloc_r+0xfc>
    ada4:	2301      	movs	r3, #1
    ada6:	464a      	mov	r2, r9
    ada8:	6053      	str	r3, [r2, #4]
    adaa:	0038      	movs	r0, r7
    adac:	f000 f90c 	bl	afc8 <__malloc_unlock>
    adb0:	2000      	movs	r0, #0
    adb2:	e68c      	b.n	aace <_malloc_r+0x19e>
    adb4:	4694      	mov	ip, r2
    adb6:	e76a      	b.n	ac8e <_malloc_r+0x35e>
    adb8:	23aa      	movs	r3, #170	; 0xaa
    adba:	005b      	lsls	r3, r3, #1
    adbc:	4298      	cmp	r0, r3
    adbe:	d811      	bhi.n	ade4 <_malloc_r+0x4b4>
    adc0:	3bdd      	subs	r3, #221	; 0xdd
    adc2:	4698      	mov	r8, r3
    adc4:	0be8      	lsrs	r0, r5, #15
    adc6:	4480      	add	r8, r0
    adc8:	3078      	adds	r0, #120	; 0x78
    adca:	00c1      	lsls	r1, r0, #3
    adcc:	e5d7      	b.n	a97e <_malloc_r+0x4e>
    adce:	2380      	movs	r3, #128	; 0x80
    add0:	015b      	lsls	r3, r3, #5
    add2:	e6dd      	b.n	ab90 <_malloc_r+0x260>
    add4:	1089      	asrs	r1, r1, #2
    add6:	3b02      	subs	r3, #2
    add8:	408b      	lsls	r3, r1
    adda:	6872      	ldr	r2, [r6, #4]
    addc:	4313      	orrs	r3, r2
    adde:	6073      	str	r3, [r6, #4]
    ade0:	4662      	mov	r2, ip
    ade2:	e757      	b.n	ac94 <_malloc_r+0x364>
    ade4:	4b2b      	ldr	r3, [pc, #172]	; (ae94 <_malloc_r+0x564>)
    ade6:	4298      	cmp	r0, r3
    ade8:	d81c      	bhi.n	ae24 <_malloc_r+0x4f4>
    adea:	237c      	movs	r3, #124	; 0x7c
    adec:	4698      	mov	r8, r3
    adee:	0ca8      	lsrs	r0, r5, #18
    adf0:	4480      	add	r8, r0
    adf2:	307d      	adds	r0, #125	; 0x7d
    adf4:	00c1      	lsls	r1, r0, #3
    adf6:	e5c2      	b.n	a97e <_malloc_r+0x4e>
    adf8:	3310      	adds	r3, #16
    adfa:	9300      	str	r3, [sp, #0]
    adfc:	e699      	b.n	ab32 <_malloc_r+0x202>
    adfe:	2a54      	cmp	r2, #84	; 0x54
    ae00:	d826      	bhi.n	ae50 <_malloc_r+0x520>
    ae02:	464b      	mov	r3, r9
    ae04:	0b1a      	lsrs	r2, r3, #12
    ae06:	0011      	movs	r1, r2
    ae08:	326f      	adds	r2, #111	; 0x6f
    ae0a:	316e      	adds	r1, #110	; 0x6e
    ae0c:	00d2      	lsls	r2, r2, #3
    ae0e:	e729      	b.n	ac64 <_malloc_r+0x334>
    ae10:	051b      	lsls	r3, r3, #20
    ae12:	d000      	beq.n	ae16 <_malloc_r+0x4e6>
    ae14:	e6a6      	b.n	ab64 <_malloc_r+0x234>
    ae16:	2001      	movs	r0, #1
    ae18:	9b00      	ldr	r3, [sp, #0]
    ae1a:	68b2      	ldr	r2, [r6, #8]
    ae1c:	4443      	add	r3, r8
    ae1e:	4303      	orrs	r3, r0
    ae20:	6053      	str	r3, [r2, #4]
    ae22:	e6e6      	b.n	abf2 <_malloc_r+0x2c2>
    ae24:	21fe      	movs	r1, #254	; 0xfe
    ae26:	237e      	movs	r3, #126	; 0x7e
    ae28:	207f      	movs	r0, #127	; 0x7f
    ae2a:	0089      	lsls	r1, r1, #2
    ae2c:	4698      	mov	r8, r3
    ae2e:	e5a6      	b.n	a97e <_malloc_r+0x4e>
    ae30:	2300      	movs	r3, #0
    ae32:	2001      	movs	r0, #1
    ae34:	469b      	mov	fp, r3
    ae36:	e6bd      	b.n	abb4 <_malloc_r+0x284>
    ae38:	0021      	movs	r1, r4
    ae3a:	0038      	movs	r0, r7
    ae3c:	3108      	adds	r1, #8
    ae3e:	f7ff fc23 	bl	a688 <_free_r>
    ae42:	4653      	mov	r3, sl
    ae44:	6819      	ldr	r1, [r3, #0]
    ae46:	e6d4      	b.n	abf2 <_malloc_r+0x2c2>
    ae48:	465b      	mov	r3, fp
    ae4a:	464a      	mov	r2, r9
    ae4c:	601a      	str	r2, [r3, #0]
    ae4e:	e694      	b.n	ab7a <_malloc_r+0x24a>
    ae50:	21aa      	movs	r1, #170	; 0xaa
    ae52:	0049      	lsls	r1, r1, #1
    ae54:	428a      	cmp	r2, r1
    ae56:	d806      	bhi.n	ae66 <_malloc_r+0x536>
    ae58:	464b      	mov	r3, r9
    ae5a:	0bda      	lsrs	r2, r3, #15
    ae5c:	0011      	movs	r1, r2
    ae5e:	3278      	adds	r2, #120	; 0x78
    ae60:	3177      	adds	r1, #119	; 0x77
    ae62:	00d2      	lsls	r2, r2, #3
    ae64:	e6fe      	b.n	ac64 <_malloc_r+0x334>
    ae66:	490b      	ldr	r1, [pc, #44]	; (ae94 <_malloc_r+0x564>)
    ae68:	428a      	cmp	r2, r1
    ae6a:	d806      	bhi.n	ae7a <_malloc_r+0x54a>
    ae6c:	464b      	mov	r3, r9
    ae6e:	0c9a      	lsrs	r2, r3, #18
    ae70:	0011      	movs	r1, r2
    ae72:	327d      	adds	r2, #125	; 0x7d
    ae74:	317c      	adds	r1, #124	; 0x7c
    ae76:	00d2      	lsls	r2, r2, #3
    ae78:	e6f4      	b.n	ac64 <_malloc_r+0x334>
    ae7a:	22fe      	movs	r2, #254	; 0xfe
    ae7c:	217e      	movs	r1, #126	; 0x7e
    ae7e:	0092      	lsls	r2, r2, #2
    ae80:	e6f0      	b.n	ac64 <_malloc_r+0x334>
    ae82:	6873      	ldr	r3, [r6, #4]
    ae84:	e77e      	b.n	ad84 <_malloc_r+0x454>
    ae86:	002b      	movs	r3, r5
    ae88:	08e8      	lsrs	r0, r5, #3
    ae8a:	3308      	adds	r3, #8
    ae8c:	e605      	b.n	aa9a <_malloc_r+0x16a>
    ae8e:	46c0      	nop			; (mov r8, r8)
    ae90:	2000148c 	.word	0x2000148c
    ae94:	00000554 	.word	0x00000554

0000ae98 <memchr>:
    ae98:	b570      	push	{r4, r5, r6, lr}
    ae9a:	b2cd      	uxtb	r5, r1
    ae9c:	0783      	lsls	r3, r0, #30
    ae9e:	d034      	beq.n	af0a <memchr+0x72>
    aea0:	1e54      	subs	r4, r2, #1
    aea2:	2a00      	cmp	r2, #0
    aea4:	d01b      	beq.n	aede <memchr+0x46>
    aea6:	7803      	ldrb	r3, [r0, #0]
    aea8:	42ab      	cmp	r3, r5
    aeaa:	d019      	beq.n	aee0 <memchr+0x48>
    aeac:	2203      	movs	r2, #3
    aeae:	e004      	b.n	aeba <memchr+0x22>
    aeb0:	3c01      	subs	r4, #1
    aeb2:	d314      	bcc.n	aede <memchr+0x46>
    aeb4:	7803      	ldrb	r3, [r0, #0]
    aeb6:	42ab      	cmp	r3, r5
    aeb8:	d012      	beq.n	aee0 <memchr+0x48>
    aeba:	3001      	adds	r0, #1
    aebc:	4210      	tst	r0, r2
    aebe:	d1f7      	bne.n	aeb0 <memchr+0x18>
    aec0:	2c03      	cmp	r4, #3
    aec2:	d80e      	bhi.n	aee2 <memchr+0x4a>
    aec4:	2c00      	cmp	r4, #0
    aec6:	d00a      	beq.n	aede <memchr+0x46>
    aec8:	7803      	ldrb	r3, [r0, #0]
    aeca:	42ab      	cmp	r3, r5
    aecc:	d008      	beq.n	aee0 <memchr+0x48>
    aece:	1904      	adds	r4, r0, r4
    aed0:	e002      	b.n	aed8 <memchr+0x40>
    aed2:	7803      	ldrb	r3, [r0, #0]
    aed4:	42ab      	cmp	r3, r5
    aed6:	d003      	beq.n	aee0 <memchr+0x48>
    aed8:	3001      	adds	r0, #1
    aeda:	4284      	cmp	r4, r0
    aedc:	d1f9      	bne.n	aed2 <memchr+0x3a>
    aede:	2000      	movs	r0, #0
    aee0:	bd70      	pop	{r4, r5, r6, pc}
    aee2:	22ff      	movs	r2, #255	; 0xff
    aee4:	060b      	lsls	r3, r1, #24
    aee6:	0c1b      	lsrs	r3, r3, #16
    aee8:	4011      	ands	r1, r2
    aeea:	4319      	orrs	r1, r3
    aeec:	040b      	lsls	r3, r1, #16
    aeee:	4e08      	ldr	r6, [pc, #32]	; (af10 <memchr+0x78>)
    aef0:	4319      	orrs	r1, r3
    aef2:	6803      	ldr	r3, [r0, #0]
    aef4:	4a07      	ldr	r2, [pc, #28]	; (af14 <memchr+0x7c>)
    aef6:	404b      	eors	r3, r1
    aef8:	189a      	adds	r2, r3, r2
    aefa:	439a      	bics	r2, r3
    aefc:	4232      	tst	r2, r6
    aefe:	d1e3      	bne.n	aec8 <memchr+0x30>
    af00:	3c04      	subs	r4, #4
    af02:	3004      	adds	r0, #4
    af04:	2c03      	cmp	r4, #3
    af06:	d8f4      	bhi.n	aef2 <memchr+0x5a>
    af08:	e7dc      	b.n	aec4 <memchr+0x2c>
    af0a:	0014      	movs	r4, r2
    af0c:	e7d8      	b.n	aec0 <memchr+0x28>
    af0e:	46c0      	nop			; (mov r8, r8)
    af10:	80808080 	.word	0x80808080
    af14:	fefefeff 	.word	0xfefefeff

0000af18 <memmove>:
    af18:	b5f0      	push	{r4, r5, r6, r7, lr}
    af1a:	4288      	cmp	r0, r1
    af1c:	d90a      	bls.n	af34 <memmove+0x1c>
    af1e:	188b      	adds	r3, r1, r2
    af20:	4298      	cmp	r0, r3
    af22:	d207      	bcs.n	af34 <memmove+0x1c>
    af24:	1e53      	subs	r3, r2, #1
    af26:	2a00      	cmp	r2, #0
    af28:	d003      	beq.n	af32 <memmove+0x1a>
    af2a:	5cca      	ldrb	r2, [r1, r3]
    af2c:	54c2      	strb	r2, [r0, r3]
    af2e:	3b01      	subs	r3, #1
    af30:	d2fb      	bcs.n	af2a <memmove+0x12>
    af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af34:	0005      	movs	r5, r0
    af36:	2a0f      	cmp	r2, #15
    af38:	d808      	bhi.n	af4c <memmove+0x34>
    af3a:	2a00      	cmp	r2, #0
    af3c:	d0f9      	beq.n	af32 <memmove+0x1a>
    af3e:	2300      	movs	r3, #0
    af40:	5ccc      	ldrb	r4, [r1, r3]
    af42:	54ec      	strb	r4, [r5, r3]
    af44:	3301      	adds	r3, #1
    af46:	4293      	cmp	r3, r2
    af48:	d1fa      	bne.n	af40 <memmove+0x28>
    af4a:	e7f2      	b.n	af32 <memmove+0x1a>
    af4c:	000b      	movs	r3, r1
    af4e:	4303      	orrs	r3, r0
    af50:	079b      	lsls	r3, r3, #30
    af52:	d12d      	bne.n	afb0 <memmove+0x98>
    af54:	0015      	movs	r5, r2
    af56:	000c      	movs	r4, r1
    af58:	0003      	movs	r3, r0
    af5a:	3d10      	subs	r5, #16
    af5c:	092f      	lsrs	r7, r5, #4
    af5e:	3701      	adds	r7, #1
    af60:	013f      	lsls	r7, r7, #4
    af62:	19c7      	adds	r7, r0, r7
    af64:	6826      	ldr	r6, [r4, #0]
    af66:	601e      	str	r6, [r3, #0]
    af68:	6866      	ldr	r6, [r4, #4]
    af6a:	605e      	str	r6, [r3, #4]
    af6c:	68a6      	ldr	r6, [r4, #8]
    af6e:	609e      	str	r6, [r3, #8]
    af70:	68e6      	ldr	r6, [r4, #12]
    af72:	3410      	adds	r4, #16
    af74:	60de      	str	r6, [r3, #12]
    af76:	3310      	adds	r3, #16
    af78:	429f      	cmp	r7, r3
    af7a:	d1f3      	bne.n	af64 <memmove+0x4c>
    af7c:	240f      	movs	r4, #15
    af7e:	43a5      	bics	r5, r4
    af80:	3510      	adds	r5, #16
    af82:	1949      	adds	r1, r1, r5
    af84:	4014      	ands	r4, r2
    af86:	1945      	adds	r5, r0, r5
    af88:	2c03      	cmp	r4, #3
    af8a:	d913      	bls.n	afb4 <memmove+0x9c>
    af8c:	2300      	movs	r3, #0
    af8e:	1f27      	subs	r7, r4, #4
    af90:	08be      	lsrs	r6, r7, #2
    af92:	3601      	adds	r6, #1
    af94:	00b6      	lsls	r6, r6, #2
    af96:	58cc      	ldr	r4, [r1, r3]
    af98:	50ec      	str	r4, [r5, r3]
    af9a:	3304      	adds	r3, #4
    af9c:	42b3      	cmp	r3, r6
    af9e:	d1fa      	bne.n	af96 <memmove+0x7e>
    afa0:	2603      	movs	r6, #3
    afa2:	43b7      	bics	r7, r6
    afa4:	1d3c      	adds	r4, r7, #4
    afa6:	1909      	adds	r1, r1, r4
    afa8:	192d      	adds	r5, r5, r4
    afaa:	4032      	ands	r2, r6
    afac:	d1c7      	bne.n	af3e <memmove+0x26>
    afae:	e7c0      	b.n	af32 <memmove+0x1a>
    afb0:	0005      	movs	r5, r0
    afb2:	e7c4      	b.n	af3e <memmove+0x26>
    afb4:	0022      	movs	r2, r4
    afb6:	e7c0      	b.n	af3a <memmove+0x22>

0000afb8 <__malloc_lock>:
    afb8:	b510      	push	{r4, lr}
    afba:	4802      	ldr	r0, [pc, #8]	; (afc4 <__malloc_lock+0xc>)
    afbc:	f7ff fc7a 	bl	a8b4 <__retarget_lock_acquire_recursive>
    afc0:	bd10      	pop	{r4, pc}
    afc2:	46c0      	nop			; (mov r8, r8)
    afc4:	200016fc 	.word	0x200016fc

0000afc8 <__malloc_unlock>:
    afc8:	b510      	push	{r4, lr}
    afca:	4802      	ldr	r0, [pc, #8]	; (afd4 <__malloc_unlock+0xc>)
    afcc:	f7ff fc74 	bl	a8b8 <__retarget_lock_release_recursive>
    afd0:	bd10      	pop	{r4, pc}
    afd2:	46c0      	nop			; (mov r8, r8)
    afd4:	200016fc 	.word	0x200016fc

0000afd8 <_Balloc>:
    afd8:	b570      	push	{r4, r5, r6, lr}
    afda:	0004      	movs	r4, r0
    afdc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    afde:	000d      	movs	r5, r1
    afe0:	2800      	cmp	r0, #0
    afe2:	d00a      	beq.n	affa <_Balloc+0x22>
    afe4:	00ab      	lsls	r3, r5, #2
    afe6:	18c3      	adds	r3, r0, r3
    afe8:	6818      	ldr	r0, [r3, #0]
    afea:	2800      	cmp	r0, #0
    afec:	d00f      	beq.n	b00e <_Balloc+0x36>
    afee:	6802      	ldr	r2, [r0, #0]
    aff0:	601a      	str	r2, [r3, #0]
    aff2:	2300      	movs	r3, #0
    aff4:	6103      	str	r3, [r0, #16]
    aff6:	60c3      	str	r3, [r0, #12]
    aff8:	bd70      	pop	{r4, r5, r6, pc}
    affa:	2221      	movs	r2, #33	; 0x21
    affc:	2104      	movs	r1, #4
    affe:	0020      	movs	r0, r4
    b000:	f000 fe6e 	bl	bce0 <_calloc_r>
    b004:	64e0      	str	r0, [r4, #76]	; 0x4c
    b006:	2800      	cmp	r0, #0
    b008:	d1ec      	bne.n	afe4 <_Balloc+0xc>
    b00a:	2000      	movs	r0, #0
    b00c:	e7f4      	b.n	aff8 <_Balloc+0x20>
    b00e:	2601      	movs	r6, #1
    b010:	40ae      	lsls	r6, r5
    b012:	1d72      	adds	r2, r6, #5
    b014:	0092      	lsls	r2, r2, #2
    b016:	2101      	movs	r1, #1
    b018:	0020      	movs	r0, r4
    b01a:	f000 fe61 	bl	bce0 <_calloc_r>
    b01e:	2800      	cmp	r0, #0
    b020:	d0f3      	beq.n	b00a <_Balloc+0x32>
    b022:	6045      	str	r5, [r0, #4]
    b024:	6086      	str	r6, [r0, #8]
    b026:	e7e4      	b.n	aff2 <_Balloc+0x1a>

0000b028 <_Bfree>:
    b028:	2900      	cmp	r1, #0
    b02a:	d006      	beq.n	b03a <_Bfree+0x12>
    b02c:	684b      	ldr	r3, [r1, #4]
    b02e:	009a      	lsls	r2, r3, #2
    b030:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    b032:	189b      	adds	r3, r3, r2
    b034:	681a      	ldr	r2, [r3, #0]
    b036:	600a      	str	r2, [r1, #0]
    b038:	6019      	str	r1, [r3, #0]
    b03a:	4770      	bx	lr

0000b03c <__multadd>:
    b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b03e:	46ce      	mov	lr, r9
    b040:	4647      	mov	r7, r8
    b042:	4681      	mov	r9, r0
    b044:	0008      	movs	r0, r1
    b046:	b580      	push	{r7, lr}
    b048:	000d      	movs	r5, r1
    b04a:	690c      	ldr	r4, [r1, #16]
    b04c:	001f      	movs	r7, r3
    b04e:	2100      	movs	r1, #0
    b050:	3014      	adds	r0, #20
    b052:	6803      	ldr	r3, [r0, #0]
    b054:	3101      	adds	r1, #1
    b056:	041e      	lsls	r6, r3, #16
    b058:	0c36      	lsrs	r6, r6, #16
    b05a:	4356      	muls	r6, r2
    b05c:	0c1b      	lsrs	r3, r3, #16
    b05e:	4353      	muls	r3, r2
    b060:	19f6      	adds	r6, r6, r7
    b062:	0c37      	lsrs	r7, r6, #16
    b064:	19db      	adds	r3, r3, r7
    b066:	0436      	lsls	r6, r6, #16
    b068:	0c1f      	lsrs	r7, r3, #16
    b06a:	0c36      	lsrs	r6, r6, #16
    b06c:	041b      	lsls	r3, r3, #16
    b06e:	199b      	adds	r3, r3, r6
    b070:	c008      	stmia	r0!, {r3}
    b072:	428c      	cmp	r4, r1
    b074:	dced      	bgt.n	b052 <__multadd+0x16>
    b076:	2f00      	cmp	r7, #0
    b078:	d008      	beq.n	b08c <__multadd+0x50>
    b07a:	68ab      	ldr	r3, [r5, #8]
    b07c:	429c      	cmp	r4, r3
    b07e:	da0a      	bge.n	b096 <__multadd+0x5a>
    b080:	1d23      	adds	r3, r4, #4
    b082:	009b      	lsls	r3, r3, #2
    b084:	18eb      	adds	r3, r5, r3
    b086:	3401      	adds	r4, #1
    b088:	605f      	str	r7, [r3, #4]
    b08a:	612c      	str	r4, [r5, #16]
    b08c:	0028      	movs	r0, r5
    b08e:	bc0c      	pop	{r2, r3}
    b090:	4690      	mov	r8, r2
    b092:	4699      	mov	r9, r3
    b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b096:	686b      	ldr	r3, [r5, #4]
    b098:	4648      	mov	r0, r9
    b09a:	1c59      	adds	r1, r3, #1
    b09c:	f7ff ff9c 	bl	afd8 <_Balloc>
    b0a0:	0029      	movs	r1, r5
    b0a2:	692b      	ldr	r3, [r5, #16]
    b0a4:	4680      	mov	r8, r0
    b0a6:	1c9a      	adds	r2, r3, #2
    b0a8:	0092      	lsls	r2, r2, #2
    b0aa:	310c      	adds	r1, #12
    b0ac:	300c      	adds	r0, #12
    b0ae:	f7fc fbff 	bl	78b0 <memcpy>
    b0b2:	686b      	ldr	r3, [r5, #4]
    b0b4:	009a      	lsls	r2, r3, #2
    b0b6:	464b      	mov	r3, r9
    b0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b0ba:	189b      	adds	r3, r3, r2
    b0bc:	681a      	ldr	r2, [r3, #0]
    b0be:	602a      	str	r2, [r5, #0]
    b0c0:	601d      	str	r5, [r3, #0]
    b0c2:	4645      	mov	r5, r8
    b0c4:	e7dc      	b.n	b080 <__multadd+0x44>
    b0c6:	46c0      	nop			; (mov r8, r8)

0000b0c8 <__hi0bits>:
    b0c8:	0003      	movs	r3, r0
    b0ca:	0c02      	lsrs	r2, r0, #16
    b0cc:	2000      	movs	r0, #0
    b0ce:	2a00      	cmp	r2, #0
    b0d0:	d101      	bne.n	b0d6 <__hi0bits+0xe>
    b0d2:	041b      	lsls	r3, r3, #16
    b0d4:	3010      	adds	r0, #16
    b0d6:	0e1a      	lsrs	r2, r3, #24
    b0d8:	d101      	bne.n	b0de <__hi0bits+0x16>
    b0da:	3008      	adds	r0, #8
    b0dc:	021b      	lsls	r3, r3, #8
    b0de:	0f1a      	lsrs	r2, r3, #28
    b0e0:	d101      	bne.n	b0e6 <__hi0bits+0x1e>
    b0e2:	3004      	adds	r0, #4
    b0e4:	011b      	lsls	r3, r3, #4
    b0e6:	0f9a      	lsrs	r2, r3, #30
    b0e8:	d101      	bne.n	b0ee <__hi0bits+0x26>
    b0ea:	3002      	adds	r0, #2
    b0ec:	009b      	lsls	r3, r3, #2
    b0ee:	2b00      	cmp	r3, #0
    b0f0:	db03      	blt.n	b0fa <__hi0bits+0x32>
    b0f2:	3001      	adds	r0, #1
    b0f4:	005b      	lsls	r3, r3, #1
    b0f6:	d400      	bmi.n	b0fa <__hi0bits+0x32>
    b0f8:	2020      	movs	r0, #32
    b0fa:	4770      	bx	lr

0000b0fc <__lo0bits>:
    b0fc:	6803      	ldr	r3, [r0, #0]
    b0fe:	075a      	lsls	r2, r3, #29
    b100:	d009      	beq.n	b116 <__lo0bits+0x1a>
    b102:	2200      	movs	r2, #0
    b104:	07d9      	lsls	r1, r3, #31
    b106:	d404      	bmi.n	b112 <__lo0bits+0x16>
    b108:	079a      	lsls	r2, r3, #30
    b10a:	d420      	bmi.n	b14e <__lo0bits+0x52>
    b10c:	2202      	movs	r2, #2
    b10e:	089b      	lsrs	r3, r3, #2
    b110:	6003      	str	r3, [r0, #0]
    b112:	0010      	movs	r0, r2
    b114:	4770      	bx	lr
    b116:	0419      	lsls	r1, r3, #16
    b118:	2200      	movs	r2, #0
    b11a:	2900      	cmp	r1, #0
    b11c:	d101      	bne.n	b122 <__lo0bits+0x26>
    b11e:	0c1b      	lsrs	r3, r3, #16
    b120:	3210      	adds	r2, #16
    b122:	21ff      	movs	r1, #255	; 0xff
    b124:	4219      	tst	r1, r3
    b126:	d101      	bne.n	b12c <__lo0bits+0x30>
    b128:	3208      	adds	r2, #8
    b12a:	0a1b      	lsrs	r3, r3, #8
    b12c:	0719      	lsls	r1, r3, #28
    b12e:	d101      	bne.n	b134 <__lo0bits+0x38>
    b130:	3204      	adds	r2, #4
    b132:	091b      	lsrs	r3, r3, #4
    b134:	0799      	lsls	r1, r3, #30
    b136:	d101      	bne.n	b13c <__lo0bits+0x40>
    b138:	3202      	adds	r2, #2
    b13a:	089b      	lsrs	r3, r3, #2
    b13c:	07d9      	lsls	r1, r3, #31
    b13e:	d404      	bmi.n	b14a <__lo0bits+0x4e>
    b140:	085b      	lsrs	r3, r3, #1
    b142:	d101      	bne.n	b148 <__lo0bits+0x4c>
    b144:	2220      	movs	r2, #32
    b146:	e7e4      	b.n	b112 <__lo0bits+0x16>
    b148:	3201      	adds	r2, #1
    b14a:	6003      	str	r3, [r0, #0]
    b14c:	e7e1      	b.n	b112 <__lo0bits+0x16>
    b14e:	085b      	lsrs	r3, r3, #1
    b150:	6003      	str	r3, [r0, #0]
    b152:	2201      	movs	r2, #1
    b154:	e7dd      	b.n	b112 <__lo0bits+0x16>
    b156:	46c0      	nop			; (mov r8, r8)

0000b158 <__i2b>:
    b158:	b510      	push	{r4, lr}
    b15a:	000c      	movs	r4, r1
    b15c:	2101      	movs	r1, #1
    b15e:	f7ff ff3b 	bl	afd8 <_Balloc>
    b162:	2301      	movs	r3, #1
    b164:	6144      	str	r4, [r0, #20]
    b166:	6103      	str	r3, [r0, #16]
    b168:	bd10      	pop	{r4, pc}
    b16a:	46c0      	nop			; (mov r8, r8)

0000b16c <__multiply>:
    b16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b16e:	4657      	mov	r7, sl
    b170:	464e      	mov	r6, r9
    b172:	4645      	mov	r5, r8
    b174:	46de      	mov	lr, fp
    b176:	b5e0      	push	{r5, r6, r7, lr}
    b178:	6914      	ldr	r4, [r2, #16]
    b17a:	690e      	ldr	r6, [r1, #16]
    b17c:	b085      	sub	sp, #20
    b17e:	000f      	movs	r7, r1
    b180:	0015      	movs	r5, r2
    b182:	42a6      	cmp	r6, r4
    b184:	da04      	bge.n	b190 <__multiply+0x24>
    b186:	0033      	movs	r3, r6
    b188:	0017      	movs	r7, r2
    b18a:	0026      	movs	r6, r4
    b18c:	000d      	movs	r5, r1
    b18e:	001c      	movs	r4, r3
    b190:	1933      	adds	r3, r6, r4
    b192:	4698      	mov	r8, r3
    b194:	68bb      	ldr	r3, [r7, #8]
    b196:	6879      	ldr	r1, [r7, #4]
    b198:	4598      	cmp	r8, r3
    b19a:	dd00      	ble.n	b19e <__multiply+0x32>
    b19c:	3101      	adds	r1, #1
    b19e:	f7ff ff1b 	bl	afd8 <_Balloc>
    b1a2:	2214      	movs	r2, #20
    b1a4:	0003      	movs	r3, r0
    b1a6:	4694      	mov	ip, r2
    b1a8:	4463      	add	r3, ip
    b1aa:	469b      	mov	fp, r3
    b1ac:	4643      	mov	r3, r8
    b1ae:	009b      	lsls	r3, r3, #2
    b1b0:	445b      	add	r3, fp
    b1b2:	0019      	movs	r1, r3
    b1b4:	9302      	str	r3, [sp, #8]
    b1b6:	9003      	str	r0, [sp, #12]
    b1b8:	465b      	mov	r3, fp
    b1ba:	2200      	movs	r2, #0
    b1bc:	458b      	cmp	fp, r1
    b1be:	d203      	bcs.n	b1c8 <__multiply+0x5c>
    b1c0:	9902      	ldr	r1, [sp, #8]
    b1c2:	c304      	stmia	r3!, {r2}
    b1c4:	4299      	cmp	r1, r3
    b1c6:	d8fc      	bhi.n	b1c2 <__multiply+0x56>
    b1c8:	2314      	movs	r3, #20
    b1ca:	00a4      	lsls	r4, r4, #2
    b1cc:	469a      	mov	sl, r3
    b1ce:	3714      	adds	r7, #20
    b1d0:	0023      	movs	r3, r4
    b1d2:	46bc      	mov	ip, r7
    b1d4:	44aa      	add	sl, r5
    b1d6:	00b6      	lsls	r6, r6, #2
    b1d8:	4453      	add	r3, sl
    b1da:	9700      	str	r7, [sp, #0]
    b1dc:	44b4      	add	ip, r6
    b1de:	9301      	str	r3, [sp, #4]
    b1e0:	459a      	cmp	sl, r3
    b1e2:	d24f      	bcs.n	b284 <__multiply+0x118>
    b1e4:	4653      	mov	r3, sl
    b1e6:	681b      	ldr	r3, [r3, #0]
    b1e8:	041e      	lsls	r6, r3, #16
    b1ea:	0c36      	lsrs	r6, r6, #16
    b1ec:	d020      	beq.n	b230 <__multiply+0xc4>
    b1ee:	465c      	mov	r4, fp
    b1f0:	2700      	movs	r7, #0
    b1f2:	9d00      	ldr	r5, [sp, #0]
    b1f4:	0021      	movs	r1, r4
    b1f6:	cc08      	ldmia	r4!, {r3}
    b1f8:	cd04      	ldmia	r5!, {r2}
    b1fa:	4699      	mov	r9, r3
    b1fc:	4648      	mov	r0, r9
    b1fe:	0413      	lsls	r3, r2, #16
    b200:	0c1b      	lsrs	r3, r3, #16
    b202:	4373      	muls	r3, r6
    b204:	0400      	lsls	r0, r0, #16
    b206:	0c00      	lsrs	r0, r0, #16
    b208:	181b      	adds	r3, r3, r0
    b20a:	19d8      	adds	r0, r3, r7
    b20c:	0c13      	lsrs	r3, r2, #16
    b20e:	464a      	mov	r2, r9
    b210:	4373      	muls	r3, r6
    b212:	0c12      	lsrs	r2, r2, #16
    b214:	189b      	adds	r3, r3, r2
    b216:	0c02      	lsrs	r2, r0, #16
    b218:	189b      	adds	r3, r3, r2
    b21a:	0402      	lsls	r2, r0, #16
    b21c:	0c1f      	lsrs	r7, r3, #16
    b21e:	0c12      	lsrs	r2, r2, #16
    b220:	041b      	lsls	r3, r3, #16
    b222:	4313      	orrs	r3, r2
    b224:	600b      	str	r3, [r1, #0]
    b226:	45ac      	cmp	ip, r5
    b228:	d8e4      	bhi.n	b1f4 <__multiply+0x88>
    b22a:	4653      	mov	r3, sl
    b22c:	6027      	str	r7, [r4, #0]
    b22e:	681b      	ldr	r3, [r3, #0]
    b230:	0c1e      	lsrs	r6, r3, #16
    b232:	d020      	beq.n	b276 <__multiply+0x10a>
    b234:	465b      	mov	r3, fp
    b236:	2100      	movs	r1, #0
    b238:	681b      	ldr	r3, [r3, #0]
    b23a:	465c      	mov	r4, fp
    b23c:	0018      	movs	r0, r3
    b23e:	000f      	movs	r7, r1
    b240:	4662      	mov	r2, ip
    b242:	9d00      	ldr	r5, [sp, #0]
    b244:	8829      	ldrh	r1, [r5, #0]
    b246:	0c00      	lsrs	r0, r0, #16
    b248:	4371      	muls	r1, r6
    b24a:	1809      	adds	r1, r1, r0
    b24c:	19c9      	adds	r1, r1, r7
    b24e:	041b      	lsls	r3, r3, #16
    b250:	0408      	lsls	r0, r1, #16
    b252:	0c1b      	lsrs	r3, r3, #16
    b254:	4303      	orrs	r3, r0
    b256:	6023      	str	r3, [r4, #0]
    b258:	cd08      	ldmia	r5!, {r3}
    b25a:	6860      	ldr	r0, [r4, #4]
    b25c:	0c1b      	lsrs	r3, r3, #16
    b25e:	4373      	muls	r3, r6
    b260:	0407      	lsls	r7, r0, #16
    b262:	0c3f      	lsrs	r7, r7, #16
    b264:	19db      	adds	r3, r3, r7
    b266:	0c09      	lsrs	r1, r1, #16
    b268:	185b      	adds	r3, r3, r1
    b26a:	0c1f      	lsrs	r7, r3, #16
    b26c:	3404      	adds	r4, #4
    b26e:	42aa      	cmp	r2, r5
    b270:	d8e8      	bhi.n	b244 <__multiply+0xd8>
    b272:	4694      	mov	ip, r2
    b274:	6023      	str	r3, [r4, #0]
    b276:	2304      	movs	r3, #4
    b278:	4699      	mov	r9, r3
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	44ca      	add	sl, r9
    b27e:	44cb      	add	fp, r9
    b280:	4553      	cmp	r3, sl
    b282:	d8af      	bhi.n	b1e4 <__multiply+0x78>
    b284:	4643      	mov	r3, r8
    b286:	2b00      	cmp	r3, #0
    b288:	dd0e      	ble.n	b2a8 <__multiply+0x13c>
    b28a:	9b02      	ldr	r3, [sp, #8]
    b28c:	3b04      	subs	r3, #4
    b28e:	681a      	ldr	r2, [r3, #0]
    b290:	2a00      	cmp	r2, #0
    b292:	d109      	bne.n	b2a8 <__multiply+0x13c>
    b294:	4642      	mov	r2, r8
    b296:	e003      	b.n	b2a0 <__multiply+0x134>
    b298:	3b04      	subs	r3, #4
    b29a:	6819      	ldr	r1, [r3, #0]
    b29c:	2900      	cmp	r1, #0
    b29e:	d102      	bne.n	b2a6 <__multiply+0x13a>
    b2a0:	3a01      	subs	r2, #1
    b2a2:	2a00      	cmp	r2, #0
    b2a4:	d1f8      	bne.n	b298 <__multiply+0x12c>
    b2a6:	4690      	mov	r8, r2
    b2a8:	9b03      	ldr	r3, [sp, #12]
    b2aa:	4642      	mov	r2, r8
    b2ac:	0018      	movs	r0, r3
    b2ae:	611a      	str	r2, [r3, #16]
    b2b0:	b005      	add	sp, #20
    b2b2:	bc3c      	pop	{r2, r3, r4, r5}
    b2b4:	4690      	mov	r8, r2
    b2b6:	4699      	mov	r9, r3
    b2b8:	46a2      	mov	sl, r4
    b2ba:	46ab      	mov	fp, r5
    b2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2be:	46c0      	nop			; (mov r8, r8)

0000b2c0 <__pow5mult>:
    b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2c2:	4647      	mov	r7, r8
    b2c4:	46ce      	mov	lr, r9
    b2c6:	2303      	movs	r3, #3
    b2c8:	b580      	push	{r7, lr}
    b2ca:	4680      	mov	r8, r0
    b2cc:	000f      	movs	r7, r1
    b2ce:	0014      	movs	r4, r2
    b2d0:	4013      	ands	r3, r2
    b2d2:	d13a      	bne.n	b34a <__pow5mult+0x8a>
    b2d4:	10a4      	asrs	r4, r4, #2
    b2d6:	003e      	movs	r6, r7
    b2d8:	2c00      	cmp	r4, #0
    b2da:	d025      	beq.n	b328 <__pow5mult+0x68>
    b2dc:	4643      	mov	r3, r8
    b2de:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    b2e0:	2d00      	cmp	r5, #0
    b2e2:	d03b      	beq.n	b35c <__pow5mult+0x9c>
    b2e4:	003e      	movs	r6, r7
    b2e6:	2300      	movs	r3, #0
    b2e8:	2701      	movs	r7, #1
    b2ea:	4699      	mov	r9, r3
    b2ec:	4227      	tst	r7, r4
    b2ee:	d107      	bne.n	b300 <__pow5mult+0x40>
    b2f0:	1064      	asrs	r4, r4, #1
    b2f2:	d019      	beq.n	b328 <__pow5mult+0x68>
    b2f4:	6828      	ldr	r0, [r5, #0]
    b2f6:	2800      	cmp	r0, #0
    b2f8:	d01b      	beq.n	b332 <__pow5mult+0x72>
    b2fa:	0005      	movs	r5, r0
    b2fc:	4227      	tst	r7, r4
    b2fe:	d0f7      	beq.n	b2f0 <__pow5mult+0x30>
    b300:	002a      	movs	r2, r5
    b302:	0031      	movs	r1, r6
    b304:	4640      	mov	r0, r8
    b306:	f7ff ff31 	bl	b16c <__multiply>
    b30a:	2e00      	cmp	r6, #0
    b30c:	d01b      	beq.n	b346 <__pow5mult+0x86>
    b30e:	4642      	mov	r2, r8
    b310:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    b312:	6873      	ldr	r3, [r6, #4]
    b314:	4694      	mov	ip, r2
    b316:	009b      	lsls	r3, r3, #2
    b318:	4463      	add	r3, ip
    b31a:	681a      	ldr	r2, [r3, #0]
    b31c:	1064      	asrs	r4, r4, #1
    b31e:	6032      	str	r2, [r6, #0]
    b320:	601e      	str	r6, [r3, #0]
    b322:	0006      	movs	r6, r0
    b324:	2c00      	cmp	r4, #0
    b326:	d1e5      	bne.n	b2f4 <__pow5mult+0x34>
    b328:	0030      	movs	r0, r6
    b32a:	bc0c      	pop	{r2, r3}
    b32c:	4690      	mov	r8, r2
    b32e:	4699      	mov	r9, r3
    b330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b332:	002a      	movs	r2, r5
    b334:	0029      	movs	r1, r5
    b336:	4640      	mov	r0, r8
    b338:	f7ff ff18 	bl	b16c <__multiply>
    b33c:	464b      	mov	r3, r9
    b33e:	6028      	str	r0, [r5, #0]
    b340:	6003      	str	r3, [r0, #0]
    b342:	0005      	movs	r5, r0
    b344:	e7da      	b.n	b2fc <__pow5mult+0x3c>
    b346:	0006      	movs	r6, r0
    b348:	e7d2      	b.n	b2f0 <__pow5mult+0x30>
    b34a:	4a0b      	ldr	r2, [pc, #44]	; (b378 <__pow5mult+0xb8>)
    b34c:	3b01      	subs	r3, #1
    b34e:	009b      	lsls	r3, r3, #2
    b350:	589a      	ldr	r2, [r3, r2]
    b352:	2300      	movs	r3, #0
    b354:	f7ff fe72 	bl	b03c <__multadd>
    b358:	0007      	movs	r7, r0
    b35a:	e7bb      	b.n	b2d4 <__pow5mult+0x14>
    b35c:	2101      	movs	r1, #1
    b35e:	4640      	mov	r0, r8
    b360:	f7ff fe3a 	bl	afd8 <_Balloc>
    b364:	4b05      	ldr	r3, [pc, #20]	; (b37c <__pow5mult+0xbc>)
    b366:	0005      	movs	r5, r0
    b368:	6143      	str	r3, [r0, #20]
    b36a:	2301      	movs	r3, #1
    b36c:	6103      	str	r3, [r0, #16]
    b36e:	4643      	mov	r3, r8
    b370:	6498      	str	r0, [r3, #72]	; 0x48
    b372:	2300      	movs	r3, #0
    b374:	6003      	str	r3, [r0, #0]
    b376:	e7b5      	b.n	b2e4 <__pow5mult+0x24>
    b378:	0000cfd8 	.word	0x0000cfd8
    b37c:	00000271 	.word	0x00000271

0000b380 <__lshift>:
    b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b382:	464e      	mov	r6, r9
    b384:	4645      	mov	r5, r8
    b386:	46de      	mov	lr, fp
    b388:	4657      	mov	r7, sl
    b38a:	b5e0      	push	{r5, r6, r7, lr}
    b38c:	000e      	movs	r6, r1
    b38e:	6933      	ldr	r3, [r6, #16]
    b390:	1154      	asrs	r4, r2, #5
    b392:	4698      	mov	r8, r3
    b394:	44a0      	add	r8, r4
    b396:	4643      	mov	r3, r8
    b398:	1c5d      	adds	r5, r3, #1
    b39a:	68b3      	ldr	r3, [r6, #8]
    b39c:	4683      	mov	fp, r0
    b39e:	4691      	mov	r9, r2
    b3a0:	6849      	ldr	r1, [r1, #4]
    b3a2:	429d      	cmp	r5, r3
    b3a4:	dd03      	ble.n	b3ae <__lshift+0x2e>
    b3a6:	3101      	adds	r1, #1
    b3a8:	005b      	lsls	r3, r3, #1
    b3aa:	429d      	cmp	r5, r3
    b3ac:	dcfb      	bgt.n	b3a6 <__lshift+0x26>
    b3ae:	4658      	mov	r0, fp
    b3b0:	f7ff fe12 	bl	afd8 <_Balloc>
    b3b4:	0003      	movs	r3, r0
    b3b6:	4684      	mov	ip, r0
    b3b8:	3314      	adds	r3, #20
    b3ba:	2c00      	cmp	r4, #0
    b3bc:	dd06      	ble.n	b3cc <__lshift+0x4c>
    b3be:	2100      	movs	r1, #0
    b3c0:	00a4      	lsls	r4, r4, #2
    b3c2:	001a      	movs	r2, r3
    b3c4:	191b      	adds	r3, r3, r4
    b3c6:	c202      	stmia	r2!, {r1}
    b3c8:	4293      	cmp	r3, r2
    b3ca:	d1fc      	bne.n	b3c6 <__lshift+0x46>
    b3cc:	6932      	ldr	r2, [r6, #16]
    b3ce:	4648      	mov	r0, r9
    b3d0:	0097      	lsls	r7, r2, #2
    b3d2:	0031      	movs	r1, r6
    b3d4:	221f      	movs	r2, #31
    b3d6:	3114      	adds	r1, #20
    b3d8:	4010      	ands	r0, r2
    b3da:	19cf      	adds	r7, r1, r7
    b3dc:	4681      	mov	r9, r0
    b3de:	2800      	cmp	r0, #0
    b3e0:	d025      	beq.n	b42e <__lshift+0xae>
    b3e2:	2220      	movs	r2, #32
    b3e4:	1a12      	subs	r2, r2, r0
    b3e6:	4692      	mov	sl, r2
    b3e8:	2200      	movs	r2, #0
    b3ea:	4648      	mov	r0, r9
    b3ec:	680c      	ldr	r4, [r1, #0]
    b3ee:	4084      	lsls	r4, r0
    b3f0:	4650      	mov	r0, sl
    b3f2:	4314      	orrs	r4, r2
    b3f4:	601c      	str	r4, [r3, #0]
    b3f6:	c904      	ldmia	r1!, {r2}
    b3f8:	3304      	adds	r3, #4
    b3fa:	40c2      	lsrs	r2, r0
    b3fc:	428f      	cmp	r7, r1
    b3fe:	d8f4      	bhi.n	b3ea <__lshift+0x6a>
    b400:	601a      	str	r2, [r3, #0]
    b402:	2a00      	cmp	r2, #0
    b404:	d001      	beq.n	b40a <__lshift+0x8a>
    b406:	4645      	mov	r5, r8
    b408:	3502      	adds	r5, #2
    b40a:	4663      	mov	r3, ip
    b40c:	3d01      	subs	r5, #1
    b40e:	611d      	str	r5, [r3, #16]
    b410:	6873      	ldr	r3, [r6, #4]
    b412:	4660      	mov	r0, ip
    b414:	009a      	lsls	r2, r3, #2
    b416:	465b      	mov	r3, fp
    b418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b41a:	189b      	adds	r3, r3, r2
    b41c:	681a      	ldr	r2, [r3, #0]
    b41e:	6032      	str	r2, [r6, #0]
    b420:	601e      	str	r6, [r3, #0]
    b422:	bc3c      	pop	{r2, r3, r4, r5}
    b424:	4690      	mov	r8, r2
    b426:	4699      	mov	r9, r3
    b428:	46a2      	mov	sl, r4
    b42a:	46ab      	mov	fp, r5
    b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b42e:	c904      	ldmia	r1!, {r2}
    b430:	c304      	stmia	r3!, {r2}
    b432:	428f      	cmp	r7, r1
    b434:	d9e9      	bls.n	b40a <__lshift+0x8a>
    b436:	c904      	ldmia	r1!, {r2}
    b438:	c304      	stmia	r3!, {r2}
    b43a:	428f      	cmp	r7, r1
    b43c:	d8f7      	bhi.n	b42e <__lshift+0xae>
    b43e:	e7e4      	b.n	b40a <__lshift+0x8a>

0000b440 <__mcmp>:
    b440:	690a      	ldr	r2, [r1, #16]
    b442:	6903      	ldr	r3, [r0, #16]
    b444:	b530      	push	{r4, r5, lr}
    b446:	0005      	movs	r5, r0
    b448:	1a98      	subs	r0, r3, r2
    b44a:	d111      	bne.n	b470 <__mcmp+0x30>
    b44c:	0092      	lsls	r2, r2, #2
    b44e:	3514      	adds	r5, #20
    b450:	3114      	adds	r1, #20
    b452:	18ab      	adds	r3, r5, r2
    b454:	1889      	adds	r1, r1, r2
    b456:	e001      	b.n	b45c <__mcmp+0x1c>
    b458:	429d      	cmp	r5, r3
    b45a:	d209      	bcs.n	b470 <__mcmp+0x30>
    b45c:	3b04      	subs	r3, #4
    b45e:	3904      	subs	r1, #4
    b460:	681c      	ldr	r4, [r3, #0]
    b462:	680a      	ldr	r2, [r1, #0]
    b464:	4294      	cmp	r4, r2
    b466:	d0f7      	beq.n	b458 <__mcmp+0x18>
    b468:	4294      	cmp	r4, r2
    b46a:	4180      	sbcs	r0, r0
    b46c:	2201      	movs	r2, #1
    b46e:	4310      	orrs	r0, r2
    b470:	bd30      	pop	{r4, r5, pc}
    b472:	46c0      	nop			; (mov r8, r8)

0000b474 <__mdiff>:
    b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b476:	4645      	mov	r5, r8
    b478:	46de      	mov	lr, fp
    b47a:	4657      	mov	r7, sl
    b47c:	464e      	mov	r6, r9
    b47e:	0014      	movs	r4, r2
    b480:	690b      	ldr	r3, [r1, #16]
    b482:	6912      	ldr	r2, [r2, #16]
    b484:	b5e0      	push	{r5, r6, r7, lr}
    b486:	4688      	mov	r8, r1
    b488:	1a9d      	subs	r5, r3, r2
    b48a:	d11a      	bne.n	b4c2 <__mdiff+0x4e>
    b48c:	000f      	movs	r7, r1
    b48e:	2114      	movs	r1, #20
    b490:	468c      	mov	ip, r1
    b492:	0092      	lsls	r2, r2, #2
    b494:	3714      	adds	r7, #20
    b496:	44a4      	add	ip, r4
    b498:	18bb      	adds	r3, r7, r2
    b49a:	4462      	add	r2, ip
    b49c:	e002      	b.n	b4a4 <__mdiff+0x30>
    b49e:	429f      	cmp	r7, r3
    b4a0:	d300      	bcc.n	b4a4 <__mdiff+0x30>
    b4a2:	e070      	b.n	b586 <__mdiff+0x112>
    b4a4:	3b04      	subs	r3, #4
    b4a6:	3a04      	subs	r2, #4
    b4a8:	681e      	ldr	r6, [r3, #0]
    b4aa:	6811      	ldr	r1, [r2, #0]
    b4ac:	428e      	cmp	r6, r1
    b4ae:	d0f6      	beq.n	b49e <__mdiff+0x2a>
    b4b0:	d300      	bcc.n	b4b4 <__mdiff+0x40>
    b4b2:	e071      	b.n	b598 <__mdiff+0x124>
    b4b4:	4643      	mov	r3, r8
    b4b6:	003e      	movs	r6, r7
    b4b8:	46a0      	mov	r8, r4
    b4ba:	4667      	mov	r7, ip
    b4bc:	001c      	movs	r4, r3
    b4be:	2501      	movs	r5, #1
    b4c0:	e006      	b.n	b4d0 <__mdiff+0x5c>
    b4c2:	2d00      	cmp	r5, #0
    b4c4:	db6a      	blt.n	b59c <__mdiff+0x128>
    b4c6:	4647      	mov	r7, r8
    b4c8:	0026      	movs	r6, r4
    b4ca:	2500      	movs	r5, #0
    b4cc:	3714      	adds	r7, #20
    b4ce:	3614      	adds	r6, #20
    b4d0:	4643      	mov	r3, r8
    b4d2:	6859      	ldr	r1, [r3, #4]
    b4d4:	f7ff fd80 	bl	afd8 <_Balloc>
    b4d8:	4643      	mov	r3, r8
    b4da:	4681      	mov	r9, r0
    b4dc:	60c5      	str	r5, [r0, #12]
    b4de:	6918      	ldr	r0, [r3, #16]
    b4e0:	464d      	mov	r5, r9
    b4e2:	0083      	lsls	r3, r0, #2
    b4e4:	469c      	mov	ip, r3
    b4e6:	6923      	ldr	r3, [r4, #16]
    b4e8:	44bc      	add	ip, r7
    b4ea:	009b      	lsls	r3, r3, #2
    b4ec:	4698      	mov	r8, r3
    b4ee:	2300      	movs	r3, #0
    b4f0:	44b0      	add	r8, r6
    b4f2:	3514      	adds	r5, #20
    b4f4:	469a      	mov	sl, r3
    b4f6:	e000      	b.n	b4fa <__mdiff+0x86>
    b4f8:	0027      	movs	r7, r4
    b4fa:	ce04      	ldmia	r6!, {r2}
    b4fc:	003c      	movs	r4, r7
    b4fe:	4693      	mov	fp, r2
    b500:	4659      	mov	r1, fp
    b502:	cc08      	ldmia	r4!, {r3}
    b504:	0409      	lsls	r1, r1, #16
    b506:	041a      	lsls	r2, r3, #16
    b508:	0c12      	lsrs	r2, r2, #16
    b50a:	4452      	add	r2, sl
    b50c:	0c09      	lsrs	r1, r1, #16
    b50e:	1a52      	subs	r2, r2, r1
    b510:	0c19      	lsrs	r1, r3, #16
    b512:	465b      	mov	r3, fp
    b514:	0c1b      	lsrs	r3, r3, #16
    b516:	1acb      	subs	r3, r1, r3
    b518:	1411      	asrs	r1, r2, #16
    b51a:	185b      	adds	r3, r3, r1
    b51c:	0412      	lsls	r2, r2, #16
    b51e:	1419      	asrs	r1, r3, #16
    b520:	0c12      	lsrs	r2, r2, #16
    b522:	041b      	lsls	r3, r3, #16
    b524:	468a      	mov	sl, r1
    b526:	4313      	orrs	r3, r2
    b528:	1d29      	adds	r1, r5, #4
    b52a:	602b      	str	r3, [r5, #0]
    b52c:	000d      	movs	r5, r1
    b52e:	45b0      	cmp	r8, r6
    b530:	d8e2      	bhi.n	b4f8 <__mdiff+0x84>
    b532:	45a4      	cmp	ip, r4
    b534:	d916      	bls.n	b564 <__mdiff+0xf0>
    b536:	cc08      	ldmia	r4!, {r3}
    b538:	041a      	lsls	r2, r3, #16
    b53a:	0c12      	lsrs	r2, r2, #16
    b53c:	4452      	add	r2, sl
    b53e:	1416      	asrs	r6, r2, #16
    b540:	0c1b      	lsrs	r3, r3, #16
    b542:	199b      	adds	r3, r3, r6
    b544:	0412      	lsls	r2, r2, #16
    b546:	141e      	asrs	r6, r3, #16
    b548:	0c12      	lsrs	r2, r2, #16
    b54a:	041b      	lsls	r3, r3, #16
    b54c:	4313      	orrs	r3, r2
    b54e:	46b2      	mov	sl, r6
    b550:	c508      	stmia	r5!, {r3}
    b552:	45a4      	cmp	ip, r4
    b554:	d8ef      	bhi.n	b536 <__mdiff+0xc2>
    b556:	4662      	mov	r2, ip
    b558:	2403      	movs	r4, #3
    b55a:	1bd2      	subs	r2, r2, r7
    b55c:	3a05      	subs	r2, #5
    b55e:	43a2      	bics	r2, r4
    b560:	3204      	adds	r2, #4
    b562:	1889      	adds	r1, r1, r2
    b564:	3904      	subs	r1, #4
    b566:	2b00      	cmp	r3, #0
    b568:	d104      	bne.n	b574 <__mdiff+0x100>
    b56a:	3904      	subs	r1, #4
    b56c:	680b      	ldr	r3, [r1, #0]
    b56e:	3801      	subs	r0, #1
    b570:	2b00      	cmp	r3, #0
    b572:	d0fa      	beq.n	b56a <__mdiff+0xf6>
    b574:	464b      	mov	r3, r9
    b576:	6118      	str	r0, [r3, #16]
    b578:	4648      	mov	r0, r9
    b57a:	bc3c      	pop	{r2, r3, r4, r5}
    b57c:	4690      	mov	r8, r2
    b57e:	4699      	mov	r9, r3
    b580:	46a2      	mov	sl, r4
    b582:	46ab      	mov	fp, r5
    b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b586:	2100      	movs	r1, #0
    b588:	f7ff fd26 	bl	afd8 <_Balloc>
    b58c:	2301      	movs	r3, #1
    b58e:	6103      	str	r3, [r0, #16]
    b590:	2300      	movs	r3, #0
    b592:	4681      	mov	r9, r0
    b594:	6143      	str	r3, [r0, #20]
    b596:	e7ef      	b.n	b578 <__mdiff+0x104>
    b598:	4666      	mov	r6, ip
    b59a:	e799      	b.n	b4d0 <__mdiff+0x5c>
    b59c:	0027      	movs	r7, r4
    b59e:	000e      	movs	r6, r1
    b5a0:	46a0      	mov	r8, r4
    b5a2:	3714      	adds	r7, #20
    b5a4:	3614      	adds	r6, #20
    b5a6:	000c      	movs	r4, r1
    b5a8:	2501      	movs	r5, #1
    b5aa:	e791      	b.n	b4d0 <__mdiff+0x5c>

0000b5ac <__d2b>:
    b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ae:	2101      	movs	r1, #1
    b5b0:	001c      	movs	r4, r3
    b5b2:	b083      	sub	sp, #12
    b5b4:	9e08      	ldr	r6, [sp, #32]
    b5b6:	0015      	movs	r5, r2
    b5b8:	f7ff fd0e 	bl	afd8 <_Balloc>
    b5bc:	0323      	lsls	r3, r4, #12
    b5be:	0064      	lsls	r4, r4, #1
    b5c0:	0007      	movs	r7, r0
    b5c2:	0b1b      	lsrs	r3, r3, #12
    b5c4:	0d64      	lsrs	r4, r4, #21
    b5c6:	d002      	beq.n	b5ce <__d2b+0x22>
    b5c8:	2280      	movs	r2, #128	; 0x80
    b5ca:	0352      	lsls	r2, r2, #13
    b5cc:	4313      	orrs	r3, r2
    b5ce:	9301      	str	r3, [sp, #4]
    b5d0:	2d00      	cmp	r5, #0
    b5d2:	d019      	beq.n	b608 <__d2b+0x5c>
    b5d4:	4668      	mov	r0, sp
    b5d6:	9500      	str	r5, [sp, #0]
    b5d8:	f7ff fd90 	bl	b0fc <__lo0bits>
    b5dc:	2800      	cmp	r0, #0
    b5de:	d130      	bne.n	b642 <__d2b+0x96>
    b5e0:	9b00      	ldr	r3, [sp, #0]
    b5e2:	617b      	str	r3, [r7, #20]
    b5e4:	9b01      	ldr	r3, [sp, #4]
    b5e6:	61bb      	str	r3, [r7, #24]
    b5e8:	1e5a      	subs	r2, r3, #1
    b5ea:	4193      	sbcs	r3, r2
    b5ec:	1c5d      	adds	r5, r3, #1
    b5ee:	613d      	str	r5, [r7, #16]
    b5f0:	2c00      	cmp	r4, #0
    b5f2:	d014      	beq.n	b61e <__d2b+0x72>
    b5f4:	4b19      	ldr	r3, [pc, #100]	; (b65c <__d2b+0xb0>)
    b5f6:	469c      	mov	ip, r3
    b5f8:	2335      	movs	r3, #53	; 0x35
    b5fa:	4464      	add	r4, ip
    b5fc:	1824      	adds	r4, r4, r0
    b5fe:	1a18      	subs	r0, r3, r0
    b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b602:	6034      	str	r4, [r6, #0]
    b604:	6018      	str	r0, [r3, #0]
    b606:	e019      	b.n	b63c <__d2b+0x90>
    b608:	a801      	add	r0, sp, #4
    b60a:	f7ff fd77 	bl	b0fc <__lo0bits>
    b60e:	9b01      	ldr	r3, [sp, #4]
    b610:	3020      	adds	r0, #32
    b612:	617b      	str	r3, [r7, #20]
    b614:	2301      	movs	r3, #1
    b616:	2501      	movs	r5, #1
    b618:	613b      	str	r3, [r7, #16]
    b61a:	2c00      	cmp	r4, #0
    b61c:	d1ea      	bne.n	b5f4 <__d2b+0x48>
    b61e:	4b10      	ldr	r3, [pc, #64]	; (b660 <__d2b+0xb4>)
    b620:	469c      	mov	ip, r3
    b622:	4b10      	ldr	r3, [pc, #64]	; (b664 <__d2b+0xb8>)
    b624:	4460      	add	r0, ip
    b626:	18eb      	adds	r3, r5, r3
    b628:	009b      	lsls	r3, r3, #2
    b62a:	18fb      	adds	r3, r7, r3
    b62c:	6030      	str	r0, [r6, #0]
    b62e:	6958      	ldr	r0, [r3, #20]
    b630:	f7ff fd4a 	bl	b0c8 <__hi0bits>
    b634:	016b      	lsls	r3, r5, #5
    b636:	1a18      	subs	r0, r3, r0
    b638:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b63a:	6018      	str	r0, [r3, #0]
    b63c:	0038      	movs	r0, r7
    b63e:	b003      	add	sp, #12
    b640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b642:	9b01      	ldr	r3, [sp, #4]
    b644:	2220      	movs	r2, #32
    b646:	0019      	movs	r1, r3
    b648:	1a12      	subs	r2, r2, r0
    b64a:	4091      	lsls	r1, r2
    b64c:	000a      	movs	r2, r1
    b64e:	40c3      	lsrs	r3, r0
    b650:	9900      	ldr	r1, [sp, #0]
    b652:	9301      	str	r3, [sp, #4]
    b654:	430a      	orrs	r2, r1
    b656:	617a      	str	r2, [r7, #20]
    b658:	e7c5      	b.n	b5e6 <__d2b+0x3a>
    b65a:	46c0      	nop			; (mov r8, r8)
    b65c:	fffffbcd 	.word	0xfffffbcd
    b660:	fffffbce 	.word	0xfffffbce
    b664:	3fffffff 	.word	0x3fffffff

0000b668 <_realloc_r>:
    b668:	b5f0      	push	{r4, r5, r6, r7, lr}
    b66a:	464e      	mov	r6, r9
    b66c:	4645      	mov	r5, r8
    b66e:	46de      	mov	lr, fp
    b670:	4657      	mov	r7, sl
    b672:	b5e0      	push	{r5, r6, r7, lr}
    b674:	b085      	sub	sp, #20
    b676:	9001      	str	r0, [sp, #4]
    b678:	000e      	movs	r6, r1
    b67a:	0015      	movs	r5, r2
    b67c:	2900      	cmp	r1, #0
    b67e:	d100      	bne.n	b682 <_realloc_r+0x1a>
    b680:	e09e      	b.n	b7c0 <_realloc_r+0x158>
    b682:	0037      	movs	r7, r6
    b684:	9801      	ldr	r0, [sp, #4]
    b686:	3f08      	subs	r7, #8
    b688:	f7ff fc96 	bl	afb8 <__malloc_lock>
    b68c:	687a      	ldr	r2, [r7, #4]
    b68e:	2303      	movs	r3, #3
    b690:	0014      	movs	r4, r2
    b692:	439c      	bics	r4, r3
    b694:	002b      	movs	r3, r5
    b696:	330b      	adds	r3, #11
    b698:	46b9      	mov	r9, r7
    b69a:	2b16      	cmp	r3, #22
    b69c:	d847      	bhi.n	b72e <_realloc_r+0xc6>
    b69e:	2110      	movs	r1, #16
    b6a0:	2310      	movs	r3, #16
    b6a2:	4688      	mov	r8, r1
    b6a4:	4545      	cmp	r5, r8
    b6a6:	d846      	bhi.n	b736 <_realloc_r+0xce>
    b6a8:	429c      	cmp	r4, r3
    b6aa:	da49      	bge.n	b740 <_realloc_r+0xd8>
    b6ac:	49cc      	ldr	r1, [pc, #816]	; (b9e0 <_realloc_r+0x378>)
    b6ae:	1938      	adds	r0, r7, r4
    b6b0:	468b      	mov	fp, r1
    b6b2:	6889      	ldr	r1, [r1, #8]
    b6b4:	9002      	str	r0, [sp, #8]
    b6b6:	4288      	cmp	r0, r1
    b6b8:	d100      	bne.n	b6bc <_realloc_r+0x54>
    b6ba:	e0c2      	b.n	b842 <_realloc_r+0x1da>
    b6bc:	2101      	movs	r1, #1
    b6be:	468a      	mov	sl, r1
    b6c0:	6840      	ldr	r0, [r0, #4]
    b6c2:	0001      	movs	r1, r0
    b6c4:	9003      	str	r0, [sp, #12]
    b6c6:	4650      	mov	r0, sl
    b6c8:	4381      	bics	r1, r0
    b6ca:	468c      	mov	ip, r1
    b6cc:	9902      	ldr	r1, [sp, #8]
    b6ce:	468b      	mov	fp, r1
    b6d0:	44dc      	add	ip, fp
    b6d2:	4661      	mov	r1, ip
    b6d4:	6849      	ldr	r1, [r1, #4]
    b6d6:	4201      	tst	r1, r0
    b6d8:	d04d      	beq.n	b776 <_realloc_r+0x10e>
    b6da:	4210      	tst	r0, r2
    b6dc:	d100      	bne.n	b6e0 <_realloc_r+0x78>
    b6de:	e0a2      	b.n	b826 <_realloc_r+0x1be>
    b6e0:	0029      	movs	r1, r5
    b6e2:	9801      	ldr	r0, [sp, #4]
    b6e4:	f7ff f924 	bl	a930 <_malloc_r>
    b6e8:	1e05      	subs	r5, r0, #0
    b6ea:	d039      	beq.n	b760 <_realloc_r+0xf8>
    b6ec:	2301      	movs	r3, #1
    b6ee:	0002      	movs	r2, r0
    b6f0:	6879      	ldr	r1, [r7, #4]
    b6f2:	3a08      	subs	r2, #8
    b6f4:	4399      	bics	r1, r3
    b6f6:	187f      	adds	r7, r7, r1
    b6f8:	42ba      	cmp	r2, r7
    b6fa:	d100      	bne.n	b6fe <_realloc_r+0x96>
    b6fc:	e12e      	b.n	b95c <_realloc_r+0x2f4>
    b6fe:	1f22      	subs	r2, r4, #4
    b700:	2a24      	cmp	r2, #36	; 0x24
    b702:	d900      	bls.n	b706 <_realloc_r+0x9e>
    b704:	e114      	b.n	b930 <_realloc_r+0x2c8>
    b706:	2a13      	cmp	r2, #19
    b708:	d900      	bls.n	b70c <_realloc_r+0xa4>
    b70a:	e0e8      	b.n	b8de <_realloc_r+0x276>
    b70c:	0003      	movs	r3, r0
    b70e:	0032      	movs	r2, r6
    b710:	6811      	ldr	r1, [r2, #0]
    b712:	6019      	str	r1, [r3, #0]
    b714:	6851      	ldr	r1, [r2, #4]
    b716:	6059      	str	r1, [r3, #4]
    b718:	6892      	ldr	r2, [r2, #8]
    b71a:	609a      	str	r2, [r3, #8]
    b71c:	9c01      	ldr	r4, [sp, #4]
    b71e:	0031      	movs	r1, r6
    b720:	0020      	movs	r0, r4
    b722:	f7fe ffb1 	bl	a688 <_free_r>
    b726:	0020      	movs	r0, r4
    b728:	f7ff fc4e 	bl	afc8 <__malloc_unlock>
    b72c:	e01b      	b.n	b766 <_realloc_r+0xfe>
    b72e:	2107      	movs	r1, #7
    b730:	438b      	bics	r3, r1
    b732:	4698      	mov	r8, r3
    b734:	d5b6      	bpl.n	b6a4 <_realloc_r+0x3c>
    b736:	230c      	movs	r3, #12
    b738:	9a01      	ldr	r2, [sp, #4]
    b73a:	2500      	movs	r5, #0
    b73c:	6013      	str	r3, [r2, #0]
    b73e:	e012      	b.n	b766 <_realloc_r+0xfe>
    b740:	0035      	movs	r5, r6
    b742:	4643      	mov	r3, r8
    b744:	1ae3      	subs	r3, r4, r3
    b746:	2b0f      	cmp	r3, #15
    b748:	d825      	bhi.n	b796 <_realloc_r+0x12e>
    b74a:	464b      	mov	r3, r9
    b74c:	2201      	movs	r2, #1
    b74e:	4649      	mov	r1, r9
    b750:	685b      	ldr	r3, [r3, #4]
    b752:	4013      	ands	r3, r2
    b754:	4323      	orrs	r3, r4
    b756:	604b      	str	r3, [r1, #4]
    b758:	444c      	add	r4, r9
    b75a:	6863      	ldr	r3, [r4, #4]
    b75c:	431a      	orrs	r2, r3
    b75e:	6062      	str	r2, [r4, #4]
    b760:	9801      	ldr	r0, [sp, #4]
    b762:	f7ff fc31 	bl	afc8 <__malloc_unlock>
    b766:	0028      	movs	r0, r5
    b768:	b005      	add	sp, #20
    b76a:	bc3c      	pop	{r2, r3, r4, r5}
    b76c:	4690      	mov	r8, r2
    b76e:	4699      	mov	r9, r3
    b770:	46a2      	mov	sl, r4
    b772:	46ab      	mov	fp, r5
    b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b776:	2103      	movs	r1, #3
    b778:	9803      	ldr	r0, [sp, #12]
    b77a:	468c      	mov	ip, r1
    b77c:	4388      	bics	r0, r1
    b77e:	1821      	adds	r1, r4, r0
    b780:	468b      	mov	fp, r1
    b782:	4299      	cmp	r1, r3
    b784:	db21      	blt.n	b7ca <_realloc_r+0x162>
    b786:	9a02      	ldr	r2, [sp, #8]
    b788:	0035      	movs	r5, r6
    b78a:	68d3      	ldr	r3, [r2, #12]
    b78c:	6892      	ldr	r2, [r2, #8]
    b78e:	465c      	mov	r4, fp
    b790:	60d3      	str	r3, [r2, #12]
    b792:	609a      	str	r2, [r3, #8]
    b794:	e7d5      	b.n	b742 <_realloc_r+0xda>
    b796:	464a      	mov	r2, r9
    b798:	2001      	movs	r0, #1
    b79a:	4646      	mov	r6, r8
    b79c:	6852      	ldr	r2, [r2, #4]
    b79e:	4649      	mov	r1, r9
    b7a0:	4002      	ands	r2, r0
    b7a2:	4332      	orrs	r2, r6
    b7a4:	464e      	mov	r6, r9
    b7a6:	4441      	add	r1, r8
    b7a8:	4303      	orrs	r3, r0
    b7aa:	6072      	str	r2, [r6, #4]
    b7ac:	444c      	add	r4, r9
    b7ae:	604b      	str	r3, [r1, #4]
    b7b0:	6863      	ldr	r3, [r4, #4]
    b7b2:	3108      	adds	r1, #8
    b7b4:	4318      	orrs	r0, r3
    b7b6:	6060      	str	r0, [r4, #4]
    b7b8:	9801      	ldr	r0, [sp, #4]
    b7ba:	f7fe ff65 	bl	a688 <_free_r>
    b7be:	e7cf      	b.n	b760 <_realloc_r+0xf8>
    b7c0:	0011      	movs	r1, r2
    b7c2:	f7ff f8b5 	bl	a930 <_malloc_r>
    b7c6:	0005      	movs	r5, r0
    b7c8:	e7cd      	b.n	b766 <_realloc_r+0xfe>
    b7ca:	4651      	mov	r1, sl
    b7cc:	4211      	tst	r1, r2
    b7ce:	d000      	beq.n	b7d2 <_realloc_r+0x16a>
    b7d0:	e786      	b.n	b6e0 <_realloc_r+0x78>
    b7d2:	4661      	mov	r1, ip
    b7d4:	683a      	ldr	r2, [r7, #0]
    b7d6:	1aba      	subs	r2, r7, r2
    b7d8:	4692      	mov	sl, r2
    b7da:	6852      	ldr	r2, [r2, #4]
    b7dc:	438a      	bics	r2, r1
    b7de:	1880      	adds	r0, r0, r2
    b7e0:	4683      	mov	fp, r0
    b7e2:	44a3      	add	fp, r4
    b7e4:	459b      	cmp	fp, r3
    b7e6:	db26      	blt.n	b836 <_realloc_r+0x1ce>
    b7e8:	9a02      	ldr	r2, [sp, #8]
    b7ea:	68d3      	ldr	r3, [r2, #12]
    b7ec:	6892      	ldr	r2, [r2, #8]
    b7ee:	60d3      	str	r3, [r2, #12]
    b7f0:	609a      	str	r2, [r3, #8]
    b7f2:	4653      	mov	r3, sl
    b7f4:	4652      	mov	r2, sl
    b7f6:	4655      	mov	r5, sl
    b7f8:	6892      	ldr	r2, [r2, #8]
    b7fa:	68db      	ldr	r3, [r3, #12]
    b7fc:	3508      	adds	r5, #8
    b7fe:	60d3      	str	r3, [r2, #12]
    b800:	609a      	str	r2, [r3, #8]
    b802:	1f22      	subs	r2, r4, #4
    b804:	2a24      	cmp	r2, #36	; 0x24
    b806:	d900      	bls.n	b80a <_realloc_r+0x1a2>
    b808:	e096      	b.n	b938 <_realloc_r+0x2d0>
    b80a:	2a13      	cmp	r2, #19
    b80c:	d972      	bls.n	b8f4 <_realloc_r+0x28c>
    b80e:	4653      	mov	r3, sl
    b810:	6831      	ldr	r1, [r6, #0]
    b812:	6099      	str	r1, [r3, #8]
    b814:	6871      	ldr	r1, [r6, #4]
    b816:	60d9      	str	r1, [r3, #12]
    b818:	2a1b      	cmp	r2, #27
    b81a:	d900      	bls.n	b81e <_realloc_r+0x1b6>
    b81c:	e0a4      	b.n	b968 <_realloc_r+0x300>
    b81e:	0032      	movs	r2, r6
    b820:	3310      	adds	r3, #16
    b822:	3208      	adds	r2, #8
    b824:	e068      	b.n	b8f8 <_realloc_r+0x290>
    b826:	683a      	ldr	r2, [r7, #0]
    b828:	1aba      	subs	r2, r7, r2
    b82a:	4692      	mov	sl, r2
    b82c:	4651      	mov	r1, sl
    b82e:	2203      	movs	r2, #3
    b830:	6849      	ldr	r1, [r1, #4]
    b832:	4391      	bics	r1, r2
    b834:	000a      	movs	r2, r1
    b836:	4693      	mov	fp, r2
    b838:	44a3      	add	fp, r4
    b83a:	459b      	cmp	fp, r3
    b83c:	da00      	bge.n	b840 <_realloc_r+0x1d8>
    b83e:	e74f      	b.n	b6e0 <_realloc_r+0x78>
    b840:	e7d7      	b.n	b7f2 <_realloc_r+0x18a>
    b842:	2003      	movs	r0, #3
    b844:	9902      	ldr	r1, [sp, #8]
    b846:	4684      	mov	ip, r0
    b848:	6849      	ldr	r1, [r1, #4]
    b84a:	4381      	bics	r1, r0
    b84c:	4640      	mov	r0, r8
    b84e:	1909      	adds	r1, r1, r4
    b850:	3010      	adds	r0, #16
    b852:	9002      	str	r0, [sp, #8]
    b854:	4281      	cmp	r1, r0
    b856:	da58      	bge.n	b90a <_realloc_r+0x2a2>
    b858:	07d2      	lsls	r2, r2, #31
    b85a:	d500      	bpl.n	b85e <_realloc_r+0x1f6>
    b85c:	e740      	b.n	b6e0 <_realloc_r+0x78>
    b85e:	4660      	mov	r0, ip
    b860:	683a      	ldr	r2, [r7, #0]
    b862:	1aba      	subs	r2, r7, r2
    b864:	4692      	mov	sl, r2
    b866:	6852      	ldr	r2, [r2, #4]
    b868:	4382      	bics	r2, r0
    b86a:	9802      	ldr	r0, [sp, #8]
    b86c:	1851      	adds	r1, r2, r1
    b86e:	9103      	str	r1, [sp, #12]
    b870:	4288      	cmp	r0, r1
    b872:	dce0      	bgt.n	b836 <_realloc_r+0x1ce>
    b874:	4653      	mov	r3, sl
    b876:	4652      	mov	r2, sl
    b878:	4655      	mov	r5, sl
    b87a:	6892      	ldr	r2, [r2, #8]
    b87c:	68db      	ldr	r3, [r3, #12]
    b87e:	3508      	adds	r5, #8
    b880:	60d3      	str	r3, [r2, #12]
    b882:	609a      	str	r2, [r3, #8]
    b884:	1f22      	subs	r2, r4, #4
    b886:	2a24      	cmp	r2, #36	; 0x24
    b888:	d900      	bls.n	b88c <_realloc_r+0x224>
    b88a:	e08e      	b.n	b9aa <_realloc_r+0x342>
    b88c:	2a13      	cmp	r2, #19
    b88e:	d800      	bhi.n	b892 <_realloc_r+0x22a>
    b890:	e088      	b.n	b9a4 <_realloc_r+0x33c>
    b892:	4653      	mov	r3, sl
    b894:	6831      	ldr	r1, [r6, #0]
    b896:	6099      	str	r1, [r3, #8]
    b898:	6871      	ldr	r1, [r6, #4]
    b89a:	60d9      	str	r1, [r3, #12]
    b89c:	2a1b      	cmp	r2, #27
    b89e:	d900      	bls.n	b8a2 <_realloc_r+0x23a>
    b8a0:	e088      	b.n	b9b4 <_realloc_r+0x34c>
    b8a2:	0032      	movs	r2, r6
    b8a4:	3310      	adds	r3, #16
    b8a6:	3208      	adds	r2, #8
    b8a8:	6811      	ldr	r1, [r2, #0]
    b8aa:	6019      	str	r1, [r3, #0]
    b8ac:	6851      	ldr	r1, [r2, #4]
    b8ae:	6059      	str	r1, [r3, #4]
    b8b0:	6892      	ldr	r2, [r2, #8]
    b8b2:	609a      	str	r2, [r3, #8]
    b8b4:	4651      	mov	r1, sl
    b8b6:	465b      	mov	r3, fp
    b8b8:	4642      	mov	r2, r8
    b8ba:	4441      	add	r1, r8
    b8bc:	6099      	str	r1, [r3, #8]
    b8be:	9b03      	ldr	r3, [sp, #12]
    b8c0:	9801      	ldr	r0, [sp, #4]
    b8c2:	1a9a      	subs	r2, r3, r2
    b8c4:	2301      	movs	r3, #1
    b8c6:	431a      	orrs	r2, r3
    b8c8:	604a      	str	r2, [r1, #4]
    b8ca:	4652      	mov	r2, sl
    b8cc:	6852      	ldr	r2, [r2, #4]
    b8ce:	4013      	ands	r3, r2
    b8d0:	4642      	mov	r2, r8
    b8d2:	4313      	orrs	r3, r2
    b8d4:	4652      	mov	r2, sl
    b8d6:	6053      	str	r3, [r2, #4]
    b8d8:	f7ff fb76 	bl	afc8 <__malloc_unlock>
    b8dc:	e743      	b.n	b766 <_realloc_r+0xfe>
    b8de:	6833      	ldr	r3, [r6, #0]
    b8e0:	6003      	str	r3, [r0, #0]
    b8e2:	6873      	ldr	r3, [r6, #4]
    b8e4:	6043      	str	r3, [r0, #4]
    b8e6:	2a1b      	cmp	r2, #27
    b8e8:	d82d      	bhi.n	b946 <_realloc_r+0x2de>
    b8ea:	0003      	movs	r3, r0
    b8ec:	0032      	movs	r2, r6
    b8ee:	3308      	adds	r3, #8
    b8f0:	3208      	adds	r2, #8
    b8f2:	e70d      	b.n	b710 <_realloc_r+0xa8>
    b8f4:	002b      	movs	r3, r5
    b8f6:	0032      	movs	r2, r6
    b8f8:	6811      	ldr	r1, [r2, #0]
    b8fa:	465c      	mov	r4, fp
    b8fc:	6019      	str	r1, [r3, #0]
    b8fe:	6851      	ldr	r1, [r2, #4]
    b900:	46d1      	mov	r9, sl
    b902:	6059      	str	r1, [r3, #4]
    b904:	6892      	ldr	r2, [r2, #8]
    b906:	609a      	str	r2, [r3, #8]
    b908:	e71b      	b.n	b742 <_realloc_r+0xda>
    b90a:	4643      	mov	r3, r8
    b90c:	18fa      	adds	r2, r7, r3
    b90e:	465b      	mov	r3, fp
    b910:	609a      	str	r2, [r3, #8]
    b912:	4643      	mov	r3, r8
    b914:	1ac9      	subs	r1, r1, r3
    b916:	2301      	movs	r3, #1
    b918:	4319      	orrs	r1, r3
    b91a:	6051      	str	r1, [r2, #4]
    b91c:	687a      	ldr	r2, [r7, #4]
    b91e:	9801      	ldr	r0, [sp, #4]
    b920:	4013      	ands	r3, r2
    b922:	4642      	mov	r2, r8
    b924:	4313      	orrs	r3, r2
    b926:	607b      	str	r3, [r7, #4]
    b928:	f7ff fb4e 	bl	afc8 <__malloc_unlock>
    b92c:	0035      	movs	r5, r6
    b92e:	e71a      	b.n	b766 <_realloc_r+0xfe>
    b930:	0031      	movs	r1, r6
    b932:	f7ff faf1 	bl	af18 <memmove>
    b936:	e6f1      	b.n	b71c <_realloc_r+0xb4>
    b938:	0031      	movs	r1, r6
    b93a:	0028      	movs	r0, r5
    b93c:	f7ff faec 	bl	af18 <memmove>
    b940:	465c      	mov	r4, fp
    b942:	46d1      	mov	r9, sl
    b944:	e6fd      	b.n	b742 <_realloc_r+0xda>
    b946:	68b3      	ldr	r3, [r6, #8]
    b948:	6083      	str	r3, [r0, #8]
    b94a:	68f3      	ldr	r3, [r6, #12]
    b94c:	60c3      	str	r3, [r0, #12]
    b94e:	2a24      	cmp	r2, #36	; 0x24
    b950:	d015      	beq.n	b97e <_realloc_r+0x316>
    b952:	0003      	movs	r3, r0
    b954:	0032      	movs	r2, r6
    b956:	3310      	adds	r3, #16
    b958:	3210      	adds	r2, #16
    b95a:	e6d9      	b.n	b710 <_realloc_r+0xa8>
    b95c:	6853      	ldr	r3, [r2, #4]
    b95e:	2203      	movs	r2, #3
    b960:	4393      	bics	r3, r2
    b962:	18e4      	adds	r4, r4, r3
    b964:	0035      	movs	r5, r6
    b966:	e6ec      	b.n	b742 <_realloc_r+0xda>
    b968:	4653      	mov	r3, sl
    b96a:	68b1      	ldr	r1, [r6, #8]
    b96c:	6119      	str	r1, [r3, #16]
    b96e:	68f1      	ldr	r1, [r6, #12]
    b970:	6159      	str	r1, [r3, #20]
    b972:	2a24      	cmp	r2, #36	; 0x24
    b974:	d00c      	beq.n	b990 <_realloc_r+0x328>
    b976:	0032      	movs	r2, r6
    b978:	3318      	adds	r3, #24
    b97a:	3210      	adds	r2, #16
    b97c:	e7bc      	b.n	b8f8 <_realloc_r+0x290>
    b97e:	6933      	ldr	r3, [r6, #16]
    b980:	0032      	movs	r2, r6
    b982:	6103      	str	r3, [r0, #16]
    b984:	0003      	movs	r3, r0
    b986:	6971      	ldr	r1, [r6, #20]
    b988:	3318      	adds	r3, #24
    b98a:	3218      	adds	r2, #24
    b98c:	6141      	str	r1, [r0, #20]
    b98e:	e6bf      	b.n	b710 <_realloc_r+0xa8>
    b990:	4653      	mov	r3, sl
    b992:	6932      	ldr	r2, [r6, #16]
    b994:	4651      	mov	r1, sl
    b996:	619a      	str	r2, [r3, #24]
    b998:	0032      	movs	r2, r6
    b99a:	6970      	ldr	r0, [r6, #20]
    b99c:	3320      	adds	r3, #32
    b99e:	3218      	adds	r2, #24
    b9a0:	61c8      	str	r0, [r1, #28]
    b9a2:	e7a9      	b.n	b8f8 <_realloc_r+0x290>
    b9a4:	002b      	movs	r3, r5
    b9a6:	0032      	movs	r2, r6
    b9a8:	e77e      	b.n	b8a8 <_realloc_r+0x240>
    b9aa:	0031      	movs	r1, r6
    b9ac:	0028      	movs	r0, r5
    b9ae:	f7ff fab3 	bl	af18 <memmove>
    b9b2:	e77f      	b.n	b8b4 <_realloc_r+0x24c>
    b9b4:	4653      	mov	r3, sl
    b9b6:	68b1      	ldr	r1, [r6, #8]
    b9b8:	6119      	str	r1, [r3, #16]
    b9ba:	68f1      	ldr	r1, [r6, #12]
    b9bc:	6159      	str	r1, [r3, #20]
    b9be:	2a24      	cmp	r2, #36	; 0x24
    b9c0:	d003      	beq.n	b9ca <_realloc_r+0x362>
    b9c2:	0032      	movs	r2, r6
    b9c4:	3318      	adds	r3, #24
    b9c6:	3210      	adds	r2, #16
    b9c8:	e76e      	b.n	b8a8 <_realloc_r+0x240>
    b9ca:	4653      	mov	r3, sl
    b9cc:	6932      	ldr	r2, [r6, #16]
    b9ce:	4651      	mov	r1, sl
    b9d0:	619a      	str	r2, [r3, #24]
    b9d2:	0032      	movs	r2, r6
    b9d4:	6970      	ldr	r0, [r6, #20]
    b9d6:	3320      	adds	r3, #32
    b9d8:	3218      	adds	r2, #24
    b9da:	61c8      	str	r0, [r1, #28]
    b9dc:	e764      	b.n	b8a8 <_realloc_r+0x240>
    b9de:	46c0      	nop			; (mov r8, r8)
    b9e0:	200004e4 	.word	0x200004e4

0000b9e4 <_sbrk_r>:
    b9e4:	2300      	movs	r3, #0
    b9e6:	b570      	push	{r4, r5, r6, lr}
    b9e8:	4c06      	ldr	r4, [pc, #24]	; (ba04 <_sbrk_r+0x20>)
    b9ea:	0005      	movs	r5, r0
    b9ec:	0008      	movs	r0, r1
    b9ee:	6023      	str	r3, [r4, #0]
    b9f0:	f7f6 ff1a 	bl	2828 <_sbrk>
    b9f4:	1c43      	adds	r3, r0, #1
    b9f6:	d000      	beq.n	b9fa <_sbrk_r+0x16>
    b9f8:	bd70      	pop	{r4, r5, r6, pc}
    b9fa:	6823      	ldr	r3, [r4, #0]
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	d0fb      	beq.n	b9f8 <_sbrk_r+0x14>
    ba00:	602b      	str	r3, [r5, #0]
    ba02:	e7f9      	b.n	b9f8 <_sbrk_r+0x14>
    ba04:	20001710 	.word	0x20001710

0000ba08 <__sread>:
    ba08:	b570      	push	{r4, r5, r6, lr}
    ba0a:	000c      	movs	r4, r1
    ba0c:	250e      	movs	r5, #14
    ba0e:	5f49      	ldrsh	r1, [r1, r5]
    ba10:	f000 fa48 	bl	bea4 <_read_r>
    ba14:	2800      	cmp	r0, #0
    ba16:	db03      	blt.n	ba20 <__sread+0x18>
    ba18:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ba1a:	181b      	adds	r3, r3, r0
    ba1c:	6523      	str	r3, [r4, #80]	; 0x50
    ba1e:	bd70      	pop	{r4, r5, r6, pc}
    ba20:	89a3      	ldrh	r3, [r4, #12]
    ba22:	4a02      	ldr	r2, [pc, #8]	; (ba2c <__sread+0x24>)
    ba24:	4013      	ands	r3, r2
    ba26:	81a3      	strh	r3, [r4, #12]
    ba28:	e7f9      	b.n	ba1e <__sread+0x16>
    ba2a:	46c0      	nop			; (mov r8, r8)
    ba2c:	ffffefff 	.word	0xffffefff

0000ba30 <__swrite>:
    ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba32:	0016      	movs	r6, r2
    ba34:	001f      	movs	r7, r3
    ba36:	220c      	movs	r2, #12
    ba38:	5e8b      	ldrsh	r3, [r1, r2]
    ba3a:	0005      	movs	r5, r0
    ba3c:	000c      	movs	r4, r1
    ba3e:	05da      	lsls	r2, r3, #23
    ba40:	d507      	bpl.n	ba52 <__swrite+0x22>
    ba42:	230e      	movs	r3, #14
    ba44:	5ec9      	ldrsh	r1, [r1, r3]
    ba46:	2200      	movs	r2, #0
    ba48:	2302      	movs	r3, #2
    ba4a:	f000 fa01 	bl	be50 <_lseek_r>
    ba4e:	220c      	movs	r2, #12
    ba50:	5ea3      	ldrsh	r3, [r4, r2]
    ba52:	4a05      	ldr	r2, [pc, #20]	; (ba68 <__swrite+0x38>)
    ba54:	0028      	movs	r0, r5
    ba56:	4013      	ands	r3, r2
    ba58:	81a3      	strh	r3, [r4, #12]
    ba5a:	0032      	movs	r2, r6
    ba5c:	230e      	movs	r3, #14
    ba5e:	5ee1      	ldrsh	r1, [r4, r3]
    ba60:	003b      	movs	r3, r7
    ba62:	f000 f8af 	bl	bbc4 <_write_r>
    ba66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba68:	ffffefff 	.word	0xffffefff

0000ba6c <__sseek>:
    ba6c:	b570      	push	{r4, r5, r6, lr}
    ba6e:	000c      	movs	r4, r1
    ba70:	250e      	movs	r5, #14
    ba72:	5f49      	ldrsh	r1, [r1, r5]
    ba74:	f000 f9ec 	bl	be50 <_lseek_r>
    ba78:	1c43      	adds	r3, r0, #1
    ba7a:	d006      	beq.n	ba8a <__sseek+0x1e>
    ba7c:	2380      	movs	r3, #128	; 0x80
    ba7e:	89a2      	ldrh	r2, [r4, #12]
    ba80:	015b      	lsls	r3, r3, #5
    ba82:	4313      	orrs	r3, r2
    ba84:	81a3      	strh	r3, [r4, #12]
    ba86:	6520      	str	r0, [r4, #80]	; 0x50
    ba88:	bd70      	pop	{r4, r5, r6, pc}
    ba8a:	89a3      	ldrh	r3, [r4, #12]
    ba8c:	4a01      	ldr	r2, [pc, #4]	; (ba94 <__sseek+0x28>)
    ba8e:	4013      	ands	r3, r2
    ba90:	81a3      	strh	r3, [r4, #12]
    ba92:	e7f9      	b.n	ba88 <__sseek+0x1c>
    ba94:	ffffefff 	.word	0xffffefff

0000ba98 <__sclose>:
    ba98:	b510      	push	{r4, lr}
    ba9a:	230e      	movs	r3, #14
    ba9c:	5ec9      	ldrsh	r1, [r1, r3]
    ba9e:	f000 f94b 	bl	bd38 <_close_r>
    baa2:	bd10      	pop	{r4, pc}

0000baa4 <__ssprint_r>:
    baa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    baa6:	4657      	mov	r7, sl
    baa8:	464e      	mov	r6, r9
    baaa:	46de      	mov	lr, fp
    baac:	4645      	mov	r5, r8
    baae:	b5e0      	push	{r5, r6, r7, lr}
    bab0:	6893      	ldr	r3, [r2, #8]
    bab2:	b083      	sub	sp, #12
    bab4:	9001      	str	r0, [sp, #4]
    bab6:	000e      	movs	r6, r1
    bab8:	4692      	mov	sl, r2
    baba:	2b00      	cmp	r3, #0
    babc:	d070      	beq.n	bba0 <__ssprint_r+0xfc>
    babe:	688d      	ldr	r5, [r1, #8]
    bac0:	6813      	ldr	r3, [r2, #0]
    bac2:	002c      	movs	r4, r5
    bac4:	6808      	ldr	r0, [r1, #0]
    bac6:	001d      	movs	r5, r3
    bac8:	e046      	b.n	bb58 <__ssprint_r+0xb4>
    baca:	2290      	movs	r2, #144	; 0x90
    bacc:	89b3      	ldrh	r3, [r6, #12]
    bace:	00d2      	lsls	r2, r2, #3
    bad0:	4213      	tst	r3, r2
    bad2:	d030      	beq.n	bb36 <__ssprint_r+0x92>
    bad4:	6931      	ldr	r1, [r6, #16]
    bad6:	1a42      	subs	r2, r0, r1
    bad8:	4693      	mov	fp, r2
    bada:	6970      	ldr	r0, [r6, #20]
    badc:	0042      	lsls	r2, r0, #1
    bade:	1812      	adds	r2, r2, r0
    bae0:	0fd0      	lsrs	r0, r2, #31
    bae2:	1882      	adds	r2, r0, r2
    bae4:	1052      	asrs	r2, r2, #1
    bae6:	4690      	mov	r8, r2
    bae8:	465a      	mov	r2, fp
    baea:	1c50      	adds	r0, r2, #1
    baec:	19c0      	adds	r0, r0, r7
    baee:	4642      	mov	r2, r8
    baf0:	4540      	cmp	r0, r8
    baf2:	d901      	bls.n	baf8 <__ssprint_r+0x54>
    baf4:	4680      	mov	r8, r0
    baf6:	0002      	movs	r2, r0
    baf8:	2080      	movs	r0, #128	; 0x80
    bafa:	00c0      	lsls	r0, r0, #3
    bafc:	4203      	tst	r3, r0
    bafe:	d038      	beq.n	bb72 <__ssprint_r+0xce>
    bb00:	0011      	movs	r1, r2
    bb02:	9801      	ldr	r0, [sp, #4]
    bb04:	f7fe ff14 	bl	a930 <_malloc_r>
    bb08:	1e04      	subs	r4, r0, #0
    bb0a:	d054      	beq.n	bbb6 <__ssprint_r+0x112>
    bb0c:	465a      	mov	r2, fp
    bb0e:	6931      	ldr	r1, [r6, #16]
    bb10:	f7fb fece 	bl	78b0 <memcpy>
    bb14:	89b3      	ldrh	r3, [r6, #12]
    bb16:	4a2a      	ldr	r2, [pc, #168]	; (bbc0 <__ssprint_r+0x11c>)
    bb18:	4013      	ands	r3, r2
    bb1a:	2280      	movs	r2, #128	; 0x80
    bb1c:	4313      	orrs	r3, r2
    bb1e:	81b3      	strh	r3, [r6, #12]
    bb20:	4643      	mov	r3, r8
    bb22:	0020      	movs	r0, r4
    bb24:	465a      	mov	r2, fp
    bb26:	6134      	str	r4, [r6, #16]
    bb28:	46b8      	mov	r8, r7
    bb2a:	003c      	movs	r4, r7
    bb2c:	4458      	add	r0, fp
    bb2e:	6173      	str	r3, [r6, #20]
    bb30:	1a9b      	subs	r3, r3, r2
    bb32:	6030      	str	r0, [r6, #0]
    bb34:	60b3      	str	r3, [r6, #8]
    bb36:	4642      	mov	r2, r8
    bb38:	4649      	mov	r1, r9
    bb3a:	f7ff f9ed 	bl	af18 <memmove>
    bb3e:	68b3      	ldr	r3, [r6, #8]
    bb40:	1b1c      	subs	r4, r3, r4
    bb42:	6833      	ldr	r3, [r6, #0]
    bb44:	60b4      	str	r4, [r6, #8]
    bb46:	4443      	add	r3, r8
    bb48:	6033      	str	r3, [r6, #0]
    bb4a:	0018      	movs	r0, r3
    bb4c:	4653      	mov	r3, sl
    bb4e:	689b      	ldr	r3, [r3, #8]
    bb50:	1bdf      	subs	r7, r3, r7
    bb52:	4653      	mov	r3, sl
    bb54:	609f      	str	r7, [r3, #8]
    bb56:	d023      	beq.n	bba0 <__ssprint_r+0xfc>
    bb58:	686f      	ldr	r7, [r5, #4]
    bb5a:	002b      	movs	r3, r5
    bb5c:	3508      	adds	r5, #8
    bb5e:	2f00      	cmp	r7, #0
    bb60:	d0fa      	beq.n	bb58 <__ssprint_r+0xb4>
    bb62:	681b      	ldr	r3, [r3, #0]
    bb64:	46a0      	mov	r8, r4
    bb66:	4699      	mov	r9, r3
    bb68:	42a7      	cmp	r7, r4
    bb6a:	d2ae      	bcs.n	baca <__ssprint_r+0x26>
    bb6c:	003c      	movs	r4, r7
    bb6e:	46b8      	mov	r8, r7
    bb70:	e7e1      	b.n	bb36 <__ssprint_r+0x92>
    bb72:	9801      	ldr	r0, [sp, #4]
    bb74:	f7ff fd78 	bl	b668 <_realloc_r>
    bb78:	1e04      	subs	r4, r0, #0
    bb7a:	d1d1      	bne.n	bb20 <__ssprint_r+0x7c>
    bb7c:	9c01      	ldr	r4, [sp, #4]
    bb7e:	6931      	ldr	r1, [r6, #16]
    bb80:	0020      	movs	r0, r4
    bb82:	f7fe fd81 	bl	a688 <_free_r>
    bb86:	230c      	movs	r3, #12
    bb88:	6023      	str	r3, [r4, #0]
    bb8a:	2240      	movs	r2, #64	; 0x40
    bb8c:	89b3      	ldrh	r3, [r6, #12]
    bb8e:	2001      	movs	r0, #1
    bb90:	4313      	orrs	r3, r2
    bb92:	81b3      	strh	r3, [r6, #12]
    bb94:	4652      	mov	r2, sl
    bb96:	2300      	movs	r3, #0
    bb98:	4240      	negs	r0, r0
    bb9a:	6093      	str	r3, [r2, #8]
    bb9c:	6053      	str	r3, [r2, #4]
    bb9e:	e003      	b.n	bba8 <__ssprint_r+0x104>
    bba0:	2300      	movs	r3, #0
    bba2:	4652      	mov	r2, sl
    bba4:	2000      	movs	r0, #0
    bba6:	6053      	str	r3, [r2, #4]
    bba8:	b003      	add	sp, #12
    bbaa:	bc3c      	pop	{r2, r3, r4, r5}
    bbac:	4690      	mov	r8, r2
    bbae:	4699      	mov	r9, r3
    bbb0:	46a2      	mov	sl, r4
    bbb2:	46ab      	mov	fp, r5
    bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbb6:	230c      	movs	r3, #12
    bbb8:	9a01      	ldr	r2, [sp, #4]
    bbba:	6013      	str	r3, [r2, #0]
    bbbc:	e7e5      	b.n	bb8a <__ssprint_r+0xe6>
    bbbe:	46c0      	nop			; (mov r8, r8)
    bbc0:	fffffb7f 	.word	0xfffffb7f

0000bbc4 <_write_r>:
    bbc4:	b570      	push	{r4, r5, r6, lr}
    bbc6:	0005      	movs	r5, r0
    bbc8:	0008      	movs	r0, r1
    bbca:	0011      	movs	r1, r2
    bbcc:	2200      	movs	r2, #0
    bbce:	4c06      	ldr	r4, [pc, #24]	; (bbe8 <_write_r+0x24>)
    bbd0:	6022      	str	r2, [r4, #0]
    bbd2:	001a      	movs	r2, r3
    bbd4:	f7f9 f852 	bl	4c7c <_write>
    bbd8:	1c43      	adds	r3, r0, #1
    bbda:	d000      	beq.n	bbde <_write_r+0x1a>
    bbdc:	bd70      	pop	{r4, r5, r6, pc}
    bbde:	6823      	ldr	r3, [r4, #0]
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	d0fb      	beq.n	bbdc <_write_r+0x18>
    bbe4:	602b      	str	r3, [r5, #0]
    bbe6:	e7f9      	b.n	bbdc <_write_r+0x18>
    bbe8:	20001710 	.word	0x20001710

0000bbec <__register_exitproc>:
    bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbee:	464e      	mov	r6, r9
    bbf0:	4645      	mov	r5, r8
    bbf2:	46de      	mov	lr, fp
    bbf4:	4657      	mov	r7, sl
    bbf6:	b5e0      	push	{r5, r6, r7, lr}
    bbf8:	4d36      	ldr	r5, [pc, #216]	; (bcd4 <__register_exitproc+0xe8>)
    bbfa:	b083      	sub	sp, #12
    bbfc:	0006      	movs	r6, r0
    bbfe:	6828      	ldr	r0, [r5, #0]
    bc00:	4698      	mov	r8, r3
    bc02:	000f      	movs	r7, r1
    bc04:	4691      	mov	r9, r2
    bc06:	f7fe fe55 	bl	a8b4 <__retarget_lock_acquire_recursive>
    bc0a:	4b33      	ldr	r3, [pc, #204]	; (bcd8 <__register_exitproc+0xec>)
    bc0c:	681c      	ldr	r4, [r3, #0]
    bc0e:	23a4      	movs	r3, #164	; 0xa4
    bc10:	005b      	lsls	r3, r3, #1
    bc12:	58e0      	ldr	r0, [r4, r3]
    bc14:	2800      	cmp	r0, #0
    bc16:	d052      	beq.n	bcbe <__register_exitproc+0xd2>
    bc18:	6843      	ldr	r3, [r0, #4]
    bc1a:	2b1f      	cmp	r3, #31
    bc1c:	dc13      	bgt.n	bc46 <__register_exitproc+0x5a>
    bc1e:	1c5a      	adds	r2, r3, #1
    bc20:	9201      	str	r2, [sp, #4]
    bc22:	2e00      	cmp	r6, #0
    bc24:	d128      	bne.n	bc78 <__register_exitproc+0x8c>
    bc26:	9a01      	ldr	r2, [sp, #4]
    bc28:	3302      	adds	r3, #2
    bc2a:	009b      	lsls	r3, r3, #2
    bc2c:	6042      	str	r2, [r0, #4]
    bc2e:	501f      	str	r7, [r3, r0]
    bc30:	6828      	ldr	r0, [r5, #0]
    bc32:	f7fe fe41 	bl	a8b8 <__retarget_lock_release_recursive>
    bc36:	2000      	movs	r0, #0
    bc38:	b003      	add	sp, #12
    bc3a:	bc3c      	pop	{r2, r3, r4, r5}
    bc3c:	4690      	mov	r8, r2
    bc3e:	4699      	mov	r9, r3
    bc40:	46a2      	mov	sl, r4
    bc42:	46ab      	mov	fp, r5
    bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc46:	4b25      	ldr	r3, [pc, #148]	; (bcdc <__register_exitproc+0xf0>)
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d03d      	beq.n	bcc8 <__register_exitproc+0xdc>
    bc4c:	20c8      	movs	r0, #200	; 0xc8
    bc4e:	0040      	lsls	r0, r0, #1
    bc50:	f7fe fe64 	bl	a91c <malloc>
    bc54:	2800      	cmp	r0, #0
    bc56:	d037      	beq.n	bcc8 <__register_exitproc+0xdc>
    bc58:	22a4      	movs	r2, #164	; 0xa4
    bc5a:	2300      	movs	r3, #0
    bc5c:	0052      	lsls	r2, r2, #1
    bc5e:	58a1      	ldr	r1, [r4, r2]
    bc60:	6043      	str	r3, [r0, #4]
    bc62:	6001      	str	r1, [r0, #0]
    bc64:	50a0      	str	r0, [r4, r2]
    bc66:	3240      	adds	r2, #64	; 0x40
    bc68:	5083      	str	r3, [r0, r2]
    bc6a:	3204      	adds	r2, #4
    bc6c:	5083      	str	r3, [r0, r2]
    bc6e:	3301      	adds	r3, #1
    bc70:	9301      	str	r3, [sp, #4]
    bc72:	2300      	movs	r3, #0
    bc74:	2e00      	cmp	r6, #0
    bc76:	d0d6      	beq.n	bc26 <__register_exitproc+0x3a>
    bc78:	009a      	lsls	r2, r3, #2
    bc7a:	4692      	mov	sl, r2
    bc7c:	4482      	add	sl, r0
    bc7e:	464a      	mov	r2, r9
    bc80:	2188      	movs	r1, #136	; 0x88
    bc82:	4654      	mov	r4, sl
    bc84:	5062      	str	r2, [r4, r1]
    bc86:	22c4      	movs	r2, #196	; 0xc4
    bc88:	0052      	lsls	r2, r2, #1
    bc8a:	4691      	mov	r9, r2
    bc8c:	4481      	add	r9, r0
    bc8e:	464a      	mov	r2, r9
    bc90:	3987      	subs	r1, #135	; 0x87
    bc92:	4099      	lsls	r1, r3
    bc94:	6812      	ldr	r2, [r2, #0]
    bc96:	468b      	mov	fp, r1
    bc98:	430a      	orrs	r2, r1
    bc9a:	4694      	mov	ip, r2
    bc9c:	464a      	mov	r2, r9
    bc9e:	4661      	mov	r1, ip
    bca0:	6011      	str	r1, [r2, #0]
    bca2:	2284      	movs	r2, #132	; 0x84
    bca4:	4641      	mov	r1, r8
    bca6:	0052      	lsls	r2, r2, #1
    bca8:	50a1      	str	r1, [r4, r2]
    bcaa:	2e02      	cmp	r6, #2
    bcac:	d1bb      	bne.n	bc26 <__register_exitproc+0x3a>
    bcae:	0002      	movs	r2, r0
    bcb0:	465c      	mov	r4, fp
    bcb2:	328d      	adds	r2, #141	; 0x8d
    bcb4:	32ff      	adds	r2, #255	; 0xff
    bcb6:	6811      	ldr	r1, [r2, #0]
    bcb8:	430c      	orrs	r4, r1
    bcba:	6014      	str	r4, [r2, #0]
    bcbc:	e7b3      	b.n	bc26 <__register_exitproc+0x3a>
    bcbe:	0020      	movs	r0, r4
    bcc0:	304d      	adds	r0, #77	; 0x4d
    bcc2:	30ff      	adds	r0, #255	; 0xff
    bcc4:	50e0      	str	r0, [r4, r3]
    bcc6:	e7a7      	b.n	bc18 <__register_exitproc+0x2c>
    bcc8:	6828      	ldr	r0, [r5, #0]
    bcca:	f7fe fdf5 	bl	a8b8 <__retarget_lock_release_recursive>
    bcce:	2001      	movs	r0, #1
    bcd0:	4240      	negs	r0, r0
    bcd2:	e7b1      	b.n	bc38 <__register_exitproc+0x4c>
    bcd4:	200004e0 	.word	0x200004e0
    bcd8:	0000cd0c 	.word	0x0000cd0c
    bcdc:	0000a91d 	.word	0x0000a91d

0000bce0 <_calloc_r>:
    bce0:	b510      	push	{r4, lr}
    bce2:	4351      	muls	r1, r2
    bce4:	f7fe fe24 	bl	a930 <_malloc_r>
    bce8:	1e04      	subs	r4, r0, #0
    bcea:	d01c      	beq.n	bd26 <_calloc_r+0x46>
    bcec:	0003      	movs	r3, r0
    bcee:	3b08      	subs	r3, #8
    bcf0:	685a      	ldr	r2, [r3, #4]
    bcf2:	2303      	movs	r3, #3
    bcf4:	439a      	bics	r2, r3
    bcf6:	3a04      	subs	r2, #4
    bcf8:	2a24      	cmp	r2, #36	; 0x24
    bcfa:	d816      	bhi.n	bd2a <_calloc_r+0x4a>
    bcfc:	0003      	movs	r3, r0
    bcfe:	2a13      	cmp	r2, #19
    bd00:	d90d      	bls.n	bd1e <_calloc_r+0x3e>
    bd02:	2100      	movs	r1, #0
    bd04:	3308      	adds	r3, #8
    bd06:	6001      	str	r1, [r0, #0]
    bd08:	6041      	str	r1, [r0, #4]
    bd0a:	2a1b      	cmp	r2, #27
    bd0c:	d907      	bls.n	bd1e <_calloc_r+0x3e>
    bd0e:	6081      	str	r1, [r0, #8]
    bd10:	60c1      	str	r1, [r0, #12]
    bd12:	2a24      	cmp	r2, #36	; 0x24
    bd14:	d10d      	bne.n	bd32 <_calloc_r+0x52>
    bd16:	0003      	movs	r3, r0
    bd18:	6101      	str	r1, [r0, #16]
    bd1a:	3318      	adds	r3, #24
    bd1c:	6141      	str	r1, [r0, #20]
    bd1e:	2200      	movs	r2, #0
    bd20:	601a      	str	r2, [r3, #0]
    bd22:	605a      	str	r2, [r3, #4]
    bd24:	609a      	str	r2, [r3, #8]
    bd26:	0020      	movs	r0, r4
    bd28:	bd10      	pop	{r4, pc}
    bd2a:	2100      	movs	r1, #0
    bd2c:	f7fb fe02 	bl	7934 <memset>
    bd30:	e7f9      	b.n	bd26 <_calloc_r+0x46>
    bd32:	0003      	movs	r3, r0
    bd34:	3310      	adds	r3, #16
    bd36:	e7f2      	b.n	bd1e <_calloc_r+0x3e>

0000bd38 <_close_r>:
    bd38:	2300      	movs	r3, #0
    bd3a:	b570      	push	{r4, r5, r6, lr}
    bd3c:	4c06      	ldr	r4, [pc, #24]	; (bd58 <_close_r+0x20>)
    bd3e:	0005      	movs	r5, r0
    bd40:	0008      	movs	r0, r1
    bd42:	6023      	str	r3, [r4, #0]
    bd44:	f7f6 fd82 	bl	284c <_close>
    bd48:	1c43      	adds	r3, r0, #1
    bd4a:	d000      	beq.n	bd4e <_close_r+0x16>
    bd4c:	bd70      	pop	{r4, r5, r6, pc}
    bd4e:	6823      	ldr	r3, [r4, #0]
    bd50:	2b00      	cmp	r3, #0
    bd52:	d0fb      	beq.n	bd4c <_close_r+0x14>
    bd54:	602b      	str	r3, [r5, #0]
    bd56:	e7f9      	b.n	bd4c <_close_r+0x14>
    bd58:	20001710 	.word	0x20001710

0000bd5c <_fclose_r>:
    bd5c:	b570      	push	{r4, r5, r6, lr}
    bd5e:	0005      	movs	r5, r0
    bd60:	1e0c      	subs	r4, r1, #0
    bd62:	d040      	beq.n	bde6 <_fclose_r+0x8a>
    bd64:	2800      	cmp	r0, #0
    bd66:	d002      	beq.n	bd6e <_fclose_r+0x12>
    bd68:	6b83      	ldr	r3, [r0, #56]	; 0x38
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d03e      	beq.n	bdec <_fclose_r+0x90>
    bd6e:	2601      	movs	r6, #1
    bd70:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bd72:	4233      	tst	r3, r6
    bd74:	d133      	bne.n	bdde <_fclose_r+0x82>
    bd76:	89a3      	ldrh	r3, [r4, #12]
    bd78:	059b      	lsls	r3, r3, #22
    bd7a:	d543      	bpl.n	be04 <_fclose_r+0xa8>
    bd7c:	0021      	movs	r1, r4
    bd7e:	0028      	movs	r0, r5
    bd80:	f7fe fad6 	bl	a330 <__sflush_r>
    bd84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bd86:	0006      	movs	r6, r0
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d004      	beq.n	bd96 <_fclose_r+0x3a>
    bd8c:	69e1      	ldr	r1, [r4, #28]
    bd8e:	0028      	movs	r0, r5
    bd90:	4798      	blx	r3
    bd92:	2800      	cmp	r0, #0
    bd94:	db44      	blt.n	be20 <_fclose_r+0xc4>
    bd96:	89a3      	ldrh	r3, [r4, #12]
    bd98:	061b      	lsls	r3, r3, #24
    bd9a:	d42a      	bmi.n	bdf2 <_fclose_r+0x96>
    bd9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    bd9e:	2900      	cmp	r1, #0
    bda0:	d008      	beq.n	bdb4 <_fclose_r+0x58>
    bda2:	0023      	movs	r3, r4
    bda4:	3340      	adds	r3, #64	; 0x40
    bda6:	4299      	cmp	r1, r3
    bda8:	d002      	beq.n	bdb0 <_fclose_r+0x54>
    bdaa:	0028      	movs	r0, r5
    bdac:	f7fe fc6c 	bl	a688 <_free_r>
    bdb0:	2300      	movs	r3, #0
    bdb2:	6323      	str	r3, [r4, #48]	; 0x30
    bdb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    bdb6:	2900      	cmp	r1, #0
    bdb8:	d004      	beq.n	bdc4 <_fclose_r+0x68>
    bdba:	0028      	movs	r0, r5
    bdbc:	f7fe fc64 	bl	a688 <_free_r>
    bdc0:	2300      	movs	r3, #0
    bdc2:	6463      	str	r3, [r4, #68]	; 0x44
    bdc4:	f7fe fbe6 	bl	a594 <__sfp_lock_acquire>
    bdc8:	2300      	movs	r3, #0
    bdca:	81a3      	strh	r3, [r4, #12]
    bdcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bdce:	07db      	lsls	r3, r3, #31
    bdd0:	d514      	bpl.n	bdfc <_fclose_r+0xa0>
    bdd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdd4:	f7fe fd6c 	bl	a8b0 <__retarget_lock_close_recursive>
    bdd8:	f7fe fbe4 	bl	a5a4 <__sfp_lock_release>
    bddc:	e004      	b.n	bde8 <_fclose_r+0x8c>
    bdde:	220c      	movs	r2, #12
    bde0:	5ea3      	ldrsh	r3, [r4, r2]
    bde2:	2b00      	cmp	r3, #0
    bde4:	d1ca      	bne.n	bd7c <_fclose_r+0x20>
    bde6:	2600      	movs	r6, #0
    bde8:	0030      	movs	r0, r6
    bdea:	bd70      	pop	{r4, r5, r6, pc}
    bdec:	f7fe fba2 	bl	a534 <__sinit>
    bdf0:	e7bd      	b.n	bd6e <_fclose_r+0x12>
    bdf2:	6921      	ldr	r1, [r4, #16]
    bdf4:	0028      	movs	r0, r5
    bdf6:	f7fe fc47 	bl	a688 <_free_r>
    bdfa:	e7cf      	b.n	bd9c <_fclose_r+0x40>
    bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdfe:	f7fe fd5b 	bl	a8b8 <__retarget_lock_release_recursive>
    be02:	e7e6      	b.n	bdd2 <_fclose_r+0x76>
    be04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be06:	f7fe fd55 	bl	a8b4 <__retarget_lock_acquire_recursive>
    be0a:	220c      	movs	r2, #12
    be0c:	5ea3      	ldrsh	r3, [r4, r2]
    be0e:	2b00      	cmp	r3, #0
    be10:	d1b4      	bne.n	bd7c <_fclose_r+0x20>
    be12:	6e63      	ldr	r3, [r4, #100]	; 0x64
    be14:	401e      	ands	r6, r3
    be16:	d1e6      	bne.n	bde6 <_fclose_r+0x8a>
    be18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be1a:	f7fe fd4d 	bl	a8b8 <__retarget_lock_release_recursive>
    be1e:	e7e3      	b.n	bde8 <_fclose_r+0x8c>
    be20:	2601      	movs	r6, #1
    be22:	4276      	negs	r6, r6
    be24:	e7b7      	b.n	bd96 <_fclose_r+0x3a>
    be26:	46c0      	nop			; (mov r8, r8)

0000be28 <_fstat_r>:
    be28:	2300      	movs	r3, #0
    be2a:	b570      	push	{r4, r5, r6, lr}
    be2c:	4c07      	ldr	r4, [pc, #28]	; (be4c <_fstat_r+0x24>)
    be2e:	0005      	movs	r5, r0
    be30:	0008      	movs	r0, r1
    be32:	0011      	movs	r1, r2
    be34:	6023      	str	r3, [r4, #0]
    be36:	f7f6 fd0c 	bl	2852 <_fstat>
    be3a:	1c43      	adds	r3, r0, #1
    be3c:	d000      	beq.n	be40 <_fstat_r+0x18>
    be3e:	bd70      	pop	{r4, r5, r6, pc}
    be40:	6823      	ldr	r3, [r4, #0]
    be42:	2b00      	cmp	r3, #0
    be44:	d0fb      	beq.n	be3e <_fstat_r+0x16>
    be46:	602b      	str	r3, [r5, #0]
    be48:	e7f9      	b.n	be3e <_fstat_r+0x16>
    be4a:	46c0      	nop			; (mov r8, r8)
    be4c:	20001710 	.word	0x20001710

0000be50 <_lseek_r>:
    be50:	b570      	push	{r4, r5, r6, lr}
    be52:	0005      	movs	r5, r0
    be54:	0008      	movs	r0, r1
    be56:	0011      	movs	r1, r2
    be58:	2200      	movs	r2, #0
    be5a:	4c06      	ldr	r4, [pc, #24]	; (be74 <_lseek_r+0x24>)
    be5c:	6022      	str	r2, [r4, #0]
    be5e:	001a      	movs	r2, r3
    be60:	f7f6 fcfc 	bl	285c <_lseek>
    be64:	1c43      	adds	r3, r0, #1
    be66:	d000      	beq.n	be6a <_lseek_r+0x1a>
    be68:	bd70      	pop	{r4, r5, r6, pc}
    be6a:	6823      	ldr	r3, [r4, #0]
    be6c:	2b00      	cmp	r3, #0
    be6e:	d0fb      	beq.n	be68 <_lseek_r+0x18>
    be70:	602b      	str	r3, [r5, #0]
    be72:	e7f9      	b.n	be68 <_lseek_r+0x18>
    be74:	20001710 	.word	0x20001710

0000be78 <__ascii_mbtowc>:
    be78:	b082      	sub	sp, #8
    be7a:	2900      	cmp	r1, #0
    be7c:	d00a      	beq.n	be94 <__ascii_mbtowc+0x1c>
    be7e:	2a00      	cmp	r2, #0
    be80:	d00b      	beq.n	be9a <__ascii_mbtowc+0x22>
    be82:	2b00      	cmp	r3, #0
    be84:	d00b      	beq.n	be9e <__ascii_mbtowc+0x26>
    be86:	7813      	ldrb	r3, [r2, #0]
    be88:	600b      	str	r3, [r1, #0]
    be8a:	7810      	ldrb	r0, [r2, #0]
    be8c:	1e43      	subs	r3, r0, #1
    be8e:	4198      	sbcs	r0, r3
    be90:	b002      	add	sp, #8
    be92:	4770      	bx	lr
    be94:	a901      	add	r1, sp, #4
    be96:	2a00      	cmp	r2, #0
    be98:	d1f3      	bne.n	be82 <__ascii_mbtowc+0xa>
    be9a:	2000      	movs	r0, #0
    be9c:	e7f8      	b.n	be90 <__ascii_mbtowc+0x18>
    be9e:	2002      	movs	r0, #2
    bea0:	4240      	negs	r0, r0
    bea2:	e7f5      	b.n	be90 <__ascii_mbtowc+0x18>

0000bea4 <_read_r>:
    bea4:	b570      	push	{r4, r5, r6, lr}
    bea6:	0005      	movs	r5, r0
    bea8:	0008      	movs	r0, r1
    beaa:	0011      	movs	r1, r2
    beac:	2200      	movs	r2, #0
    beae:	4c06      	ldr	r4, [pc, #24]	; (bec8 <_read_r+0x24>)
    beb0:	6022      	str	r2, [r4, #0]
    beb2:	001a      	movs	r2, r3
    beb4:	f7f8 fece 	bl	4c54 <_read>
    beb8:	1c43      	adds	r3, r0, #1
    beba:	d000      	beq.n	bebe <_read_r+0x1a>
    bebc:	bd70      	pop	{r4, r5, r6, pc}
    bebe:	6823      	ldr	r3, [r4, #0]
    bec0:	2b00      	cmp	r3, #0
    bec2:	d0fb      	beq.n	bebc <_read_r+0x18>
    bec4:	602b      	str	r3, [r5, #0]
    bec6:	e7f9      	b.n	bebc <_read_r+0x18>
    bec8:	20001710 	.word	0x20001710

0000becc <__ascii_wctomb>:
    becc:	2900      	cmp	r1, #0
    bece:	d004      	beq.n	beda <__ascii_wctomb+0xe>
    bed0:	2aff      	cmp	r2, #255	; 0xff
    bed2:	d804      	bhi.n	bede <__ascii_wctomb+0x12>
    bed4:	2001      	movs	r0, #1
    bed6:	700a      	strb	r2, [r1, #0]
    bed8:	4770      	bx	lr
    beda:	2000      	movs	r0, #0
    bedc:	e7fc      	b.n	bed8 <__ascii_wctomb+0xc>
    bede:	238a      	movs	r3, #138	; 0x8a
    bee0:	6003      	str	r3, [r0, #0]
    bee2:	2001      	movs	r0, #1
    bee4:	4240      	negs	r0, r0
    bee6:	e7f7      	b.n	bed8 <__ascii_wctomb+0xc>

0000bee8 <__divsi3>:
    bee8:	4603      	mov	r3, r0
    beea:	430b      	orrs	r3, r1
    beec:	d47f      	bmi.n	bfee <__divsi3+0x106>
    beee:	2200      	movs	r2, #0
    bef0:	0843      	lsrs	r3, r0, #1
    bef2:	428b      	cmp	r3, r1
    bef4:	d374      	bcc.n	bfe0 <__divsi3+0xf8>
    bef6:	0903      	lsrs	r3, r0, #4
    bef8:	428b      	cmp	r3, r1
    befa:	d35f      	bcc.n	bfbc <__divsi3+0xd4>
    befc:	0a03      	lsrs	r3, r0, #8
    befe:	428b      	cmp	r3, r1
    bf00:	d344      	bcc.n	bf8c <__divsi3+0xa4>
    bf02:	0b03      	lsrs	r3, r0, #12
    bf04:	428b      	cmp	r3, r1
    bf06:	d328      	bcc.n	bf5a <__divsi3+0x72>
    bf08:	0c03      	lsrs	r3, r0, #16
    bf0a:	428b      	cmp	r3, r1
    bf0c:	d30d      	bcc.n	bf2a <__divsi3+0x42>
    bf0e:	22ff      	movs	r2, #255	; 0xff
    bf10:	0209      	lsls	r1, r1, #8
    bf12:	ba12      	rev	r2, r2
    bf14:	0c03      	lsrs	r3, r0, #16
    bf16:	428b      	cmp	r3, r1
    bf18:	d302      	bcc.n	bf20 <__divsi3+0x38>
    bf1a:	1212      	asrs	r2, r2, #8
    bf1c:	0209      	lsls	r1, r1, #8
    bf1e:	d065      	beq.n	bfec <__divsi3+0x104>
    bf20:	0b03      	lsrs	r3, r0, #12
    bf22:	428b      	cmp	r3, r1
    bf24:	d319      	bcc.n	bf5a <__divsi3+0x72>
    bf26:	e000      	b.n	bf2a <__divsi3+0x42>
    bf28:	0a09      	lsrs	r1, r1, #8
    bf2a:	0bc3      	lsrs	r3, r0, #15
    bf2c:	428b      	cmp	r3, r1
    bf2e:	d301      	bcc.n	bf34 <__divsi3+0x4c>
    bf30:	03cb      	lsls	r3, r1, #15
    bf32:	1ac0      	subs	r0, r0, r3
    bf34:	4152      	adcs	r2, r2
    bf36:	0b83      	lsrs	r3, r0, #14
    bf38:	428b      	cmp	r3, r1
    bf3a:	d301      	bcc.n	bf40 <__divsi3+0x58>
    bf3c:	038b      	lsls	r3, r1, #14
    bf3e:	1ac0      	subs	r0, r0, r3
    bf40:	4152      	adcs	r2, r2
    bf42:	0b43      	lsrs	r3, r0, #13
    bf44:	428b      	cmp	r3, r1
    bf46:	d301      	bcc.n	bf4c <__divsi3+0x64>
    bf48:	034b      	lsls	r3, r1, #13
    bf4a:	1ac0      	subs	r0, r0, r3
    bf4c:	4152      	adcs	r2, r2
    bf4e:	0b03      	lsrs	r3, r0, #12
    bf50:	428b      	cmp	r3, r1
    bf52:	d301      	bcc.n	bf58 <__divsi3+0x70>
    bf54:	030b      	lsls	r3, r1, #12
    bf56:	1ac0      	subs	r0, r0, r3
    bf58:	4152      	adcs	r2, r2
    bf5a:	0ac3      	lsrs	r3, r0, #11
    bf5c:	428b      	cmp	r3, r1
    bf5e:	d301      	bcc.n	bf64 <__divsi3+0x7c>
    bf60:	02cb      	lsls	r3, r1, #11
    bf62:	1ac0      	subs	r0, r0, r3
    bf64:	4152      	adcs	r2, r2
    bf66:	0a83      	lsrs	r3, r0, #10
    bf68:	428b      	cmp	r3, r1
    bf6a:	d301      	bcc.n	bf70 <__divsi3+0x88>
    bf6c:	028b      	lsls	r3, r1, #10
    bf6e:	1ac0      	subs	r0, r0, r3
    bf70:	4152      	adcs	r2, r2
    bf72:	0a43      	lsrs	r3, r0, #9
    bf74:	428b      	cmp	r3, r1
    bf76:	d301      	bcc.n	bf7c <__divsi3+0x94>
    bf78:	024b      	lsls	r3, r1, #9
    bf7a:	1ac0      	subs	r0, r0, r3
    bf7c:	4152      	adcs	r2, r2
    bf7e:	0a03      	lsrs	r3, r0, #8
    bf80:	428b      	cmp	r3, r1
    bf82:	d301      	bcc.n	bf88 <__divsi3+0xa0>
    bf84:	020b      	lsls	r3, r1, #8
    bf86:	1ac0      	subs	r0, r0, r3
    bf88:	4152      	adcs	r2, r2
    bf8a:	d2cd      	bcs.n	bf28 <__divsi3+0x40>
    bf8c:	09c3      	lsrs	r3, r0, #7
    bf8e:	428b      	cmp	r3, r1
    bf90:	d301      	bcc.n	bf96 <__divsi3+0xae>
    bf92:	01cb      	lsls	r3, r1, #7
    bf94:	1ac0      	subs	r0, r0, r3
    bf96:	4152      	adcs	r2, r2
    bf98:	0983      	lsrs	r3, r0, #6
    bf9a:	428b      	cmp	r3, r1
    bf9c:	d301      	bcc.n	bfa2 <__divsi3+0xba>
    bf9e:	018b      	lsls	r3, r1, #6
    bfa0:	1ac0      	subs	r0, r0, r3
    bfa2:	4152      	adcs	r2, r2
    bfa4:	0943      	lsrs	r3, r0, #5
    bfa6:	428b      	cmp	r3, r1
    bfa8:	d301      	bcc.n	bfae <__divsi3+0xc6>
    bfaa:	014b      	lsls	r3, r1, #5
    bfac:	1ac0      	subs	r0, r0, r3
    bfae:	4152      	adcs	r2, r2
    bfb0:	0903      	lsrs	r3, r0, #4
    bfb2:	428b      	cmp	r3, r1
    bfb4:	d301      	bcc.n	bfba <__divsi3+0xd2>
    bfb6:	010b      	lsls	r3, r1, #4
    bfb8:	1ac0      	subs	r0, r0, r3
    bfba:	4152      	adcs	r2, r2
    bfbc:	08c3      	lsrs	r3, r0, #3
    bfbe:	428b      	cmp	r3, r1
    bfc0:	d301      	bcc.n	bfc6 <__divsi3+0xde>
    bfc2:	00cb      	lsls	r3, r1, #3
    bfc4:	1ac0      	subs	r0, r0, r3
    bfc6:	4152      	adcs	r2, r2
    bfc8:	0883      	lsrs	r3, r0, #2
    bfca:	428b      	cmp	r3, r1
    bfcc:	d301      	bcc.n	bfd2 <__divsi3+0xea>
    bfce:	008b      	lsls	r3, r1, #2
    bfd0:	1ac0      	subs	r0, r0, r3
    bfd2:	4152      	adcs	r2, r2
    bfd4:	0843      	lsrs	r3, r0, #1
    bfd6:	428b      	cmp	r3, r1
    bfd8:	d301      	bcc.n	bfde <__divsi3+0xf6>
    bfda:	004b      	lsls	r3, r1, #1
    bfdc:	1ac0      	subs	r0, r0, r3
    bfde:	4152      	adcs	r2, r2
    bfe0:	1a41      	subs	r1, r0, r1
    bfe2:	d200      	bcs.n	bfe6 <__divsi3+0xfe>
    bfe4:	4601      	mov	r1, r0
    bfe6:	4152      	adcs	r2, r2
    bfe8:	4610      	mov	r0, r2
    bfea:	4770      	bx	lr
    bfec:	e05d      	b.n	c0aa <__divsi3+0x1c2>
    bfee:	0fca      	lsrs	r2, r1, #31
    bff0:	d000      	beq.n	bff4 <__divsi3+0x10c>
    bff2:	4249      	negs	r1, r1
    bff4:	1003      	asrs	r3, r0, #32
    bff6:	d300      	bcc.n	bffa <__divsi3+0x112>
    bff8:	4240      	negs	r0, r0
    bffa:	4053      	eors	r3, r2
    bffc:	2200      	movs	r2, #0
    bffe:	469c      	mov	ip, r3
    c000:	0903      	lsrs	r3, r0, #4
    c002:	428b      	cmp	r3, r1
    c004:	d32d      	bcc.n	c062 <__divsi3+0x17a>
    c006:	0a03      	lsrs	r3, r0, #8
    c008:	428b      	cmp	r3, r1
    c00a:	d312      	bcc.n	c032 <__divsi3+0x14a>
    c00c:	22fc      	movs	r2, #252	; 0xfc
    c00e:	0189      	lsls	r1, r1, #6
    c010:	ba12      	rev	r2, r2
    c012:	0a03      	lsrs	r3, r0, #8
    c014:	428b      	cmp	r3, r1
    c016:	d30c      	bcc.n	c032 <__divsi3+0x14a>
    c018:	0189      	lsls	r1, r1, #6
    c01a:	1192      	asrs	r2, r2, #6
    c01c:	428b      	cmp	r3, r1
    c01e:	d308      	bcc.n	c032 <__divsi3+0x14a>
    c020:	0189      	lsls	r1, r1, #6
    c022:	1192      	asrs	r2, r2, #6
    c024:	428b      	cmp	r3, r1
    c026:	d304      	bcc.n	c032 <__divsi3+0x14a>
    c028:	0189      	lsls	r1, r1, #6
    c02a:	d03a      	beq.n	c0a2 <__divsi3+0x1ba>
    c02c:	1192      	asrs	r2, r2, #6
    c02e:	e000      	b.n	c032 <__divsi3+0x14a>
    c030:	0989      	lsrs	r1, r1, #6
    c032:	09c3      	lsrs	r3, r0, #7
    c034:	428b      	cmp	r3, r1
    c036:	d301      	bcc.n	c03c <__divsi3+0x154>
    c038:	01cb      	lsls	r3, r1, #7
    c03a:	1ac0      	subs	r0, r0, r3
    c03c:	4152      	adcs	r2, r2
    c03e:	0983      	lsrs	r3, r0, #6
    c040:	428b      	cmp	r3, r1
    c042:	d301      	bcc.n	c048 <__divsi3+0x160>
    c044:	018b      	lsls	r3, r1, #6
    c046:	1ac0      	subs	r0, r0, r3
    c048:	4152      	adcs	r2, r2
    c04a:	0943      	lsrs	r3, r0, #5
    c04c:	428b      	cmp	r3, r1
    c04e:	d301      	bcc.n	c054 <__divsi3+0x16c>
    c050:	014b      	lsls	r3, r1, #5
    c052:	1ac0      	subs	r0, r0, r3
    c054:	4152      	adcs	r2, r2
    c056:	0903      	lsrs	r3, r0, #4
    c058:	428b      	cmp	r3, r1
    c05a:	d301      	bcc.n	c060 <__divsi3+0x178>
    c05c:	010b      	lsls	r3, r1, #4
    c05e:	1ac0      	subs	r0, r0, r3
    c060:	4152      	adcs	r2, r2
    c062:	08c3      	lsrs	r3, r0, #3
    c064:	428b      	cmp	r3, r1
    c066:	d301      	bcc.n	c06c <__divsi3+0x184>
    c068:	00cb      	lsls	r3, r1, #3
    c06a:	1ac0      	subs	r0, r0, r3
    c06c:	4152      	adcs	r2, r2
    c06e:	0883      	lsrs	r3, r0, #2
    c070:	428b      	cmp	r3, r1
    c072:	d301      	bcc.n	c078 <__divsi3+0x190>
    c074:	008b      	lsls	r3, r1, #2
    c076:	1ac0      	subs	r0, r0, r3
    c078:	4152      	adcs	r2, r2
    c07a:	d2d9      	bcs.n	c030 <__divsi3+0x148>
    c07c:	0843      	lsrs	r3, r0, #1
    c07e:	428b      	cmp	r3, r1
    c080:	d301      	bcc.n	c086 <__divsi3+0x19e>
    c082:	004b      	lsls	r3, r1, #1
    c084:	1ac0      	subs	r0, r0, r3
    c086:	4152      	adcs	r2, r2
    c088:	1a41      	subs	r1, r0, r1
    c08a:	d200      	bcs.n	c08e <__divsi3+0x1a6>
    c08c:	4601      	mov	r1, r0
    c08e:	4663      	mov	r3, ip
    c090:	4152      	adcs	r2, r2
    c092:	105b      	asrs	r3, r3, #1
    c094:	4610      	mov	r0, r2
    c096:	d301      	bcc.n	c09c <__divsi3+0x1b4>
    c098:	4240      	negs	r0, r0
    c09a:	2b00      	cmp	r3, #0
    c09c:	d500      	bpl.n	c0a0 <__divsi3+0x1b8>
    c09e:	4249      	negs	r1, r1
    c0a0:	4770      	bx	lr
    c0a2:	4663      	mov	r3, ip
    c0a4:	105b      	asrs	r3, r3, #1
    c0a6:	d300      	bcc.n	c0aa <__divsi3+0x1c2>
    c0a8:	4240      	negs	r0, r0
    c0aa:	b501      	push	{r0, lr}
    c0ac:	2000      	movs	r0, #0
    c0ae:	f7f9 fc73 	bl	5998 <__aeabi_idiv0>
    c0b2:	bd02      	pop	{r1, pc}

0000c0b4 <__aeabi_idivmod>:
    c0b4:	2900      	cmp	r1, #0
    c0b6:	d0f8      	beq.n	c0aa <__divsi3+0x1c2>
    c0b8:	e716      	b.n	bee8 <__divsi3>
    c0ba:	4770      	bx	lr

0000c0bc <__aeabi_dadd>:
    c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0be:	4645      	mov	r5, r8
    c0c0:	46de      	mov	lr, fp
    c0c2:	4657      	mov	r7, sl
    c0c4:	464e      	mov	r6, r9
    c0c6:	030c      	lsls	r4, r1, #12
    c0c8:	b5e0      	push	{r5, r6, r7, lr}
    c0ca:	004e      	lsls	r6, r1, #1
    c0cc:	0fc9      	lsrs	r1, r1, #31
    c0ce:	4688      	mov	r8, r1
    c0d0:	000d      	movs	r5, r1
    c0d2:	0a61      	lsrs	r1, r4, #9
    c0d4:	0f44      	lsrs	r4, r0, #29
    c0d6:	430c      	orrs	r4, r1
    c0d8:	00c7      	lsls	r7, r0, #3
    c0da:	0319      	lsls	r1, r3, #12
    c0dc:	0058      	lsls	r0, r3, #1
    c0de:	0fdb      	lsrs	r3, r3, #31
    c0e0:	469b      	mov	fp, r3
    c0e2:	0a4b      	lsrs	r3, r1, #9
    c0e4:	0f51      	lsrs	r1, r2, #29
    c0e6:	430b      	orrs	r3, r1
    c0e8:	0d76      	lsrs	r6, r6, #21
    c0ea:	0d40      	lsrs	r0, r0, #21
    c0ec:	0019      	movs	r1, r3
    c0ee:	00d2      	lsls	r2, r2, #3
    c0f0:	45d8      	cmp	r8, fp
    c0f2:	d100      	bne.n	c0f6 <__aeabi_dadd+0x3a>
    c0f4:	e0ae      	b.n	c254 <__aeabi_dadd+0x198>
    c0f6:	1a35      	subs	r5, r6, r0
    c0f8:	2d00      	cmp	r5, #0
    c0fa:	dc00      	bgt.n	c0fe <__aeabi_dadd+0x42>
    c0fc:	e0f6      	b.n	c2ec <__aeabi_dadd+0x230>
    c0fe:	2800      	cmp	r0, #0
    c100:	d10f      	bne.n	c122 <__aeabi_dadd+0x66>
    c102:	4313      	orrs	r3, r2
    c104:	d100      	bne.n	c108 <__aeabi_dadd+0x4c>
    c106:	e0db      	b.n	c2c0 <__aeabi_dadd+0x204>
    c108:	1e6b      	subs	r3, r5, #1
    c10a:	2b00      	cmp	r3, #0
    c10c:	d000      	beq.n	c110 <__aeabi_dadd+0x54>
    c10e:	e137      	b.n	c380 <__aeabi_dadd+0x2c4>
    c110:	1aba      	subs	r2, r7, r2
    c112:	4297      	cmp	r7, r2
    c114:	41bf      	sbcs	r7, r7
    c116:	1a64      	subs	r4, r4, r1
    c118:	427f      	negs	r7, r7
    c11a:	1be4      	subs	r4, r4, r7
    c11c:	2601      	movs	r6, #1
    c11e:	0017      	movs	r7, r2
    c120:	e024      	b.n	c16c <__aeabi_dadd+0xb0>
    c122:	4bc6      	ldr	r3, [pc, #792]	; (c43c <__aeabi_dadd+0x380>)
    c124:	429e      	cmp	r6, r3
    c126:	d04d      	beq.n	c1c4 <__aeabi_dadd+0x108>
    c128:	2380      	movs	r3, #128	; 0x80
    c12a:	041b      	lsls	r3, r3, #16
    c12c:	4319      	orrs	r1, r3
    c12e:	2d38      	cmp	r5, #56	; 0x38
    c130:	dd00      	ble.n	c134 <__aeabi_dadd+0x78>
    c132:	e107      	b.n	c344 <__aeabi_dadd+0x288>
    c134:	2d1f      	cmp	r5, #31
    c136:	dd00      	ble.n	c13a <__aeabi_dadd+0x7e>
    c138:	e138      	b.n	c3ac <__aeabi_dadd+0x2f0>
    c13a:	2020      	movs	r0, #32
    c13c:	1b43      	subs	r3, r0, r5
    c13e:	469a      	mov	sl, r3
    c140:	000b      	movs	r3, r1
    c142:	4650      	mov	r0, sl
    c144:	4083      	lsls	r3, r0
    c146:	4699      	mov	r9, r3
    c148:	0013      	movs	r3, r2
    c14a:	4648      	mov	r0, r9
    c14c:	40eb      	lsrs	r3, r5
    c14e:	4318      	orrs	r0, r3
    c150:	0003      	movs	r3, r0
    c152:	4650      	mov	r0, sl
    c154:	4082      	lsls	r2, r0
    c156:	1e50      	subs	r0, r2, #1
    c158:	4182      	sbcs	r2, r0
    c15a:	40e9      	lsrs	r1, r5
    c15c:	431a      	orrs	r2, r3
    c15e:	1aba      	subs	r2, r7, r2
    c160:	1a61      	subs	r1, r4, r1
    c162:	4297      	cmp	r7, r2
    c164:	41a4      	sbcs	r4, r4
    c166:	0017      	movs	r7, r2
    c168:	4264      	negs	r4, r4
    c16a:	1b0c      	subs	r4, r1, r4
    c16c:	0223      	lsls	r3, r4, #8
    c16e:	d562      	bpl.n	c236 <__aeabi_dadd+0x17a>
    c170:	0264      	lsls	r4, r4, #9
    c172:	0a65      	lsrs	r5, r4, #9
    c174:	2d00      	cmp	r5, #0
    c176:	d100      	bne.n	c17a <__aeabi_dadd+0xbe>
    c178:	e0df      	b.n	c33a <__aeabi_dadd+0x27e>
    c17a:	0028      	movs	r0, r5
    c17c:	f7fb fa2a 	bl	75d4 <__clzsi2>
    c180:	0003      	movs	r3, r0
    c182:	3b08      	subs	r3, #8
    c184:	2b1f      	cmp	r3, #31
    c186:	dd00      	ble.n	c18a <__aeabi_dadd+0xce>
    c188:	e0d2      	b.n	c330 <__aeabi_dadd+0x274>
    c18a:	2220      	movs	r2, #32
    c18c:	003c      	movs	r4, r7
    c18e:	1ad2      	subs	r2, r2, r3
    c190:	409d      	lsls	r5, r3
    c192:	40d4      	lsrs	r4, r2
    c194:	409f      	lsls	r7, r3
    c196:	4325      	orrs	r5, r4
    c198:	429e      	cmp	r6, r3
    c19a:	dd00      	ble.n	c19e <__aeabi_dadd+0xe2>
    c19c:	e0c4      	b.n	c328 <__aeabi_dadd+0x26c>
    c19e:	1b9e      	subs	r6, r3, r6
    c1a0:	1c73      	adds	r3, r6, #1
    c1a2:	2b1f      	cmp	r3, #31
    c1a4:	dd00      	ble.n	c1a8 <__aeabi_dadd+0xec>
    c1a6:	e0f1      	b.n	c38c <__aeabi_dadd+0x2d0>
    c1a8:	2220      	movs	r2, #32
    c1aa:	0038      	movs	r0, r7
    c1ac:	0029      	movs	r1, r5
    c1ae:	1ad2      	subs	r2, r2, r3
    c1b0:	40d8      	lsrs	r0, r3
    c1b2:	4091      	lsls	r1, r2
    c1b4:	4097      	lsls	r7, r2
    c1b6:	002c      	movs	r4, r5
    c1b8:	4301      	orrs	r1, r0
    c1ba:	1e78      	subs	r0, r7, #1
    c1bc:	4187      	sbcs	r7, r0
    c1be:	40dc      	lsrs	r4, r3
    c1c0:	2600      	movs	r6, #0
    c1c2:	430f      	orrs	r7, r1
    c1c4:	077b      	lsls	r3, r7, #29
    c1c6:	d009      	beq.n	c1dc <__aeabi_dadd+0x120>
    c1c8:	230f      	movs	r3, #15
    c1ca:	403b      	ands	r3, r7
    c1cc:	2b04      	cmp	r3, #4
    c1ce:	d005      	beq.n	c1dc <__aeabi_dadd+0x120>
    c1d0:	1d3b      	adds	r3, r7, #4
    c1d2:	42bb      	cmp	r3, r7
    c1d4:	41bf      	sbcs	r7, r7
    c1d6:	427f      	negs	r7, r7
    c1d8:	19e4      	adds	r4, r4, r7
    c1da:	001f      	movs	r7, r3
    c1dc:	0223      	lsls	r3, r4, #8
    c1de:	d52c      	bpl.n	c23a <__aeabi_dadd+0x17e>
    c1e0:	4b96      	ldr	r3, [pc, #600]	; (c43c <__aeabi_dadd+0x380>)
    c1e2:	3601      	adds	r6, #1
    c1e4:	429e      	cmp	r6, r3
    c1e6:	d100      	bne.n	c1ea <__aeabi_dadd+0x12e>
    c1e8:	e09a      	b.n	c320 <__aeabi_dadd+0x264>
    c1ea:	4645      	mov	r5, r8
    c1ec:	4b94      	ldr	r3, [pc, #592]	; (c440 <__aeabi_dadd+0x384>)
    c1ee:	08ff      	lsrs	r7, r7, #3
    c1f0:	401c      	ands	r4, r3
    c1f2:	0760      	lsls	r0, r4, #29
    c1f4:	0576      	lsls	r6, r6, #21
    c1f6:	0264      	lsls	r4, r4, #9
    c1f8:	4307      	orrs	r7, r0
    c1fa:	0b24      	lsrs	r4, r4, #12
    c1fc:	0d76      	lsrs	r6, r6, #21
    c1fe:	2100      	movs	r1, #0
    c200:	0324      	lsls	r4, r4, #12
    c202:	0b23      	lsrs	r3, r4, #12
    c204:	0d0c      	lsrs	r4, r1, #20
    c206:	4a8f      	ldr	r2, [pc, #572]	; (c444 <__aeabi_dadd+0x388>)
    c208:	0524      	lsls	r4, r4, #20
    c20a:	431c      	orrs	r4, r3
    c20c:	4014      	ands	r4, r2
    c20e:	0533      	lsls	r3, r6, #20
    c210:	4323      	orrs	r3, r4
    c212:	005b      	lsls	r3, r3, #1
    c214:	07ed      	lsls	r5, r5, #31
    c216:	085b      	lsrs	r3, r3, #1
    c218:	432b      	orrs	r3, r5
    c21a:	0038      	movs	r0, r7
    c21c:	0019      	movs	r1, r3
    c21e:	bc3c      	pop	{r2, r3, r4, r5}
    c220:	4690      	mov	r8, r2
    c222:	4699      	mov	r9, r3
    c224:	46a2      	mov	sl, r4
    c226:	46ab      	mov	fp, r5
    c228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c22a:	4664      	mov	r4, ip
    c22c:	4304      	orrs	r4, r0
    c22e:	d100      	bne.n	c232 <__aeabi_dadd+0x176>
    c230:	e211      	b.n	c656 <__aeabi_dadd+0x59a>
    c232:	0004      	movs	r4, r0
    c234:	4667      	mov	r7, ip
    c236:	077b      	lsls	r3, r7, #29
    c238:	d1c6      	bne.n	c1c8 <__aeabi_dadd+0x10c>
    c23a:	4645      	mov	r5, r8
    c23c:	0760      	lsls	r0, r4, #29
    c23e:	08ff      	lsrs	r7, r7, #3
    c240:	4307      	orrs	r7, r0
    c242:	08e4      	lsrs	r4, r4, #3
    c244:	4b7d      	ldr	r3, [pc, #500]	; (c43c <__aeabi_dadd+0x380>)
    c246:	429e      	cmp	r6, r3
    c248:	d030      	beq.n	c2ac <__aeabi_dadd+0x1f0>
    c24a:	0324      	lsls	r4, r4, #12
    c24c:	0576      	lsls	r6, r6, #21
    c24e:	0b24      	lsrs	r4, r4, #12
    c250:	0d76      	lsrs	r6, r6, #21
    c252:	e7d4      	b.n	c1fe <__aeabi_dadd+0x142>
    c254:	1a33      	subs	r3, r6, r0
    c256:	469a      	mov	sl, r3
    c258:	2b00      	cmp	r3, #0
    c25a:	dd78      	ble.n	c34e <__aeabi_dadd+0x292>
    c25c:	2800      	cmp	r0, #0
    c25e:	d031      	beq.n	c2c4 <__aeabi_dadd+0x208>
    c260:	4876      	ldr	r0, [pc, #472]	; (c43c <__aeabi_dadd+0x380>)
    c262:	4286      	cmp	r6, r0
    c264:	d0ae      	beq.n	c1c4 <__aeabi_dadd+0x108>
    c266:	2080      	movs	r0, #128	; 0x80
    c268:	0400      	lsls	r0, r0, #16
    c26a:	4301      	orrs	r1, r0
    c26c:	4653      	mov	r3, sl
    c26e:	2b38      	cmp	r3, #56	; 0x38
    c270:	dc00      	bgt.n	c274 <__aeabi_dadd+0x1b8>
    c272:	e0e9      	b.n	c448 <__aeabi_dadd+0x38c>
    c274:	430a      	orrs	r2, r1
    c276:	1e51      	subs	r1, r2, #1
    c278:	418a      	sbcs	r2, r1
    c27a:	2100      	movs	r1, #0
    c27c:	19d2      	adds	r2, r2, r7
    c27e:	42ba      	cmp	r2, r7
    c280:	41bf      	sbcs	r7, r7
    c282:	1909      	adds	r1, r1, r4
    c284:	427c      	negs	r4, r7
    c286:	0017      	movs	r7, r2
    c288:	190c      	adds	r4, r1, r4
    c28a:	0223      	lsls	r3, r4, #8
    c28c:	d5d3      	bpl.n	c236 <__aeabi_dadd+0x17a>
    c28e:	4b6b      	ldr	r3, [pc, #428]	; (c43c <__aeabi_dadd+0x380>)
    c290:	3601      	adds	r6, #1
    c292:	429e      	cmp	r6, r3
    c294:	d100      	bne.n	c298 <__aeabi_dadd+0x1dc>
    c296:	e13a      	b.n	c50e <__aeabi_dadd+0x452>
    c298:	2001      	movs	r0, #1
    c29a:	4b69      	ldr	r3, [pc, #420]	; (c440 <__aeabi_dadd+0x384>)
    c29c:	401c      	ands	r4, r3
    c29e:	087b      	lsrs	r3, r7, #1
    c2a0:	4007      	ands	r7, r0
    c2a2:	431f      	orrs	r7, r3
    c2a4:	07e0      	lsls	r0, r4, #31
    c2a6:	4307      	orrs	r7, r0
    c2a8:	0864      	lsrs	r4, r4, #1
    c2aa:	e78b      	b.n	c1c4 <__aeabi_dadd+0x108>
    c2ac:	0023      	movs	r3, r4
    c2ae:	433b      	orrs	r3, r7
    c2b0:	d100      	bne.n	c2b4 <__aeabi_dadd+0x1f8>
    c2b2:	e1cb      	b.n	c64c <__aeabi_dadd+0x590>
    c2b4:	2280      	movs	r2, #128	; 0x80
    c2b6:	0312      	lsls	r2, r2, #12
    c2b8:	4314      	orrs	r4, r2
    c2ba:	0324      	lsls	r4, r4, #12
    c2bc:	0b24      	lsrs	r4, r4, #12
    c2be:	e79e      	b.n	c1fe <__aeabi_dadd+0x142>
    c2c0:	002e      	movs	r6, r5
    c2c2:	e77f      	b.n	c1c4 <__aeabi_dadd+0x108>
    c2c4:	0008      	movs	r0, r1
    c2c6:	4310      	orrs	r0, r2
    c2c8:	d100      	bne.n	c2cc <__aeabi_dadd+0x210>
    c2ca:	e0b4      	b.n	c436 <__aeabi_dadd+0x37a>
    c2cc:	1e58      	subs	r0, r3, #1
    c2ce:	2800      	cmp	r0, #0
    c2d0:	d000      	beq.n	c2d4 <__aeabi_dadd+0x218>
    c2d2:	e0de      	b.n	c492 <__aeabi_dadd+0x3d6>
    c2d4:	18ba      	adds	r2, r7, r2
    c2d6:	42ba      	cmp	r2, r7
    c2d8:	419b      	sbcs	r3, r3
    c2da:	1864      	adds	r4, r4, r1
    c2dc:	425b      	negs	r3, r3
    c2de:	18e4      	adds	r4, r4, r3
    c2e0:	0017      	movs	r7, r2
    c2e2:	2601      	movs	r6, #1
    c2e4:	0223      	lsls	r3, r4, #8
    c2e6:	d5a6      	bpl.n	c236 <__aeabi_dadd+0x17a>
    c2e8:	2602      	movs	r6, #2
    c2ea:	e7d5      	b.n	c298 <__aeabi_dadd+0x1dc>
    c2ec:	2d00      	cmp	r5, #0
    c2ee:	d16e      	bne.n	c3ce <__aeabi_dadd+0x312>
    c2f0:	1c70      	adds	r0, r6, #1
    c2f2:	0540      	lsls	r0, r0, #21
    c2f4:	0d40      	lsrs	r0, r0, #21
    c2f6:	2801      	cmp	r0, #1
    c2f8:	dc00      	bgt.n	c2fc <__aeabi_dadd+0x240>
    c2fa:	e0f9      	b.n	c4f0 <__aeabi_dadd+0x434>
    c2fc:	1ab8      	subs	r0, r7, r2
    c2fe:	4684      	mov	ip, r0
    c300:	4287      	cmp	r7, r0
    c302:	4180      	sbcs	r0, r0
    c304:	1ae5      	subs	r5, r4, r3
    c306:	4240      	negs	r0, r0
    c308:	1a2d      	subs	r5, r5, r0
    c30a:	0228      	lsls	r0, r5, #8
    c30c:	d400      	bmi.n	c310 <__aeabi_dadd+0x254>
    c30e:	e089      	b.n	c424 <__aeabi_dadd+0x368>
    c310:	1bd7      	subs	r7, r2, r7
    c312:	42ba      	cmp	r2, r7
    c314:	4192      	sbcs	r2, r2
    c316:	1b1c      	subs	r4, r3, r4
    c318:	4252      	negs	r2, r2
    c31a:	1aa5      	subs	r5, r4, r2
    c31c:	46d8      	mov	r8, fp
    c31e:	e729      	b.n	c174 <__aeabi_dadd+0xb8>
    c320:	4645      	mov	r5, r8
    c322:	2400      	movs	r4, #0
    c324:	2700      	movs	r7, #0
    c326:	e76a      	b.n	c1fe <__aeabi_dadd+0x142>
    c328:	4c45      	ldr	r4, [pc, #276]	; (c440 <__aeabi_dadd+0x384>)
    c32a:	1af6      	subs	r6, r6, r3
    c32c:	402c      	ands	r4, r5
    c32e:	e749      	b.n	c1c4 <__aeabi_dadd+0x108>
    c330:	003d      	movs	r5, r7
    c332:	3828      	subs	r0, #40	; 0x28
    c334:	4085      	lsls	r5, r0
    c336:	2700      	movs	r7, #0
    c338:	e72e      	b.n	c198 <__aeabi_dadd+0xdc>
    c33a:	0038      	movs	r0, r7
    c33c:	f7fb f94a 	bl	75d4 <__clzsi2>
    c340:	3020      	adds	r0, #32
    c342:	e71d      	b.n	c180 <__aeabi_dadd+0xc4>
    c344:	430a      	orrs	r2, r1
    c346:	1e51      	subs	r1, r2, #1
    c348:	418a      	sbcs	r2, r1
    c34a:	2100      	movs	r1, #0
    c34c:	e707      	b.n	c15e <__aeabi_dadd+0xa2>
    c34e:	2b00      	cmp	r3, #0
    c350:	d000      	beq.n	c354 <__aeabi_dadd+0x298>
    c352:	e0f3      	b.n	c53c <__aeabi_dadd+0x480>
    c354:	1c70      	adds	r0, r6, #1
    c356:	0543      	lsls	r3, r0, #21
    c358:	0d5b      	lsrs	r3, r3, #21
    c35a:	2b01      	cmp	r3, #1
    c35c:	dc00      	bgt.n	c360 <__aeabi_dadd+0x2a4>
    c35e:	e0ad      	b.n	c4bc <__aeabi_dadd+0x400>
    c360:	4b36      	ldr	r3, [pc, #216]	; (c43c <__aeabi_dadd+0x380>)
    c362:	4298      	cmp	r0, r3
    c364:	d100      	bne.n	c368 <__aeabi_dadd+0x2ac>
    c366:	e0d1      	b.n	c50c <__aeabi_dadd+0x450>
    c368:	18ba      	adds	r2, r7, r2
    c36a:	42ba      	cmp	r2, r7
    c36c:	41bf      	sbcs	r7, r7
    c36e:	1864      	adds	r4, r4, r1
    c370:	427f      	negs	r7, r7
    c372:	19e4      	adds	r4, r4, r7
    c374:	07e7      	lsls	r7, r4, #31
    c376:	0852      	lsrs	r2, r2, #1
    c378:	4317      	orrs	r7, r2
    c37a:	0864      	lsrs	r4, r4, #1
    c37c:	0006      	movs	r6, r0
    c37e:	e721      	b.n	c1c4 <__aeabi_dadd+0x108>
    c380:	482e      	ldr	r0, [pc, #184]	; (c43c <__aeabi_dadd+0x380>)
    c382:	4285      	cmp	r5, r0
    c384:	d100      	bne.n	c388 <__aeabi_dadd+0x2cc>
    c386:	e093      	b.n	c4b0 <__aeabi_dadd+0x3f4>
    c388:	001d      	movs	r5, r3
    c38a:	e6d0      	b.n	c12e <__aeabi_dadd+0x72>
    c38c:	0029      	movs	r1, r5
    c38e:	3e1f      	subs	r6, #31
    c390:	40f1      	lsrs	r1, r6
    c392:	2b20      	cmp	r3, #32
    c394:	d100      	bne.n	c398 <__aeabi_dadd+0x2dc>
    c396:	e08d      	b.n	c4b4 <__aeabi_dadd+0x3f8>
    c398:	2240      	movs	r2, #64	; 0x40
    c39a:	1ad3      	subs	r3, r2, r3
    c39c:	409d      	lsls	r5, r3
    c39e:	432f      	orrs	r7, r5
    c3a0:	1e7d      	subs	r5, r7, #1
    c3a2:	41af      	sbcs	r7, r5
    c3a4:	2400      	movs	r4, #0
    c3a6:	430f      	orrs	r7, r1
    c3a8:	2600      	movs	r6, #0
    c3aa:	e744      	b.n	c236 <__aeabi_dadd+0x17a>
    c3ac:	002b      	movs	r3, r5
    c3ae:	0008      	movs	r0, r1
    c3b0:	3b20      	subs	r3, #32
    c3b2:	40d8      	lsrs	r0, r3
    c3b4:	0003      	movs	r3, r0
    c3b6:	2d20      	cmp	r5, #32
    c3b8:	d100      	bne.n	c3bc <__aeabi_dadd+0x300>
    c3ba:	e07d      	b.n	c4b8 <__aeabi_dadd+0x3fc>
    c3bc:	2040      	movs	r0, #64	; 0x40
    c3be:	1b45      	subs	r5, r0, r5
    c3c0:	40a9      	lsls	r1, r5
    c3c2:	430a      	orrs	r2, r1
    c3c4:	1e51      	subs	r1, r2, #1
    c3c6:	418a      	sbcs	r2, r1
    c3c8:	2100      	movs	r1, #0
    c3ca:	431a      	orrs	r2, r3
    c3cc:	e6c7      	b.n	c15e <__aeabi_dadd+0xa2>
    c3ce:	2e00      	cmp	r6, #0
    c3d0:	d050      	beq.n	c474 <__aeabi_dadd+0x3b8>
    c3d2:	4e1a      	ldr	r6, [pc, #104]	; (c43c <__aeabi_dadd+0x380>)
    c3d4:	42b0      	cmp	r0, r6
    c3d6:	d057      	beq.n	c488 <__aeabi_dadd+0x3cc>
    c3d8:	2680      	movs	r6, #128	; 0x80
    c3da:	426b      	negs	r3, r5
    c3dc:	4699      	mov	r9, r3
    c3de:	0436      	lsls	r6, r6, #16
    c3e0:	4334      	orrs	r4, r6
    c3e2:	464b      	mov	r3, r9
    c3e4:	2b38      	cmp	r3, #56	; 0x38
    c3e6:	dd00      	ble.n	c3ea <__aeabi_dadd+0x32e>
    c3e8:	e0d6      	b.n	c598 <__aeabi_dadd+0x4dc>
    c3ea:	2b1f      	cmp	r3, #31
    c3ec:	dd00      	ble.n	c3f0 <__aeabi_dadd+0x334>
    c3ee:	e135      	b.n	c65c <__aeabi_dadd+0x5a0>
    c3f0:	2620      	movs	r6, #32
    c3f2:	1af5      	subs	r5, r6, r3
    c3f4:	0026      	movs	r6, r4
    c3f6:	40ae      	lsls	r6, r5
    c3f8:	46b2      	mov	sl, r6
    c3fa:	003e      	movs	r6, r7
    c3fc:	40de      	lsrs	r6, r3
    c3fe:	46ac      	mov	ip, r5
    c400:	0035      	movs	r5, r6
    c402:	4656      	mov	r6, sl
    c404:	432e      	orrs	r6, r5
    c406:	4665      	mov	r5, ip
    c408:	40af      	lsls	r7, r5
    c40a:	1e7d      	subs	r5, r7, #1
    c40c:	41af      	sbcs	r7, r5
    c40e:	40dc      	lsrs	r4, r3
    c410:	4337      	orrs	r7, r6
    c412:	1bd7      	subs	r7, r2, r7
    c414:	42ba      	cmp	r2, r7
    c416:	4192      	sbcs	r2, r2
    c418:	1b0c      	subs	r4, r1, r4
    c41a:	4252      	negs	r2, r2
    c41c:	1aa4      	subs	r4, r4, r2
    c41e:	0006      	movs	r6, r0
    c420:	46d8      	mov	r8, fp
    c422:	e6a3      	b.n	c16c <__aeabi_dadd+0xb0>
    c424:	4664      	mov	r4, ip
    c426:	4667      	mov	r7, ip
    c428:	432c      	orrs	r4, r5
    c42a:	d000      	beq.n	c42e <__aeabi_dadd+0x372>
    c42c:	e6a2      	b.n	c174 <__aeabi_dadd+0xb8>
    c42e:	2500      	movs	r5, #0
    c430:	2600      	movs	r6, #0
    c432:	2700      	movs	r7, #0
    c434:	e706      	b.n	c244 <__aeabi_dadd+0x188>
    c436:	001e      	movs	r6, r3
    c438:	e6c4      	b.n	c1c4 <__aeabi_dadd+0x108>
    c43a:	46c0      	nop			; (mov r8, r8)
    c43c:	000007ff 	.word	0x000007ff
    c440:	ff7fffff 	.word	0xff7fffff
    c444:	800fffff 	.word	0x800fffff
    c448:	2b1f      	cmp	r3, #31
    c44a:	dc63      	bgt.n	c514 <__aeabi_dadd+0x458>
    c44c:	2020      	movs	r0, #32
    c44e:	1ac3      	subs	r3, r0, r3
    c450:	0008      	movs	r0, r1
    c452:	4098      	lsls	r0, r3
    c454:	469c      	mov	ip, r3
    c456:	4683      	mov	fp, r0
    c458:	4653      	mov	r3, sl
    c45a:	0010      	movs	r0, r2
    c45c:	40d8      	lsrs	r0, r3
    c45e:	0003      	movs	r3, r0
    c460:	4658      	mov	r0, fp
    c462:	4318      	orrs	r0, r3
    c464:	4663      	mov	r3, ip
    c466:	409a      	lsls	r2, r3
    c468:	1e53      	subs	r3, r2, #1
    c46a:	419a      	sbcs	r2, r3
    c46c:	4653      	mov	r3, sl
    c46e:	4302      	orrs	r2, r0
    c470:	40d9      	lsrs	r1, r3
    c472:	e703      	b.n	c27c <__aeabi_dadd+0x1c0>
    c474:	0026      	movs	r6, r4
    c476:	433e      	orrs	r6, r7
    c478:	d006      	beq.n	c488 <__aeabi_dadd+0x3cc>
    c47a:	43eb      	mvns	r3, r5
    c47c:	4699      	mov	r9, r3
    c47e:	2b00      	cmp	r3, #0
    c480:	d0c7      	beq.n	c412 <__aeabi_dadd+0x356>
    c482:	4e94      	ldr	r6, [pc, #592]	; (c6d4 <__aeabi_dadd+0x618>)
    c484:	42b0      	cmp	r0, r6
    c486:	d1ac      	bne.n	c3e2 <__aeabi_dadd+0x326>
    c488:	000c      	movs	r4, r1
    c48a:	0017      	movs	r7, r2
    c48c:	0006      	movs	r6, r0
    c48e:	46d8      	mov	r8, fp
    c490:	e698      	b.n	c1c4 <__aeabi_dadd+0x108>
    c492:	4b90      	ldr	r3, [pc, #576]	; (c6d4 <__aeabi_dadd+0x618>)
    c494:	459a      	cmp	sl, r3
    c496:	d00b      	beq.n	c4b0 <__aeabi_dadd+0x3f4>
    c498:	4682      	mov	sl, r0
    c49a:	e6e7      	b.n	c26c <__aeabi_dadd+0x1b0>
    c49c:	2800      	cmp	r0, #0
    c49e:	d000      	beq.n	c4a2 <__aeabi_dadd+0x3e6>
    c4a0:	e09e      	b.n	c5e0 <__aeabi_dadd+0x524>
    c4a2:	0018      	movs	r0, r3
    c4a4:	4310      	orrs	r0, r2
    c4a6:	d100      	bne.n	c4aa <__aeabi_dadd+0x3ee>
    c4a8:	e0e9      	b.n	c67e <__aeabi_dadd+0x5c2>
    c4aa:	001c      	movs	r4, r3
    c4ac:	0017      	movs	r7, r2
    c4ae:	46d8      	mov	r8, fp
    c4b0:	4e88      	ldr	r6, [pc, #544]	; (c6d4 <__aeabi_dadd+0x618>)
    c4b2:	e687      	b.n	c1c4 <__aeabi_dadd+0x108>
    c4b4:	2500      	movs	r5, #0
    c4b6:	e772      	b.n	c39e <__aeabi_dadd+0x2e2>
    c4b8:	2100      	movs	r1, #0
    c4ba:	e782      	b.n	c3c2 <__aeabi_dadd+0x306>
    c4bc:	0023      	movs	r3, r4
    c4be:	433b      	orrs	r3, r7
    c4c0:	2e00      	cmp	r6, #0
    c4c2:	d000      	beq.n	c4c6 <__aeabi_dadd+0x40a>
    c4c4:	e0ab      	b.n	c61e <__aeabi_dadd+0x562>
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d100      	bne.n	c4cc <__aeabi_dadd+0x410>
    c4ca:	e0e7      	b.n	c69c <__aeabi_dadd+0x5e0>
    c4cc:	000b      	movs	r3, r1
    c4ce:	4313      	orrs	r3, r2
    c4d0:	d100      	bne.n	c4d4 <__aeabi_dadd+0x418>
    c4d2:	e677      	b.n	c1c4 <__aeabi_dadd+0x108>
    c4d4:	18ba      	adds	r2, r7, r2
    c4d6:	42ba      	cmp	r2, r7
    c4d8:	41bf      	sbcs	r7, r7
    c4da:	1864      	adds	r4, r4, r1
    c4dc:	427f      	negs	r7, r7
    c4de:	19e4      	adds	r4, r4, r7
    c4e0:	0223      	lsls	r3, r4, #8
    c4e2:	d400      	bmi.n	c4e6 <__aeabi_dadd+0x42a>
    c4e4:	e0f2      	b.n	c6cc <__aeabi_dadd+0x610>
    c4e6:	4b7c      	ldr	r3, [pc, #496]	; (c6d8 <__aeabi_dadd+0x61c>)
    c4e8:	0017      	movs	r7, r2
    c4ea:	401c      	ands	r4, r3
    c4ec:	0006      	movs	r6, r0
    c4ee:	e669      	b.n	c1c4 <__aeabi_dadd+0x108>
    c4f0:	0020      	movs	r0, r4
    c4f2:	4338      	orrs	r0, r7
    c4f4:	2e00      	cmp	r6, #0
    c4f6:	d1d1      	bne.n	c49c <__aeabi_dadd+0x3e0>
    c4f8:	2800      	cmp	r0, #0
    c4fa:	d15b      	bne.n	c5b4 <__aeabi_dadd+0x4f8>
    c4fc:	001c      	movs	r4, r3
    c4fe:	4314      	orrs	r4, r2
    c500:	d100      	bne.n	c504 <__aeabi_dadd+0x448>
    c502:	e0a8      	b.n	c656 <__aeabi_dadd+0x59a>
    c504:	001c      	movs	r4, r3
    c506:	0017      	movs	r7, r2
    c508:	46d8      	mov	r8, fp
    c50a:	e65b      	b.n	c1c4 <__aeabi_dadd+0x108>
    c50c:	0006      	movs	r6, r0
    c50e:	2400      	movs	r4, #0
    c510:	2700      	movs	r7, #0
    c512:	e697      	b.n	c244 <__aeabi_dadd+0x188>
    c514:	4650      	mov	r0, sl
    c516:	000b      	movs	r3, r1
    c518:	3820      	subs	r0, #32
    c51a:	40c3      	lsrs	r3, r0
    c51c:	4699      	mov	r9, r3
    c51e:	4653      	mov	r3, sl
    c520:	2b20      	cmp	r3, #32
    c522:	d100      	bne.n	c526 <__aeabi_dadd+0x46a>
    c524:	e095      	b.n	c652 <__aeabi_dadd+0x596>
    c526:	2340      	movs	r3, #64	; 0x40
    c528:	4650      	mov	r0, sl
    c52a:	1a1b      	subs	r3, r3, r0
    c52c:	4099      	lsls	r1, r3
    c52e:	430a      	orrs	r2, r1
    c530:	1e51      	subs	r1, r2, #1
    c532:	418a      	sbcs	r2, r1
    c534:	464b      	mov	r3, r9
    c536:	2100      	movs	r1, #0
    c538:	431a      	orrs	r2, r3
    c53a:	e69f      	b.n	c27c <__aeabi_dadd+0x1c0>
    c53c:	2e00      	cmp	r6, #0
    c53e:	d130      	bne.n	c5a2 <__aeabi_dadd+0x4e6>
    c540:	0026      	movs	r6, r4
    c542:	433e      	orrs	r6, r7
    c544:	d067      	beq.n	c616 <__aeabi_dadd+0x55a>
    c546:	43db      	mvns	r3, r3
    c548:	469a      	mov	sl, r3
    c54a:	2b00      	cmp	r3, #0
    c54c:	d01c      	beq.n	c588 <__aeabi_dadd+0x4cc>
    c54e:	4e61      	ldr	r6, [pc, #388]	; (c6d4 <__aeabi_dadd+0x618>)
    c550:	42b0      	cmp	r0, r6
    c552:	d060      	beq.n	c616 <__aeabi_dadd+0x55a>
    c554:	4653      	mov	r3, sl
    c556:	2b38      	cmp	r3, #56	; 0x38
    c558:	dd00      	ble.n	c55c <__aeabi_dadd+0x4a0>
    c55a:	e096      	b.n	c68a <__aeabi_dadd+0x5ce>
    c55c:	2b1f      	cmp	r3, #31
    c55e:	dd00      	ble.n	c562 <__aeabi_dadd+0x4a6>
    c560:	e09f      	b.n	c6a2 <__aeabi_dadd+0x5e6>
    c562:	2620      	movs	r6, #32
    c564:	1af3      	subs	r3, r6, r3
    c566:	0026      	movs	r6, r4
    c568:	409e      	lsls	r6, r3
    c56a:	469c      	mov	ip, r3
    c56c:	46b3      	mov	fp, r6
    c56e:	4653      	mov	r3, sl
    c570:	003e      	movs	r6, r7
    c572:	40de      	lsrs	r6, r3
    c574:	0033      	movs	r3, r6
    c576:	465e      	mov	r6, fp
    c578:	431e      	orrs	r6, r3
    c57a:	4663      	mov	r3, ip
    c57c:	409f      	lsls	r7, r3
    c57e:	1e7b      	subs	r3, r7, #1
    c580:	419f      	sbcs	r7, r3
    c582:	4653      	mov	r3, sl
    c584:	40dc      	lsrs	r4, r3
    c586:	4337      	orrs	r7, r6
    c588:	18bf      	adds	r7, r7, r2
    c58a:	4297      	cmp	r7, r2
    c58c:	4192      	sbcs	r2, r2
    c58e:	1864      	adds	r4, r4, r1
    c590:	4252      	negs	r2, r2
    c592:	18a4      	adds	r4, r4, r2
    c594:	0006      	movs	r6, r0
    c596:	e678      	b.n	c28a <__aeabi_dadd+0x1ce>
    c598:	4327      	orrs	r7, r4
    c59a:	1e7c      	subs	r4, r7, #1
    c59c:	41a7      	sbcs	r7, r4
    c59e:	2400      	movs	r4, #0
    c5a0:	e737      	b.n	c412 <__aeabi_dadd+0x356>
    c5a2:	4e4c      	ldr	r6, [pc, #304]	; (c6d4 <__aeabi_dadd+0x618>)
    c5a4:	42b0      	cmp	r0, r6
    c5a6:	d036      	beq.n	c616 <__aeabi_dadd+0x55a>
    c5a8:	2680      	movs	r6, #128	; 0x80
    c5aa:	425b      	negs	r3, r3
    c5ac:	0436      	lsls	r6, r6, #16
    c5ae:	469a      	mov	sl, r3
    c5b0:	4334      	orrs	r4, r6
    c5b2:	e7cf      	b.n	c554 <__aeabi_dadd+0x498>
    c5b4:	0018      	movs	r0, r3
    c5b6:	4310      	orrs	r0, r2
    c5b8:	d100      	bne.n	c5bc <__aeabi_dadd+0x500>
    c5ba:	e603      	b.n	c1c4 <__aeabi_dadd+0x108>
    c5bc:	1ab8      	subs	r0, r7, r2
    c5be:	4684      	mov	ip, r0
    c5c0:	4567      	cmp	r7, ip
    c5c2:	41ad      	sbcs	r5, r5
    c5c4:	1ae0      	subs	r0, r4, r3
    c5c6:	426d      	negs	r5, r5
    c5c8:	1b40      	subs	r0, r0, r5
    c5ca:	0205      	lsls	r5, r0, #8
    c5cc:	d400      	bmi.n	c5d0 <__aeabi_dadd+0x514>
    c5ce:	e62c      	b.n	c22a <__aeabi_dadd+0x16e>
    c5d0:	1bd7      	subs	r7, r2, r7
    c5d2:	42ba      	cmp	r2, r7
    c5d4:	4192      	sbcs	r2, r2
    c5d6:	1b1c      	subs	r4, r3, r4
    c5d8:	4252      	negs	r2, r2
    c5da:	1aa4      	subs	r4, r4, r2
    c5dc:	46d8      	mov	r8, fp
    c5de:	e5f1      	b.n	c1c4 <__aeabi_dadd+0x108>
    c5e0:	0018      	movs	r0, r3
    c5e2:	4310      	orrs	r0, r2
    c5e4:	d100      	bne.n	c5e8 <__aeabi_dadd+0x52c>
    c5e6:	e763      	b.n	c4b0 <__aeabi_dadd+0x3f4>
    c5e8:	08f8      	lsrs	r0, r7, #3
    c5ea:	0767      	lsls	r7, r4, #29
    c5ec:	4307      	orrs	r7, r0
    c5ee:	2080      	movs	r0, #128	; 0x80
    c5f0:	08e4      	lsrs	r4, r4, #3
    c5f2:	0300      	lsls	r0, r0, #12
    c5f4:	4204      	tst	r4, r0
    c5f6:	d008      	beq.n	c60a <__aeabi_dadd+0x54e>
    c5f8:	08dd      	lsrs	r5, r3, #3
    c5fa:	4205      	tst	r5, r0
    c5fc:	d105      	bne.n	c60a <__aeabi_dadd+0x54e>
    c5fe:	08d2      	lsrs	r2, r2, #3
    c600:	0759      	lsls	r1, r3, #29
    c602:	4311      	orrs	r1, r2
    c604:	000f      	movs	r7, r1
    c606:	002c      	movs	r4, r5
    c608:	46d8      	mov	r8, fp
    c60a:	0f7b      	lsrs	r3, r7, #29
    c60c:	00e4      	lsls	r4, r4, #3
    c60e:	431c      	orrs	r4, r3
    c610:	00ff      	lsls	r7, r7, #3
    c612:	4e30      	ldr	r6, [pc, #192]	; (c6d4 <__aeabi_dadd+0x618>)
    c614:	e5d6      	b.n	c1c4 <__aeabi_dadd+0x108>
    c616:	000c      	movs	r4, r1
    c618:	0017      	movs	r7, r2
    c61a:	0006      	movs	r6, r0
    c61c:	e5d2      	b.n	c1c4 <__aeabi_dadd+0x108>
    c61e:	2b00      	cmp	r3, #0
    c620:	d038      	beq.n	c694 <__aeabi_dadd+0x5d8>
    c622:	000b      	movs	r3, r1
    c624:	4313      	orrs	r3, r2
    c626:	d100      	bne.n	c62a <__aeabi_dadd+0x56e>
    c628:	e742      	b.n	c4b0 <__aeabi_dadd+0x3f4>
    c62a:	08f8      	lsrs	r0, r7, #3
    c62c:	0767      	lsls	r7, r4, #29
    c62e:	4307      	orrs	r7, r0
    c630:	2080      	movs	r0, #128	; 0x80
    c632:	08e4      	lsrs	r4, r4, #3
    c634:	0300      	lsls	r0, r0, #12
    c636:	4204      	tst	r4, r0
    c638:	d0e7      	beq.n	c60a <__aeabi_dadd+0x54e>
    c63a:	08cb      	lsrs	r3, r1, #3
    c63c:	4203      	tst	r3, r0
    c63e:	d1e4      	bne.n	c60a <__aeabi_dadd+0x54e>
    c640:	08d2      	lsrs	r2, r2, #3
    c642:	0749      	lsls	r1, r1, #29
    c644:	4311      	orrs	r1, r2
    c646:	000f      	movs	r7, r1
    c648:	001c      	movs	r4, r3
    c64a:	e7de      	b.n	c60a <__aeabi_dadd+0x54e>
    c64c:	2700      	movs	r7, #0
    c64e:	2400      	movs	r4, #0
    c650:	e5d5      	b.n	c1fe <__aeabi_dadd+0x142>
    c652:	2100      	movs	r1, #0
    c654:	e76b      	b.n	c52e <__aeabi_dadd+0x472>
    c656:	2500      	movs	r5, #0
    c658:	2700      	movs	r7, #0
    c65a:	e5f3      	b.n	c244 <__aeabi_dadd+0x188>
    c65c:	464e      	mov	r6, r9
    c65e:	0025      	movs	r5, r4
    c660:	3e20      	subs	r6, #32
    c662:	40f5      	lsrs	r5, r6
    c664:	464b      	mov	r3, r9
    c666:	002e      	movs	r6, r5
    c668:	2b20      	cmp	r3, #32
    c66a:	d02d      	beq.n	c6c8 <__aeabi_dadd+0x60c>
    c66c:	2540      	movs	r5, #64	; 0x40
    c66e:	1aed      	subs	r5, r5, r3
    c670:	40ac      	lsls	r4, r5
    c672:	4327      	orrs	r7, r4
    c674:	1e7c      	subs	r4, r7, #1
    c676:	41a7      	sbcs	r7, r4
    c678:	2400      	movs	r4, #0
    c67a:	4337      	orrs	r7, r6
    c67c:	e6c9      	b.n	c412 <__aeabi_dadd+0x356>
    c67e:	2480      	movs	r4, #128	; 0x80
    c680:	2500      	movs	r5, #0
    c682:	0324      	lsls	r4, r4, #12
    c684:	4e13      	ldr	r6, [pc, #76]	; (c6d4 <__aeabi_dadd+0x618>)
    c686:	2700      	movs	r7, #0
    c688:	e5dc      	b.n	c244 <__aeabi_dadd+0x188>
    c68a:	4327      	orrs	r7, r4
    c68c:	1e7c      	subs	r4, r7, #1
    c68e:	41a7      	sbcs	r7, r4
    c690:	2400      	movs	r4, #0
    c692:	e779      	b.n	c588 <__aeabi_dadd+0x4cc>
    c694:	000c      	movs	r4, r1
    c696:	0017      	movs	r7, r2
    c698:	4e0e      	ldr	r6, [pc, #56]	; (c6d4 <__aeabi_dadd+0x618>)
    c69a:	e593      	b.n	c1c4 <__aeabi_dadd+0x108>
    c69c:	000c      	movs	r4, r1
    c69e:	0017      	movs	r7, r2
    c6a0:	e590      	b.n	c1c4 <__aeabi_dadd+0x108>
    c6a2:	4656      	mov	r6, sl
    c6a4:	0023      	movs	r3, r4
    c6a6:	3e20      	subs	r6, #32
    c6a8:	40f3      	lsrs	r3, r6
    c6aa:	4699      	mov	r9, r3
    c6ac:	4653      	mov	r3, sl
    c6ae:	2b20      	cmp	r3, #32
    c6b0:	d00e      	beq.n	c6d0 <__aeabi_dadd+0x614>
    c6b2:	2340      	movs	r3, #64	; 0x40
    c6b4:	4656      	mov	r6, sl
    c6b6:	1b9b      	subs	r3, r3, r6
    c6b8:	409c      	lsls	r4, r3
    c6ba:	4327      	orrs	r7, r4
    c6bc:	1e7c      	subs	r4, r7, #1
    c6be:	41a7      	sbcs	r7, r4
    c6c0:	464b      	mov	r3, r9
    c6c2:	2400      	movs	r4, #0
    c6c4:	431f      	orrs	r7, r3
    c6c6:	e75f      	b.n	c588 <__aeabi_dadd+0x4cc>
    c6c8:	2400      	movs	r4, #0
    c6ca:	e7d2      	b.n	c672 <__aeabi_dadd+0x5b6>
    c6cc:	0017      	movs	r7, r2
    c6ce:	e5b2      	b.n	c236 <__aeabi_dadd+0x17a>
    c6d0:	2400      	movs	r4, #0
    c6d2:	e7f2      	b.n	c6ba <__aeabi_dadd+0x5fe>
    c6d4:	000007ff 	.word	0x000007ff
    c6d8:	ff7fffff 	.word	0xff7fffff

0000c6dc <__aeabi_dcmpun>:
    c6dc:	b570      	push	{r4, r5, r6, lr}
    c6de:	4e0e      	ldr	r6, [pc, #56]	; (c718 <__aeabi_dcmpun+0x3c>)
    c6e0:	030d      	lsls	r5, r1, #12
    c6e2:	031c      	lsls	r4, r3, #12
    c6e4:	0049      	lsls	r1, r1, #1
    c6e6:	005b      	lsls	r3, r3, #1
    c6e8:	0b2d      	lsrs	r5, r5, #12
    c6ea:	0d49      	lsrs	r1, r1, #21
    c6ec:	0b24      	lsrs	r4, r4, #12
    c6ee:	0d5b      	lsrs	r3, r3, #21
    c6f0:	42b1      	cmp	r1, r6
    c6f2:	d004      	beq.n	c6fe <__aeabi_dcmpun+0x22>
    c6f4:	4908      	ldr	r1, [pc, #32]	; (c718 <__aeabi_dcmpun+0x3c>)
    c6f6:	2000      	movs	r0, #0
    c6f8:	428b      	cmp	r3, r1
    c6fa:	d008      	beq.n	c70e <__aeabi_dcmpun+0x32>
    c6fc:	bd70      	pop	{r4, r5, r6, pc}
    c6fe:	4305      	orrs	r5, r0
    c700:	2001      	movs	r0, #1
    c702:	2d00      	cmp	r5, #0
    c704:	d1fa      	bne.n	c6fc <__aeabi_dcmpun+0x20>
    c706:	4904      	ldr	r1, [pc, #16]	; (c718 <__aeabi_dcmpun+0x3c>)
    c708:	2000      	movs	r0, #0
    c70a:	428b      	cmp	r3, r1
    c70c:	d1f6      	bne.n	c6fc <__aeabi_dcmpun+0x20>
    c70e:	4314      	orrs	r4, r2
    c710:	0020      	movs	r0, r4
    c712:	1e44      	subs	r4, r0, #1
    c714:	41a0      	sbcs	r0, r4
    c716:	e7f1      	b.n	c6fc <__aeabi_dcmpun+0x20>
    c718:	000007ff 	.word	0x000007ff

0000c71c <basic_6x7_glyphs>:
    c71c:	00000000 20000000 20202020 50502000     .......     . PP
    c72c:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
    c73c:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
    c74c:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
    c75c:	10101020 50004020 5020f820 20200000      ... @.P . P..  
    c76c:	002020f8 00000000 00402060 00f80000     .  .....` @.....
    c77c:	00000000 60000000 10080060 00804020     .......``... @..
    c78c:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
    c79c:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
    c7ac:	f81010f8 0808f080 40307088 8888f080     .........p0@....
    c7bc:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
    c7cc:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
    c7dc:	40206000 40201008 00081020 f800f800     .` @.. @ .......
    c7ec:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
    c7fc:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
    c80c:	8888f088 808870f0 70888080 888890e0     .....p.....p....
    c81c:	f8e09088 80f08080 80f8f880 8080e080     ................
    c82c:	80887080 70889880 f8888888 70888888     .p.....p.......p
    c83c:	20202020 10387020 90101010 a0908860          p8.....`...
    c84c:	8890a0c0 80808080 88f88080 8888a8d8     ................
    c85c:	88888888 8898a8c8 88887088 70888888     .........p.....p
    c86c:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
    c87c:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
    c88c:	88202020 88888888 88887088 50888888        ......p.....P
    c89c:	88888820 88d8a8a8 20508888 88888850      .........P P...
    c8ac:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
    c8bc:	38202020 20408000 e0000810 20202020        8..@ ....    
    c8cc:	5020e020 00000088 00000000 f8000000      . P............
    c8dc:	00102040 00000000 78087000 80807888     @ .......p.x.x..
    c8ec:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
    c8fc:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
    c90c:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
    c91c:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
    c92c:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
    c93c:	00008888 8888c8b0 70000088 70888888     ...........p...p
    c94c:	88f00000 008080f0 78986800 00000808     .........h.x....
    c95c:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
    c96c:	00304840 88888800 00006898 50888888     @H0......h.....P
    c97c:	88000020 50a8a888 50880000 00885020      ......P...P P..
    c98c:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
    c99c:	10202040 20202020 40202020 20102020     @  .       @  . 
    c9ac:	00004020 672f2e2e 6d5f7866 2f6f6e6f      @..../gfx_mono/
    c9bc:	5f786667 6f6e6f6d 7865745f 00632e74     gfx_mono_text.c.
    c9cc:	47504724 00004147 52504724 0000434d     $GPGGA..$GPRMC..
    c9dc:	47504724 00004c4c 682f2e2e 732f6c61     $GPGLL..../hal/s
    c9ec:	682f6372 695f6c61 00632e6f 682f2e2e     rc/hal_io.c.../h
    c9fc:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
    ca0c:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
    ca1c:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    ca2c:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    ca3c:	74726173 7973615f 632e636e 00000000     sart_async.c....
    ca4c:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    ca5c:	74726173 6e79735f 00632e63 682f2e2e     sart_sync.c.../h
    ca6c:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    ca7c:	6c5f736c 2e747369 00000063 682f2e2e     ls_list.c...../h
    ca8c:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    ca9c:	725f736c 62676e69 65666675 00632e72     ls_ringbuffer.c.

0000caac <_map>:
    caac:	00000005 00000005 682f2e2e 652f6c70     ........../hpl/e
    cabc:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000cacc <_i2cms>:
	...

0000cae4 <_usarts>:
    cae4:	00000001 40100004 00030000 0000d8ad     .......@........
    caf4:	00000000 00000003 40100004 00030000     ...........@....
    cb04:	0000c504 00000000 682f2e2e 732f6c70     ........../hpl/s
    cb14:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    cb24:	0000632e                                .c..

0000cb28 <_tcs>:
    cb28:	03680003 00000000 00000000 000003e8     ..h.............
    cb38:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    cb48:	63745f6c 0000632e 00002000              l_tc.c... ..

0000cb54 <_usb_ep_cfgs>:
    cb54:	20001380 00000000 00000040 20001340     ... ....@...@.. 
    cb64:	00000000 00000040 20001300 00000000     ....@...... ....
    cb74:	00000040 20786946 0000003a 676e6f4c     @...Fix :...Long
    cb84:	0000003a 6974614c 0000003a 474f7053     :...Lati:...SpOG
    cb94:	0000003a 41454d4e 5047243a 00434d52     :...NMEA:$GPRMC.
    cba4:	20746f4e 69617641 20202020 00000000     Not Avai    ....
    cbb4:	20202030 00002020 352e3225 00000066     0     ..%2.5f...
    cbc4:	000055e4 000052cc 000055e4 000052fe     .U...R...U...R..
    cbd4:	000055e4 00005222 000055e4 000055e4     .U.."R...U...U..
    cbe4:	000055e4 00005236 000055e4 00005332     .U..6R...U..2S..
    cbf4:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
    cc04:	2e636462 00000063 00006020 00005ff0     bdc.c... `..._..
    cc14:	00006002 00005f44 00006002 00005fe6     .`..D_...`..._..
    cc24:	00006002 00005f44 00005ff0 00005ff0     .`..D_..._..._..
    cc34:	00005fe6 00005f44 00005f4c 00005f4c     ._..D_..L_..L_..
    cc44:	00005f4c 00006008 00005ff0 00005ff0     L_...`..._..._..
    cc54:	00005fc4 000060a8 00005fc4 00005fe6     ._...`..._..._..
    cc64:	00005fc4 000060a8 00005ff0 00005ff0     ._...`..._..._..
    cc74:	00005fe6 000060a8 00005f4c 00005f4c     ._...`..L_..L_..
    cc84:	00005f4c 000060b2 000063bc 0000639e     L_...`...c...c..
    cc94:	00006358 00006276 00006358 00006390     Xc..vb..Xc...c..
    cca4:	00006358 00006276 0000639e 0000639e     Xc..vb...c...c..
    ccb4:	00006390 00006276 0000626e 0000626e     .c..vb..nb..nb..
    ccc4:	0000626e 000065d4 00006a1c 000068dc     nb...e...j...h..
    ccd4:	000068dc 000068d8 000069f4 000069f4     .h...h...i...i..
    cce4:	000069e6 000068d8 000069f4 000069e6     .i...h...i...i..
    ccf4:	000069f4 000068d8 000069fc 000069fc     .i...h...i...i..
    cd04:	000069fc 00006c00                       .i...l..

0000cd0c <_global_impure_ptr>:
    cd0c:	200000b8 00008280 000082f4 000082f4     ... ............
    cd1c:	00008264 000082f4 000082f4 000082f4     d...............
    cd2c:	000082f4 000082f4 000082f4 0000826c     ............l...
    cd3c:	00007d4e 000082f4 00007d08 00007d58     N}.......}..X}..
    cd4c:	000082f4 00007da4 00007f8e 00007f8e     .....}..........
    cd5c:	00007f8e 00007f8e 00007f8e 00007f8e     ................
    cd6c:	00007f8e 00007f8e 00007f8e 000082f4     ................
    cd7c:	000082f4 000082f4 000082f4 000082f4     ................
    cd8c:	000082f4 000082f4 000082f4 000082f4     ................
    cd9c:	000082f4 00007dac 00007ef4 000082f4     .....}...~......
    cdac:	00007ef4 000082f4 000082f4 000082f4     .~..............
    cdbc:	000082f4 00007fbe 000082f4 000082f4     ................
    cdcc:	00007fc6 000082f4 000082f4 000082f4     ................
    cddc:	000082f4 000082f4 00008068 000082f4     ........h.......
    cdec:	000082f4 0000809a 000082f4 000082f4     ................
    cdfc:	000082f4 000082f4 000082f4 000082f4     ................
    ce0c:	000082f4 000082f4 000082f4 000082f4     ................
    ce1c:	00008194 000081c8 00007ef4 00007ef4     .........~...~..
    ce2c:	00007ef4 000081da 000081c8 000082f4     .~..............
    ce3c:	000082f4 000081e2 000082f4 000080fc     ................
    ce4c:	000082c2 00008238 00008132 000082f4     ....8...2.......
    ce5c:	0000813a 000082f4 00008290 000082f4     :...............
    ce6c:	000082f4 000081f2 00464e49 00666e69     ........INF.inf.
    ce7c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    ce8c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    ce9c:	37363534 62613938 66656463 00000000     456789abcdef....
    ceac:	6c756e28 0000296c 00000030              (null)..0...

0000ceb8 <blanks.7223>:
    ceb8:	20202020 20202020 20202020 20202020                     

0000cec8 <zeroes.7224>:
    cec8:	30303030 30303030 30303030 30303030     0000000000000000
    ced8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0000cee8 <__mprec_bigtens>:
    cee8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    cef8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    cf08:	7f73bf3c 75154fdd                       <.s..O.u

0000cf10 <__mprec_tens>:
    cf10:	00000000 3ff00000 00000000 40240000     .......?......$@
    cf20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    cf30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    cf40:	00000000 412e8480 00000000 416312d0     .......A......cA
    cf50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    cf60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    cf70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    cf80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    cf90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    cfa0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    cfb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    cfc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    cfd0:	79d99db4 44ea7843                       ...yCx.D

0000cfd8 <p05.6055>:
    cfd8:	00000005 00000019 0000007d 00000043     ........}...C...
    cfe8:	49534f50 00000058 0000002e              POSIX.......

0000cff4 <_ctype_>:
    cff4:	20202000 20202020 28282020 20282828     .         ((((( 
    d004:	20202020 20202020 20202020 20202020                     
    d014:	10108820 10101010 10101010 10101010      ...............
    d024:	04040410 04040404 10040404 10101010     ................
    d034:	41411010 41414141 01010101 01010101     ..AAAAAA........
    d044:	01010101 01010101 01010101 10101010     ................
    d054:	42421010 42424242 02020202 02020202     ..BBBBBB........
    d064:	02020202 02020202 02020202 10101010     ................
    d074:	00000020 00000000 00000000 00000000      ...............
	...

0000d0f8 <_init>:
    d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0fa:	46c0      	nop			; (mov r8, r8)
    d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d0fe:	bc08      	pop	{r3}
    d100:	469e      	mov	lr, r3
    d102:	4770      	bx	lr

0000d104 <__init_array_start>:
    d104:	0000922d 	.word	0x0000922d

0000d108 <__frame_dummy_init_array_entry>:
    d108:	000000dd                                ....

0000d10c <_fini>:
    d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d10e:	46c0      	nop			; (mov r8, r8)
    d110:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d112:	bc08      	pop	{r3}
    d114:	469e      	mov	lr, r3
    d116:	4770      	bx	lr

0000d118 <__fini_array_start>:
    d118:	000000b5 	.word	0x000000b5
